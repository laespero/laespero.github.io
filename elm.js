(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS
//
// For some reason, tabs can appear in href protocols and it still works.
// So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
// in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
// so freaky.
//
// Pulling the regular expressions out to the top level gives a slight speed
// boost in small benchmarks (4-10%) but hoisting values to reduce allocation
// can be unpredictable in large programs where JIT may have a harder time with
// functions are not fully self-contained. The benefit is more that the js and
// js_html ones are so weird that I prefer to see them near each other.


var _VirtualDom_RE_script = /^script$/i;
var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;


function _VirtualDom_noScript(tag)
{
	return _VirtualDom_RE_script.test(tag) ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return _VirtualDom_RE_on_formAction.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return _VirtualDom_RE_js.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return _VirtualDom_RE_js_html.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlJson(value)
{
	return (typeof _Json_unwrap(value) === 'string' && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
		? _Json_wrap(
			/**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		) : value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}


function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}


// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}



// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Basics$eq = _Utils_equal;
var $author$project$Main$pageToStr = function (page) {
	switch (page.$) {
		case 'MainPage':
			return 'MainPage';
		case 'ListenPage':
			return 'ListenPage';
		case 'TapGamePage':
			return 'TapGamePage';
		case 'RoadMapPage':
			return 'RoadMapPage';
		case 'PronPage':
			return 'PronPage';
		case 'SentencePage':
			return 'SentencePage';
		case 'VocaPage':
			return 'VocaPage';
		case 'AwardPage':
			return 'AwardPage';
		case 'InfoPage':
			return 'InfoPage';
		case 'ValidatePage':
			return 'ValidatePage';
		case 'SearchPage':
			return 'SearchPage';
		case 'QuestionPage':
			return 'QuestionPage';
		case 'MarketPage':
			return 'MarketPage';
		case 'PrintPage':
			return 'PrintPage';
		default:
			return 'RankingPage';
	}
};
var $author$project$Main$afterUpdate = F2(
	function (prevModel, _v0) {
		var model = _v0.a;
		var cmd = _v0.b;
		return _Utils_eq(
			$author$project$Main$pageToStr(prevModel.page),
			$author$project$Main$pageToStr(model.page)) ? _Utils_Tuple2(model, cmd) : _Utils_Tuple2(
			_Utils_update(
				model,
				{
					isTransitioning: true,
					prevPages: _List_fromArray(
						[prevModel.page])
				}),
			cmd);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$element = _Browser_element;
var $author$project$Main$MainPage = function (a) {
	return {$: 'MainPage', a: a};
};
var $author$project$Main$MainPageMsg = function (a) {
	return {$: 'MainPageMsg', a: a};
};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $author$project$DataManage$AppData = F7(
	function (listen, tapGame, video, pron, sentence, voca, info) {
		return {info: info, listen: listen, pron: pron, sentence: sentence, tapGame: tapGame, video: video, voca: voca};
	});
var $author$project$DataManage$emptyAppData = A7($author$project$DataManage$AppData, _List_Nil, _List_Nil, _List_Nil, _List_Nil, _List_Nil, _List_Nil, _List_Nil);
var $author$project$Main$focusVideoId = '-tKVN2mAKRI';
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $author$project$EditableValue$JsonArray = function (a) {
	return {$: 'JsonArray', a: a};
};
var $author$project$EditableValue$JsonBool = function (a) {
	return {$: 'JsonBool', a: a};
};
var $author$project$EditableValue$JsonFloat = function (a) {
	return {$: 'JsonFloat', a: a};
};
var $author$project$EditableValue$JsonInt = function (a) {
	return {$: 'JsonInt', a: a};
};
var $author$project$EditableValue$JsonNull = {$: 'JsonNull'};
var $author$project$EditableValue$JsonObject = function (a) {
	return {$: 'JsonObject', a: a};
};
var $author$project$EditableValue$JsonString = function (a) {
	return {$: 'JsonString', a: a};
};
var $elm$json$Json$Decode$array = _Json_decodeArray;
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$string = _Json_decodeString;
function $author$project$EditableValue$cyclic$decoder() {
	var jsonString = A2($elm$json$Json$Decode$map, $author$project$EditableValue$JsonString, $elm$json$Json$Decode$string);
	var jsonObject = A2(
		$elm$json$Json$Decode$map,
		A2($elm$core$Basics$composeL, $author$project$EditableValue$JsonObject, $elm$core$Array$fromList),
		$elm$json$Json$Decode$keyValuePairs(
			$elm$json$Json$Decode$lazy(
				function (_v3) {
					return $author$project$EditableValue$cyclic$decoder();
				})));
	var jsonNull = $elm$json$Json$Decode$null($author$project$EditableValue$JsonNull);
	var jsonInt = A2($elm$json$Json$Decode$map, $author$project$EditableValue$JsonInt, $elm$json$Json$Decode$int);
	var jsonFloat = A2($elm$json$Json$Decode$map, $author$project$EditableValue$JsonFloat, $elm$json$Json$Decode$float);
	var jsonBool = A2($elm$json$Json$Decode$map, $author$project$EditableValue$JsonBool, $elm$json$Json$Decode$bool);
	var jsonArray = A2(
		$elm$json$Json$Decode$map,
		$author$project$EditableValue$JsonArray,
		$elm$json$Json$Decode$array(
			$elm$json$Json$Decode$lazy(
				function (_v2) {
					return $author$project$EditableValue$cyclic$decoder();
				})));
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				jsonInt,
				jsonFloat,
				jsonBool,
				jsonString,
				jsonNull,
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return jsonArray;
				}),
				$elm$json$Json$Decode$lazy(
				function (_v1) {
					return jsonObject;
				})
			]));
}
try {
	var $author$project$EditableValue$decoder = $author$project$EditableValue$cyclic$decoder();
	$author$project$EditableValue$cyclic$decoder = function () {
		return $author$project$EditableValue$decoder;
	};
} catch ($) {
	throw 'Some top-level definitions from `EditableValue` are causing infinite recursion:\n\n  ┌─────┐\n  │    decoder\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$EditableValue$null = $author$project$EditableValue$JsonNull;
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$EditableValue$decode = function (jsonValue) {
	return A2(
		$elm$core$Result$withDefault,
		$author$project$EditableValue$null,
		A2($elm$json$Json$Decode$decodeValue, $author$project$EditableValue$decoder, jsonValue));
};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$DataManage$encodeVideoData = function (videoData) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'videoId',
				$elm$json$Json$Encode$string(videoData.videoId)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(videoData.name)),
				_Utils_Tuple2(
				'imageSrc',
				$elm$json$Json$Encode$string(videoData.imageSrc)),
				_Utils_Tuple2(
				'tags',
				$elm$json$Json$Encode$string(videoData.tags)),
				_Utils_Tuple2(
				'category',
				$elm$json$Json$Encode$string(videoData.category)),
				_Utils_Tuple2(
				'searchWords',
				$elm$json$Json$Encode$string(videoData.searchWords)),
				_Utils_Tuple2(
				'difficulty',
				$elm$json$Json$Encode$string(videoData.difficulty))
			]));
};
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$MainPage$GotHistory = function (a) {
	return {$: 'GotHistory', a: a};
};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$json$Json$Decode$list = _Json_decodeList;
var $lobanov$elm_taskport$TaskPort$moduleVersion = '2.0.1';
var $lobanov$elm_taskport$TaskPort$buildCallUrl = function (_function) {
	if (_function.$ === 'DefaultNS') {
		var name = _function.a;
		return 'elmtaskport:///' + (name + ('?v=' + $lobanov$elm_taskport$TaskPort$moduleVersion));
	} else {
		var ns = _function.a;
		var nsVersion = _function.b;
		var name = _function.c;
		return 'elmtaskport://' + (ns + ('/' + (name + ('?v=' + ($lobanov$elm_taskport$TaskPort$moduleVersion + ('&nsv=' + nsVersion))))));
	}
};
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $lobanov$elm_taskport$TaskPort$CannotDecodeValue = F2(
	function (a, b) {
		return {$: 'CannotDecodeValue', a: a, b: b};
	});
var $lobanov$elm_taskport$TaskPort$InteropError = function (a) {
	return {$: 'InteropError', a: a};
};
var $lobanov$elm_taskport$TaskPort$JSError = function (a) {
	return {$: 'JSError', a: a};
};
var $lobanov$elm_taskport$TaskPort$NotCompatible = function (a) {
	return {$: 'NotCompatible', a: a};
};
var $lobanov$elm_taskport$TaskPort$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $lobanov$elm_taskport$TaskPort$NotInstalled = {$: 'NotInstalled'};
var $lobanov$elm_taskport$TaskPort$RuntimeError = function (a) {
	return {$: 'RuntimeError', a: a};
};
var $lobanov$elm_taskport$TaskPort$ErrorObject = F2(
	function (a, b) {
		return {$: 'ErrorObject', a: a, b: b};
	});
var $lobanov$elm_taskport$TaskPort$ErrorValue = function (a) {
	return {$: 'ErrorValue', a: a};
};
var $lobanov$elm_taskport$TaskPort$JSErrorRecord = F4(
	function (name, message, stackLines, cause) {
		return {cause: cause, message: message, name: name, stackLines: stackLines};
	});
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$map4 = _Json_map4;
var $elm$json$Json$Decode$value = _Json_decodeValue;
function $lobanov$elm_taskport$TaskPort$cyclic$jsErrorDecoder() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A3(
				$elm$json$Json$Decode$map2,
				$lobanov$elm_taskport$TaskPort$ErrorObject,
				A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
				$lobanov$elm_taskport$TaskPort$cyclic$jsErrorRecordDecoder()),
				A2($elm$json$Json$Decode$map, $lobanov$elm_taskport$TaskPort$ErrorValue, $elm$json$Json$Decode$value)
			]));
}
function $lobanov$elm_taskport$TaskPort$cyclic$jsErrorRecordDecoder() {
	return A5(
		$elm$json$Json$Decode$map4,
		$lobanov$elm_taskport$TaskPort$JSErrorRecord,
		A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
		A2(
			$elm$json$Json$Decode$field,
			'stackLines',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
		A2(
			$elm$json$Json$Decode$field,
			'cause',
			$elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
						A2(
						$elm$json$Json$Decode$map,
						$elm$core$Maybe$Just,
						$elm$json$Json$Decode$lazy(
							function (_v0) {
								return $lobanov$elm_taskport$TaskPort$cyclic$jsErrorDecoder();
							}))
					]))));
}
try {
	var $lobanov$elm_taskport$TaskPort$jsErrorDecoder = $lobanov$elm_taskport$TaskPort$cyclic$jsErrorDecoder();
	$lobanov$elm_taskport$TaskPort$cyclic$jsErrorDecoder = function () {
		return $lobanov$elm_taskport$TaskPort$jsErrorDecoder;
	};
	var $lobanov$elm_taskport$TaskPort$jsErrorRecordDecoder = $lobanov$elm_taskport$TaskPort$cyclic$jsErrorRecordDecoder();
	$lobanov$elm_taskport$TaskPort$cyclic$jsErrorRecordDecoder = function () {
		return $lobanov$elm_taskport$TaskPort$jsErrorRecordDecoder;
	};
} catch ($) {
	throw 'Some top-level definitions from `TaskPort` are causing infinite recursion:\n\n  ┌─────┐\n  │    jsErrorDecoder\n  │     ↓\n  │    jsErrorRecordDecoder\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $lobanov$elm_taskport$TaskPort$runtimeError = function (msg) {
	return $elm$core$Result$Err(
		$lobanov$elm_taskport$TaskPort$InteropError(
			$lobanov$elm_taskport$TaskPort$RuntimeError('Runtime error in JavaScript interop: ' + (msg + '. JavaScript console may contain more information about the issue.'))));
};
var $lobanov$elm_taskport$TaskPort$resolveResponse = F2(
	function (valueDecoder, res) {
		switch (res.$) {
			case 'BadUrl_':
				var url = res.a;
				return $lobanov$elm_taskport$TaskPort$runtimeError('bad url ' + url);
			case 'Timeout_':
				return $lobanov$elm_taskport$TaskPort$runtimeError('timeout');
			case 'NetworkError_':
				return $elm$core$Result$Err(
					$lobanov$elm_taskport$TaskPort$InteropError($lobanov$elm_taskport$TaskPort$NotInstalled));
			case 'BadStatus_':
				var statusCode = res.a.statusCode;
				var body = res.b;
				if (statusCode === 400) {
					return $elm$core$Result$Err(
						$lobanov$elm_taskport$TaskPort$InteropError(
							$lobanov$elm_taskport$TaskPort$NotCompatible(body)));
				} else {
					if (statusCode === 404) {
						return $elm$core$Result$Err(
							$lobanov$elm_taskport$TaskPort$InteropError(
								$lobanov$elm_taskport$TaskPort$NotFound(body)));
					} else {
						if (statusCode === 500) {
							var _v1 = A2($elm$json$Json$Decode$decodeString, $lobanov$elm_taskport$TaskPort$jsErrorDecoder, body);
							if (_v1.$ === 'Ok') {
								var errorValue = _v1.a;
								return $elm$core$Result$Err(
									$lobanov$elm_taskport$TaskPort$JSError(errorValue));
							} else {
								var decodeError = _v1.a;
								return $elm$core$Result$Err(
									$lobanov$elm_taskport$TaskPort$InteropError(
										$lobanov$elm_taskport$TaskPort$RuntimeError(
											$elm$json$Json$Decode$errorToString(decodeError))));
							}
						} else {
							return $lobanov$elm_taskport$TaskPort$runtimeError(
								'unexpected status ' + $elm$core$String$fromInt(statusCode));
						}
					}
				}
			default:
				var body = res.b;
				var _v2 = A2($elm$json$Json$Decode$decodeString, valueDecoder, body);
				if (_v2.$ === 'Ok') {
					var returnValue = _v2.a;
					return $elm$core$Result$Ok(returnValue);
				} else {
					var decodeError = _v2.a;
					return $elm$core$Result$Err(
						$lobanov$elm_taskport$TaskPort$InteropError(
							A2($lobanov$elm_taskport$TaskPort$CannotDecodeValue, decodeError, body)));
				}
		}
	});
var $elm$http$Http$stringResolver = A2(_Http_expect, '', $elm$core$Basics$identity);
var $lobanov$elm_taskport$TaskPort$buildHttpCall = F3(
	function (_function, valueDecoder, args) {
		return {
			body: $elm$http$Http$jsonBody(args),
			headers: _List_Nil,
			method: 'POST',
			resolver: $elm$http$Http$stringResolver(
				$lobanov$elm_taskport$TaskPort$resolveResponse(valueDecoder)),
			timeout: $elm$core$Maybe$Nothing,
			url: $lobanov$elm_taskport$TaskPort$buildCallUrl(_function)
		};
	});
var $elm$core$Task$fail = _Scheduler_fail;
var $elm$http$Http$resultToTask = function (result) {
	if (result.$ === 'Ok') {
		var a = result.a;
		return $elm$core$Task$succeed(a);
	} else {
		var x = result.a;
		return $elm$core$Task$fail(x);
	}
};
var $elm$http$Http$task = function (r) {
	return A3(
		_Http_toTask,
		_Utils_Tuple0,
		$elm$http$Http$resultToTask,
		{allowCookiesFromOtherDomains: false, body: r.body, expect: r.resolver, headers: r.headers, method: r.method, timeout: r.timeout, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $lobanov$elm_taskport$TaskPort$callNS = F2(
	function (details, args) {
		return $elm$http$Http$task(
			A3(
				$lobanov$elm_taskport$TaskPort$buildHttpCall,
				details._function,
				details.valueDecoder,
				details.argsEncoder(args)));
	});
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$LocalStorage$get = function (names) {
	return $lobanov$elm_taskport$TaskPort$callNS(
		{
			argsEncoder: $elm$json$Json$Encode$string,
			_function: names.getItem,
			valueDecoder: $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string)
		});
};
var $lobanov$elm_taskport$TaskPort$WithNS = F3(
	function (a, b, c) {
		return {$: 'WithNS', a: a, b: b, c: c};
	});
var $lobanov$elm_taskport$TaskPort$inNamespace = F3(
	function (ns, v, fn) {
		return A3($lobanov$elm_taskport$TaskPort$WithNS, ns, v, fn);
	});
var $author$project$LocalStorage$moduleVersion = '1.0.1';
var $author$project$LocalStorage$inNS = A2($lobanov$elm_taskport$TaskPort$inNamespace, 'lobanov/elm-localstorage', $author$project$LocalStorage$moduleVersion);
var $author$project$LocalStorage$localStorage = {
	clear: $author$project$LocalStorage$inNS('localClear'),
	getItem: $author$project$LocalStorage$inNS('localGet'),
	listKeys: $author$project$LocalStorage$inNS('localList'),
	putItem: $author$project$LocalStorage$inNS('localPut'),
	removeItem: $author$project$LocalStorage$inNS('localRemove')
};
var $author$project$LocalStorage$localGet = $author$project$LocalStorage$get($author$project$LocalStorage$localStorage);
var $author$project$GlobalPort$searchHistoryKey = 'search-history';
var $author$project$MainPage$historyCmd = A2(
	$elm$core$Task$attempt,
	function (x) {
		if ((x.$ === 'Ok') && (x.a.$ === 'Just')) {
			var v = x.a.a;
			return $author$project$MainPage$GotHistory(
				$elm$core$Maybe$Just(
					A2(
						$elm$core$Result$withDefault,
						_List_Nil,
						A2(
							$elm$json$Json$Decode$decodeString,
							$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
							v))));
		} else {
			return $author$project$MainPage$GotHistory(
				$elm$core$Maybe$Just(_List_Nil));
		}
	},
	$author$project$LocalStorage$localGet($author$project$GlobalPort$searchHistoryKey));
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $author$project$GlobalPort$TaggedData = F2(
	function (tag, data) {
		return {data: data, tag: tag};
	});
var $author$project$GlobalPort$sendToPlayer = _Platform_outgoingPort(
	'sendToPlayer',
	function ($) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'data',
					$elm$core$Basics$identity($.data)),
					_Utils_Tuple2(
					'tag',
					$elm$json$Json$Encode$string($.tag))
				]));
	});
var $author$project$GlobalPort$logCmd = F2(
	function (name, data) {
		return $author$project$GlobalPort$sendToPlayer(
			A2(
				$author$project$GlobalPort$TaggedData,
				'log',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'name',
							$elm$json$Json$Encode$string(name)),
							_Utils_Tuple2(
							'data',
							$elm$json$Json$Encode$string(data))
						]))));
	});
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$GlobalPort$pageMoveCmd = function (name) {
	return $author$project$GlobalPort$sendToPlayer(
		A2(
			$author$project$GlobalPort$TaggedData,
			'pageMove',
			$elm$json$Json$Encode$string(name)));
};
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$UrlManage$pushUrl = _Platform_outgoingPort('pushUrl', $elm$json$Json$Encode$string);
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$MainPage$init = F3(
	function (focusId, videoId, data) {
		var idx = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$first,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v1) {
							var d = _v1.b;
							return _Utils_eq(d.videoId, videoId);
						},
						A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, data)))));
		var focusIdx = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$first,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var d = _v0.b;
							return _Utils_eq(d.videoId, focusId);
						},
						A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, data)))));
		return _Utils_Tuple2(
			{
				data: data,
				debugStr: '',
				editableValue: $author$project$EditableValue$decode(
					A2($elm$json$Json$Encode$list, $author$project$DataManage$encodeVideoData, data)),
				initIdx: focusIdx,
				isClickBlocked: false,
				isRecentMode: true,
				isSubUser: true,
				selectedTag: '',
				videoIdx: idx,
				visitHistory: $elm$core$Maybe$Nothing
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($author$project$GlobalPort$logCmd, 'main_page', ''),
						$author$project$GlobalPort$pageMoveCmd('main_page'),
						$author$project$MainPage$historyCmd,
						$elm$core$List$isEmpty(data) ? $elm$core$Platform$Cmd$none : $author$project$UrlManage$pushUrl('')
					])));
	});
var $author$project$Main$Model = function (page) {
	return function (prevPages) {
		return function (data) {
			return function (isTransitioning) {
				return function (token) {
					return function (isShadowOn) {
						return function (isAnimationOn) {
							return function (isDarkModeOn) {
								return function (isNetworkErr) {
									return function (isSubUser) {
										return function (keys) {
											return function (rawUrl) {
												return {data: data, isAnimationOn: isAnimationOn, isDarkModeOn: isDarkModeOn, isNetworkErr: isNetworkErr, isShadowOn: isShadowOn, isSubUser: isSubUser, isTransitioning: isTransitioning, keys: keys, page: page, prevPages: prevPages, rawUrl: rawUrl, token: token};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Main$Keys = F2(
	function (alt, x) {
		return {alt: alt, x: x};
	});
var $author$project$Main$emptyKeys = A2($author$project$Main$Keys, false, false);
var $author$project$Main$initModel = F3(
	function (page, data, rawUrl) {
		return $author$project$Main$Model(page)(_List_Nil)(data)(false)($elm$core$Maybe$Nothing)(true)(true)(false)(false)(false)($author$project$Main$emptyKeys)(rawUrl);
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$GlobalPort$startCmd = $author$project$GlobalPort$sendToPlayer(
	A2($author$project$GlobalPort$TaggedData, 'start', $elm$json$Json$Encode$null));
var $author$project$Main$init = function (rawUrl) {
	var _v0 = A3($author$project$MainPage$init, $author$project$Main$focusVideoId, $author$project$Main$focusVideoId, $author$project$DataManage$emptyAppData.video);
	var pageModel = _v0.a;
	var pageCmd = _v0.b;
	return _Utils_Tuple2(
		A3(
			$author$project$Main$initModel,
			$author$project$Main$MainPage(pageModel),
			$author$project$DataManage$emptyAppData,
			rawUrl),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$GlobalPort$startCmd,
					A2($elm$core$Platform$Cmd$map, $author$project$Main$MainPageMsg, pageCmd)
				])));
};
var $author$project$Main$GotStartData = function (a) {
	return {$: 'GotStartData', a: a};
};
var $author$project$Main$GotSubUser = function (a) {
	return {$: 'GotSubUser', a: a};
};
var $author$project$Main$KeyChanged = F2(
	function (a, b) {
		return {$: 'KeyChanged', a: a, b: b};
	});
var $author$project$Main$NetworkErrAlertEnd = {$: 'NetworkErrAlertEnd'};
var $author$project$Main$NoOp = {$: 'NoOp'};
var $author$project$Main$TransitionEnd = {$: 'TransitionEnd'};
var $author$project$Main$UrlChanaged = function (a) {
	return {$: 'UrlChanaged', a: a};
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 'Every', a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {processes: processes, taggers: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 'Nothing') {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.processes;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(_Utils_Tuple0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.taggers);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $author$project$GlobalPort$fromPlayer = _Platform_incomingPort(
	'fromPlayer',
	A2(
		$elm$json$Json$Decode$andThen,
		function (tag) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (data) {
					return $elm$json$Json$Decode$succeed(
						{data: data, tag: tag});
				},
				A2($elm$json$Json$Decode$field, 'data', $elm$json$Json$Decode$value));
		},
		A2($elm$json$Json$Decode$field, 'tag', $elm$json$Json$Decode$string)));
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $elm$browser$Browser$Events$Document = {$: 'Document'};
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onKeyDown = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'keydown');
var $elm$browser$Browser$Events$onKeyUp = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'keyup');
var $author$project$UrlManage$onUrlChange = _Platform_incomingPort('onUrlChange', $elm$json$Json$Decode$string);
var $author$project$Main$AwardPageMsg = function (a) {
	return {$: 'AwardPageMsg', a: a};
};
var $author$project$Main$InfoPageMsg = function (a) {
	return {$: 'InfoPageMsg', a: a};
};
var $author$project$Main$ListenPageMsg = function (a) {
	return {$: 'ListenPageMsg', a: a};
};
var $author$project$Main$MarketPageMsg = function (a) {
	return {$: 'MarketPageMsg', a: a};
};
var $author$project$Main$PrintPageMsg = function (a) {
	return {$: 'PrintPageMsg', a: a};
};
var $author$project$Main$PronPageMsg = function (a) {
	return {$: 'PronPageMsg', a: a};
};
var $author$project$Main$QuestionPageMsg = function (a) {
	return {$: 'QuestionPageMsg', a: a};
};
var $author$project$Main$RankingPageMsg = function (a) {
	return {$: 'RankingPageMsg', a: a};
};
var $author$project$Main$RoadMapPageMsg = function (a) {
	return {$: 'RoadMapPageMsg', a: a};
};
var $author$project$Main$SearchPageMsg = function (a) {
	return {$: 'SearchPageMsg', a: a};
};
var $author$project$Main$SentencePageMsg = function (a) {
	return {$: 'SentencePageMsg', a: a};
};
var $author$project$Main$TapGamePageMsg = function (a) {
	return {$: 'TapGamePageMsg', a: a};
};
var $author$project$Main$ValidatePageMsg = function (a) {
	return {$: 'ValidatePageMsg', a: a};
};
var $author$project$Main$VocaPageMsg = function (a) {
	return {$: 'VocaPageMsg', a: a};
};
var $elm$core$Platform$Sub$map = _Platform_map;
var $author$project$AwardPage$BackPressed = {$: 'BackPressed'};
var $author$project$AwardPage$NoOp = {$: 'NoOp'};
var $author$project$AwardPage$subHelper = F2(
	function (model, _v0) {
		var tag = _v0.tag;
		var data = _v0.data;
		if (tag === 'backPressed') {
			return $author$project$AwardPage$BackPressed;
		} else {
			return $author$project$AwardPage$NoOp;
		}
	});
var $author$project$AwardPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer(
				$author$project$AwardPage$subHelper(model))
			]));
};
var $author$project$InfoPage$NoOp = {$: 'NoOp'};
var $author$project$InfoPage$ToRoadMap = {$: 'ToRoadMap'};
var $author$project$InfoPage$subHelper = function (_v0) {
	var tag = _v0.tag;
	var data = _v0.data;
	if (tag === 'backPressed') {
		return $author$project$InfoPage$ToRoadMap;
	} else {
		return $author$project$InfoPage$NoOp;
	}
};
var $author$project$InfoPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer($author$project$InfoPage$subHelper)
			]));
};
var $author$project$ListenPage$CloseCompleteAlert = {$: 'CloseCompleteAlert'};
var $author$project$ListenPage$NoOp = {$: 'NoOp'};
var $author$project$ListenPage$SlideNextPressed = {$: 'SlideNextPressed'};
var $author$project$ListenPage$SlidePrevPressed = {$: 'SlidePrevPressed'};
var $author$project$ListenPage$isManual = false;
var $author$project$ListenPage$GotCurrentTime = function (a) {
	return {$: 'GotCurrentTime', a: a};
};
var $author$project$ListenPage$GotPlayerState = function (a) {
	return {$: 'GotPlayerState', a: a};
};
var $author$project$ListenPage$GotVideoDuration = function (a) {
	return {$: 'GotVideoDuration', a: a};
};
var $author$project$ListenPage$LoadSuccess = {$: 'LoadSuccess'};
var $author$project$ListenPage$TimeShiftShort = function (a) {
	return {$: 'TimeShiftShort', a: a};
};
var $author$project$ListenPage$ToRoadMapPage = {$: 'ToRoadMapPage'};
var $author$project$ListenPage$subHelper = F2(
	function (model, _v0) {
		var tag = _v0.tag;
		var data = _v0.data;
		switch (tag) {
			case 'playerTime':
				return $author$project$ListenPage$GotCurrentTime(
					A2(
						$elm$core$Result$withDefault,
						0,
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$int, data)));
			case 'playerState':
				return $author$project$ListenPage$GotPlayerState(
					A2(
						$elm$core$Result$withDefault,
						'',
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, data)));
			case 'videoDuration':
				return $author$project$ListenPage$GotVideoDuration(
					A2(
						$elm$core$Result$withDefault,
						0,
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$int, data)));
			case 'backPressed':
				return $author$project$ListenPage$ToRoadMapPage;
			case 'loadSuccess':
				return $author$project$ListenPage$LoadSuccess;
			case 'timeShift':
				return $author$project$ListenPage$TimeShiftShort(
					A2(
						$elm$core$Result$withDefault,
						0,
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$int, data)));
			default:
				return $author$project$ListenPage$NoOp;
		}
	});
var $author$project$ListenPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer(
				$author$project$ListenPage$subHelper(model)),
				model.isCompleteAlertOpen ? A2(
				$elm$time$Time$every,
				1400,
				function (_v0) {
					return $author$project$ListenPage$CloseCompleteAlert;
				}) : $elm$core$Platform$Sub$none,
				$author$project$ListenPage$isManual ? $elm$browser$Browser$Events$onKeyDown(
				A2(
					$elm$json$Json$Decode$map,
					function (str) {
						var _v1 = $elm$core$String$uncons(str);
						_v1$2:
						while (true) {
							if ((_v1.$ === 'Just') && (_v1.a.b === '')) {
								switch (_v1.a.a.valueOf()) {
									case '-':
										var _v2 = _v1.a;
										return $author$project$ListenPage$SlidePrevPressed;
									case '=':
										var _v3 = _v1.a;
										return $author$project$ListenPage$SlideNextPressed;
									default:
										break _v1$2;
								}
							} else {
								break _v1$2;
							}
						}
						return $author$project$ListenPage$NoOp;
					},
					A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))) : $elm$core$Platform$Sub$none
			]));
};
var $author$project$MainPage$ClickBlockEnd = {$: 'ClickBlockEnd'};
var $author$project$MainPage$BackPressed = {$: 'BackPressed'};
var $author$project$MainPage$GotSubUser = function (a) {
	return {$: 'GotSubUser', a: a};
};
var $author$project$MainPage$NoOp = {$: 'NoOp'};
var $author$project$MainPage$subHelper = function (_v0) {
	var tag = _v0.tag;
	var data = _v0.data;
	switch (tag) {
		case 'backPressed':
			return $author$project$MainPage$BackPressed;
		case 'subUser':
			return $author$project$MainPage$GotSubUser(
				A2(
					$elm$core$Result$withDefault,
					false,
					A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$bool, data)));
		default:
			return $author$project$MainPage$NoOp;
	}
};
var $author$project$MainPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer($author$project$MainPage$subHelper),
				model.isClickBlocked ? A2(
				$elm$time$Time$every,
				200,
				function (_v0) {
					return $author$project$MainPage$ClickBlockEnd;
				}) : $elm$core$Platform$Sub$none
			]));
};
var $author$project$MarketPage$GotSubUser = function (a) {
	return {$: 'GotSubUser', a: a};
};
var $author$project$MarketPage$NoOp = {$: 'NoOp'};
var $author$project$MarketPage$ToMainPage = {$: 'ToMainPage'};
var $author$project$MarketPage$subHelper = function (_v0) {
	var tag = _v0.tag;
	var data = _v0.data;
	switch (tag) {
		case 'backPressed':
			return $author$project$MarketPage$ToMainPage;
		case 'subUser':
			return $author$project$MarketPage$GotSubUser(
				A2(
					$elm$core$Result$withDefault,
					false,
					A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$bool, data)));
		default:
			return $author$project$MarketPage$NoOp;
	}
};
var $author$project$MarketPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer($author$project$MarketPage$subHelper)
			]));
};
var $author$project$PrintPage$CloseCompleteAlert = {$: 'CloseCompleteAlert'};
var $author$project$PrintPage$NoOp = {$: 'NoOp'};
var $author$project$PrintPage$SlideNextPressed = {$: 'SlideNextPressed'};
var $author$project$PrintPage$SlidePrevPressed = {$: 'SlidePrevPressed'};
var $author$project$PrintPage$isManual = false;
var $author$project$PrintPage$GotCurrentTime = function (a) {
	return {$: 'GotCurrentTime', a: a};
};
var $author$project$PrintPage$GotPlayerState = function (a) {
	return {$: 'GotPlayerState', a: a};
};
var $author$project$PrintPage$GotVideoDuration = function (a) {
	return {$: 'GotVideoDuration', a: a};
};
var $author$project$PrintPage$LoadSuccess = {$: 'LoadSuccess'};
var $author$project$PrintPage$TimeShiftShort = function (a) {
	return {$: 'TimeShiftShort', a: a};
};
var $author$project$PrintPage$ToRoadMapPage = {$: 'ToRoadMapPage'};
var $author$project$PrintPage$subHelper = F2(
	function (model, _v0) {
		var tag = _v0.tag;
		var data = _v0.data;
		switch (tag) {
			case 'playerTime':
				return $author$project$PrintPage$GotCurrentTime(
					A2(
						$elm$core$Result$withDefault,
						0,
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$int, data)));
			case 'playerState':
				return $author$project$PrintPage$GotPlayerState(
					A2(
						$elm$core$Result$withDefault,
						'',
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, data)));
			case 'videoDuration':
				return $author$project$PrintPage$GotVideoDuration(
					A2(
						$elm$core$Result$withDefault,
						0,
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$int, data)));
			case 'backPressed':
				return $author$project$PrintPage$ToRoadMapPage;
			case 'loadSuccess':
				return $author$project$PrintPage$LoadSuccess;
			case 'timeShift':
				return $author$project$PrintPage$TimeShiftShort(
					A2(
						$elm$core$Result$withDefault,
						0,
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$int, data)));
			default:
				return $author$project$PrintPage$NoOp;
		}
	});
var $author$project$PrintPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer(
				$author$project$PrintPage$subHelper(model)),
				model.isCompleteAlertOpen ? A2(
				$elm$time$Time$every,
				1400,
				function (_v0) {
					return $author$project$PrintPage$CloseCompleteAlert;
				}) : $elm$core$Platform$Sub$none,
				$author$project$PrintPage$isManual ? $elm$browser$Browser$Events$onKeyDown(
				A2(
					$elm$json$Json$Decode$map,
					function (str) {
						var _v1 = $elm$core$String$uncons(str);
						_v1$2:
						while (true) {
							if ((_v1.$ === 'Just') && (_v1.a.b === '')) {
								switch (_v1.a.a.valueOf()) {
									case '-':
										var _v2 = _v1.a;
										return $author$project$PrintPage$SlidePrevPressed;
									case '=':
										var _v3 = _v1.a;
										return $author$project$PrintPage$SlideNextPressed;
									default:
										break _v1$2;
								}
							} else {
								break _v1$2;
							}
						}
						return $author$project$PrintPage$NoOp;
					},
					A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))) : $elm$core$Platform$Sub$none
			]));
};
var $author$project$PronPage$CloseRightAlert = {$: 'CloseRightAlert'};
var $author$project$PronPage$CloseWrongAlert = {$: 'CloseWrongAlert'};
var $author$project$PronPage$EndBtnClicked = {$: 'EndBtnClicked'};
var $author$project$PronPage$NoOp = {$: 'NoOp'};
var $author$project$PronPage$ToRoadMapPage = {$: 'ToRoadMapPage'};
var $author$project$PronPage$subHelper = F2(
	function (model, _v0) {
		var tag = _v0.tag;
		var data = _v0.data;
		if (tag === 'backPressed') {
			return model.isModalOpen ? $author$project$PronPage$EndBtnClicked : $author$project$PronPage$ToRoadMapPage;
		} else {
			return $author$project$PronPage$NoOp;
		}
	});
var $author$project$PronPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer(
				$author$project$PronPage$subHelper(model)),
				model.isRightAlertOpen ? A2(
				$elm$time$Time$every,
				600,
				function (_v0) {
					return $author$project$PronPage$CloseRightAlert;
				}) : $elm$core$Platform$Sub$none,
				model.isWrongAlertOpen ? A2(
				$elm$time$Time$every,
				600,
				function (_v1) {
					return $author$project$PronPage$CloseWrongAlert;
				}) : $elm$core$Platform$Sub$none
			]));
};
var $author$project$QuestionPage$NoOp = {$: 'NoOp'};
var $author$project$QuestionPage$ToMainPage = {$: 'ToMainPage'};
var $author$project$QuestionPage$subHelper = function (_v0) {
	var tag = _v0.tag;
	var data = _v0.data;
	if (tag === 'backPressed') {
		return $author$project$QuestionPage$ToMainPage;
	} else {
		return $author$project$QuestionPage$NoOp;
	}
};
var $author$project$QuestionPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer($author$project$QuestionPage$subHelper)
			]));
};
var $author$project$RankingPage$NoOp = {$: 'NoOp'};
var $author$project$RankingPage$ToAwardPage = {$: 'ToAwardPage'};
var $author$project$RankingPage$subHelper = function (_v0) {
	var tag = _v0.tag;
	var data = _v0.data;
	if (tag === 'backPressed') {
		return $author$project$RankingPage$ToAwardPage;
	} else {
		return $author$project$RankingPage$NoOp;
	}
};
var $author$project$RankingPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer($author$project$RankingPage$subHelper)
			]));
};
var $author$project$RoadMapPage$GotProgress = function (a) {
	return {$: 'GotProgress', a: a};
};
var $author$project$RoadMapPage$NoOp = {$: 'NoOp'};
var $author$project$RoadMapPage$ToMainPage = {$: 'ToMainPage'};
var $author$project$GlobalPort$Progress = F4(
	function (videoId, name, level, date) {
		return {date: date, level: level, name: name, videoId: videoId};
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $author$project$GlobalPort$progressDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'date',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'level',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'name',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'videoId',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$GlobalPort$Progress)))));
var $author$project$RoadMapPage$subHelper = function (_v0) {
	var tag = _v0.tag;
	var data = _v0.data;
	switch (tag) {
		case 'backPressed':
			return $author$project$RoadMapPage$ToMainPage;
		case 'progress':
			return $author$project$RoadMapPage$GotProgress(
				A2(
					$elm$core$Result$withDefault,
					_List_Nil,
					A2(
						$elm$json$Json$Decode$decodeValue,
						$elm$json$Json$Decode$list($author$project$GlobalPort$progressDecoder),
						data)));
		default:
			return $author$project$RoadMapPage$NoOp;
	}
};
var $author$project$RoadMapPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer($author$project$RoadMapPage$subHelper)
			]));
};
var $author$project$SearchPage$BackPressed = {$: 'BackPressed'};
var $author$project$SearchPage$NoOp = {$: 'NoOp'};
var $author$project$SearchPage$subHelper = function (_v0) {
	var tag = _v0.tag;
	var data = _v0.data;
	if (tag === 'backPressed') {
		return $author$project$SearchPage$BackPressed;
	} else {
		return $author$project$SearchPage$NoOp;
	}
};
var $author$project$SearchPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer($author$project$SearchPage$subHelper)
			]));
};
var $author$project$SentencePage$CloseRightAlert = {$: 'CloseRightAlert'};
var $author$project$SentencePage$CloseWrongAlert = {$: 'CloseWrongAlert'};
var $author$project$SentencePage$RightStart = {$: 'RightStart'};
var $author$project$SentencePage$RightWaitEnded = {$: 'RightWaitEnded'};
var $author$project$SentencePage$WrongInputBetween = {$: 'WrongInputBetween'};
var $author$project$SentencePage$WrongInputBetweenFinish = {$: 'WrongInputBetweenFinish'};
var $author$project$SentencePage$WrongStart = {$: 'WrongStart'};
var $author$project$SentencePage$WrongWaitEnded = {$: 'WrongWaitEnded'};
var $author$project$SentencePage$EndBtnClicked = {$: 'EndBtnClicked'};
var $author$project$SentencePage$GotCurrentTime = function (a) {
	return {$: 'GotCurrentTime', a: a};
};
var $author$project$SentencePage$GotPlayerState = function (a) {
	return {$: 'GotPlayerState', a: a};
};
var $author$project$SentencePage$LoadSuccess = {$: 'LoadSuccess'};
var $author$project$SentencePage$NoOp = {$: 'NoOp'};
var $author$project$SentencePage$ToRoadMapPage = {$: 'ToRoadMapPage'};
var $author$project$SentencePage$subHelper = F2(
	function (model, _v0) {
		var tag = _v0.tag;
		var data = _v0.data;
		switch (tag) {
			case 'playerTime':
				return $author$project$SentencePage$GotCurrentTime(
					A2(
						$elm$core$Result$withDefault,
						0,
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$int, data)));
			case 'playerState':
				return $author$project$SentencePage$GotPlayerState(
					A2(
						$elm$core$Result$withDefault,
						'',
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, data)));
			case 'backPressed':
				return model.isModalOpen ? $author$project$SentencePage$EndBtnClicked : $author$project$SentencePage$ToRoadMapPage;
			case 'loadSuccess':
				return $author$project$SentencePage$LoadSuccess;
			default:
				return $author$project$SentencePage$NoOp;
		}
	});
var $author$project$SentencePage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer(
				$author$project$SentencePage$subHelper(model)),
				model.isRightAlertOpen ? A2(
				$elm$time$Time$every,
				600,
				function (_v0) {
					return $author$project$SentencePage$CloseRightAlert;
				}) : $elm$core$Platform$Sub$none,
				model.isWrongAlertOpen ? A2(
				$elm$time$Time$every,
				600,
				function (_v1) {
					return $author$project$SentencePage$CloseWrongAlert;
				}) : $elm$core$Platform$Sub$none,
				((model.playerState === 'onPlaying') && _Utils_eq(model.quizState, $author$project$SentencePage$WrongStart)) ? A2(
				$elm$time$Time$every,
				300,
				function (_v2) {
					return $author$project$SentencePage$WrongWaitEnded;
				}) : $elm$core$Platform$Sub$none,
				_Utils_eq(model.quizState, $author$project$SentencePage$RightStart) ? A2(
				$elm$time$Time$every,
				300,
				function (_v3) {
					return $author$project$SentencePage$RightWaitEnded;
				}) : $elm$core$Platform$Sub$none,
				_Utils_eq(model.quizState, $author$project$SentencePage$WrongInputBetween) ? A2(
				$elm$time$Time$every,
				300,
				function (_v4) {
					return $author$project$SentencePage$WrongInputBetweenFinish;
				}) : $elm$core$Platform$Sub$none
			]));
};
var $author$project$TapGamePage$AnimUpdate = function (a) {
	return {$: 'AnimUpdate', a: a};
};
var $elm$browser$Browser$AnimationManager$Delta = function (a) {
	return {$: 'Delta', a: a};
};
var $elm$browser$Browser$AnimationManager$State = F3(
	function (subs, request, oldTime) {
		return {oldTime: oldTime, request: request, subs: subs};
	});
var $elm$browser$Browser$AnimationManager$init = $elm$core$Task$succeed(
	A3($elm$browser$Browser$AnimationManager$State, _List_Nil, $elm$core$Maybe$Nothing, 0));
var $elm$browser$Browser$AnimationManager$now = _Browser_now(_Utils_Tuple0);
var $elm$browser$Browser$AnimationManager$rAF = _Browser_rAF(_Utils_Tuple0);
var $elm$browser$Browser$AnimationManager$onEffects = F3(
	function (router, subs, _v0) {
		var request = _v0.request;
		var oldTime = _v0.oldTime;
		var _v1 = _Utils_Tuple2(request, subs);
		if (_v1.a.$ === 'Nothing') {
			if (!_v1.b.b) {
				var _v2 = _v1.a;
				return $elm$browser$Browser$AnimationManager$init;
			} else {
				var _v4 = _v1.a;
				return A2(
					$elm$core$Task$andThen,
					function (pid) {
						return A2(
							$elm$core$Task$andThen,
							function (time) {
								return $elm$core$Task$succeed(
									A3(
										$elm$browser$Browser$AnimationManager$State,
										subs,
										$elm$core$Maybe$Just(pid),
										time));
							},
							$elm$browser$Browser$AnimationManager$now);
					},
					$elm$core$Process$spawn(
						A2(
							$elm$core$Task$andThen,
							$elm$core$Platform$sendToSelf(router),
							$elm$browser$Browser$AnimationManager$rAF)));
			}
		} else {
			if (!_v1.b.b) {
				var pid = _v1.a.a;
				return A2(
					$elm$core$Task$andThen,
					function (_v3) {
						return $elm$browser$Browser$AnimationManager$init;
					},
					$elm$core$Process$kill(pid));
			} else {
				return $elm$core$Task$succeed(
					A3($elm$browser$Browser$AnimationManager$State, subs, request, oldTime));
			}
		}
	});
var $elm$browser$Browser$AnimationManager$onSelfMsg = F3(
	function (router, newTime, _v0) {
		var subs = _v0.subs;
		var oldTime = _v0.oldTime;
		var send = function (sub) {
			if (sub.$ === 'Time') {
				var tagger = sub.a;
				return A2(
					$elm$core$Platform$sendToApp,
					router,
					tagger(
						$elm$time$Time$millisToPosix(newTime)));
			} else {
				var tagger = sub.a;
				return A2(
					$elm$core$Platform$sendToApp,
					router,
					tagger(newTime - oldTime));
			}
		};
		return A2(
			$elm$core$Task$andThen,
			function (pid) {
				return A2(
					$elm$core$Task$andThen,
					function (_v1) {
						return $elm$core$Task$succeed(
							A3(
								$elm$browser$Browser$AnimationManager$State,
								subs,
								$elm$core$Maybe$Just(pid),
								newTime));
					},
					$elm$core$Task$sequence(
						A2($elm$core$List$map, send, subs)));
			},
			$elm$core$Process$spawn(
				A2(
					$elm$core$Task$andThen,
					$elm$core$Platform$sendToSelf(router),
					$elm$browser$Browser$AnimationManager$rAF)));
	});
var $elm$browser$Browser$AnimationManager$Time = function (a) {
	return {$: 'Time', a: a};
};
var $elm$browser$Browser$AnimationManager$subMap = F2(
	function (func, sub) {
		if (sub.$ === 'Time') {
			var tagger = sub.a;
			return $elm$browser$Browser$AnimationManager$Time(
				A2($elm$core$Basics$composeL, func, tagger));
		} else {
			var tagger = sub.a;
			return $elm$browser$Browser$AnimationManager$Delta(
				A2($elm$core$Basics$composeL, func, tagger));
		}
	});
_Platform_effectManagers['Browser.AnimationManager'] = _Platform_createManager($elm$browser$Browser$AnimationManager$init, $elm$browser$Browser$AnimationManager$onEffects, $elm$browser$Browser$AnimationManager$onSelfMsg, 0, $elm$browser$Browser$AnimationManager$subMap);
var $elm$browser$Browser$AnimationManager$subscription = _Platform_leaf('Browser.AnimationManager');
var $elm$browser$Browser$AnimationManager$onAnimationFrameDelta = function (tagger) {
	return $elm$browser$Browser$AnimationManager$subscription(
		$elm$browser$Browser$AnimationManager$Delta(tagger));
};
var $elm$browser$Browser$Events$onAnimationFrameDelta = $elm$browser$Browser$AnimationManager$onAnimationFrameDelta;
var $author$project$TapGamePage$EndBtnClicked = {$: 'EndBtnClicked'};
var $author$project$TapGamePage$GotCurrentTime = function (a) {
	return {$: 'GotCurrentTime', a: a};
};
var $author$project$TapGamePage$GotPlayerState = function (a) {
	return {$: 'GotPlayerState', a: a};
};
var $author$project$TapGamePage$GotResult = function (a) {
	return {$: 'GotResult', a: a};
};
var $author$project$TapGamePage$LoadSuccess = {$: 'LoadSuccess'};
var $author$project$TapGamePage$NoOp = {$: 'NoOp'};
var $author$project$TapGamePage$ToRoadMapPage = {$: 'ToRoadMapPage'};
var $author$project$ResultData$TapGameResult = F3(
	function (bestScore, currentScore, quizResult) {
		return {bestScore: bestScore, currentScore: currentScore, quizResult: quizResult};
	});
var $author$project$ResultData$emptyTapGameResult = A3($author$project$ResultData$TapGameResult, 0, 0, _List_Nil);
var $author$project$ResultData$TapGameItem = F4(
	function (isRight, pron, word, meaning) {
		return {isRight: isRight, meaning: meaning, pron: pron, word: word};
	});
var $elm$json$Json$Decode$fail = _Json_fail;
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return $elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						decoder,
						$elm$json$Json$Decode$null(fallback)
					]));
		};
		var handleResult = function (input) {
			var _v0 = A2($elm$json$Json$Decode$decodeValue, pathDecoder, input);
			if (_v0.$ === 'Ok') {
				var rawValue = _v0.a;
				var _v1 = A2(
					$elm$json$Json$Decode$decodeValue,
					nullOr(valDecoder),
					rawValue);
				if (_v1.$ === 'Ok') {
					var finalResult = _v1.a;
					return $elm$json$Json$Decode$succeed(finalResult);
				} else {
					var finalErr = _v1.a;
					return $elm$json$Json$Decode$fail(
						$elm$json$Json$Decode$errorToString(finalErr));
				}
			} else {
				return $elm$json$Json$Decode$succeed(fallback);
			}
		};
		return A2($elm$json$Json$Decode$andThen, handleResult, $elm$json$Json$Decode$value);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,
				A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var $author$project$ResultData$tapGameItemDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'meaning',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'word',
		$elm$json$Json$Decode$string,
		A4(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
			'pron',
			$elm$json$Json$Decode$string,
			'',
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'isRight',
				$elm$json$Json$Decode$bool,
				$elm$json$Json$Decode$succeed($author$project$ResultData$TapGameItem)))));
var $author$project$ResultData$tapGameResultDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'quizResult',
	$elm$json$Json$Decode$list($author$project$ResultData$tapGameItemDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'currentScore',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'bestScore',
			$elm$json$Json$Decode$int,
			$elm$json$Json$Decode$succeed($author$project$ResultData$TapGameResult))));
var $author$project$TapGamePage$subHelper = F2(
	function (model, _v0) {
		var tag = _v0.tag;
		var data = _v0.data;
		switch (tag) {
			case 'playerTime':
				return $author$project$TapGamePage$GotCurrentTime(
					A2(
						$elm$core$Result$withDefault,
						0,
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$int, data)));
			case 'playerState':
				return $author$project$TapGamePage$GotPlayerState(
					A2(
						$elm$core$Result$withDefault,
						'',
						A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, data)));
			case 'backPressed':
				return model.isModalOpen ? $author$project$TapGamePage$EndBtnClicked : $author$project$TapGamePage$ToRoadMapPage;
			case 'result':
				return $author$project$TapGamePage$GotResult(
					A2(
						$elm$core$Result$withDefault,
						$author$project$ResultData$emptyTapGameResult,
						A2($elm$json$Json$Decode$decodeValue, $author$project$ResultData$tapGameResultDecoder, data)));
			case 'loadSuccess':
				return $author$project$TapGamePage$LoadSuccess;
			default:
				return $author$project$TapGamePage$NoOp;
		}
	});
var $author$project$TapGamePage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer(
				$author$project$TapGamePage$subHelper(model)),
				$elm$browser$Browser$Events$onAnimationFrameDelta($author$project$TapGamePage$AnimUpdate)
			]));
};
var $author$project$ValidatePage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$none;
};
var $author$project$VocaPage$CloseZeroAlert = {$: 'CloseZeroAlert'};
var $author$project$VocaPage$NoOp = {$: 'NoOp'};
var $author$project$VocaPage$ToRoadMapPage = {$: 'ToRoadMapPage'};
var $author$project$VocaPage$subHelper = function (_v0) {
	var tag = _v0.tag;
	var data = _v0.data;
	if (tag === 'backPressed') {
		return $author$project$VocaPage$ToRoadMapPage;
	} else {
		return $author$project$VocaPage$NoOp;
	}
};
var $author$project$VocaPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$GlobalPort$fromPlayer($author$project$VocaPage$subHelper),
				model.isZeroAlertOpen ? A2(
				$elm$time$Time$every,
				500,
				function (_v0) {
					return $author$project$VocaPage$CloseZeroAlert;
				}) : $elm$core$Platform$Sub$none
			]));
};
var $author$project$Main$pageSub = function (page) {
	switch (page.$) {
		case 'MainPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$MainPageMsg,
				$author$project$MainPage$subscriptions(pageModel));
		case 'ListenPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$ListenPageMsg,
				$author$project$ListenPage$subscriptions(pageModel));
		case 'TapGamePage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$TapGamePageMsg,
				$author$project$TapGamePage$subscriptions(pageModel));
		case 'RoadMapPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$RoadMapPageMsg,
				$author$project$RoadMapPage$subscriptions(pageModel));
		case 'PronPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$PronPageMsg,
				$author$project$PronPage$subscriptions(pageModel));
		case 'SentencePage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$SentencePageMsg,
				$author$project$SentencePage$subscriptions(pageModel));
		case 'VocaPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$VocaPageMsg,
				$author$project$VocaPage$subscriptions(pageModel));
		case 'AwardPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$AwardPageMsg,
				$author$project$AwardPage$subscriptions(pageModel));
		case 'InfoPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$InfoPageMsg,
				$author$project$InfoPage$subscriptions(pageModel));
		case 'ValidatePage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$ValidatePageMsg,
				$author$project$ValidatePage$subscriptions(pageModel));
		case 'SearchPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$SearchPageMsg,
				$author$project$SearchPage$subscriptions(pageModel));
		case 'QuestionPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$QuestionPageMsg,
				$author$project$QuestionPage$subscriptions(pageModel));
		case 'MarketPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$MarketPageMsg,
				$author$project$MarketPage$subscriptions(pageModel));
		case 'PrintPage':
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$PrintPageMsg,
				$author$project$PrintPage$subscriptions(pageModel));
		default:
			var pageModel = page.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$RankingPageMsg,
				$author$project$RankingPage$subscriptions(pageModel));
	}
};
var $author$project$Main$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Main$pageSub(model.page),
				model.isTransitioning ? A2(
				$elm$time$Time$every,
				300,
				function (_v0) {
					return $author$project$Main$TransitionEnd;
				}) : $elm$core$Platform$Sub$none,
				model.isNetworkErr ? A2(
				$elm$time$Time$every,
				3000,
				function (_v1) {
					return $author$project$Main$NetworkErrAlertEnd;
				}) : $elm$core$Platform$Sub$none,
				$author$project$GlobalPort$fromPlayer(
				function (_v2) {
					var tag = _v2.tag;
					var data = _v2.data;
					return (tag === 'start') ? $author$project$Main$GotStartData(data) : ((tag === 'checkSubUser') ? $author$project$Main$GotSubUser(
						A2(
							$elm$core$Result$withDefault,
							false,
							A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$bool, data))) : $author$project$Main$NoOp);
				}),
				$elm$browser$Browser$Events$onKeyUp(
				A2(
					$elm$json$Json$Decode$map,
					$author$project$Main$KeyChanged(false),
					A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))),
				$elm$browser$Browser$Events$onKeyDown(
				A2(
					$elm$json$Json$Decode$map,
					$author$project$Main$KeyChanged(true),
					A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))),
				$author$project$UrlManage$onUrlChange($author$project$Main$UrlChanaged)
			]));
};
var $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles = F2(
	function (_v0, styles) {
		var newStyles = _v0.b;
		var classname = _v0.c;
		return $elm$core$List$isEmpty(newStyles) ? styles : A3($elm$core$Dict$insert, classname, newStyles, styles);
	});
var $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute = function (_v0) {
	var val = _v0.a;
	return val;
};
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$keyedNodeNS = F2(
	function (namespace, tag) {
		return A2(
			_VirtualDom_keyedNodeNS,
			namespace,
			_VirtualDom_noScript(tag));
	});
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$nodeNS = F2(
	function (namespace, tag) {
		return A2(
			_VirtualDom_nodeNS,
			namespace,
			_VirtualDom_noScript(tag));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml = F2(
	function (_v6, _v7) {
		var key = _v6.a;
		var html = _v6.b;
		var pairs = _v7.a;
		var styles = _v7.b;
		switch (html.$) {
			case 'Unstyled':
				var vdom = html.a;
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					styles);
			case 'Node':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v9 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v9.a;
				var finalStyles = _v9.b;
				var vdom = A3(
					$elm$virtual_dom$VirtualDom$node,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
			case 'NodeNS':
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v10 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v10.a;
				var finalStyles = _v10.b;
				var vdom = A4(
					$elm$virtual_dom$VirtualDom$nodeNS,
					ns,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
			case 'KeyedNode':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v11 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v11.a;
				var finalStyles = _v11.b;
				var vdom = A3(
					$elm$virtual_dom$VirtualDom$keyedNode,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
			default:
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v12 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v12.a;
				var finalStyles = _v12.b;
				var vdom = A4(
					$elm$virtual_dom$VirtualDom$keyedNodeNS,
					ns,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml = F2(
	function (html, _v0) {
		var nodes = _v0.a;
		var styles = _v0.b;
		switch (html.$) {
			case 'Unstyled':
				var vdomNode = html.a;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					styles);
			case 'Node':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v2 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v2.a;
				var finalStyles = _v2.b;
				var vdomNode = A3(
					$elm$virtual_dom$VirtualDom$node,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
			case 'NodeNS':
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v3 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v3.a;
				var finalStyles = _v3.b;
				var vdomNode = A4(
					$elm$virtual_dom$VirtualDom$nodeNS,
					ns,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
			case 'KeyedNode':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v4 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v4.a;
				var finalStyles = _v4.b;
				var vdomNode = A3(
					$elm$virtual_dom$VirtualDom$keyedNode,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
			default:
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v5 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v5.a;
				var finalStyles = _v5.b;
				var vdomNode = A4(
					$elm$virtual_dom$VirtualDom$keyedNodeNS,
					ns,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
		}
	});
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $rtfeldman$elm_css$VirtualDom$Styled$stylesFromPropertiesHelp = F2(
	function (candidate, properties) {
		stylesFromPropertiesHelp:
		while (true) {
			if (!properties.b) {
				return candidate;
			} else {
				var _v1 = properties.a;
				var styles = _v1.b;
				var classname = _v1.c;
				var rest = properties.b;
				if ($elm$core$String$isEmpty(classname)) {
					var $temp$candidate = candidate,
						$temp$properties = rest;
					candidate = $temp$candidate;
					properties = $temp$properties;
					continue stylesFromPropertiesHelp;
				} else {
					var $temp$candidate = $elm$core$Maybe$Just(
						_Utils_Tuple2(classname, styles)),
						$temp$properties = rest;
					candidate = $temp$candidate;
					properties = $temp$properties;
					continue stylesFromPropertiesHelp;
				}
			}
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties = function (properties) {
	var _v0 = A2($rtfeldman$elm_css$VirtualDom$Styled$stylesFromPropertiesHelp, $elm$core$Maybe$Nothing, properties);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var _v1 = _v0.a;
		var classname = _v1.a;
		var styles = _v1.b;
		return A2($elm$core$Dict$singleton, classname, styles);
	}
};
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$Basics$not = _Basics_not;
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $rtfeldman$elm_css$Css$Structure$compactHelp = F2(
	function (declaration, _v0) {
		var keyframesByName = _v0.a;
		var declarations = _v0.b;
		switch (declaration.$) {
			case 'StyleBlockDeclaration':
				var _v2 = declaration.a;
				var properties = _v2.c;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'MediaRule':
				var styleBlocks = declaration.b;
				return A2(
					$elm$core$List$all,
					function (_v3) {
						var properties = _v3.c;
						return $elm$core$List$isEmpty(properties);
					},
					styleBlocks) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'SupportsRule':
				var otherDeclarations = declaration.b;
				return $elm$core$List$isEmpty(otherDeclarations) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'DocumentRule':
				return _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'PageRule':
				var properties = declaration.b;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'FontFace':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'Keyframes':
				var record = declaration.a;
				return $elm$core$String$isEmpty(record.declaration) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					A3($elm$core$Dict$insert, record.name, record.declaration, keyframesByName),
					declarations);
			case 'Viewport':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'CounterStyle':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			default:
				var tuples = declaration.a;
				return A2(
					$elm$core$List$all,
					function (_v4) {
						var properties = _v4.b;
						return $elm$core$List$isEmpty(properties);
					},
					tuples) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
		}
	});
var $rtfeldman$elm_css$Css$Structure$Keyframes = function (a) {
	return {$: 'Keyframes', a: a};
};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations = F2(
	function (keyframesByName, compactedDeclarations) {
		return A2(
			$elm$core$List$append,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var name = _v0.a;
					var decl = _v0.b;
					return $rtfeldman$elm_css$Css$Structure$Keyframes(
						{declaration: decl, name: name});
				},
				$elm$core$Dict$toList(keyframesByName)),
			compactedDeclarations);
	});
var $rtfeldman$elm_css$Css$Structure$compactStylesheet = function (_v0) {
	var charset = _v0.charset;
	var imports = _v0.imports;
	var namespaces = _v0.namespaces;
	var declarations = _v0.declarations;
	var _v1 = A3(
		$elm$core$List$foldr,
		$rtfeldman$elm_css$Css$Structure$compactHelp,
		_Utils_Tuple2($elm$core$Dict$empty, _List_Nil),
		declarations);
	var keyframesByName = _v1.a;
	var compactedDeclarations = _v1.b;
	var finalDeclarations = A2($rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations, keyframesByName, compactedDeclarations);
	return {charset: charset, declarations: finalDeclarations, imports: imports, namespaces: namespaces};
};
var $rtfeldman$elm_css$Css$Structure$Output$charsetToString = function (charset) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$map,
			function (str) {
				return '@charset \"' + (str + '\"');
			},
			charset));
};
var $rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString = function (expression) {
	return '(' + (expression.feature + (A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$map,
			$elm$core$Basics$append(': '),
			expression.value)) + ')'));
};
var $rtfeldman$elm_css$Css$Structure$Output$mediaTypeToString = function (mediaType) {
	switch (mediaType.$) {
		case 'Print':
			return 'print';
		case 'Screen':
			return 'screen';
		default:
			return 'speech';
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString = function (mediaQuery) {
	var prefixWith = F3(
		function (str, mediaType, expressions) {
			return str + (' ' + A2(
				$elm$core$String$join,
				' and ',
				A2(
					$elm$core$List$cons,
					$rtfeldman$elm_css$Css$Structure$Output$mediaTypeToString(mediaType),
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, expressions))));
		});
	switch (mediaQuery.$) {
		case 'AllQuery':
			var expressions = mediaQuery.a;
			return A2(
				$elm$core$String$join,
				' and ',
				A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, expressions));
		case 'OnlyQuery':
			var mediaType = mediaQuery.a;
			var expressions = mediaQuery.b;
			return A3(prefixWith, 'only', mediaType, expressions);
		case 'NotQuery':
			var mediaType = mediaQuery.a;
			var expressions = mediaQuery.b;
			return A3(prefixWith, 'not', mediaType, expressions);
		default:
			var str = mediaQuery.a;
			return str;
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString = F2(
	function (name, mediaQuery) {
		return '@import \"' + (name + ($rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString(mediaQuery) + '\"'));
	});
var $rtfeldman$elm_css$Css$Structure$Output$importToString = function (_v0) {
	var name = _v0.a;
	var mediaQueries = _v0.b;
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$rtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString(name),
			mediaQueries));
};
var $rtfeldman$elm_css$Css$Structure$Output$namespaceToString = function (_v0) {
	var prefix = _v0.a;
	var str = _v0.b;
	return '@namespace ' + (prefix + ('\"' + (str + '\"')));
};
var $rtfeldman$elm_css$Css$Structure$Output$spaceIndent = '    ';
var $rtfeldman$elm_css$Css$Structure$Output$indent = function (str) {
	return _Utils_ap($rtfeldman$elm_css$Css$Structure$Output$spaceIndent, str);
};
var $rtfeldman$elm_css$Css$Structure$Output$noIndent = '';
var $rtfeldman$elm_css$Css$Structure$Output$emitProperty = function (str) {
	return str + ';';
};
var $rtfeldman$elm_css$Css$Structure$Output$emitProperties = function (properties) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeL, $rtfeldman$elm_css$Css$Structure$Output$indent, $rtfeldman$elm_css$Css$Structure$Output$emitProperty),
			properties));
};
var $elm$core$String$append = _String_append;
var $rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString = function (_v0) {
	var str = _v0.a;
	return '::' + str;
};
var $rtfeldman$elm_css$Css$Structure$Output$combinatorToString = function (combinator) {
	switch (combinator.$) {
		case 'AdjacentSibling':
			return '+';
		case 'GeneralSibling':
			return '~';
		case 'Child':
			return '>';
		default:
			return '';
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString = function (repeatableSimpleSelector) {
	switch (repeatableSimpleSelector.$) {
		case 'ClassSelector':
			var str = repeatableSimpleSelector.a;
			return '.' + str;
		case 'IdSelector':
			var str = repeatableSimpleSelector.a;
			return '#' + str;
		case 'PseudoClassSelector':
			var str = repeatableSimpleSelector.a;
			return ':' + str;
		default:
			var str = repeatableSimpleSelector.a;
			return '[' + (str + ']');
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString = function (simpleSelectorSequence) {
	switch (simpleSelectorSequence.$) {
		case 'TypeSelectorSequence':
			var str = simpleSelectorSequence.a.a;
			var repeatableSimpleSelectors = simpleSelectorSequence.b;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$cons,
					str,
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors)));
		case 'UniversalSelectorSequence':
			var repeatableSimpleSelectors = simpleSelectorSequence.a;
			return $elm$core$List$isEmpty(repeatableSimpleSelectors) ? '*' : A2(
				$elm$core$String$join,
				'',
				A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors));
		default:
			var str = simpleSelectorSequence.a;
			var repeatableSimpleSelectors = simpleSelectorSequence.b;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$cons,
					str,
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors)));
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$selectorChainToString = function (_v0) {
	var combinator = _v0.a;
	var sequence = _v0.b;
	return A2(
		$elm$core$String$join,
		' ',
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$Structure$Output$combinatorToString(combinator),
				$rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(sequence)
			]));
};
var $rtfeldman$elm_css$Css$Structure$Output$selectorToString = function (_v0) {
	var simpleSelectorSequence = _v0.a;
	var chain = _v0.b;
	var pseudoElement = _v0.c;
	var segments = A2(
		$elm$core$List$cons,
		$rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(simpleSelectorSequence),
		A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$selectorChainToString, chain));
	var pseudoElementsString = A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			[
				A2(
				$elm$core$Maybe$withDefault,
				'',
				A2($elm$core$Maybe$map, $rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString, pseudoElement))
			]));
	return A2(
		$elm$core$String$append,
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$filter,
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
				segments)),
		pseudoElementsString);
};
var $rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock = F2(
	function (indentLevel, _v0) {
		var firstSelector = _v0.a;
		var otherSelectors = _v0.b;
		var properties = _v0.c;
		var selectorStr = A2(
			$elm$core$String$join,
			', ',
			A2(
				$elm$core$List$map,
				$rtfeldman$elm_css$Css$Structure$Output$selectorToString,
				A2($elm$core$List$cons, firstSelector, otherSelectors)));
		return A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				[
					selectorStr,
					' {\n',
					indentLevel,
					$rtfeldman$elm_css$Css$Structure$Output$emitProperties(properties),
					'\n',
					indentLevel,
					'}'
				]));
	});
var $rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration = function (decl) {
	switch (decl.$) {
		case 'StyleBlockDeclaration':
			var styleBlock = decl.a;
			return A2($rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock, $rtfeldman$elm_css$Css$Structure$Output$noIndent, styleBlock);
		case 'MediaRule':
			var mediaQueries = decl.a;
			var styleBlocks = decl.b;
			var query = A2(
				$elm$core$String$join,
				',\n',
				A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString, mediaQueries));
			var blocks = A2(
				$elm$core$String$join,
				'\n\n',
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeL,
						$rtfeldman$elm_css$Css$Structure$Output$indent,
						$rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock($rtfeldman$elm_css$Css$Structure$Output$spaceIndent)),
					styleBlocks));
			return '@media ' + (query + (' {\n' + (blocks + '\n}')));
		case 'SupportsRule':
			return 'TODO';
		case 'DocumentRule':
			return 'TODO';
		case 'PageRule':
			return 'TODO';
		case 'FontFace':
			return 'TODO';
		case 'Keyframes':
			var name = decl.a.name;
			var declaration = decl.a.declaration;
			return '@keyframes ' + (name + (' {\n' + (declaration + '\n}')));
		case 'Viewport':
			return 'TODO';
		case 'CounterStyle':
			return 'TODO';
		default:
			return 'TODO';
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$prettyPrint = function (_v0) {
	var charset = _v0.charset;
	var imports = _v0.imports;
	var namespaces = _v0.namespaces;
	var declarations = _v0.declarations;
	return A2(
		$elm$core$String$join,
		'\n\n',
		A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$Output$charsetToString(charset),
					A2(
					$elm$core$String$join,
					'\n',
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$importToString, imports)),
					A2(
					$elm$core$String$join,
					'\n',
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$namespaceToString, namespaces)),
					A2(
					$elm$core$String$join,
					'\n\n',
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration, declarations))
				])));
};
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $rtfeldman$elm_css$Css$Structure$CounterStyle = function (a) {
	return {$: 'CounterStyle', a: a};
};
var $rtfeldman$elm_css$Css$Structure$FontFace = function (a) {
	return {$: 'FontFace', a: a};
};
var $rtfeldman$elm_css$Css$Structure$PageRule = F2(
	function (a, b) {
		return {$: 'PageRule', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$Selector = F3(
	function (a, b, c) {
		return {$: 'Selector', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$Structure$StyleBlock = F3(
	function (a, b, c) {
		return {$: 'StyleBlock', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration = function (a) {
	return {$: 'StyleBlockDeclaration', a: a};
};
var $rtfeldman$elm_css$Css$Structure$SupportsRule = F2(
	function (a, b) {
		return {$: 'SupportsRule', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$Viewport = function (a) {
	return {$: 'Viewport', a: a};
};
var $rtfeldman$elm_css$Css$Structure$MediaRule = F2(
	function (a, b) {
		return {$: 'MediaRule', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$mapLast = F2(
	function (update, list) {
		if (!list.b) {
			return list;
		} else {
			if (!list.b.b) {
				var only = list.a;
				return _List_fromArray(
					[
						update(only)
					]);
			} else {
				var first = list.a;
				var rest = list.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Structure$mapLast, update, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Structure$withPropertyAppended = F2(
	function (property, _v0) {
		var firstSelector = _v0.a;
		var otherSelectors = _v0.b;
		var properties = _v0.c;
		return A3(
			$rtfeldman$elm_css$Css$Structure$StyleBlock,
			firstSelector,
			otherSelectors,
			_Utils_ap(
				properties,
				_List_fromArray(
					[property])));
	});
var $rtfeldman$elm_css$Css$Structure$appendProperty = F2(
	function (property, declarations) {
		if (!declarations.b) {
			return declarations;
		} else {
			if (!declarations.b.b) {
				switch (declarations.a.$) {
					case 'StyleBlockDeclaration':
						var styleBlock = declarations.a.a;
						return _List_fromArray(
							[
								$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
								A2($rtfeldman$elm_css$Css$Structure$withPropertyAppended, property, styleBlock))
							]);
					case 'MediaRule':
						var _v1 = declarations.a;
						var mediaQueries = _v1.a;
						var styleBlocks = _v1.b;
						return _List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Css$Structure$MediaRule,
								mediaQueries,
								A2(
									$rtfeldman$elm_css$Css$Structure$mapLast,
									$rtfeldman$elm_css$Css$Structure$withPropertyAppended(property),
									styleBlocks))
							]);
					default:
						return declarations;
				}
			} else {
				var first = declarations.a;
				var rest = declarations.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Structure$appendProperty, property, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendToLastSelector = F2(
	function (f, styleBlock) {
		if (!styleBlock.b.b) {
			var only = styleBlock.a;
			var properties = styleBlock.c;
			return _List_fromArray(
				[
					A3($rtfeldman$elm_css$Css$Structure$StyleBlock, only, _List_Nil, properties),
					A3(
					$rtfeldman$elm_css$Css$Structure$StyleBlock,
					f(only),
					_List_Nil,
					_List_Nil)
				]);
		} else {
			var first = styleBlock.a;
			var rest = styleBlock.b;
			var properties = styleBlock.c;
			var newRest = A2($elm$core$List$map, f, rest);
			var newFirst = f(first);
			return _List_fromArray(
				[
					A3($rtfeldman$elm_css$Css$Structure$StyleBlock, first, rest, properties),
					A3($rtfeldman$elm_css$Css$Structure$StyleBlock, newFirst, newRest, _List_Nil)
				]);
		}
	});
var $rtfeldman$elm_css$Css$Structure$applyPseudoElement = F2(
	function (pseudo, _v0) {
		var sequence = _v0.a;
		var selectors = _v0.b;
		return A3(
			$rtfeldman$elm_css$Css$Structure$Selector,
			sequence,
			selectors,
			$elm$core$Maybe$Just(pseudo));
	});
var $rtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector = F2(
	function (pseudo, styleBlock) {
		return A2(
			$rtfeldman$elm_css$Css$Structure$appendToLastSelector,
			$rtfeldman$elm_css$Css$Structure$applyPseudoElement(pseudo),
			styleBlock);
	});
var $rtfeldman$elm_css$Css$Structure$CustomSelector = F2(
	function (a, b) {
		return {$: 'CustomSelector', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$TypeSelectorSequence = F2(
	function (a, b) {
		return {$: 'TypeSelectorSequence', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence = function (a) {
	return {$: 'UniversalSelectorSequence', a: a};
};
var $rtfeldman$elm_css$Css$Structure$appendRepeatable = F2(
	function (selector, sequence) {
		switch (sequence.$) {
			case 'TypeSelectorSequence':
				var typeSelector = sequence.a;
				var list = sequence.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$TypeSelectorSequence,
					typeSelector,
					_Utils_ap(
						list,
						_List_fromArray(
							[selector])));
			case 'UniversalSelectorSequence':
				var list = sequence.a;
				return $rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(
					_Utils_ap(
						list,
						_List_fromArray(
							[selector])));
			default:
				var str = sequence.a;
				var list = sequence.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$CustomSelector,
					str,
					_Utils_ap(
						list,
						_List_fromArray(
							[selector])));
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator = F2(
	function (selector, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			if (!list.b.b) {
				var _v1 = list.a;
				var combinator = _v1.a;
				var sequence = _v1.b;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						combinator,
						A2($rtfeldman$elm_css$Css$Structure$appendRepeatable, selector, sequence))
					]);
			} else {
				var first = list.a;
				var rest = list.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, selector, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendRepeatableSelector = F2(
	function (repeatableSimpleSelector, selector) {
		if (!selector.b.b) {
			var sequence = selector.a;
			var pseudoElement = selector.c;
			return A3(
				$rtfeldman$elm_css$Css$Structure$Selector,
				A2($rtfeldman$elm_css$Css$Structure$appendRepeatable, repeatableSimpleSelector, sequence),
				_List_Nil,
				pseudoElement);
		} else {
			var firstSelector = selector.a;
			var tuples = selector.b;
			var pseudoElement = selector.c;
			return A3(
				$rtfeldman$elm_css$Css$Structure$Selector,
				firstSelector,
				A2($rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, repeatableSimpleSelector, tuples),
				pseudoElement);
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector = F2(
	function (selector, styleBlock) {
		return A2(
			$rtfeldman$elm_css$Css$Structure$appendToLastSelector,
			$rtfeldman$elm_css$Css$Structure$appendRepeatableSelector(selector),
			styleBlock);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors = function (declarations) {
	collectSelectors:
	while (true) {
		if (!declarations.b) {
			return _List_Nil;
		} else {
			if (declarations.a.$ === 'StyleBlockDeclaration') {
				var _v1 = declarations.a.a;
				var firstSelector = _v1.a;
				var otherSelectors = _v1.b;
				var rest = declarations.b;
				return _Utils_ap(
					A2($elm$core$List$cons, firstSelector, otherSelectors),
					$rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(rest));
			} else {
				var rest = declarations.b;
				var $temp$declarations = rest;
				declarations = $temp$declarations;
				continue collectSelectors;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Structure$DocumentRule = F5(
	function (a, b, c, d, e) {
		return {$: 'DocumentRule', a: a, b: b, c: c, d: d, e: e};
	});
var $rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock = F2(
	function (update, declarations) {
		_v0$12:
		while (true) {
			if (!declarations.b) {
				return declarations;
			} else {
				if (!declarations.b.b) {
					switch (declarations.a.$) {
						case 'StyleBlockDeclaration':
							var styleBlock = declarations.a.a;
							return A2(
								$elm$core$List$map,
								$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration,
								update(styleBlock));
						case 'MediaRule':
							if (declarations.a.b.b) {
								if (!declarations.a.b.b.b) {
									var _v1 = declarations.a;
									var mediaQueries = _v1.a;
									var _v2 = _v1.b;
									var styleBlock = _v2.a;
									return _List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$Structure$MediaRule,
											mediaQueries,
											update(styleBlock))
										]);
								} else {
									var _v3 = declarations.a;
									var mediaQueries = _v3.a;
									var _v4 = _v3.b;
									var first = _v4.a;
									var rest = _v4.b;
									var _v5 = A2(
										$rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock,
										update,
										_List_fromArray(
											[
												A2($rtfeldman$elm_css$Css$Structure$MediaRule, mediaQueries, rest)
											]));
									if ((_v5.b && (_v5.a.$ === 'MediaRule')) && (!_v5.b.b)) {
										var _v6 = _v5.a;
										var newMediaQueries = _v6.a;
										var newStyleBlocks = _v6.b;
										return _List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Css$Structure$MediaRule,
												newMediaQueries,
												A2($elm$core$List$cons, first, newStyleBlocks))
											]);
									} else {
										var newDeclarations = _v5;
										return newDeclarations;
									}
								}
							} else {
								break _v0$12;
							}
						case 'SupportsRule':
							var _v7 = declarations.a;
							var str = _v7.a;
							var nestedDeclarations = _v7.b;
							return _List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Css$Structure$SupportsRule,
									str,
									A2($rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, nestedDeclarations))
								]);
						case 'DocumentRule':
							var _v8 = declarations.a;
							var str1 = _v8.a;
							var str2 = _v8.b;
							var str3 = _v8.c;
							var str4 = _v8.d;
							var styleBlock = _v8.e;
							return A2(
								$elm$core$List$map,
								A4($rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4),
								update(styleBlock));
						case 'PageRule':
							var _v9 = declarations.a;
							return declarations;
						case 'FontFace':
							return declarations;
						case 'Keyframes':
							return declarations;
						case 'Viewport':
							return declarations;
						case 'CounterStyle':
							return declarations;
						default:
							return declarations;
					}
				} else {
					break _v0$12;
				}
			}
		}
		var first = declarations.a;
		var rest = declarations.b;
		return A2(
			$elm$core$List$cons,
			first,
			A2($rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, rest));
	});
var $elm$core$String$cons = _String_cons;
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$HashData = F4(
	function (shift, seed, hash, charsProcessed) {
		return {charsProcessed: charsProcessed, hash: hash, seed: seed, shift: shift};
	});
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$c1 = 3432918353;
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$c2 = 461845907;
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy = F2(
	function (b, a) {
		return ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$core$Bitwise$or = _Bitwise_or;
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy = F2(
	function (b, a) {
		return (a << b) | (a >>> (32 - b));
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$finalize = function (data) {
	var acc = (!(!data.hash)) ? (data.seed ^ A2(
		$rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,
		$rtfeldman$elm_css$ElmCssVendor$Murmur3$c2,
		A2(
			$rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,
			15,
			A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, $rtfeldman$elm_css$ElmCssVendor$Murmur3$c1, data.hash)))) : data.seed;
	var h0 = acc ^ data.charsProcessed;
	var h1 = A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));
	var h2 = A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));
	return (h2 ^ (h2 >>> 16)) >>> 0;
};
var $elm$core$String$foldl = _String_foldl;
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$mix = F2(
	function (h1, k1) {
		return A2(
			$rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,
			5,
			A2(
				$rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,
				13,
				h1 ^ A2(
					$rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,
					$rtfeldman$elm_css$ElmCssVendor$Murmur3$c2,
					A2(
						$rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,
						15,
						A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, $rtfeldman$elm_css$ElmCssVendor$Murmur3$c1, k1))))) + 3864292196;
	});
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$hashFold = F2(
	function (c, data) {
		var res = data.hash | ((255 & $elm$core$Char$toCode(c)) << data.shift);
		var _v0 = data.shift;
		if (_v0 === 24) {
			return {
				charsProcessed: data.charsProcessed + 1,
				hash: 0,
				seed: A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$mix, data.seed, res),
				shift: 0
			};
		} else {
			return {charsProcessed: data.charsProcessed + 1, hash: res, seed: data.seed, shift: data.shift + 8};
		}
	});
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString = F2(
	function (seed, str) {
		return $rtfeldman$elm_css$ElmCssVendor$Murmur3$finalize(
			A3(
				$elm$core$String$foldl,
				$rtfeldman$elm_css$ElmCssVendor$Murmur3$hashFold,
				A4($rtfeldman$elm_css$ElmCssVendor$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});
var $rtfeldman$elm_css$Hash$murmurSeed = 15739;
var $elm$core$String$fromList = _String_fromList;
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {
	unsafeToDigit:
	while (true) {
		switch (num) {
			case 0:
				return _Utils_chr('0');
			case 1:
				return _Utils_chr('1');
			case 2:
				return _Utils_chr('2');
			case 3:
				return _Utils_chr('3');
			case 4:
				return _Utils_chr('4');
			case 5:
				return _Utils_chr('5');
			case 6:
				return _Utils_chr('6');
			case 7:
				return _Utils_chr('7');
			case 8:
				return _Utils_chr('8');
			case 9:
				return _Utils_chr('9');
			case 10:
				return _Utils_chr('a');
			case 11:
				return _Utils_chr('b');
			case 12:
				return _Utils_chr('c');
			case 13:
				return _Utils_chr('d');
			case 14:
				return _Utils_chr('e');
			case 15:
				return _Utils_chr('f');
			default:
				var $temp$num = num;
				num = $temp$num;
				continue unsafeToDigit;
		}
	}
};
var $rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (num < 16) {
				return A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(num),
					digits);
			} else {
				var $temp$digits = A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(
						A2($elm$core$Basics$modBy, 16, num)),
					digits),
					$temp$num = (num / 16) | 0;
				digits = $temp$digits;
				num = $temp$num;
				continue unsafePositiveToDigits;
			}
		}
	});
var $rtfeldman$elm_hex$Hex$toString = function (num) {
	return $elm$core$String$fromList(
		(num < 0) ? A2(
			$elm$core$List$cons,
			_Utils_chr('-'),
			A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));
};
var $rtfeldman$elm_css$Hash$fromString = function (str) {
	return A2(
		$elm$core$String$cons,
		_Utils_chr('_'),
		$rtfeldman$elm_hex$Hex$toString(
			A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString, $rtfeldman$elm_css$Hash$murmurSeed, str)));
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$last = function (list) {
	last:
	while (true) {
		if (!list.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!list.b.b) {
				var singleton = list.a;
				return $elm$core$Maybe$Just(singleton);
			} else {
				var rest = list.b;
				var $temp$list = rest;
				list = $temp$list;
				continue last;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration = function (declarations) {
	lastDeclaration:
	while (true) {
		if (!declarations.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!declarations.b.b) {
				var x = declarations.a;
				return $elm$core$Maybe$Just(
					_List_fromArray(
						[x]));
			} else {
				var xs = declarations.b;
				var $temp$declarations = xs;
				declarations = $temp$declarations;
				continue lastDeclaration;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$oneOf = function (maybes) {
	oneOf:
	while (true) {
		if (!maybes.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var maybe = maybes.a;
			var rest = maybes.b;
			if (maybe.$ === 'Nothing') {
				var $temp$maybes = rest;
				maybes = $temp$maybes;
				continue oneOf;
			} else {
				return maybe;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Structure$FontFeatureValues = function (a) {
	return {$: 'FontFeatureValues', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues = function (tuples) {
	var expandTuples = function (tuplesToExpand) {
		if (!tuplesToExpand.b) {
			return _List_Nil;
		} else {
			var properties = tuplesToExpand.a;
			var rest = tuplesToExpand.b;
			return A2(
				$elm$core$List$cons,
				properties,
				expandTuples(rest));
		}
	};
	var newTuples = expandTuples(tuples);
	return _List_fromArray(
		[
			$rtfeldman$elm_css$Css$Structure$FontFeatureValues(newTuples)
		]);
};
var $rtfeldman$elm_css$Css$Structure$styleBlockToMediaRule = F2(
	function (mediaQueries, declaration) {
		if (declaration.$ === 'StyleBlockDeclaration') {
			var styleBlock = declaration.a;
			return A2(
				$rtfeldman$elm_css$Css$Structure$MediaRule,
				mediaQueries,
				_List_fromArray(
					[styleBlock]));
		} else {
			return declaration;
		}
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule = F5(
	function (str1, str2, str3, str4, declaration) {
		if (declaration.$ === 'StyleBlockDeclaration') {
			var structureStyleBlock = declaration.a;
			return A5($rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);
		} else {
			return declaration;
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule = F2(
	function (mediaQueries, declaration) {
		switch (declaration.$) {
			case 'StyleBlockDeclaration':
				var structureStyleBlock = declaration.a;
				return A2(
					$rtfeldman$elm_css$Css$Structure$MediaRule,
					mediaQueries,
					_List_fromArray(
						[structureStyleBlock]));
			case 'MediaRule':
				var newMediaQueries = declaration.a;
				var structureStyleBlocks = declaration.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$MediaRule,
					_Utils_ap(mediaQueries, newMediaQueries),
					structureStyleBlocks);
			case 'SupportsRule':
				var str = declaration.a;
				var declarations = declaration.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$SupportsRule,
					str,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),
						declarations));
			case 'DocumentRule':
				var str1 = declaration.a;
				var str2 = declaration.b;
				var str3 = declaration.c;
				var str4 = declaration.d;
				var structureStyleBlock = declaration.e;
				return A5($rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return declaration;
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet = function (_v0) {
	var declarations = _v0.a;
	return declarations;
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast = F4(
	function (nestedStyles, rest, f, declarations) {
		var withoutParent = function (decls) {
			return A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				$elm$core$List$tail(decls));
		};
		var nextResult = A2(
			$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
			rest,
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));
		var newDeclarations = function () {
			var _v14 = _Utils_Tuple2(
				$elm$core$List$head(nextResult),
				$rtfeldman$elm_css$Css$Preprocess$Resolve$last(declarations));
			if ((_v14.a.$ === 'Just') && (_v14.b.$ === 'Just')) {
				var nextResultParent = _v14.a.a;
				var originalParent = _v14.b.a;
				return _Utils_ap(
					A2(
						$elm$core$List$take,
						$elm$core$List$length(declarations) - 1,
						declarations),
					_List_fromArray(
						[
							(!_Utils_eq(originalParent, nextResultParent)) ? nextResultParent : originalParent
						]));
			} else {
				return declarations;
			}
		}();
		var insertStylesToNestedDecl = function (lastDecl) {
			return $elm$core$List$concat(
				A2(
					$rtfeldman$elm_css$Css$Structure$mapLast,
					$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles(nestedStyles),
					A2(
						$elm$core$List$map,
						$elm$core$List$singleton,
						A2($rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, f, lastDecl))));
		};
		var initialResult = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				insertStylesToNestedDecl,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));
		return _Utils_ap(
			newDeclarations,
			_Utils_ap(
				withoutParent(initialResult),
				withoutParent(nextResult)));
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles = F2(
	function (styles, declarations) {
		if (!styles.b) {
			return declarations;
		} else {
			switch (styles.a.$) {
				case 'AppendProperty':
					var property = styles.a.a;
					var rest = styles.b;
					return A2(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
						rest,
						A2($rtfeldman$elm_css$Css$Structure$appendProperty, property, declarations));
				case 'ExtendSelector':
					var _v4 = styles.a;
					var selector = _v4.a;
					var nestedStyles = _v4.b;
					var rest = styles.b;
					return A4(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,
						nestedStyles,
						rest,
						$rtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector(selector),
						declarations);
				case 'NestSnippet':
					var _v5 = styles.a;
					var selectorCombinator = _v5.a;
					var snippets = _v5.b;
					var rest = styles.b;
					var chain = F2(
						function (_v9, _v10) {
							var originalSequence = _v9.a;
							var originalTuples = _v9.b;
							var originalPseudoElement = _v9.c;
							var newSequence = _v10.a;
							var newTuples = _v10.b;
							var newPseudoElement = _v10.c;
							return A3(
								$rtfeldman$elm_css$Css$Structure$Selector,
								originalSequence,
								_Utils_ap(
									originalTuples,
									A2(
										$elm$core$List$cons,
										_Utils_Tuple2(selectorCombinator, newSequence),
										newTuples)),
								$rtfeldman$elm_css$Css$Preprocess$Resolve$oneOf(
									_List_fromArray(
										[newPseudoElement, originalPseudoElement])));
						});
					var expandDeclaration = function (declaration) {
						switch (declaration.$) {
							case 'StyleBlockDeclaration':
								var _v7 = declaration.a;
								var firstSelector = _v7.a;
								var otherSelectors = _v7.b;
								var nestedStyles = _v7.c;
								var newSelectors = A2(
									$elm$core$List$concatMap,
									function (originalSelector) {
										return A2(
											$elm$core$List$map,
											chain(originalSelector),
											A2($elm$core$List$cons, firstSelector, otherSelectors));
									},
									$rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations));
								var newDeclarations = function () {
									if (!newSelectors.b) {
										return _List_Nil;
									} else {
										var first = newSelectors.a;
										var remainder = newSelectors.b;
										return _List_fromArray(
											[
												$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
												A3($rtfeldman$elm_css$Css$Structure$StyleBlock, first, remainder, _List_Nil))
											]);
									}
								}();
								return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, nestedStyles, newDeclarations);
							case 'MediaRule':
								var mediaQueries = declaration.a;
								var styleBlocks = declaration.b;
								return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);
							case 'SupportsRule':
								var str = declaration.a;
								var otherSnippets = declaration.b;
								return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, otherSnippets);
							case 'DocumentRule':
								var str1 = declaration.a;
								var str2 = declaration.b;
								var str3 = declaration.c;
								var str4 = declaration.d;
								var styleBlock = declaration.e;
								return A2(
									$elm$core$List$map,
									A4($rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),
									$rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));
							case 'PageRule':
								var str = declaration.a;
								var properties = declaration.b;
								return _List_fromArray(
									[
										A2($rtfeldman$elm_css$Css$Structure$PageRule, str, properties)
									]);
							case 'FontFace':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$FontFace(properties)
									]);
							case 'Viewport':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$Viewport(properties)
									]);
							case 'CounterStyle':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$CounterStyle(properties)
									]);
							default:
								var tuples = declaration.a;
								return $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);
						}
					};
					return $elm$core$List$concat(
						_Utils_ap(
							_List_fromArray(
								[
									A2($rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations)
								]),
							A2(
								$elm$core$List$map,
								expandDeclaration,
								A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets))));
				case 'WithPseudoElement':
					var _v11 = styles.a;
					var pseudoElement = _v11.a;
					var nestedStyles = _v11.b;
					var rest = styles.b;
					return A4(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,
						nestedStyles,
						rest,
						$rtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector(pseudoElement),
						declarations);
				case 'WithKeyframes':
					var str = styles.a.a;
					var rest = styles.b;
					var name = $rtfeldman$elm_css$Hash$fromString(str);
					var newProperty = 'animation-name:' + name;
					var newDeclarations = A2(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
						rest,
						A2($rtfeldman$elm_css$Css$Structure$appendProperty, newProperty, declarations));
					return A2(
						$elm$core$List$append,
						newDeclarations,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Structure$Keyframes(
								{declaration: str, name: name})
							]));
				case 'WithMedia':
					var _v12 = styles.a;
					var mediaQueries = _v12.a;
					var nestedStyles = _v12.b;
					var rest = styles.b;
					var extraDeclarations = function () {
						var _v13 = $rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations);
						if (!_v13.b) {
							return _List_Nil;
						} else {
							var firstSelector = _v13.a;
							var otherSelectors = _v13.b;
							return A2(
								$elm$core$List$map,
								$rtfeldman$elm_css$Css$Structure$styleBlockToMediaRule(mediaQueries),
								A2(
									$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
									nestedStyles,
									$elm$core$List$singleton(
										$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
											A3($rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil)))));
						}
					}();
					return _Utils_ap(
						A2($rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations),
						extraDeclarations);
				default:
					var otherStyles = styles.a.a;
					var rest = styles.b;
					return A2(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
						_Utils_ap(otherStyles, rest),
						declarations);
			}
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock = function (_v2) {
	var firstSelector = _v2.a;
	var otherSelectors = _v2.b;
	var styles = _v2.c;
	return A2(
		$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
		styles,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
				A3($rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil))
			]));
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$extract = function (snippetDeclarations) {
	if (!snippetDeclarations.b) {
		return _List_Nil;
	} else {
		var first = snippetDeclarations.a;
		var rest = snippetDeclarations.b;
		return _Utils_ap(
			$rtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations(first),
			$rtfeldman$elm_css$Css$Preprocess$Resolve$extract(rest));
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule = F2(
	function (mediaQueries, styleBlocks) {
		var handleStyleBlock = function (styleBlock) {
			return A2(
				$elm$core$List$map,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),
				$rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));
		};
		return A2($elm$core$List$concatMap, handleStyleBlock, styleBlocks);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule = F2(
	function (str, snippets) {
		var declarations = $rtfeldman$elm_css$Css$Preprocess$Resolve$extract(
			A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));
		return _List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$Structure$SupportsRule, str, declarations)
			]);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations = function (snippetDeclaration) {
	switch (snippetDeclaration.$) {
		case 'StyleBlockDeclaration':
			var styleBlock = snippetDeclaration.a;
			return $rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock);
		case 'MediaRule':
			var mediaQueries = snippetDeclaration.a;
			var styleBlocks = snippetDeclaration.b;
			return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);
		case 'SupportsRule':
			var str = snippetDeclaration.a;
			var snippets = snippetDeclaration.b;
			return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, snippets);
		case 'DocumentRule':
			var str1 = snippetDeclaration.a;
			var str2 = snippetDeclaration.b;
			var str3 = snippetDeclaration.c;
			var str4 = snippetDeclaration.d;
			var styleBlock = snippetDeclaration.e;
			return A2(
				$elm$core$List$map,
				A4($rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),
				$rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));
		case 'PageRule':
			var str = snippetDeclaration.a;
			var properties = snippetDeclaration.b;
			return _List_fromArray(
				[
					A2($rtfeldman$elm_css$Css$Structure$PageRule, str, properties)
				]);
		case 'FontFace':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$FontFace(properties)
				]);
		case 'Viewport':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$Viewport(properties)
				]);
		case 'CounterStyle':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$CounterStyle(properties)
				]);
		default:
			var tuples = snippetDeclaration.a;
			return $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toStructure = function (_v0) {
	var charset = _v0.charset;
	var imports = _v0.imports;
	var namespaces = _v0.namespaces;
	var snippets = _v0.snippets;
	var declarations = $rtfeldman$elm_css$Css$Preprocess$Resolve$extract(
		A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));
	return {charset: charset, declarations: declarations, imports: imports, namespaces: namespaces};
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$compileHelp = function (sheet) {
	return $rtfeldman$elm_css$Css$Structure$Output$prettyPrint(
		$rtfeldman$elm_css$Css$Structure$compactStylesheet(
			$rtfeldman$elm_css$Css$Preprocess$Resolve$toStructure(sheet)));
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$compile = function (styles) {
	return A2(
		$elm$core$String$join,
		'\n\n',
		A2($elm$core$List$map, $rtfeldman$elm_css$Css$Preprocess$Resolve$compileHelp, styles));
};
var $rtfeldman$elm_css$Css$Structure$ClassSelector = function (a) {
	return {$: 'ClassSelector', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$Snippet = function (a) {
	return {$: 'Snippet', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$StyleBlock = F3(
	function (a, b, c) {
		return {$: 'StyleBlock', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration = function (a) {
	return {$: 'StyleBlockDeclaration', a: a};
};
var $rtfeldman$elm_css$VirtualDom$Styled$makeSnippet = F2(
	function (styles, sequence) {
		var selector = A3($rtfeldman$elm_css$Css$Structure$Selector, sequence, _List_Nil, $elm$core$Maybe$Nothing);
		return $rtfeldman$elm_css$Css$Preprocess$Snippet(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration(
					A3($rtfeldman$elm_css$Css$Preprocess$StyleBlock, selector, _List_Nil, styles))
				]));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$snippetFromPair = function (_v0) {
	var classname = _v0.a;
	var styles = _v0.b;
	return A2(
		$rtfeldman$elm_css$VirtualDom$Styled$makeSnippet,
		styles,
		$rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$ClassSelector(classname)
				])));
};
var $rtfeldman$elm_css$Css$Preprocess$stylesheet = function (snippets) {
	return {charset: $elm$core$Maybe$Nothing, imports: _List_Nil, namespaces: _List_Nil, snippets: snippets};
};
var $rtfeldman$elm_css$VirtualDom$Styled$toDeclaration = function (dict) {
	return $rtfeldman$elm_css$Css$Preprocess$Resolve$compile(
		$elm$core$List$singleton(
			$rtfeldman$elm_css$Css$Preprocess$stylesheet(
				A2(
					$elm$core$List$map,
					$rtfeldman$elm_css$VirtualDom$Styled$snippetFromPair,
					$elm$core$Dict$toList(dict)))));
};
var $rtfeldman$elm_css$VirtualDom$Styled$toStyleNode = function (styles) {
	return A3(
		$elm$virtual_dom$VirtualDom$node,
		'span',
		_List_Nil,
		_List_fromArray(
			[
				A3(
				$elm$virtual_dom$VirtualDom$node,
				'style',
				_List_Nil,
				$elm$core$List$singleton(
					$elm$virtual_dom$VirtualDom$text(
						$rtfeldman$elm_css$VirtualDom$Styled$toDeclaration(styles))))
			]));
};
var $rtfeldman$elm_css$VirtualDom$Styled$unstyle = F3(
	function (elemType, properties, children) {
		var unstyledProperties = A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);
		var initialStyles = $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			children);
		var childNodes = _v0.a;
		var styles = _v0.b;
		var styleNode = $rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(styles);
		return A3(
			$elm$virtual_dom$VirtualDom$node,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				styleNode,
				$elm$core$List$reverse(childNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$containsKey = F2(
	function (key, pairs) {
		containsKey:
		while (true) {
			if (!pairs.b) {
				return false;
			} else {
				var _v1 = pairs.a;
				var str = _v1.a;
				var rest = pairs.b;
				if (_Utils_eq(key, str)) {
					return true;
				} else {
					var $temp$key = key,
						$temp$pairs = rest;
					key = $temp$key;
					pairs = $temp$pairs;
					continue containsKey;
				}
			}
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey = F2(
	function (_default, pairs) {
		getUnusedKey:
		while (true) {
			if (!pairs.b) {
				return _default;
			} else {
				var _v1 = pairs.a;
				var firstKey = _v1.a;
				var rest = pairs.b;
				var newKey = '_' + firstKey;
				if (A2($rtfeldman$elm_css$VirtualDom$Styled$containsKey, newKey, rest)) {
					var $temp$default = newKey,
						$temp$pairs = rest;
					_default = $temp$default;
					pairs = $temp$pairs;
					continue getUnusedKey;
				} else {
					return newKey;
				}
			}
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode = F2(
	function (allStyles, keyedChildNodes) {
		var styleNodeKey = A2($rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey, '_', keyedChildNodes);
		var finalNode = $rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(allStyles);
		return _Utils_Tuple2(styleNodeKey, finalNode);
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed = F3(
	function (elemType, properties, keyedChildren) {
		var unstyledProperties = A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);
		var initialStyles = $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			keyedChildren);
		var keyedChildNodes = _v0.a;
		var styles = _v0.b;
		var keyedStyleNode = A2($rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, styles, keyedChildNodes);
		return A3(
			$elm$virtual_dom$VirtualDom$keyedNode,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				keyedStyleNode,
				$elm$core$List$reverse(keyedChildNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS = F4(
	function (ns, elemType, properties, keyedChildren) {
		var unstyledProperties = A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);
		var initialStyles = $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			keyedChildren);
		var keyedChildNodes = _v0.a;
		var styles = _v0.b;
		var keyedStyleNode = A2($rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, styles, keyedChildNodes);
		return A4(
			$elm$virtual_dom$VirtualDom$keyedNodeNS,
			ns,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				keyedStyleNode,
				$elm$core$List$reverse(keyedChildNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyleNS = F4(
	function (ns, elemType, properties, children) {
		var unstyledProperties = A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);
		var initialStyles = $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			children);
		var childNodes = _v0.a;
		var styles = _v0.b;
		var styleNode = $rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(styles);
		return A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			ns,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				styleNode,
				$elm$core$List$reverse(childNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled = function (vdom) {
	switch (vdom.$) {
		case 'Unstyled':
			var plainNode = vdom.a;
			return plainNode;
		case 'Node':
			var elemType = vdom.a;
			var properties = vdom.b;
			var children = vdom.c;
			return A3($rtfeldman$elm_css$VirtualDom$Styled$unstyle, elemType, properties, children);
		case 'NodeNS':
			var ns = vdom.a;
			var elemType = vdom.b;
			var properties = vdom.c;
			var children = vdom.d;
			return A4($rtfeldman$elm_css$VirtualDom$Styled$unstyleNS, ns, elemType, properties, children);
		case 'KeyedNode':
			var elemType = vdom.a;
			var properties = vdom.b;
			var children = vdom.c;
			return A3($rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed, elemType, properties, children);
		default:
			var ns = vdom.a;
			var elemType = vdom.b;
			var properties = vdom.c;
			var children = vdom.d;
			return A4($rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS, ns, elemType, properties, children);
	}
};
var $rtfeldman$elm_css$Html$Styled$toUnstyled = $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled;
var $author$project$Main$AwardPage = function (a) {
	return {$: 'AwardPage', a: a};
};
var $author$project$Main$InfoPage = function (a) {
	return {$: 'InfoPage', a: a};
};
var $author$project$Main$ListenPage = function (a) {
	return {$: 'ListenPage', a: a};
};
var $author$project$Main$MarketPage = function (a) {
	return {$: 'MarketPage', a: a};
};
var $author$project$Main$PrintPage = function (a) {
	return {$: 'PrintPage', a: a};
};
var $author$project$Main$PronPage = function (a) {
	return {$: 'PronPage', a: a};
};
var $author$project$Main$QuestionPage = function (a) {
	return {$: 'QuestionPage', a: a};
};
var $author$project$Main$RankingPage = function (a) {
	return {$: 'RankingPage', a: a};
};
var $author$project$Main$RoadMapPage = function (a) {
	return {$: 'RoadMapPage', a: a};
};
var $author$project$Main$SearchPage = function (a) {
	return {$: 'SearchPage', a: a};
};
var $author$project$Main$SentencePage = function (a) {
	return {$: 'SentencePage', a: a};
};
var $author$project$Main$TapGamePage = function (a) {
	return {$: 'TapGamePage', a: a};
};
var $author$project$Main$ValidatePage = function (a) {
	return {$: 'ValidatePage', a: a};
};
var $author$project$Main$VocaPage = function (a) {
	return {$: 'VocaPage', a: a};
};
var $author$project$DataManage$InfoData = F9(
	function (videoId, name, songNameJp, songNameKor, artistJp, artistKor, info, aVid, bVid) {
		return {aVid: aVid, artistJp: artistJp, artistKor: artistKor, bVid: bVid, info: info, name: name, songNameJp: songNameJp, songNameKor: songNameKor, videoId: videoId};
	});
var $author$project$DataManage$infoDataDecoder = A4(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
	'bVid',
	$elm$json$Json$Decode$string,
	'',
	A4(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
		'aVid',
		$elm$json$Json$Decode$string,
		'',
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'info',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'artistKor',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'artistJp',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'songNameKor',
						$elm$json$Json$Decode$string,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'songNameJp',
							$elm$json$Json$Decode$string,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'name',
								$elm$json$Json$Decode$string,
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'videoId',
									$elm$json$Json$Decode$string,
									$elm$json$Json$Decode$succeed($author$project$DataManage$InfoData))))))))));
var $author$project$DataManage$ListenData = F4(
	function (isPV, name, videoId, cardList) {
		return {cardList: cardList, isPV: isPV, name: name, videoId: videoId};
	});
var $author$project$DataManage$ListenCard = F8(
	function (startTime, endTime, rubiedText, pron, text, kor, comment, words) {
		return {comment: comment, endTime: endTime, kor: kor, pron: pron, rubiedText: rubiedText, startTime: startTime, text: text, words: words};
	});
var $author$project$DataManage$isSpeedDecode = true;
var $author$project$DataManage$listenCardDecoder = $author$project$DataManage$isSpeedDecode ? A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'w',
	$elm$json$Json$Decode$string,
	A4(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
		'c',
		$elm$json$Json$Decode$string,
		'',
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'k',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				't',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'p',
					$elm$json$Json$Decode$string,
					A4(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
						'r',
						$elm$json$Json$Decode$string,
						'',
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'e',
							$elm$json$Json$Decode$int,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								's',
								$elm$json$Json$Decode$int,
								$elm$json$Json$Decode$succeed($author$project$DataManage$ListenCard))))))))) : A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'words',
	$elm$json$Json$Decode$string,
	A4(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
		'comment',
		$elm$json$Json$Decode$string,
		'',
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'kor',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'text',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'pron',
					$elm$json$Json$Decode$string,
					A4(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
						'rubiedText',
						$elm$json$Json$Decode$string,
						'',
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'endTime',
							$elm$json$Json$Decode$int,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'startTime',
								$elm$json$Json$Decode$int,
								$elm$json$Json$Decode$succeed($author$project$DataManage$ListenCard)))))))));
var $author$project$DataManage$listenDataDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'cardList',
	$elm$json$Json$Decode$list($author$project$DataManage$listenCardDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'videoId',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'name',
			$elm$json$Json$Decode$string,
			A4(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
				'isPV',
				$elm$json$Json$Decode$bool,
				false,
				$elm$json$Json$Decode$succeed($author$project$DataManage$ListenData)))));
var $author$project$DataManage$PronData = F3(
	function (videoId, name, cardList) {
		return {cardList: cardList, name: name, videoId: videoId};
	});
var $author$project$DataManage$PronCard = F2(
	function (wordHead, kanjiWord) {
		return {kanjiWord: kanjiWord, wordHead: wordHead};
	});
var $author$project$DataManage$DesWord = F4(
	function (word, pron, des, canMerge) {
		return {canMerge: canMerge, des: des, pron: pron, word: word};
	});
var $author$project$DataManage$desWordDecoder = $author$project$DataManage$isSpeedDecode ? A4(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
	'c',
	$elm$json$Json$Decode$bool,
	false,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'd',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'p',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'w',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$DataManage$DesWord))))) : A4(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
	'canMerge',
	$elm$json$Json$Decode$bool,
	false,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'des',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'pron',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'word',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$DataManage$DesWord)))));
var $author$project$DataManage$pronCardDecoder = $author$project$DataManage$isSpeedDecode ? A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'k',
	$elm$json$Json$Decode$list($author$project$DataManage$desWordDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'w',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed($author$project$DataManage$PronCard))) : A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'kanjiWord',
	$elm$json$Json$Decode$list($author$project$DataManage$desWordDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'wordHead',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed($author$project$DataManage$PronCard)));
var $author$project$DataManage$pronDataDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'cardList',
	$elm$json$Json$Decode$list($author$project$DataManage$pronCardDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'name',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'videoId',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$DataManage$PronData))));
var $author$project$DataManage$SentenceData = F3(
	function (videoId, name, cardList) {
		return {cardList: cardList, name: name, videoId: videoId};
	});
var $author$project$DataManage$SentenceCard = F4(
	function (kor, wordList, startTime, endTime) {
		return {endTime: endTime, kor: kor, startTime: startTime, wordList: wordList};
	});
var $author$project$DataManage$sentenceCardDecoder = $author$project$DataManage$isSpeedDecode ? A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'e',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		's',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'w',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'k',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$DataManage$SentenceCard))))) : A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'endTime',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'startTime',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'wordList',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'kor',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$DataManage$SentenceCard)))));
var $author$project$DataManage$sentenceDataDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'cardList',
	$elm$json$Json$Decode$list($author$project$DataManage$sentenceCardDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'name',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'videoId',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$DataManage$SentenceData))));
var $author$project$DataManage$TapGameData = F4(
	function (name, videoId, cardList, videoEndTime) {
		return {cardList: cardList, name: name, videoEndTime: videoEndTime, videoId: videoId};
	});
var $author$project$DataManage$TapGameCard = F4(
	function (endTime, pron, word, desc) {
		return {desc: desc, endTime: endTime, pron: pron, word: word};
	});
var $author$project$DataManage$tapGameCardDecoder = $author$project$DataManage$isSpeedDecode ? A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'd',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'w',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'p',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'e',
				$elm$json$Json$Decode$int,
				$elm$json$Json$Decode$succeed($author$project$DataManage$TapGameCard))))) : A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'desc',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'word',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'pron',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'endTime',
				$elm$json$Json$Decode$int,
				$elm$json$Json$Decode$succeed($author$project$DataManage$TapGameCard)))));
var $author$project$DataManage$tapGameDataDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'videoEndTime',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'cardList',
		$elm$json$Json$Decode$list($author$project$DataManage$tapGameCardDecoder),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'videoId',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'name',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$DataManage$TapGameData)))));
var $author$project$DataManage$VideoData = F7(
	function (videoId, name, imageSrc, tags, category, searchWords, difficulty) {
		return {category: category, difficulty: difficulty, imageSrc: imageSrc, name: name, searchWords: searchWords, tags: tags, videoId: videoId};
	});
var $author$project$DataManage$videoDataDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'difficulty',
	$elm$json$Json$Decode$string,
	A4(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
		'searchWords',
		$elm$json$Json$Decode$string,
		'',
		A4(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
			'category',
			$elm$json$Json$Decode$string,
			'',
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'tags',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'imageSrc',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'name',
						$elm$json$Json$Decode$string,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'videoId',
							$elm$json$Json$Decode$string,
							$elm$json$Json$Decode$succeed($author$project$DataManage$VideoData))))))));
var $author$project$DataManage$VocaData = F3(
	function (videoId, name, cardList) {
		return {cardList: cardList, name: name, videoId: videoId};
	});
var $author$project$DataManage$VocaCard = F5(
	function (rubyList, pron, word, kor, kanjiInfo) {
		return {kanjiInfo: kanjiInfo, kor: kor, pron: pron, rubyList: rubyList, word: word};
	});
var $author$project$DataManage$VocaRuby = F2(
	function (r, w) {
		return {r: r, w: w};
	});
var $author$project$DataManage$vocaRubyDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'w',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'r',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed($author$project$DataManage$VocaRuby)));
var $author$project$DataManage$vocaCardDecoder = $author$project$DataManage$isSpeedDecode ? A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'i',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'k',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'w',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'p',
				$elm$json$Json$Decode$string,
				A4(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
					'r',
					$elm$json$Json$Decode$list($author$project$DataManage$vocaRubyDecoder),
					_List_Nil,
					$elm$json$Json$Decode$succeed($author$project$DataManage$VocaCard)))))) : A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'kanjiInfo',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'kor',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'word',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'pron',
				$elm$json$Json$Decode$string,
				A4(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
					'rubyList',
					$elm$json$Json$Decode$list($author$project$DataManage$vocaRubyDecoder),
					_List_Nil,
					$elm$json$Json$Decode$succeed($author$project$DataManage$VocaCard))))));
var $author$project$DataManage$vocaDataDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'cardList',
	$elm$json$Json$Decode$list($author$project$DataManage$vocaCardDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'name',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'videoId',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$DataManage$VocaData))));
var $author$project$DataManage$appDataDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'info',
	$elm$json$Json$Decode$list($author$project$DataManage$infoDataDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'voca',
		$elm$json$Json$Decode$list($author$project$DataManage$vocaDataDecoder),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'sentence',
			$elm$json$Json$Decode$list($author$project$DataManage$sentenceDataDecoder),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'pron',
				$elm$json$Json$Decode$list($author$project$DataManage$pronDataDecoder),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'video',
					$elm$json$Json$Decode$list($author$project$DataManage$videoDataDecoder),
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'tapGame',
						$elm$json$Json$Decode$list($author$project$DataManage$tapGameDataDecoder),
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'listen',
							$elm$json$Json$Decode$list($author$project$DataManage$listenDataDecoder),
							$elm$json$Json$Decode$succeed($author$project$DataManage$AppData))))))));
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$DataManage$isSpeedEncode = true;
var $author$project$DataManage$encodeDesWord = function (desWord) {
	return $author$project$DataManage$isSpeedEncode ? $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'w',
				$elm$json$Json$Encode$string(desWord.word)),
				_Utils_Tuple2(
				'p',
				$elm$json$Json$Encode$string(desWord.pron)),
				_Utils_Tuple2(
				'd',
				$elm$json$Json$Encode$string(desWord.des)),
				_Utils_Tuple2(
				'c',
				$elm$json$Json$Encode$bool(desWord.canMerge))
			])) : $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'word',
				$elm$json$Json$Encode$string(desWord.word)),
				_Utils_Tuple2(
				'pron',
				$elm$json$Json$Encode$string(desWord.pron)),
				_Utils_Tuple2(
				'des',
				$elm$json$Json$Encode$string(desWord.des)),
				_Utils_Tuple2(
				'canMerge',
				$elm$json$Json$Encode$bool(desWord.canMerge))
			]));
};
var $author$project$DataManage$encodePronCard = function (pronCard) {
	return $author$project$DataManage$isSpeedEncode ? $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'w',
				$elm$json$Json$Encode$string(pronCard.wordHead)),
				_Utils_Tuple2(
				'k',
				A2($elm$json$Json$Encode$list, $author$project$DataManage$encodeDesWord, pronCard.kanjiWord))
			])) : $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'wordHead',
				$elm$json$Json$Encode$string(pronCard.wordHead)),
				_Utils_Tuple2(
				'kanjiWord',
				A2($elm$json$Json$Encode$list, $author$project$DataManage$encodeDesWord, pronCard.kanjiWord))
			]));
};
var $author$project$DataManage$encodePronData = function (pronData) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'videoId',
				$elm$json$Json$Encode$string(pronData.videoId)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(pronData.name)),
				_Utils_Tuple2(
				'cardList',
				A2($elm$json$Json$Encode$list, $author$project$DataManage$encodePronCard, pronData.cardList))
			]));
};
var $author$project$AwardPage$GotBookmarkStrList = function (a) {
	return {$: 'GotBookmarkStrList', a: a};
};
var $author$project$AwardPage$GotProgressList = function (a) {
	return {$: 'GotProgressList', a: a};
};
var $author$project$AwardPage$NoModal = {$: 'NoModal'};
var $author$project$AwardPage$Award = F7(
	function (videoId, videoName, name, level, points, date, key) {
		return {date: date, key: key, level: level, name: name, points: points, videoId: videoId, videoName: videoName};
	});
var $author$project$AwardPage$emptyAward = A7($author$project$AwardPage$Award, '', '', '', 0, 0, '', '');
var $author$project$GlobalPort$getBookmarkKey = function (videoId) {
	return 'BOOKMARK' + videoId;
};
var $author$project$LocalStorage$getProgressList = $lobanov$elm_taskport$TaskPort$callNS(
	{
		argsEncoder: $elm$json$Json$Encode$list($elm$json$Json$Encode$string),
		_function: $author$project$LocalStorage$inNS('getProgressList'),
		valueDecoder: $elm$json$Json$Decode$value
	});
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $author$project$AwardPage$init = F2(
	function (token, data) {
		return _Utils_Tuple2(
			{appData: data, awardList: _List_Nil, bookmarkData: _List_Nil, isModalOpen: false, modalType: $author$project$AwardPage$NoModal, points: 21000, progressList: _List_Nil, ranking: 1, requestedAward: $author$project$AwardPage$emptyAward, selectedBookmarkVid: '', selectedCategory: '전체', typeRequested: '', userName: '김준수', videoList: data.video, zone: $elm$time$Time$utc},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2(
						$elm$core$Task$attempt,
						function (v) {
							if (v.$ === 'Ok') {
								var o = v.a;
								return $author$project$AwardPage$GotProgressList(
									A2(
										$elm$core$Result$withDefault,
										_List_Nil,
										A2(
											$elm$json$Json$Decode$decodeValue,
											$elm$json$Json$Decode$list(
												$elm$json$Json$Decode$list($author$project$GlobalPort$progressDecoder)),
											o)));
							} else {
								return $author$project$AwardPage$GotProgressList(_List_Nil);
							}
						},
						$author$project$LocalStorage$getProgressList(
							A2(
								$elm$core$List$map,
								function ($) {
									return $.videoId;
								},
								data.video))),
						A2(
						$elm$core$Task$attempt,
						function (result) {
							return $author$project$AwardPage$GotBookmarkStrList(
								A2(
									$elm$core$List$filterMap,
									$elm$core$Basics$identity,
									A2($elm$core$Result$withDefault, _List_Nil, result)));
						},
						$elm$core$Task$sequence(
							A2(
								$elm$core$List$map,
								$elm$core$Task$onError(
									function (_v1) {
										return $elm$core$Task$succeed($elm$core$Maybe$Nothing);
									}),
								A2(
									$elm$core$List$map,
									function (video) {
										return $author$project$LocalStorage$localGet(
											$author$project$GlobalPort$getBookmarkKey(video.videoId));
									},
									data.video))))
					])));
	});
var $author$project$DataManage$encodeInfoData = function (infoData) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'videoId',
				$elm$json$Json$Encode$string(infoData.videoId)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(infoData.name)),
				_Utils_Tuple2(
				'songNameJp',
				$elm$json$Json$Encode$string(infoData.songNameJp)),
				_Utils_Tuple2(
				'songNameKor',
				$elm$json$Json$Encode$string(infoData.songNameKor)),
				_Utils_Tuple2(
				'artistJp',
				$elm$json$Json$Encode$string(infoData.artistJp)),
				_Utils_Tuple2(
				'artistKor',
				$elm$json$Json$Encode$string(infoData.artistKor)),
				_Utils_Tuple2(
				'info',
				$elm$json$Json$Encode$string(infoData.info)),
				_Utils_Tuple2(
				'aVid',
				$elm$json$Json$Encode$string(infoData.aVid)),
				_Utils_Tuple2(
				'bVid',
				$elm$json$Json$Encode$string(infoData.bVid))
			]));
};
var $author$project$DataManage$emptyInfoData = A9($author$project$DataManage$InfoData, '', '', '', '', '', '', '', '', '');
var $author$project$DataManage$getInfoData = F2(
	function (videoId, appData) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyInfoData,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (x) {
						return _Utils_eq(x.videoId, videoId);
					},
					appData.info)));
	});
var $author$project$UrlManage$infoPageKey = 'info';
var $author$project$UrlManage$pushPageUrl = F2(
	function (v, page) {
		return $author$project$UrlManage$pushUrl('?v=' + (v + ('&p=' + page)));
	});
var $author$project$InfoPage$init = F2(
	function (vid, appData) {
		var data = A2($author$project$DataManage$getInfoData, vid, appData);
		return _Utils_Tuple2(
			{
				data: data,
				editableValue: $author$project$EditableValue$decode(
					$author$project$DataManage$encodeInfoData(data))
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($author$project$GlobalPort$logCmd, 'info_page', data.name),
						A2($author$project$UrlManage$pushPageUrl, vid, $author$project$UrlManage$infoPageKey)
					])));
	});
var $author$project$ListenPage$GotDate = function (a) {
	return {$: 'GotDate', a: a};
};
var $author$project$ListenPage$GotKeyWordStr = function (a) {
	return {$: 'GotKeyWordStr', a: a};
};
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$DataManage$encodeListenCard = function (listenCard) {
	return $author$project$DataManage$isSpeedEncode ? $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				's',
				$elm$json$Json$Encode$int(listenCard.startTime)),
				_Utils_Tuple2(
				'e',
				$elm$json$Json$Encode$int(listenCard.endTime)),
				_Utils_Tuple2(
				'r',
				$elm$json$Json$Encode$string(listenCard.rubiedText)),
				_Utils_Tuple2(
				'p',
				$elm$json$Json$Encode$string(listenCard.pron)),
				_Utils_Tuple2(
				't',
				$elm$json$Json$Encode$string(listenCard.text)),
				_Utils_Tuple2(
				'k',
				$elm$json$Json$Encode$string(listenCard.kor)),
				_Utils_Tuple2(
				'c',
				$elm$json$Json$Encode$string(listenCard.comment)),
				_Utils_Tuple2(
				'w',
				$elm$json$Json$Encode$string(listenCard.words))
			])) : $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'startTime',
				$elm$json$Json$Encode$int(listenCard.startTime)),
				_Utils_Tuple2(
				'endTime',
				$elm$json$Json$Encode$int(listenCard.endTime)),
				_Utils_Tuple2(
				'rubiedText',
				$elm$json$Json$Encode$string(listenCard.rubiedText)),
				_Utils_Tuple2(
				'pron',
				$elm$json$Json$Encode$string(listenCard.pron)),
				_Utils_Tuple2(
				'text',
				$elm$json$Json$Encode$string(listenCard.text)),
				_Utils_Tuple2(
				'kor',
				$elm$json$Json$Encode$string(listenCard.kor)),
				_Utils_Tuple2(
				'comment',
				$elm$json$Json$Encode$string(listenCard.comment)),
				_Utils_Tuple2(
				'words',
				$elm$json$Json$Encode$string(listenCard.words))
			]));
};
var $author$project$DataManage$encodeListenData = function (listenData) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'isPV',
				$elm$json$Json$Encode$bool(listenData.isPV)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(listenData.name)),
				_Utils_Tuple2(
				'videoId',
				$elm$json$Json$Encode$string(listenData.videoId)),
				_Utils_Tuple2(
				'cardList',
				A2($elm$json$Json$Encode$list, $author$project$DataManage$encodeListenCard, listenData.cardList))
			]));
};
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $author$project$TimeHelper$getDate = A2(
	$elm$core$Task$map,
	function (t) {
		return $elm$time$Time$posixToMillis(t);
	},
	$elm$time$Time$now);
var $author$project$DataManage$emptyListenCard = {comment: '', endTime: 0, kor: '', pron: '', rubiedText: '', startTime: 0, text: '', words: ''};
var $author$project$DataManage$emptyListenData = A4(
	$author$project$DataManage$ListenData,
	false,
	'',
	'',
	_List_fromArray(
		[$author$project$DataManage$emptyListenCard]));
var $author$project$DataManage$getListenData = F2(
	function (videoId, appData) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyListenData,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (x) {
						return _Utils_eq(x.videoId, videoId);
					},
					appData.listen)));
	});
var $author$project$Utility$getLocal = F2(
	function (key, msg) {
		return A2(
			$elm$core$Task$attempt,
			function (v) {
				if ((v.$ === 'Ok') && (v.a.$ === 'Just')) {
					var str = v.a.a;
					return msg(str);
				} else {
					return msg('');
				}
			},
			$author$project$LocalStorage$localGet(key));
	});
var $author$project$UrlManage$listenPageKey = 'listen';
var $author$project$GlobalPort$loadVideoCmd = function (videoId) {
	return $author$project$GlobalPort$sendToPlayer(
		A2(
			$author$project$GlobalPort$TaggedData,
			'loadVideo',
			$elm$json$Json$Encode$string(videoId)));
};
var $author$project$GlobalPort$openYoutubeCmd = $author$project$GlobalPort$sendToPlayer(
	A2($author$project$GlobalPort$TaggedData, 'openYoutube', $elm$json$Json$Encode$null));
var $author$project$ListenPage$HanMode = {$: 'HanMode'};
var $author$project$ListenPage$pMode = $author$project$ListenPage$HanMode;
var $author$project$GlobalPort$seekToMillisCmd = function (time) {
	return $author$project$GlobalPort$sendToPlayer(
		A2(
			$author$project$GlobalPort$TaggedData,
			'seekToMillis',
			$elm$json$Json$Encode$int(time)));
};
var $author$project$ListenPage$words2list = function (words) {
	return A2(
		$elm$core$List$map,
		$elm$core$String$split('\n'),
		A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
			A2($elm$core$String$split, '\n\n', words)));
};
var $author$project$ListenPage$init = F2(
	function (vid, appData) {
		var data = A2($author$project$DataManage$getListenData, vid, appData);
		return _Utils_Tuple2(
			{
				appData: appData,
				currentTime: 0,
				data: data,
				date: 0,
				editableValue: $author$project$EditableValue$decode(
					$author$project$DataManage$encodeListenData(data)),
				isComplete: false,
				isCompleteAlertOpen: false,
				isLoadSuccess: false,
				isLoopMode: false,
				jpFile: '',
				jpFileName: '',
				keyList: A2(
					$elm$core$List$map,
					function (x) {
						return _Utils_Tuple2(x, false);
					},
					$elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, v) {
									return A2(
										$elm$core$List$map,
										function (x) {
											return _Utils_ap(
												$elm$core$String$fromInt(i),
												$elm$core$String$concat(
													A2($elm$core$List$take, 2, x)));
										},
										$author$project$ListenPage$words2list(v.words));
								}),
							data.cardList))),
				korFile: '',
				korFileName: '',
				playerState: '',
				pronMode: $author$project$ListenPage$pMode,
				subArray: $elm$core$Array$fromList(data.cardList),
				subIdx: 0,
				timeShift: 0,
				videoDuration: 10
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$GlobalPort$loadVideoCmd(data.videoId),
						$author$project$GlobalPort$seekToMillisCmd(0),
						$author$project$GlobalPort$openYoutubeCmd,
						A2($author$project$Utility$getLocal, 'listen-' + data.videoId, $author$project$ListenPage$GotKeyWordStr),
						A2($author$project$GlobalPort$logCmd, 'listen_page', data.name),
						$author$project$GlobalPort$pageMoveCmd('listen_page'),
						A2($elm$core$Task$perform, $author$project$ListenPage$GotDate, $author$project$TimeHelper$getDate),
						A2($author$project$UrlManage$pushPageUrl, vid, $author$project$UrlManage$listenPageKey)
					])));
	});
var $author$project$MarketPage$init = _Utils_Tuple2(
	{isSubUser: false, tapCnt: 0},
	$elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[
				A2($author$project$GlobalPort$logCmd, 'market_page', ''),
				$author$project$GlobalPort$pageMoveCmd('market_page')
			])));
var $author$project$PronPage$GotSeed = function (a) {
	return {$: 'GotSeed', a: a};
};
var $author$project$ResultData$PronItem = F4(
	function (isRight, pron, word, meaning) {
		return {isRight: isRight, meaning: meaning, pron: pron, word: word};
	});
var $author$project$PronPage$QuizPlay = {$: 'QuizPlay'};
var $author$project$ResultData$PronResult = function (quizResult) {
	return {quizResult: quizResult};
};
var $author$project$ResultData$emptyPronResult = $author$project$ResultData$PronResult(_List_Nil);
var $elm$random$Random$Generate = function (a) {
	return {$: 'Generate', a: a};
};
var $elm$random$Random$Seed = F2(
	function (a, b) {
		return {$: 'Seed', a: a, b: b};
	});
var $elm$random$Random$next = function (_v0) {
	var state0 = _v0.a;
	var incr = _v0.b;
	return A2($elm$random$Random$Seed, ((state0 * 1664525) + incr) >>> 0, incr);
};
var $elm$random$Random$initialSeed = function (x) {
	var _v0 = $elm$random$Random$next(
		A2($elm$random$Random$Seed, 0, 1013904223));
	var state1 = _v0.a;
	var incr = _v0.b;
	var state2 = (state1 + x) >>> 0;
	return $elm$random$Random$next(
		A2($elm$random$Random$Seed, state2, incr));
};
var $elm$random$Random$init = A2(
	$elm$core$Task$andThen,
	function (time) {
		return $elm$core$Task$succeed(
			$elm$random$Random$initialSeed(
				$elm$time$Time$posixToMillis(time)));
	},
	$elm$time$Time$now);
var $elm$random$Random$step = F2(
	function (_v0, seed) {
		var generator = _v0.a;
		return generator(seed);
	});
var $elm$random$Random$onEffects = F3(
	function (router, commands, seed) {
		if (!commands.b) {
			return $elm$core$Task$succeed(seed);
		} else {
			var generator = commands.a.a;
			var rest = commands.b;
			var _v1 = A2($elm$random$Random$step, generator, seed);
			var value = _v1.a;
			var newSeed = _v1.b;
			return A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$random$Random$onEffects, router, rest, newSeed);
				},
				A2($elm$core$Platform$sendToApp, router, value));
		}
	});
var $elm$random$Random$onSelfMsg = F3(
	function (_v0, _v1, seed) {
		return $elm$core$Task$succeed(seed);
	});
var $elm$random$Random$Generator = function (a) {
	return {$: 'Generator', a: a};
};
var $elm$random$Random$map = F2(
	function (func, _v0) {
		var genA = _v0.a;
		return $elm$random$Random$Generator(
			function (seed0) {
				var _v1 = genA(seed0);
				var a = _v1.a;
				var seed1 = _v1.b;
				return _Utils_Tuple2(
					func(a),
					seed1);
			});
	});
var $elm$random$Random$cmdMap = F2(
	function (func, _v0) {
		var generator = _v0.a;
		return $elm$random$Random$Generate(
			A2($elm$random$Random$map, func, generator));
	});
_Platform_effectManagers['Random'] = _Platform_createManager($elm$random$Random$init, $elm$random$Random$onEffects, $elm$random$Random$onSelfMsg, $elm$random$Random$cmdMap);
var $elm$random$Random$command = _Platform_leaf('Random');
var $elm$random$Random$generate = F2(
	function (tagger, generator) {
		return $elm$random$Random$command(
			$elm$random$Random$Generate(
				A2($elm$random$Random$map, tagger, generator)));
	});
var $author$project$PronPage$CardInfo = F2(
	function (wordHead, kanjiWords) {
		return {kanjiWords: kanjiWords, wordHead: wordHead};
	});
var $author$project$PronPage$emptyCardInfo = A2($author$project$PronPage$CardInfo, '', _List_Nil);
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $author$project$PronPage$getCard = F2(
	function (cardIdx, info) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$PronPage$emptyCardInfo,
			A2($elm$core$Array$get, cardIdx, info.cardArray));
	});
var $author$project$DataManage$getKanjiWord = function (pronCard) {
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function ($) {
				return $.word;
			},
			pronCard.kanjiWord));
};
var $author$project$DataManage$emptyDesWord = A4($author$project$DataManage$DesWord, '', '', '', false);
var $author$project$DataManage$emptyPronCard = A2(
	$author$project$DataManage$PronCard,
	'',
	_List_fromArray(
		[$author$project$DataManage$emptyDesWord]));
var $author$project$DataManage$emptyPronData = A3(
	$author$project$DataManage$PronData,
	'',
	'',
	_List_fromArray(
		[$author$project$DataManage$emptyPronCard]));
var $author$project$DataManage$getPronData = F2(
	function (videoId, appData) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyPronData,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (x) {
						return _Utils_eq(x.videoId, videoId);
					},
					appData.pron)));
	});
var $elm$core$String$trim = _String_trim;
var $author$project$DataManage$getPronWord = function (pronCard) {
	return $elm$core$String$concat(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, _v1) {
					var word = _v0.word;
					var pron = _v0.pron;
					var canMerge = _v0.canMerge;
					var isPrevMerge = _v1.isPrevMerge;
					var result = _v1.result;
					return (isPrevMerge && canMerge) ? {isPrevMerge: canMerge, result: result} : ($elm$core$String$isEmpty(
						$elm$core$String$trim(pron)) ? {
						isPrevMerge: canMerge,
						result: _Utils_ap(
							result,
							_List_fromArray(
								[word]))
					} : {
						isPrevMerge: canMerge,
						result: _Utils_ap(
							result,
							_List_fromArray(
								[pron]))
					});
				}),
			{isPrevMerge: false, result: _List_Nil},
			pronCard.kanjiWord).result);
};
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Utility$wordbookSplit = function (n) {
	var aux = function (i) {
		return (_Utils_cmp(n, i + 30) < 0) ? _List_fromArray(
			[
				A2($elm$core$List$range, i + 1, n)
			]) : A2(
			$elm$core$List$cons,
			A2($elm$core$List$range, i + 1, i + 30),
			aux(i + 30));
	};
	var result = aux(0);
	var _v0 = $elm$core$List$reverse(result);
	if (_v0.b) {
		if (_v0.b.b) {
			var last = _v0.a;
			var _v1 = _v0.b;
			var prev = _v1.a;
			var tl = _v1.b;
			return ($elm$core$List$length(last) < 10) ? $elm$core$List$reverse(
				A2(
					$elm$core$List$cons,
					_Utils_ap(prev, last),
					tl)) : $elm$core$List$reverse(
				A2(
					$elm$core$List$cons,
					last,
					A2($elm$core$List$cons, prev, tl)));
		} else {
			var last = _v0.a;
			var tl = _v0.b;
			return $elm$core$List$reverse(
				A2($elm$core$List$cons, last, tl));
		}
	} else {
		var last = _v0;
		return last;
	}
};
var $author$project$Utility$nthWordbook = F2(
	function (n, nth) {
		return A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Array$get,
				nth - 1,
				$elm$core$Array$fromList(
					$author$project$Utility$wordbookSplit(n))));
	});
var $author$project$PronPage$getRangedCards = F2(
	function (level, data) {
		if (!level) {
			return data.cardList;
		} else {
			var targetNumbers = A2(
				$author$project$Utility$nthWordbook,
				$elm$core$List$length(data.cardList),
				level);
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (i, x) {
							return A2($elm$core$List$member, i + 1, targetNumbers) ? $elm$core$Maybe$Just(x) : $elm$core$Maybe$Nothing;
						}),
					data.cardList));
		}
	});
var $elm$random$Random$peel = function (_v0) {
	var state = _v0.a;
	var word = (state ^ (state >>> ((state >>> 28) + 4))) * 277803737;
	return ((word >>> 22) ^ word) >>> 0;
};
var $elm$random$Random$int = F2(
	function (a, b) {
		return $elm$random$Random$Generator(
			function (seed0) {
				var _v0 = (_Utils_cmp(a, b) < 0) ? _Utils_Tuple2(a, b) : _Utils_Tuple2(b, a);
				var lo = _v0.a;
				var hi = _v0.b;
				var range = (hi - lo) + 1;
				if (!((range - 1) & range)) {
					return _Utils_Tuple2(
						(((range - 1) & $elm$random$Random$peel(seed0)) >>> 0) + lo,
						$elm$random$Random$next(seed0));
				} else {
					var threshhold = (((-range) >>> 0) % range) >>> 0;
					var accountForBias = function (seed) {
						accountForBias:
						while (true) {
							var x = $elm$random$Random$peel(seed);
							var seedN = $elm$random$Random$next(seed);
							if (_Utils_cmp(x, threshhold) < 0) {
								var $temp$seed = seedN;
								seed = $temp$seed;
								continue accountForBias;
							} else {
								return _Utils_Tuple2((x % range) + lo, seedN);
							}
						}
					};
					return accountForBias(seed0);
				}
			});
	});
var $elm$random$Random$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var genA = _v0.a;
		var genB = _v1.a;
		var genC = _v2.a;
		return $elm$random$Random$Generator(
			function (seed0) {
				var _v3 = genA(seed0);
				var a = _v3.a;
				var seed1 = _v3.b;
				var _v4 = genB(seed1);
				var b = _v4.a;
				var seed2 = _v4.b;
				var _v5 = genC(seed2);
				var c = _v5.a;
				var seed3 = _v5.b;
				return _Utils_Tuple2(
					A3(func, a, b, c),
					seed3);
			});
	});
var $elm$random$Random$independentSeed = $elm$random$Random$Generator(
	function (seed0) {
		var makeIndependentSeed = F3(
			function (state, b, c) {
				return $elm$random$Random$next(
					A2($elm$random$Random$Seed, state, (1 | (b ^ c)) >>> 0));
			});
		var gen = A2($elm$random$Random$int, 0, 4294967295);
		return A2(
			$elm$random$Random$step,
			A4($elm$random$Random$map3, makeIndependentSeed, gen, gen, gen),
			seed0);
	});
var $author$project$UrlManage$pushLevelUrl = F3(
	function (v, page, level) {
		return $author$project$UrlManage$pushUrl(
			'?v=' + (v + ('&p=' + (page + $elm$core$String$fromInt(level)))));
	});
var $author$project$UrlManage$rubyPageKey = 'ruby';
var $author$project$PronPage$Info = F3(
	function (videoId, name, cardArray) {
		return {cardArray: cardArray, name: name, videoId: videoId};
	});
var $author$project$PronPage$IsManyKanjiWord = function (a) {
	return {$: 'IsManyKanjiWord', a: a};
};
var $author$project$PronPage$IsNoneKanjiWord = function (a) {
	return {$: 'IsNoneKanjiWord', a: a};
};
var $author$project$PronPage$IsOneKanjiWord = function (a) {
	return {$: 'IsOneKanjiWord', a: a};
};
var $author$project$PronPage$ManyKanjiWord = F2(
	function (wordDesList, pron) {
		return {pron: pron, wordDesList: wordDesList};
	});
var $author$project$PronPage$NoneKanjiWord = function (word) {
	return {word: word};
};
var $author$project$PronPage$OneKanjiWord = F3(
	function (word, pron, des) {
		return {des: des, pron: pron, word: word};
	});
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $author$project$PronPage$toKanjiWordInfo = F3(
	function (cnt, acc, list) {
		toKanjiWordInfo:
		while (true) {
			if (list.b) {
				var hd = list.a;
				var tl = list.b;
				var pron = A2(
					$elm$core$List$map,
					function (_v2) {
						var i = _v2.a;
						var x = _v2.b;
						return _Utils_Tuple2(i + cnt, x);
					},
					A2(
						$elm$core$List$indexedMap,
						$elm$core$Tuple$pair,
						A2(
							$elm$core$List$map,
							$elm$core$String$fromChar,
							$elm$core$String$toList(hd.pron))));
				if (hd.canMerge) {
					if (acc.b && (acc.a.$ === 'IsManyKanjiWord')) {
						var manyKanjiWord = acc.a.a;
						var accTl = acc.b;
						var newManyKanjiWord = _Utils_update(
							manyKanjiWord,
							{
								wordDesList: _Utils_ap(
									manyKanjiWord.wordDesList,
									_List_fromArray(
										[
											_Utils_Tuple2(hd.word, hd.des)
										]))
							});
						var newAcc = A2(
							$elm$core$List$cons,
							$author$project$PronPage$IsManyKanjiWord(newManyKanjiWord),
							accTl);
						var $temp$cnt = cnt,
							$temp$acc = newAcc,
							$temp$list = tl;
						cnt = $temp$cnt;
						acc = $temp$acc;
						list = $temp$list;
						continue toKanjiWordInfo;
					} else {
						var newAcc = A2(
							$elm$core$List$cons,
							$author$project$PronPage$IsManyKanjiWord(
								A2(
									$author$project$PronPage$ManyKanjiWord,
									_List_fromArray(
										[
											_Utils_Tuple2(hd.word, hd.des)
										]),
									pron)),
							acc);
						var $temp$cnt = cnt + $elm$core$List$length(pron),
							$temp$acc = newAcc,
							$temp$list = tl;
						cnt = $temp$cnt;
						acc = $temp$acc;
						list = $temp$list;
						continue toKanjiWordInfo;
					}
				} else {
					var newEle = $elm$core$String$isEmpty(
						$elm$core$String$trim(hd.pron)) ? $author$project$PronPage$IsNoneKanjiWord(
						$author$project$PronPage$NoneKanjiWord(hd.word)) : $author$project$PronPage$IsOneKanjiWord(
						A3($author$project$PronPage$OneKanjiWord, hd.word, pron, hd.des));
					var newAcc = A2($elm$core$List$cons, newEle, acc);
					var $temp$cnt = cnt + $elm$core$List$length(pron),
						$temp$acc = newAcc,
						$temp$list = tl;
					cnt = $temp$cnt;
					acc = $temp$acc;
					list = $temp$list;
					continue toKanjiWordInfo;
				}
			} else {
				return $elm$core$List$reverse(acc);
			}
		}
	});
var $author$project$PronPage$toInfo = F2(
	function (level, data) {
		if (!level) {
			return A3(
				$author$project$PronPage$Info,
				data.videoId,
				data.name,
				$elm$core$Array$fromList(
					A2(
						$elm$core$List$map,
						function (_v0) {
							var wordHead = _v0.wordHead;
							var kanjiWord = _v0.kanjiWord;
							return A2(
								$author$project$PronPage$CardInfo,
								wordHead,
								A3($author$project$PronPage$toKanjiWordInfo, 0, _List_Nil, kanjiWord));
						},
						data.cardList)));
		} else {
			var targetNumbers = A2(
				$author$project$Utility$nthWordbook,
				$elm$core$List$length(data.cardList),
				level);
			return A3(
				$author$project$PronPage$Info,
				data.videoId,
				data.name,
				$elm$core$Array$fromList(
					A2(
						$elm$core$List$filterMap,
						$elm$core$Basics$identity,
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, x) {
									return A2($elm$core$List$member, i + 1, targetNumbers) ? $elm$core$Maybe$Just(x) : $elm$core$Maybe$Nothing;
								}),
							A2(
								$elm$core$List$map,
								function (_v1) {
									var wordHead = _v1.wordHead;
									var kanjiWord = _v1.kanjiWord;
									return A2(
										$author$project$PronPage$CardInfo,
										wordHead,
										A3($author$project$PronPage$toKanjiWordInfo, 0, _List_Nil, kanjiWord));
								},
								data.cardList)))));
		}
	});
var $author$project$PronPage$init = F3(
	function (level, vid, appData) {
		var data = A2($author$project$DataManage$getPronData, vid, appData);
		var info = A2($author$project$PronPage$toInfo, level, data);
		var card = A2($author$project$PronPage$getCard, 0, info);
		return _Utils_Tuple2(
			{
				appData: appData,
				canSkip: false,
				card: card,
				cardIdx: 0,
				currentBtnList: _List_Nil,
				data: data,
				editableValue: $author$project$EditableValue$decode(
					$author$project$DataManage$encodePronData(data)),
				info: A2($author$project$PronPage$toInfo, level, data),
				isAnswerFilled: false,
				isModalOpen: false,
				isRandomMode: false,
				isRightAlertOpen: false,
				isWrongAlertOpen: false,
				level: level,
				pendingBtnList: _List_Nil,
				prevBtnList: _List_Nil,
				quizResult: A2(
					$elm$core$List$map,
					function (c) {
						return A4(
							$author$project$ResultData$PronItem,
							true,
							$author$project$DataManage$getPronWord(c),
							$author$project$DataManage$getKanjiWord(c),
							c.wordHead);
					},
					A2($author$project$PronPage$getRangedCards, level, data)),
				quizState: $author$project$PronPage$QuizPlay,
				randomSeed: $elm$random$Random$initialSeed(0),
				removedBtnList: _List_Nil,
				resultData: $author$project$ResultData$emptyPronResult,
				wrongBtnList: _List_Nil
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($elm$random$Random$generate, $author$project$PronPage$GotSeed, $elm$random$Random$independentSeed),
						A2(
						$author$project$GlobalPort$logCmd,
						'pron_page',
						$elm$core$String$fromInt(level) + ('_' + data.name)),
						$author$project$GlobalPort$pageMoveCmd('pron_page'),
						A3($author$project$UrlManage$pushLevelUrl, vid, $author$project$UrlManage$rubyPageKey, level)
					])));
	});
var $author$project$QuestionPage$Model = {};
var $author$project$QuestionPage$init = _Utils_Tuple2(
	$author$project$QuestionPage$Model,
	$elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[
				A2($author$project$GlobalPort$logCmd, 'question_page', ''),
				$author$project$GlobalPort$pageMoveCmd('question_page')
			])));
var $author$project$GlobalPort$closeYoutubeCmd = $author$project$GlobalPort$sendToPlayer(
	A2($author$project$GlobalPort$TaggedData, 'closeYoutube', $elm$json$Json$Encode$null));
var $author$project$RoadMapPage$BtnState = F3(
	function (btnType, level, isActive) {
		return {btnType: btnType, isActive: isActive, level: level};
	});
var $author$project$RoadMapPage$ListenBtn = {$: 'ListenBtn'};
var $author$project$RoadMapPage$PronBtn = {$: 'PronBtn'};
var $author$project$RoadMapPage$SentenceBtn = {$: 'SentenceBtn'};
var $author$project$RoadMapPage$TapGameBtn = {$: 'TapGameBtn'};
var $author$project$RoadMapPage$WordbookBtn = {$: 'WordbookBtn'};
var $author$project$Utility$isApple = false;
var $author$project$RoadMapPage$getBtnList = F2(
	function (data, appData) {
		return $elm$core$List$concat(
			_List_fromArray(
				[
					((!$author$project$Utility$isApple) && A2(
					$elm$core$List$any,
					function (l) {
						return _Utils_eq(l.videoId, data.videoId);
					},
					appData.listen)) ? _List_fromArray(
					[
						A3($author$project$RoadMapPage$BtnState, $author$project$RoadMapPage$ListenBtn, 1, false)
					]) : _List_Nil,
					A2(
					$elm$core$List$any,
					function (l) {
						return _Utils_eq(l.videoId, data.videoId);
					},
					appData.tapGame) ? _List_fromArray(
					[
						A3($author$project$RoadMapPage$BtnState, $author$project$RoadMapPage$TapGameBtn, 1, false),
						A3($author$project$RoadMapPage$BtnState, $author$project$RoadMapPage$TapGameBtn, 2, false)
					]) : _List_Nil,
					A2(
					$elm$core$List$any,
					function (l) {
						return _Utils_eq(l.videoId, data.videoId);
					},
					appData.sentence) ? _List_fromArray(
					[
						A3($author$project$RoadMapPage$BtnState, $author$project$RoadMapPage$SentenceBtn, 1, false)
					]) : _List_Nil,
					function () {
					var _v0 = A2(
						$elm$core$List$filter,
						function (l) {
							return _Utils_eq(l.videoId, data.videoId);
						},
						appData.pron);
					if (_v0.b && (!_v0.b.b)) {
						var pron = _v0.a;
						return A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, _v1) {
									return A3($author$project$RoadMapPage$BtnState, $author$project$RoadMapPage$PronBtn, i + 1, false);
								}),
							$author$project$Utility$wordbookSplit(
								$elm$core$List$length(pron.cardList)));
					} else {
						return _List_Nil;
					}
				}(),
					function () {
					var _v2 = A2(
						$elm$core$List$filter,
						function (l) {
							return _Utils_eq(l.videoId, data.videoId);
						},
						appData.voca);
					if (_v2.b && (!_v2.b.b)) {
						var voca = _v2.a;
						return _List_fromArray(
							[
								A3($author$project$RoadMapPage$BtnState, $author$project$RoadMapPage$WordbookBtn, 1, false)
							]);
					} else {
						return _List_Nil;
					}
				}()
				]));
	});
var $elm$browser$Browser$Dom$getViewportOf = _Browser_getViewportOf;
var $elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var $author$project$HtmlElement$jumpToTop = F2(
	function (id, noOp) {
		return A2(
			$elm$core$Task$attempt,
			function (_v0) {
				return noOp;
			},
			A2(
				$elm$core$Task$andThen,
				function (info) {
					return A3($elm$browser$Browser$Dom$setViewportOf, id, 0, 0);
				},
				$elm$browser$Browser$Dom$getViewportOf(id)));
	});
var $lobanov$elm_taskport$TaskPort$ignoreValue = $elm$json$Json$Decode$succeed(_Utils_Tuple0);
var $author$project$LocalStorage$put = F3(
	function (names, key, value) {
		var encoder = function (_v0) {
			var k = _v0.a;
			var v = _v0.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'key',
						$elm$json$Json$Encode$string(k)),
						_Utils_Tuple2(
						'value',
						$elm$json$Json$Encode$string(v))
					]));
		};
		return A2(
			$lobanov$elm_taskport$TaskPort$callNS,
			{argsEncoder: encoder, _function: names.putItem, valueDecoder: $lobanov$elm_taskport$TaskPort$ignoreValue},
			_Utils_Tuple2(key, value));
	});
var $author$project$LocalStorage$localPut = $author$project$LocalStorage$put($author$project$LocalStorage$localStorage);
var $author$project$UrlManage$pushVidUrl = function (v) {
	return $author$project$UrlManage$pushUrl('?v=' + v);
};
var $author$project$RoadMapPage$init = F2(
	function (vid, appData) {
		var data = A2($author$project$DataManage$getListenData, vid, appData);
		var btnList = A2($author$project$RoadMapPage$getBtnList, data, appData);
		return _Utils_Tuple2(
			{
				btnList: btnList,
				data: {name: data.name, videoId: data.videoId},
				shouldCompleteFirst: ''
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$GlobalPort$closeYoutubeCmd,
						A2($author$project$HtmlElement$jumpToTop, 'roadMap', $author$project$RoadMapPage$NoOp),
						A2(
						$elm$core$Task$attempt,
						function (x) {
							if ((x.$ === 'Ok') && (x.a.$ === 'Just')) {
								var str = x.a.a;
								return $author$project$RoadMapPage$GotProgress(
									A2(
										$elm$core$Result$withDefault,
										_List_Nil,
										A2(
											$elm$json$Json$Decode$decodeString,
											$elm$json$Json$Decode$list($author$project$GlobalPort$progressDecoder),
											str)));
							} else {
								return $author$project$RoadMapPage$GotProgress(_List_Nil);
							}
						},
						$author$project$LocalStorage$localGet(data.videoId)),
						A2($author$project$GlobalPort$logCmd, 'roadmap_page', data.name),
						$author$project$GlobalPort$pageMoveCmd('roadmap_page'),
						A2(
						$elm$core$Task$attempt,
						function (_v2) {
							return $author$project$RoadMapPage$NoOp;
						},
						A2(
							$elm$core$Task$andThen,
							function (x) {
								if (x.$ === 'Just') {
									var v = x.a;
									return ($elm$core$String$length(vid) === 11) ? function (history) {
										return A2(
											$author$project$LocalStorage$localPut,
											$author$project$GlobalPort$searchHistoryKey,
											A2(
												$elm$json$Json$Encode$encode,
												0,
												A2(
													$elm$json$Json$Encode$list,
													$elm$json$Json$Encode$string,
													A2(
														$elm$core$List$cons,
														vid,
														A2(
															$elm$core$List$filter,
															$elm$core$Basics$neq(vid),
															history)))));
									}(
										A2(
											$elm$core$Result$withDefault,
											_List_Nil,
											A2(
												$elm$json$Json$Decode$decodeString,
												$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
												v))) : $elm$core$Task$succeed(_Utils_Tuple0);
								} else {
									return A2(
										$author$project$LocalStorage$localPut,
										$author$project$GlobalPort$searchHistoryKey,
										A2(
											$elm$json$Json$Encode$encode,
											0,
											A2(
												$elm$json$Json$Encode$list,
												$elm$json$Json$Encode$string,
												A2($elm$core$List$cons, vid, _List_Nil))));
								}
							},
							$author$project$LocalStorage$localGet($author$project$GlobalPort$searchHistoryKey))),
						$author$project$UrlManage$pushVidUrl(vid)
					])));
	});
var $author$project$SearchPage$GotHistory = function (a) {
	return {$: 'GotHistory', a: a};
};
var $author$project$SearchPage$historyCmd = A2(
	$elm$core$Task$attempt,
	function (x) {
		if ((x.$ === 'Ok') && (x.a.$ === 'Just')) {
			var v = x.a.a;
			return $author$project$SearchPage$GotHistory(
				$elm$core$Maybe$Just(
					A2(
						$elm$core$Result$withDefault,
						_List_Nil,
						A2(
							$elm$json$Json$Decode$decodeString,
							$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
							v))));
		} else {
			return $author$project$SearchPage$GotHistory(
				$elm$core$Maybe$Just(_List_Nil));
		}
	},
	$author$project$LocalStorage$localGet($author$project$GlobalPort$searchHistoryKey));
var $author$project$SearchPage$init = F2(
	function (videoDataList, infoDataList) {
		return _Utils_Tuple2(
			{infoDataList: infoDataList, searchStr: '', selectedCategory: '전체', videoDataList: videoDataList, visitHistory: $elm$core$Maybe$Nothing},
			$author$project$SearchPage$historyCmd);
	});
var $author$project$SentencePage$GotSeed = function (a) {
	return {$: 'GotSeed', a: a};
};
var $author$project$SentencePage$InputWaiting = {$: 'InputWaiting'};
var $author$project$DataManage$emptySentenceCard = A4(
	$author$project$DataManage$SentenceCard,
	'',
	_List_fromArray(
		['']),
	0,
	0);
var $author$project$ResultData$SentenceResult = function (quizResult) {
	return {quizResult: quizResult};
};
var $author$project$ResultData$emptySentenceResult = $author$project$ResultData$SentenceResult(_List_Nil);
var $author$project$DataManage$encodeSentenceCard = function (sentenceCard) {
	return $author$project$DataManage$isSpeedEncode ? $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'k',
				$elm$json$Json$Encode$string(sentenceCard.kor)),
				_Utils_Tuple2(
				'w',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, sentenceCard.wordList)),
				_Utils_Tuple2(
				's',
				$elm$json$Json$Encode$int(sentenceCard.startTime)),
				_Utils_Tuple2(
				'e',
				$elm$json$Json$Encode$int(sentenceCard.endTime))
			])) : $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'kor',
				$elm$json$Json$Encode$string(sentenceCard.kor)),
				_Utils_Tuple2(
				'wordList',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, sentenceCard.wordList)),
				_Utils_Tuple2(
				'startTime',
				$elm$json$Json$Encode$int(sentenceCard.startTime)),
				_Utils_Tuple2(
				'endTime',
				$elm$json$Json$Encode$int(sentenceCard.endTime))
			]));
};
var $author$project$DataManage$encodeSentenceData = function (sentenceData) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'videoId',
				$elm$json$Json$Encode$string(sentenceData.videoId)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(sentenceData.name)),
				_Utils_Tuple2(
				'cardList',
				A2($elm$json$Json$Encode$list, $author$project$DataManage$encodeSentenceCard, sentenceData.cardList))
			]));
};
var $author$project$DataManage$emptySentenceData = A3(
	$author$project$DataManage$SentenceData,
	'',
	'',
	_List_fromArray(
		[$author$project$DataManage$emptySentenceCard]));
var $author$project$DataManage$getSentenceData = F2(
	function (videoId, appData) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptySentenceData,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (x) {
						return _Utils_eq(x.videoId, videoId);
					},
					appData.sentence)));
	});
var $author$project$ResultData$SentenceItem = F4(
	function (isRight, pron, sentence, kor) {
		return {isRight: isRight, kor: kor, pron: pron, sentence: sentence};
	});
var $author$project$SentencePage$mergeData = F2(
	function (listenData, sentenceData) {
		var findInListen = function (sentenceCard) {
			var queryResult = A2(
				$elm$core$List$filter,
				function (c) {
					return _Utils_eq(
						$elm$core$String$trim(c.kor),
						$elm$core$String$trim(sentenceCard.kor));
				},
				listenData.cardList);
			if (queryResult.b) {
				var hd = queryResult.a;
				return $elm$core$Maybe$Just(hd);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		return A2(
			$elm$core$List$map,
			function (sentenceCard) {
				var _v0 = findInListen(sentenceCard);
				if (_v0.$ === 'Just') {
					var listenCard = _v0.a;
					return A4($author$project$ResultData$SentenceItem, false, listenCard.pron, listenCard.text, listenCard.kor);
				} else {
					return A4(
						$author$project$ResultData$SentenceItem,
						false,
						'',
						$elm$core$String$concat(sentenceCard.wordList),
						sentenceCard.kor);
				}
			},
			sentenceData.cardList);
	});
var $author$project$UrlManage$sentencePageKey = 'sentence';
var $author$project$SentencePage$WordBtn = F3(
	function (isMoved, id, word) {
		return {id: id, isMoved: isMoved, word: word};
	});
var $author$project$SentencePage$toBtnList = F2(
	function (idCnt, wordList) {
		var newWordList = A2(
			$elm$core$List$indexedMap,
			function (i) {
				return A2($author$project$SentencePage$WordBtn, false, idCnt + i);
			},
			wordList);
		return _Utils_Tuple2(
			idCnt + $elm$core$List$length(wordList),
			newWordList);
	});
var $author$project$SentencePage$init = F2(
	function (vid, appData) {
		var listenData = A2($author$project$DataManage$getListenData, vid, appData);
		var data = A2($author$project$DataManage$getSentenceData, vid, appData);
		var firstCard = A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptySentenceCard,
			$elm$core$List$head(data.cardList));
		var _v0 = A2($author$project$SentencePage$toBtnList, 0, firstCard.wordList);
		var idCnt = _v0.a;
		var btnList = _v0.b;
		return _Utils_Tuple2(
			{
				appData: appData,
				btnList: btnList,
				cardIdx: 0,
				currentTime: 0,
				data: data,
				editableValue: $author$project$EditableValue$decode(
					$author$project$DataManage$encodeSentenceData(data)),
				idCnt: idCnt,
				isLoadSuccess: false,
				isModalOpen: false,
				isPlaying: true,
				isRightAlertOpen: false,
				isSpeedMode: false,
				isWrongAlertOpen: false,
				korTranslation: firstCard.kor,
				playerState: '',
				prevContent: $elm$core$Maybe$Nothing,
				quizResult: A2($author$project$SentencePage$mergeData, listenData, data),
				quizState: $author$project$SentencePage$InputWaiting,
				randomSeed: $elm$random$Random$initialSeed(0),
				resultData: $author$project$ResultData$emptySentenceResult,
				selectedBtnIds: _List_Nil,
				timeShift: 0,
				transData: ''
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$GlobalPort$openYoutubeCmd,
						$author$project$GlobalPort$loadVideoCmd(data.videoId),
						A2($elm$random$Random$generate, $author$project$SentencePage$GotSeed, $elm$random$Random$independentSeed),
						A2($author$project$GlobalPort$logCmd, 'sentence_page', data.name),
						$author$project$GlobalPort$pageMoveCmd('sentence_page'),
						A2($author$project$UrlManage$pushPageUrl, vid, $author$project$UrlManage$sentencePageKey)
					])));
	});
var $author$project$TapGamePage$Anim = F4(
	function (name, startVal, endVal, remainTime) {
		return {endVal: endVal, name: name, remainTime: remainTime, startVal: startVal};
	});
var $author$project$TapGamePage$GameMode = {$: 'GameMode'};
var $author$project$TapGamePage$NoBanner = {$: 'NoBanner'};
var $author$project$TapGamePage$TouchCircle = F4(
	function (isRight, x, y, remainTime) {
		return {isRight: isRight, remainTime: remainTime, x: x, y: y};
	});
var $author$project$DataManage$encodeTapGameCard = function (tapGameCard) {
	return $author$project$DataManage$isSpeedEncode ? $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'e',
				$elm$json$Json$Encode$int(tapGameCard.endTime)),
				_Utils_Tuple2(
				'p',
				$elm$json$Json$Encode$string(tapGameCard.pron)),
				_Utils_Tuple2(
				'w',
				$elm$json$Json$Encode$string(tapGameCard.word)),
				_Utils_Tuple2(
				'd',
				$elm$json$Json$Encode$string(tapGameCard.desc))
			])) : $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'endTime',
				$elm$json$Json$Encode$int(tapGameCard.endTime)),
				_Utils_Tuple2(
				'pron',
				$elm$json$Json$Encode$string(tapGameCard.pron)),
				_Utils_Tuple2(
				'word',
				$elm$json$Json$Encode$string(tapGameCard.word)),
				_Utils_Tuple2(
				'desc',
				$elm$json$Json$Encode$string(tapGameCard.desc))
			]));
};
var $author$project$DataManage$encodeTapGameData = function (tapGameData) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(tapGameData.name)),
				_Utils_Tuple2(
				'videoId',
				$elm$json$Json$Encode$string(tapGameData.videoId)),
				_Utils_Tuple2(
				'cardList',
				A2($elm$json$Json$Encode$list, $author$project$DataManage$encodeTapGameCard, tapGameData.cardList)),
				_Utils_Tuple2(
				'videoEndTime',
				$elm$json$Json$Encode$int(tapGameData.videoEndTime))
			]));
};
var $author$project$GlobalPort$getResultKey = F3(
	function (name, level, videoId) {
		return name + ($elm$core$String$fromInt(level) + (' ' + videoId));
	});
var $author$project$DataManage$emptyTapGameData = {cardList: _List_Nil, name: '', videoEndTime: 0, videoId: ''};
var $author$project$DataManage$getTapGameData = F2(
	function (videoId, appData) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyTapGameData,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (x) {
						return _Utils_eq(x.videoId, videoId);
					},
					appData.tapGame)));
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $author$project$GlobalPort$tapGameName = '제때 누르기';
var $author$project$UrlManage$tapPageKey = 'tap';
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $author$project$TapGamePage$toFilteredCardList = F2(
	function (level, cardList) {
		switch (level) {
			case 0:
				return cardList;
			case 1:
				return A2(
					$elm$core$List$map,
					$elm$core$Tuple$second,
					A2(
						$elm$core$List$filter,
						function (_v1) {
							var i = _v1.a;
							return !(i % 2);
						},
						A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, cardList)));
			case 2:
				return A2(
					$elm$core$List$map,
					$elm$core$Tuple$second,
					A2(
						$elm$core$List$filter,
						function (_v2) {
							var i = _v2.a;
							return (i % 2) === 1;
						},
						A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, cardList)));
			default:
				return cardList;
		}
	});
var $author$project$TapGamePage$init = F3(
	function (level, vid, appData) {
		var data = A2($author$project$DataManage$getTapGameData, vid, appData);
		var newData = _Utils_update(
			data,
			{
				cardList: A2($author$project$TapGamePage$toFilteredCardList, level, data.cardList)
			});
		return _Utils_Tuple2(
			{
				animList: _List_fromArray(
					[
						A4($author$project$TapGamePage$Anim, 'scoreSize', 1.1, 1, 0),
						A4($author$project$TapGamePage$Anim, 'bannerOpacity', 1, 0, 0),
						A4($author$project$TapGamePage$Anim, 'progressSize', 1.1, 1, 0)
					]),
				appData: appData,
				bannerState: $author$project$TapGamePage$NoBanner,
				bestScore: 0,
				currentTime: 0,
				data: newData,
				editableValue: $author$project$EditableValue$decode(
					$author$project$DataManage$encodeTapGameData(newData)),
				isLoadSuccess: false,
				isModalOpen: false,
				level: level,
				originalData: data,
				playMode: $author$project$TapGamePage$GameMode,
				playerState: '',
				quizResult: A2(
					$elm$core$List$map,
					function (c) {
						return A4($author$project$ResultData$TapGameItem, true, c.pron, c.word, c.desc);
					},
					newData.cardList),
				resultData: $author$project$ResultData$emptyTapGameResult,
				score: 100,
				timeShift: 0,
				touchCircleList: A2(
					$elm$core$List$repeat,
					5,
					A4($author$project$TapGamePage$TouchCircle, false, 0, 0, 0)),
				wordIdx: 0
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$GlobalPort$openYoutubeCmd,
						$author$project$GlobalPort$loadVideoCmd(data.videoId),
						A2(
						$elm$core$Task$attempt,
						function (x) {
							if ((x.$ === 'Ok') && (x.a.$ === 'Just')) {
								var str = x.a.a;
								return $author$project$TapGamePage$GotResult(
									A2(
										$elm$core$Result$withDefault,
										$author$project$ResultData$emptyTapGameResult,
										A2($elm$json$Json$Decode$decodeString, $author$project$ResultData$tapGameResultDecoder, str)));
							} else {
								return $author$project$TapGamePage$GotResult($author$project$ResultData$emptyTapGameResult);
							}
						},
						$author$project$LocalStorage$localGet(
							A3($author$project$GlobalPort$getResultKey, $author$project$GlobalPort$tapGameName, level, data.videoId))),
						A2(
						$author$project$GlobalPort$logCmd,
						'tap_page',
						$elm$core$String$fromInt(level) + ('_' + data.name)),
						$author$project$GlobalPort$pageMoveCmd('tap_page'),
						A3($author$project$UrlManage$pushLevelUrl, vid, $author$project$UrlManage$tapPageKey, level)
					])));
	});
var $author$project$VocaPage$GotBookmark = function (a) {
	return {$: 'GotBookmark', a: a};
};
var $author$project$VocaPage$GotSeed = function (a) {
	return {$: 'GotSeed', a: a};
};
var $author$project$GlobalPort$BookmarkData = F3(
	function (videoId, date, vocaList) {
		return {date: date, videoId: videoId, vocaList: vocaList};
	});
var $author$project$GlobalPort$emptyBookmarkData = A3($author$project$GlobalPort$BookmarkData, '', 0, _List_Nil);
var $author$project$DataManage$encodeVocaRuby = function (vocaRuby) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'r',
				$elm$json$Json$Encode$string(vocaRuby.r)),
				_Utils_Tuple2(
				'w',
				$elm$json$Json$Encode$string(vocaRuby.w))
			]));
};
var $author$project$DataManage$encodeVocaCard = function (vocaCard) {
	return $author$project$DataManage$isSpeedEncode ? $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'r',
				A2($elm$json$Json$Encode$list, $author$project$DataManage$encodeVocaRuby, vocaCard.rubyList)),
				_Utils_Tuple2(
				'p',
				$elm$json$Json$Encode$string(vocaCard.pron)),
				_Utils_Tuple2(
				'w',
				$elm$json$Json$Encode$string(vocaCard.word)),
				_Utils_Tuple2(
				'k',
				$elm$json$Json$Encode$string(vocaCard.kor)),
				_Utils_Tuple2(
				'i',
				$elm$json$Json$Encode$string(vocaCard.kanjiInfo))
			])) : $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'rubyList',
				A2($elm$json$Json$Encode$list, $author$project$DataManage$encodeVocaRuby, vocaCard.rubyList)),
				_Utils_Tuple2(
				'pron',
				$elm$json$Json$Encode$string(vocaCard.pron)),
				_Utils_Tuple2(
				'word',
				$elm$json$Json$Encode$string(vocaCard.word)),
				_Utils_Tuple2(
				'kor',
				$elm$json$Json$Encode$string(vocaCard.kor)),
				_Utils_Tuple2(
				'kanjiInfo',
				$elm$json$Json$Encode$string(vocaCard.kanjiInfo))
			]));
};
var $author$project$DataManage$encodeVocaData = function (vocaData) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'videoId',
				$elm$json$Json$Encode$string(vocaData.videoId)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(vocaData.name)),
				_Utils_Tuple2(
				'cardList',
				A2($elm$json$Json$Encode$list, $author$project$DataManage$encodeVocaCard, vocaData.cardList))
			]));
};
var $author$project$GlobalPort$VocaUnique = F2(
	function (pron, word) {
		return {pron: pron, word: word};
	});
var $author$project$GlobalPort$vocaUniqueDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'word',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'pron',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed($author$project$GlobalPort$VocaUnique)));
var $author$project$GlobalPort$bookmarkDataDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'vocaList',
	$elm$json$Json$Decode$list($author$project$GlobalPort$vocaUniqueDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'date',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'videoId',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$GlobalPort$BookmarkData))));
var $author$project$GlobalPort$getBookmarkTask = function (videoId) {
	return A2(
		$elm$core$Task$map,
		function (x) {
			return A2(
				$elm$core$Result$withDefault,
				$author$project$GlobalPort$emptyBookmarkData,
				A2(
					$elm$json$Json$Decode$decodeString,
					$author$project$GlobalPort$bookmarkDataDecoder,
					A2($elm$core$Maybe$withDefault, '', x)));
		},
		$author$project$LocalStorage$localGet(
			$author$project$GlobalPort$getBookmarkKey(videoId)));
};
var $author$project$DataManage$emptyVocaCard = A5($author$project$DataManage$VocaCard, _List_Nil, '', '', '', '');
var $author$project$DataManage$emptyVocaData = A3(
	$author$project$DataManage$VocaData,
	'',
	'',
	_List_fromArray(
		[$author$project$DataManage$emptyVocaCard]));
var $author$project$DataManage$getVocaData = F2(
	function (videoId, appData) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyVocaData,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (x) {
						return _Utils_eq(x.videoId, videoId);
					},
					appData.voca)));
	});
var $author$project$UrlManage$vocaPageKey = 'voca';
var $author$project$VocaPage$init = F2(
	function (vid, appData) {
		var level = 0;
		var data = A2($author$project$DataManage$getVocaData, vid, appData);
		return _Utils_Tuple2(
			{
				appData: appData,
				bookmarkList: _List_Nil,
				cardIdx: 0,
				data: data,
				dragVal: 0,
				editableValue: $author$project$EditableValue$decode(
					$author$project$DataManage$encodeVocaData(data)),
				isBookmarkMode: false,
				isCharToggleOn: true,
				isRandomMode: false,
				isRubyMode: true,
				isSimpleMode: false,
				isZeroAlertOpen: false,
				level: level,
				levelStr: $elm$core$String$fromInt(level),
				seed: $elm$random$Random$initialSeed(0),
				selectedChar: $elm$core$Maybe$Nothing
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($elm$random$Random$generate, $author$project$VocaPage$GotSeed, $elm$random$Random$independentSeed),
						A2(
						$elm$core$Task$attempt,
						function (x) {
							return $author$project$VocaPage$GotBookmark(
								A2($elm$core$Result$withDefault, $author$project$GlobalPort$emptyBookmarkData, x));
						},
						$author$project$GlobalPort$getBookmarkTask(data.videoId)),
						A2($author$project$GlobalPort$logCmd, 'voca_page', data.name),
						$author$project$GlobalPort$pageMoveCmd('voca_page'),
						A2($author$project$UrlManage$pushPageUrl, vid, $author$project$UrlManage$vocaPageKey)
					])));
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};
	});
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.unvisited;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.value);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.value);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 'Nothing') {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 'Nothing') {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0.a;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.path),
					$elm$url$Url$Parser$prepareQuery(url.query),
					url.fragment,
					$elm$core$Basics$identity)));
	});
var $elm$url$Url$Parser$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$query = function (_v0) {
	var queryParser = _v0.a;
	return $elm$url$Url$Parser$Parser(
		function (_v1) {
			var value = _v1.value;
			var frag = _v1.frag;
			var params = _v1.params;
			var unvisited = _v1.unvisited;
			var visited = _v1.visited;
			return _List_fromArray(
				[
					A5(
					$elm$url$Url$Parser$State,
					visited,
					unvisited,
					params,
					frag,
					value(
						queryParser(params)))
				]);
		});
};
var $elm$url$Url$Parser$Internal$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$Query$custom = F2(
	function (key, func) {
		return $elm$url$Url$Parser$Internal$Parser(
			function (dict) {
				return func(
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Dict$get, key, dict)));
			});
	});
var $elm$url$Url$Parser$Query$string = function (key) {
	return A2(
		$elm$url$Url$Parser$Query$custom,
		key,
		function (stringList) {
			if (stringList.b && (!stringList.b.b)) {
				var str = stringList.a;
				return $elm$core$Maybe$Just(str);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		});
};
var $author$project$UrlManage$getPageQuery = function (rawUrl) {
	return A2(
		$elm$core$Maybe$andThen,
		$elm$core$Basics$identity,
		A2(
			$elm$core$Maybe$andThen,
			$elm$url$Url$Parser$parse(
				$elm$url$Url$Parser$query(
					$elm$url$Url$Parser$Query$string('p'))),
			$elm$url$Url$fromString(rawUrl)));
};
var $author$project$UrlManage$getVideoQuery = function (rawUrl) {
	return A2(
		$elm$core$Maybe$andThen,
		$elm$core$Basics$identity,
		A2(
			$elm$core$Maybe$andThen,
			$elm$url$Url$Parser$parse(
				$elm$url$Url$Parser$query(
					$elm$url$Url$Parser$Query$string('v'))),
			$elm$url$Url$fromString(rawUrl)));
};
var $author$project$Main$initInfo = F2(
	function (vid, model) {
		var _v0 = A2($author$project$InfoPage$init, vid, model.data);
		var pageModel = _v0.a;
		var pageCmd = _v0.b;
		return _Utils_Tuple2(
			A3(
				$author$project$Main$initModel,
				$author$project$Main$InfoPage(pageModel),
				model.data,
				model.rawUrl),
			A2($elm$core$Platform$Cmd$map, $author$project$Main$InfoPageMsg, pageCmd));
	});
var $author$project$Main$initListen = F2(
	function (vid, model) {
		var _v0 = A2($author$project$ListenPage$init, vid, model.data);
		var pageModel = _v0.a;
		var pageCmd = _v0.b;
		return _Utils_Tuple2(
			A3(
				$author$project$Main$initModel,
				$author$project$Main$ListenPage(pageModel),
				model.data,
				model.rawUrl),
			A2($elm$core$Platform$Cmd$map, $author$project$Main$ListenPageMsg, pageCmd));
	});
var $author$project$Main$initMain = function (model) {
	var _v0 = A3($author$project$MainPage$init, $author$project$Main$focusVideoId, $author$project$Main$focusVideoId, model.data.video);
	var pageModel = _v0.a;
	var pageCmd = _v0.b;
	return _Utils_Tuple2(
		A3(
			$author$project$Main$initModel,
			$author$project$Main$MainPage(pageModel),
			model.data,
			model.rawUrl),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2($elm$core$Platform$Cmd$map, $author$project$Main$MainPageMsg, pageCmd)
				])));
};
var $author$project$Main$initPron = F3(
	function (level, vid, model) {
		var _v0 = A3($author$project$PronPage$init, level, vid, model.data);
		var pageModel = _v0.a;
		var pageCmd = _v0.b;
		return _Utils_Tuple2(
			A3(
				$author$project$Main$initModel,
				$author$project$Main$PronPage(pageModel),
				model.data,
				model.rawUrl),
			A2($elm$core$Platform$Cmd$map, $author$project$Main$PronPageMsg, pageCmd));
	});
var $author$project$Main$initRoadMap = F2(
	function (vid, model) {
		var _v0 = A2($author$project$RoadMapPage$init, vid, model.data);
		var pageModel = _v0.a;
		var pageCmd = _v0.b;
		return _Utils_Tuple2(
			A3(
				$author$project$Main$initModel,
				$author$project$Main$RoadMapPage(pageModel),
				model.data,
				model.rawUrl),
			A2($elm$core$Platform$Cmd$map, $author$project$Main$RoadMapPageMsg, pageCmd));
	});
var $author$project$Main$initSentence = F2(
	function (vid, model) {
		var _v0 = A2($author$project$SentencePage$init, vid, model.data);
		var pageModel = _v0.a;
		var pageCmd = _v0.b;
		return _Utils_Tuple2(
			A3(
				$author$project$Main$initModel,
				$author$project$Main$SentencePage(pageModel),
				model.data,
				model.rawUrl),
			A2($elm$core$Platform$Cmd$map, $author$project$Main$SentencePageMsg, pageCmd));
	});
var $author$project$Main$initTapGame = F3(
	function (level, vid, model) {
		var _v0 = A3($author$project$TapGamePage$init, level, vid, model.data);
		var pageModel = _v0.a;
		var pageCmd = _v0.b;
		return _Utils_Tuple2(
			A3(
				$author$project$Main$initModel,
				$author$project$Main$TapGamePage(pageModel),
				model.data,
				model.rawUrl),
			A2($elm$core$Platform$Cmd$map, $author$project$Main$TapGamePageMsg, pageCmd));
	});
var $author$project$Main$initVoca = F2(
	function (vid, model) {
		var _v0 = A2($author$project$VocaPage$init, vid, model.data);
		var pageModel = _v0.a;
		var pageCmd = _v0.b;
		return _Utils_Tuple2(
			A3(
				$author$project$Main$initModel,
				$author$project$Main$VocaPage(pageModel),
				model.data,
				model.rawUrl),
			A2($elm$core$Platform$Cmd$map, $author$project$Main$VocaPageMsg, pageCmd));
	});
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$Main$onAppDataLoad = F2(
	function (msg, model) {
		if (11 === $elm$core$String$length(
			A2(
				$elm$core$Maybe$withDefault,
				'',
				$author$project$UrlManage$getVideoQuery(model.rawUrl)))) {
			var _v0 = _Utils_Tuple2(
				$author$project$UrlManage$getVideoQuery(model.rawUrl),
				$author$project$UrlManage$getPageQuery(model.rawUrl));
			if (_v0.a.$ === 'Just') {
				if (_v0.b.$ === 'Nothing') {
					var v = _v0.a.a;
					var _v1 = _v0.b;
					return A2($author$project$Main$initRoadMap, v, model);
				} else {
					var v = _v0.a.a;
					var page = _v0.b.a;
					return A2($elm$core$String$startsWith, $author$project$UrlManage$listenPageKey, page) ? A2($author$project$Main$initListen, v, model) : (A2($elm$core$String$startsWith, $author$project$UrlManage$tapPageKey, page) ? A3(
						$author$project$Main$initTapGame,
						A2(
							$elm$core$Maybe$withDefault,
							0,
							$elm$core$String$toInt(
								A3($elm$core$String$replace, $author$project$UrlManage$tapPageKey, '', page))),
						v,
						model) : (A2($elm$core$String$startsWith, $author$project$UrlManage$sentencePageKey, page) ? A2($author$project$Main$initSentence, v, model) : (A2($elm$core$String$startsWith, $author$project$UrlManage$rubyPageKey, page) ? A3(
						$author$project$Main$initPron,
						A2(
							$elm$core$Maybe$withDefault,
							0,
							$elm$core$String$toInt(
								A3($elm$core$String$replace, $author$project$UrlManage$rubyPageKey, '', page))),
						v,
						model) : (A2($elm$core$String$startsWith, $author$project$UrlManage$vocaPageKey, page) ? A2($author$project$Main$initVoca, v, model) : (A2($elm$core$String$startsWith, $author$project$UrlManage$infoPageKey, page) ? A2($author$project$Main$initInfo, v, model) : A2($author$project$Main$initRoadMap, v, model))))));
				}
			} else {
				return $author$project$Main$initMain(model);
			}
		} else {
			return $author$project$Main$initMain(model);
		}
	});
var $elm$file$File$Download$string = F3(
	function (name, mime, content) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$never,
			A3(_File_download, name, mime, content));
	});
var $author$project$AwardPage$GotKeyWordStr = function (a) {
	return {$: 'GotKeyWordStr', a: a};
};
var $author$project$AwardPage$GotPronResult = function (a) {
	return {$: 'GotPronResult', a: a};
};
var $author$project$AwardPage$GotSentenceResult = function (a) {
	return {$: 'GotSentenceResult', a: a};
};
var $author$project$AwardPage$GotTapGameResult = function (a) {
	return {$: 'GotTapGameResult', a: a};
};
var $author$project$AwardPage$ListenModal = function (a) {
	return {$: 'ListenModal', a: a};
};
var $author$project$AwardPage$PronModal = function (a) {
	return {$: 'PronModal', a: a};
};
var $author$project$AwardPage$SentenceModal = function (a) {
	return {$: 'SentenceModal', a: a};
};
var $author$project$AwardPage$TapGameModal = function (a) {
	return {$: 'TapGameModal', a: a};
};
var $author$project$AwardPage$ToMainPage = {$: 'ToMainPage'};
var $author$project$TimeHelper$monthToInt = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $author$project$TimeHelper$getDateStr = F2(
	function (z, t) {
		return $elm$core$String$concat(
			_List_fromArray(
				[
					$elm$core$String$fromInt(
					$author$project$TimeHelper$monthToInt(
						A2($elm$time$Time$toMonth, z, t))),
					'월 ',
					$elm$core$String$fromInt(
					A2($elm$time$Time$toDay, z, t)),
					'일 '
				]));
	});
var $author$project$GlobalPort$listenName = '들어보기';
var $author$project$AwardPage$numberDrop = function (str) {
	numberDrop:
	while (true) {
		var startsWithNum = A2(
			$elm$core$List$any,
			function (i) {
				return A2($elm$core$String$startsWith, i, str);
			},
			A2(
				$elm$core$List$map,
				$elm$core$String$fromInt,
				A2($elm$core$List$range, 0, 9)));
		if (startsWithNum) {
			var $temp$str = A2($elm$core$String$dropLeft, 1, str);
			str = $temp$str;
			continue numberDrop;
		} else {
			return str;
		}
	}
};
var $author$project$GlobalPort$pronName = '발음 맞추기';
var $author$project$ResultData$pronItemDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'meaning',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'word',
		$elm$json$Json$Decode$string,
		A4(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
			'pron',
			$elm$json$Json$Decode$string,
			'',
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'isRight',
				$elm$json$Json$Decode$bool,
				$elm$json$Json$Decode$succeed($author$project$ResultData$PronItem)))));
var $author$project$ResultData$pronResultDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'quizResult',
	$elm$json$Json$Decode$list($author$project$ResultData$pronItemDecoder),
	$elm$json$Json$Decode$succeed($author$project$ResultData$PronResult));
var $author$project$GlobalPort$sentenceName = '문장 조합하기';
var $author$project$ResultData$sentenceItemDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'kor',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'sentence',
		$elm$json$Json$Decode$string,
		A4(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
			'pron',
			$elm$json$Json$Decode$string,
			'',
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'isRight',
				$elm$json$Json$Decode$bool,
				$elm$json$Json$Decode$succeed($author$project$ResultData$SentenceItem)))));
var $author$project$ResultData$sentenceResultDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'quizResult',
	$elm$json$Json$Decode$list($author$project$ResultData$sentenceItemDecoder),
	$elm$json$Json$Decode$succeed($author$project$ResultData$SentenceResult));
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$GlobalPort$speakCmd = function (str) {
	return $author$project$GlobalPort$sendToPlayer(
		A2(
			$author$project$GlobalPort$TaggedData,
			'speak',
			$elm$json$Json$Encode$string(str)));
};
var $author$project$AwardPage$unique = function (list) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (a, uniques) {
				return A2($elm$core$List$member, a, uniques) ? uniques : _Utils_ap(
					uniques,
					_List_fromArray(
						[a]));
			}),
		_List_Nil,
		list);
};
var $author$project$AwardPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToSearchPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToMainPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToListenPage':
				var str = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToTapGamePage':
				var str = msg.a;
				var level = msg.b;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToSentencePage':
				var str = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToPronPage':
				var str = msg.a;
				var level = msg.b;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToVocaPage':
				var str = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotProgressList':
				var listOfList = msg.a;
				return _Utils_Tuple2(
					function (m) {
						return _Utils_update(
							m,
							{
								awardList: A2(
									$elm$core$List$map,
									function (p) {
										return {
											date: A2(
												$author$project$TimeHelper$getDateStr,
												model.zone,
												$elm$time$Time$millisToPosix(p.date)),
											key: A3($author$project$GlobalPort$getResultKey, p.name, p.level, p.videoId),
											level: p.level,
											name: p.name,
											points: 10,
											videoId: p.videoId,
											videoName: A2(
												$elm$core$Maybe$withDefault,
												'',
												$elm$core$List$head(
													A2(
														$elm$core$List$map,
														function ($) {
															return $.name;
														},
														A2(
															$elm$core$List$filter,
															function (v) {
																return _Utils_eq(v.videoId, p.videoId);
															},
															model.videoList))))
										};
									},
									$elm$core$List$reverse(
										A2(
											$elm$core$List$sortBy,
											function ($) {
												return $.date;
											},
											m.progressList)))
							});
					}(
						_Utils_update(
							model,
							{
								progressList: $elm$core$List$concat(listOfList)
							})),
					$elm$core$Platform$Cmd$none);
			case 'GotTimeZone':
				var zone = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{zone: zone}),
					$elm$core$Platform$Cmd$none);
			case 'GotHistoryList':
				var result = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'CloseModal':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isModalOpen: false}),
					$elm$core$Platform$Cmd$none);
			case 'ListenClicked':
				var award = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{requestedAward: award, typeRequested: $author$project$GlobalPort$listenName}),
					A2($author$project$Utility$getLocal, 'listen-' + award.videoId, $author$project$AwardPage$GotKeyWordStr));
			case 'TapGameClicked':
				var award = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{requestedAward: award, typeRequested: $author$project$GlobalPort$tapGameName}),
					A2(
						$elm$core$Task$attempt,
						function (v) {
							if ((v.$ === 'Ok') && (v.a.$ === 'Just')) {
								var str = v.a.a;
								return $author$project$AwardPage$GotTapGameResult(
									A2(
										$elm$core$Result$withDefault,
										$author$project$ResultData$emptyTapGameResult,
										A2($elm$json$Json$Decode$decodeString, $author$project$ResultData$tapGameResultDecoder, str)));
							} else {
								return $author$project$AwardPage$GotTapGameResult($author$project$ResultData$emptyTapGameResult);
							}
						},
						$author$project$LocalStorage$localGet(award.key)));
			case 'SentenceClicked':
				var award = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{requestedAward: award, typeRequested: $author$project$GlobalPort$sentenceName}),
					A2(
						$elm$core$Task$attempt,
						function (v) {
							if ((v.$ === 'Ok') && (v.a.$ === 'Just')) {
								var str = v.a.a;
								return $author$project$AwardPage$GotSentenceResult(
									A2(
										$elm$core$Result$withDefault,
										$author$project$ResultData$emptySentenceResult,
										A2($elm$json$Json$Decode$decodeString, $author$project$ResultData$sentenceResultDecoder, str)));
							} else {
								return $author$project$AwardPage$GotSentenceResult($author$project$ResultData$emptySentenceResult);
							}
						},
						$author$project$LocalStorage$localGet(award.key)));
			case 'PronClicked':
				var award = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{requestedAward: award, typeRequested: $author$project$GlobalPort$pronName}),
					A2(
						$elm$core$Task$attempt,
						function (v) {
							if ((v.$ === 'Ok') && (v.a.$ === 'Just')) {
								var str = v.a.a;
								return $author$project$AwardPage$GotPronResult(
									A2(
										$elm$core$Result$withDefault,
										$author$project$ResultData$emptyPronResult,
										A2($elm$json$Json$Decode$decodeString, $author$project$ResultData$pronResultDecoder, str)));
							} else {
								return $author$project$AwardPage$GotPronResult($author$project$ResultData$emptyPronResult);
							}
						},
						$author$project$LocalStorage$localGet(award.key)));
			case 'GotTapGameResult':
				var result = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							isModalOpen: true,
							modalType: $author$project$AwardPage$TapGameModal(result)
						}),
					A2(
						$elm$core$Task$attempt,
						function (_v4) {
							return $author$project$AwardPage$NoOp;
						},
						A3($elm$browser$Browser$Dom$setViewportOf, 'result-view', 0, 0)));
			case 'GotSentenceResult':
				var result = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							isModalOpen: true,
							modalType: $author$project$AwardPage$SentenceModal(result)
						}),
					A2(
						$elm$core$Task$attempt,
						function (_v5) {
							return $author$project$AwardPage$NoOp;
						},
						A3($elm$browser$Browser$Dom$setViewportOf, 'result-view', 0, 0)));
			case 'GotPronResult':
				var result = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							isModalOpen: true,
							modalType: $author$project$AwardPage$PronModal(result)
						}),
					A2(
						$elm$core$Task$attempt,
						function (_v6) {
							return $author$project$AwardPage$NoOp;
						},
						A3($elm$browser$Browser$Dom$setViewportOf, 'result-view', 0, 0)));
			case 'ToRoadMapPage':
				var vid = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'AwardBtnClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isModalOpen: false, selectedCategory: '전체'}),
					(!$author$project$Utility$isApple) ? A2($author$project$HtmlElement$jumpToTop, 'list-scroll', $author$project$AwardPage$NoOp) : $elm$core$Platform$Cmd$none);
			case 'GotKeyWordStr':
				var str = msg.a;
				var vocaData = A2($author$project$DataManage$getVocaData, model.requestedAward.videoId, model.appData);
				var list = A2(
					$elm$core$Result$withDefault,
					_List_Nil,
					A2(
						$elm$json$Json$Decode$decodeString,
						$elm$json$Json$Decode$list(
							A3(
								$elm$json$Json$Decode$map2,
								$elm$core$Tuple$pair,
								A2($elm$json$Json$Decode$field, 'v', $elm$json$Json$Decode$string),
								A2($elm$json$Json$Decode$field, 'b', $elm$json$Json$Decode$bool))),
						str));
				var findFromCard = function (key) {
					return $elm$core$List$head(
						A2(
							$elm$core$List$filter,
							function (x) {
								return _Utils_eq(
									key,
									_Utils_ap(x.pron, x.word));
							},
							vocaData.cardList));
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							isModalOpen: true,
							modalType: $author$project$AwardPage$ListenModal(
								{
									quizResult: A2(
										$elm$core$List$filterMap,
										findFromCard,
										$author$project$AwardPage$unique(
											A2(
												$elm$core$List$map,
												$author$project$AwardPage$numberDrop,
												A2(
													$elm$core$List$map,
													$elm$core$Tuple$first,
													A2($elm$core$List$filter, $elm$core$Tuple$second, list)))))
								})
						}),
					A2(
						$elm$core$Task$attempt,
						function (_v7) {
							return $author$project$AwardPage$NoOp;
						},
						A3($elm$browser$Browser$Dom$setViewportOf, 'result-view', 0, 0)));
			case 'Speak':
				var str = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$speakCmd(str));
			case 'CategoryBtnClicked':
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{selectedCategory: str}),
					A2($author$project$HtmlElement$jumpToTop, 'list-scroll', $author$project$AwardPage$NoOp));
			case 'GotBookmarkStrList':
				var strList = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							bookmarkData: A2(
								$elm$core$List$filterMap,
								function (str) {
									var _v8 = A2($elm$json$Json$Decode$decodeString, $author$project$GlobalPort$bookmarkDataDecoder, str);
									if (_v8.$ === 'Ok') {
										var bookmark = _v8.a;
										return $elm$core$List$isEmpty(bookmark.vocaList) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(bookmark);
									} else {
										return $elm$core$Maybe$Nothing;
									}
								},
								strList)
						}),
					$elm$core$Platform$Cmd$none);
			case 'BookmarkItemBtnClick':
				var vid = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isModalOpen: true, selectedBookmarkVid: vid}),
					A2(
						$elm$core$Task$attempt,
						function (_v9) {
							return $author$project$AwardPage$NoOp;
						},
						A3($elm$browser$Browser$Dom$setViewportOf, 'result-view', 0, 0)));
			default:
				return model.isModalOpen ? _Utils_Tuple2(
					_Utils_update(
						model,
						{isModalOpen: false}),
					$elm$core$Platform$Cmd$none) : ((model.selectedCategory === '전체') ? _Utils_Tuple2(
					model,
					A2(
						$elm$core$Task$perform,
						function (_v10) {
							return $author$project$AwardPage$ToMainPage;
						},
						$elm$time$Time$now)) : _Utils_Tuple2(
					_Utils_update(
						model,
						{selectedCategory: '전체'}),
					$elm$core$Platform$Cmd$none));
		}
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$foldl = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldl,
			func,
			A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var $elm$json$Json$Encode$array = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$Array$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$json$Json$Encode$float = _Json_wrap;
var $elm$core$Elm$JsArray$map = _JsArray_map;
var $elm$core$Array$map = F2(
	function (func, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = function (node) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return $elm$core$Array$SubTree(
					A2($elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return $elm$core$Array$Leaf(
					A2($elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2($elm$core$Elm$JsArray$map, helper, tree),
			A2($elm$core$Elm$JsArray$map, func, tail));
	});
var $author$project$EditableValue$encode = function (value) {
	switch (value.$) {
		case 'JsonString':
			var s = value.a;
			return $elm$json$Json$Encode$string(s);
		case 'JsonInt':
			var i = value.a;
			return $elm$json$Json$Encode$int(i);
		case 'JsonFloat':
			var f = value.a;
			return $elm$json$Json$Encode$float(f);
		case 'JsonArray':
			var a = value.a;
			return A2($elm$json$Json$Encode$array, $author$project$EditableValue$encode, a);
		case 'JsonObject':
			var a = value.a;
			return $elm$json$Json$Encode$object(
				$elm$core$Array$toList(
					A2(
						$elm$core$Array$map,
						function (_v1) {
							var key = _v1.a;
							var val = _v1.b;
							return _Utils_Tuple2(
								key,
								$author$project$EditableValue$encode(val));
						},
						a)));
		case 'JsonBool':
			var b = value.a;
			return $elm$json$Json$Encode$bool(b);
		default:
			return $elm$json$Json$Encode$null;
	}
};
var $author$project$GlobalPort$newTab = _Platform_outgoingPort('newTab', $elm$json$Json$Encode$string);
var $author$project$InfoPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToRoadMap':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'SaveClicked':
				return _Utils_Tuple2(
					model,
					A3(
						$elm$file$File$Download$string,
						'data.txt',
						'text',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$EditableValue$encode(model.editableValue))));
			case 'SetEditableValue':
				var editableValue = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: A2(
								$elm$core$Result$withDefault,
								$author$project$DataManage$emptyInfoData,
								A2(
									$elm$json$Json$Decode$decodeValue,
									$author$project$DataManage$infoDataDecoder,
									$author$project$EditableValue$encode(editableValue))),
							editableValue: editableValue
						}),
					$elm$core$Platform$Cmd$none);
			case 'OriginalYoutubeLinkClicked':
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$newTab('https://www.youtube.com/watch?v=' + model.data.videoId));
			case 'AYoutubeLinkClicked':
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$newTab('https://www.youtube.com/watch?v=' + model.data.aVid));
			default:
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$newTab('https://www.youtube.com/watch?v=' + model.data.bVid));
		}
	});
var $author$project$ListenPage$GotRuby = function (a) {
	return {$: 'GotRuby', a: a};
};
var $author$project$ListenPage$HiraMode = {$: 'HiraMode'};
var $author$project$ListenPage$JpFileLoaded = function (a) {
	return {$: 'JpFileLoaded', a: a};
};
var $author$project$ListenPage$JpFileSelected = function (a) {
	return {$: 'JpFileSelected', a: a};
};
var $author$project$ListenPage$KorFileLoaded = function (a) {
	return {$: 'KorFileLoaded', a: a};
};
var $author$project$ListenPage$KorFileSelected = function (a) {
	return {$: 'KorFileSelected', a: a};
};
var $author$project$ListenPage$nextSub = function (model) {
	return A2($elm$core$Array$get, model.subIdx + 1, model.subArray);
};
var $author$project$ListenPage$basicGoRight = function (model) {
	var _v0 = $author$project$ListenPage$nextSub(model);
	if (_v0.$ === 'Just') {
		var sub = _v0.a;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{currentTime: sub.startTime, subIdx: model.subIdx + 1}),
			$author$project$GlobalPort$seekToMillisCmd(sub.startTime));
	} else {
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	}
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $author$project$ListenPage$currentSub = function (model) {
	return A2($elm$core$Array$get, model.subIdx, model.subArray);
};
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $elm$file$File$Select$file = F2(
	function (mimes, toMsg) {
		return A2(
			$elm$core$Task$perform,
			toMsg,
			_File_uploadOne(mimes));
	});
var $author$project$DataManage$errorTimedText = {comment: '', endTime: -1, kor: '', pron: '아', rubiedText: 'KOR', startTime: -1, text: 'ERR', words: ''};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $author$project$DataManage$srtTimeRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\d\\d):(\\d\\d):(\\d\\d),(\\d\\d\\d)'));
var $author$project$DataManage$getSrtTime = function (raw) {
	var _v0 = $elm$core$List$head(
		A2($elm$regex$Regex$find, $author$project$DataManage$srtTimeRegex, raw));
	if (_v0.$ === 'Just') {
		var head = _v0.a;
		var x = A2(
			$elm$core$List$map,
			$elm$core$Maybe$withDefault(-1),
			A2(
				$elm$core$List$map,
				$elm$core$Maybe$andThen($elm$core$String$toInt),
				head.submatches));
		if ((((x.b && x.b.b) && x.b.b.b) && x.b.b.b.b) && (!x.b.b.b.b.b)) {
			var h = x.a;
			var _v2 = x.b;
			var m = _v2.a;
			var _v3 = _v2.b;
			var s = _v3.a;
			var _v4 = _v3.b;
			var n = _v4.a;
			return ((((h * 3600) + (m * 60)) + s) * 1000) + n;
		} else {
			return -1;
		}
	} else {
		return -1;
	}
};
var $author$project$DataManage$srtRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('\\d+?\n(.+?)\n([\\S\\s]+?)\n\n'));
var $author$project$DataManage$getSubData = function (raw) {
	return A2(
		$elm$core$List$map,
		function (s) {
			if ((((s.b && (s.a.$ === 'Just')) && s.b.b) && (s.b.a.$ === 'Just')) && (!s.b.b.b)) {
				var time = s.a.a;
				var _v1 = s.b;
				var text = _v1.a.a;
				var _v2 = A2($elm$core$String$split, ' --> ', time);
				if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
					var left = _v2.a;
					var _v3 = _v2.b;
					var right = _v3.a;
					return {
						comment: '',
						endTime: $author$project$DataManage$getSrtTime(right),
						kor: '',
						pron: '',
						rubiedText: '',
						startTime: $author$project$DataManage$getSrtTime(left),
						text: text,
						words: ''
					};
				} else {
					return $author$project$DataManage$errorTimedText;
				}
			} else {
				return $author$project$DataManage$errorTimedText;
			}
		},
		A2(
			$elm$core$List$map,
			function ($) {
				return $.submatches;
			},
			A2(
				$elm$regex$Regex$find,
				$author$project$DataManage$srtRegex,
				A3($elm$core$String$replace, '\u000D', '', raw))));
};
var $author$project$DataManage$getMerged = F2(
	function (korStr, jpKor) {
		var subList = $author$project$DataManage$getSubData(jpKor);
		var korSubList = $author$project$DataManage$getSubData(korStr);
		var getOneSub = F2(
			function (time, list) {
				return $elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var startTime = _v0.startTime;
							var endTime = _v0.endTime;
							return (_Utils_cmp(startTime, time) < 1) && (_Utils_cmp(time, endTime) < 1);
						},
						list));
			});
		var mapper = function (sub) {
			var middleTime = ((sub.startTime + sub.endTime) / 2) | 0;
			return _Utils_update(
				sub,
				{
					kor: A2(
						$elm$core$Maybe$withDefault,
						'',
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.text;
							},
							A2(getOneSub, middleTime, korSubList)))
				});
		};
		return A2($elm$core$List$map, mapper, subList);
	});
var $author$project$Hangul$hangulTable = '아이우에오카키쿠케코사시스세소타치츠테토나니누네노하히후헤호마미무메모야유요라리루레로와오응가기구게고자지즈제조다지즈데도바비부베보파피푸페포';
var $author$project$Hangul$katakanaTable = 'アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポ';
var $author$project$Hangul$kataHanTable = A3(
	$elm$core$List$map2,
	$elm$core$Tuple$pair,
	$elm$core$String$toList($author$project$Hangul$katakanaTable),
	$elm$core$String$toList($author$project$Hangul$hangulTable));
var $author$project$Hangul$hanToKata = function (x) {
	return A2(
		$elm$core$Maybe$withDefault,
		x,
		A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$first,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var h = _v0.b;
						return _Utils_eq(h, x);
					},
					$author$project$Hangul$kataHanTable))));
};
var $author$project$Hangul$firstTable = 'ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ';
var $elm$core$Char$fromCode = _Char_fromCode;
var $author$project$Hangul$hangulBase = 44032;
var $author$project$Hangul$secondTable = 'ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ';
var $author$project$Hangul$thirdTable = ' ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ';
var $author$project$Hangul$mergeHangul = F3(
	function (first, second, third) {
		var t = A2(
			$elm$core$String$indexes,
			$elm$core$String$fromChar(third),
			$author$project$Hangul$thirdTable);
		var s = A2(
			$elm$core$String$indexes,
			$elm$core$String$fromChar(second),
			$author$project$Hangul$secondTable);
		var f = A2(
			$elm$core$String$indexes,
			$elm$core$String$fromChar(first),
			$author$project$Hangul$firstTable);
		var convert = F3(
			function (a, b, c) {
				return $elm$core$Char$fromCode(($author$project$Hangul$hangulBase + (((a * 21) + b) * 28)) + c);
			});
		var _v0 = _Utils_Tuple3(f, s, t);
		if ((_v0.a.b && _v0.b.b) && _v0.c.b) {
			var _v1 = _v0.a;
			var a = _v1.a;
			var _v2 = _v0.b;
			var b = _v2.a;
			var _v3 = _v0.c;
			var c = _v3.a;
			return A3(convert, a, b, c);
		} else {
			return _Utils_chr(' ');
		}
	});
var $author$project$Hangul$hangulLast = 55199;
var $author$project$Hangul$splitHangul = function (hangul) {
	var code = $elm$core$Char$toCode(hangul);
	if ((_Utils_cmp(code, $author$project$Hangul$hangulBase) < 0) || (_Utils_cmp(code, $author$project$Hangul$hangulLast) > 0)) {
		return $elm$core$Maybe$Nothing;
	} else {
		var code1 = code - $author$project$Hangul$hangulBase;
		var code2 = code1 % (21 * 28);
		var idxB = (code2 / 28) | 0;
		var idxC = code2 % 28;
		var idxA = (code1 / (21 * 28)) | 0;
		var c = A3($elm$core$String$slice, idxC, idxC + 1, $author$project$Hangul$thirdTable);
		var b = A3($elm$core$String$slice, idxB, idxB + 1, $author$project$Hangul$secondTable);
		var a = A3($elm$core$String$slice, idxA, idxA + 1, $author$project$Hangul$firstTable);
		var _v0 = _Utils_Tuple3(
			$elm$core$String$toList(a),
			$elm$core$String$toList(b),
			$elm$core$String$toList(c));
		if ((_v0.a.b && _v0.b.b) && _v0.c.b) {
			var _v1 = _v0.a;
			var x = _v1.a;
			var _v2 = _v0.b;
			var y = _v2.a;
			var _v3 = _v0.c;
			var z = _v3.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple3(x, y, z));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $author$project$Hangul$hangulToKatakana = function (str) {
	var getLong = function (b) {
		switch (b.valueOf()) {
			case 'ㅣ':
				return _List_fromArray(
					[
						_Utils_chr('イ')
					]);
			case 'ㅔ':
				return _List_fromArray(
					[
						_Utils_chr('イ')
					]);
			case 'ㅏ':
				return _List_fromArray(
					[
						_Utils_chr('ア')
					]);
			default:
				return _List_fromArray(
					[
						_Utils_chr('ウ')
					]);
		}
	};
	var getFinal = function (c) {
		switch (c.valueOf()) {
			case 'ㄴ':
				return _List_fromArray(
					[
						_Utils_chr('ン')
					]);
			case 'ㅇ':
				return _List_fromArray(
					[
						_Utils_chr('ン')
					]);
			case 'ㅁ':
				return _List_fromArray(
					[
						_Utils_chr('ン')
					]);
			case 'ㅅ':
				return _List_fromArray(
					[
						_Utils_chr('ッ')
					]);
			default:
				return _List_Nil;
		}
	};
	var aux = function (list) {
		if (list.b) {
			if (list.b.b && ('-' === list.b.a.valueOf())) {
				var hd = list.a;
				var _v1 = list.b;
				var tl = _v1.b;
				var _v2 = $author$project$Hangul$splitHangul(hd);
				_v2$2:
				while (true) {
					_v2$6:
					while (true) {
						if (_v2.$ === 'Just') {
							switch (_v2.a.b.valueOf()) {
								case 'ㅣ':
									switch (_v2.a.a.valueOf()) {
										case 'ㅌ':
											if (' ' === _v2.a.c.valueOf()) {
												var _v3 = _v2.a;
												return $elm$core$List$concat(
													_List_fromArray(
														[
															_List_fromArray(
															[
																_Utils_chr('テ'),
																_Utils_chr('ィ')
															]),
															_List_fromArray(
															[
																_Utils_chr('イ')
															]),
															aux(tl)
														]));
											} else {
												break _v2$6;
											}
										case 'ㄷ':
											if (' ' === _v2.a.c.valueOf()) {
												var _v4 = _v2.a;
												return $elm$core$List$concat(
													_List_fromArray(
														[
															_List_fromArray(
															[
																_Utils_chr('デ'),
																_Utils_chr('ィ')
															]),
															_List_fromArray(
															[
																_Utils_chr('イ')
															]),
															aux(tl)
														]));
											} else {
												break _v2$6;
											}
										case 'ㅇ':
											break _v2$2;
										default:
											break _v2$6;
									}
								case 'ㅑ':
									if ('ㅇ' === _v2.a.a.valueOf()) {
										break _v2$2;
									} else {
										var _v6 = _v2.a;
										var a = _v6.a;
										var c = _v6.c;
										return $elm$core$List$concat(
											_List_fromArray(
												[
													_List_fromArray(
													[
														$author$project$Hangul$hanToKata(
														A3(
															$author$project$Hangul$mergeHangul,
															a,
															_Utils_chr('ㅣ'),
															_Utils_chr(' ')))
													]),
													_List_fromArray(
													[
														_Utils_chr('ャ')
													]),
													getFinal(c),
													_List_fromArray(
													[
														_Utils_chr('ウ')
													]),
													aux(tl)
												]));
									}
								case 'ㅠ':
									if ('ㅇ' === _v2.a.a.valueOf()) {
										break _v2$2;
									} else {
										var _v7 = _v2.a;
										var a = _v7.a;
										var c = _v7.c;
										return $elm$core$List$concat(
											_List_fromArray(
												[
													_List_fromArray(
													[
														$author$project$Hangul$hanToKata(
														A3(
															$author$project$Hangul$mergeHangul,
															a,
															_Utils_chr('ㅣ'),
															_Utils_chr(' ')))
													]),
													_List_fromArray(
													[
														_Utils_chr('ュ')
													]),
													getFinal(c),
													_List_fromArray(
													[
														_Utils_chr('ウ')
													]),
													aux(tl)
												]));
									}
								case 'ㅛ':
									if ('ㅇ' === _v2.a.a.valueOf()) {
										break _v2$2;
									} else {
										var _v8 = _v2.a;
										var a = _v8.a;
										var c = _v8.c;
										return $elm$core$List$concat(
											_List_fromArray(
												[
													_List_fromArray(
													[
														$author$project$Hangul$hanToKata(
														A3(
															$author$project$Hangul$mergeHangul,
															a,
															_Utils_chr('ㅣ'),
															_Utils_chr(' ')))
													]),
													_List_fromArray(
													[
														_Utils_chr('ョ')
													]),
													getFinal(c),
													_List_fromArray(
													[
														_Utils_chr('ウ')
													]),
													aux(tl)
												]));
									}
								default:
									if ('ㅇ' === _v2.a.a.valueOf()) {
										break _v2$2;
									} else {
										break _v2$6;
									}
							}
						} else {
							return A2(
								$elm$core$List$cons,
								hd,
								aux(tl));
						}
					}
					var _v9 = _v2.a;
					var a = _v9.a;
					var b = _v9.b;
					var c = _v9.c;
					return $elm$core$List$concat(
						_List_fromArray(
							[
								_List_fromArray(
								[
									$author$project$Hangul$hanToKata(
									A3(
										$author$project$Hangul$mergeHangul,
										a,
										b,
										_Utils_chr(' ')))
								]),
								getFinal(c),
								getLong(b),
								aux(tl)
							]));
				}
				var _v5 = _v2.a;
				var b = _v5.b;
				var c = _v5.c;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							_List_fromArray(
							[
								$author$project$Hangul$hanToKata(
								A3(
									$author$project$Hangul$mergeHangul,
									_Utils_chr('ㅇ'),
									b,
									_Utils_chr(' ')))
							]),
							getFinal(c),
							getLong(b),
							aux(tl)
						]));
			} else {
				var hd = list.a;
				var tl = list.b;
				var _v10 = $author$project$Hangul$splitHangul(hd);
				_v10$2:
				while (true) {
					_v10$6:
					while (true) {
						if (_v10.$ === 'Just') {
							switch (_v10.a.b.valueOf()) {
								case 'ㅣ':
									switch (_v10.a.a.valueOf()) {
										case 'ㅌ':
											if (' ' === _v10.a.c.valueOf()) {
												var _v11 = _v10.a;
												return $elm$core$List$concat(
													_List_fromArray(
														[
															_List_fromArray(
															[
																_Utils_chr('テ'),
																_Utils_chr('ィ')
															]),
															aux(tl)
														]));
											} else {
												break _v10$6;
											}
										case 'ㄷ':
											if (' ' === _v10.a.c.valueOf()) {
												var _v12 = _v10.a;
												return $elm$core$List$concat(
													_List_fromArray(
														[
															_List_fromArray(
															[
																_Utils_chr('デ'),
																_Utils_chr('ィ')
															]),
															aux(tl)
														]));
											} else {
												break _v10$6;
											}
										case 'ㅇ':
											break _v10$2;
										default:
											break _v10$6;
									}
								case 'ㅑ':
									if ('ㅇ' === _v10.a.a.valueOf()) {
										break _v10$2;
									} else {
										var _v14 = _v10.a;
										var a = _v14.a;
										var c = _v14.c;
										return $elm$core$List$concat(
											_List_fromArray(
												[
													_List_fromArray(
													[
														$author$project$Hangul$hanToKata(
														A3(
															$author$project$Hangul$mergeHangul,
															a,
															_Utils_chr('ㅣ'),
															_Utils_chr(' ')))
													]),
													_List_fromArray(
													[
														_Utils_chr('ャ')
													]),
													getFinal(c),
													aux(tl)
												]));
									}
								case 'ㅠ':
									if ('ㅇ' === _v10.a.a.valueOf()) {
										break _v10$2;
									} else {
										var _v15 = _v10.a;
										var a = _v15.a;
										var c = _v15.c;
										return $elm$core$List$concat(
											_List_fromArray(
												[
													_List_fromArray(
													[
														$author$project$Hangul$hanToKata(
														A3(
															$author$project$Hangul$mergeHangul,
															a,
															_Utils_chr('ㅣ'),
															_Utils_chr(' ')))
													]),
													_List_fromArray(
													[
														_Utils_chr('ュ')
													]),
													getFinal(c),
													aux(tl)
												]));
									}
								case 'ㅛ':
									if ('ㅇ' === _v10.a.a.valueOf()) {
										break _v10$2;
									} else {
										var _v16 = _v10.a;
										var a = _v16.a;
										var c = _v16.c;
										return $elm$core$List$concat(
											_List_fromArray(
												[
													_List_fromArray(
													[
														$author$project$Hangul$hanToKata(
														A3(
															$author$project$Hangul$mergeHangul,
															a,
															_Utils_chr('ㅣ'),
															_Utils_chr(' ')))
													]),
													_List_fromArray(
													[
														_Utils_chr('ョ')
													]),
													getFinal(c),
													aux(tl)
												]));
									}
								default:
									if ('ㅇ' === _v10.a.a.valueOf()) {
										break _v10$2;
									} else {
										break _v10$6;
									}
							}
						} else {
							return A2(
								$elm$core$List$cons,
								hd,
								aux(tl));
						}
					}
					var _v17 = _v10.a;
					var a = _v17.a;
					var b = _v17.b;
					var c = _v17.c;
					return $elm$core$List$concat(
						_List_fromArray(
							[
								_List_fromArray(
								[
									$author$project$Hangul$hanToKata(
									A3(
										$author$project$Hangul$mergeHangul,
										a,
										b,
										_Utils_chr(' ')))
								]),
								getFinal(c),
								aux(tl)
							]));
				}
				var _v13 = _v10.a;
				var b = _v13.b;
				var c = _v13.c;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							_List_fromArray(
							[
								$author$project$Hangul$hanToKata(
								A3(
									$author$project$Hangul$mergeHangul,
									_Utils_chr('ㅇ'),
									b,
									_Utils_chr(' ')))
							]),
							getFinal(c),
							aux(tl)
						]));
			}
		} else {
			return _List_Nil;
		}
	};
	return $elm$core$String$fromList(
		aux(
			$elm$core$String$toList(str)));
};
var $author$project$Hangul$katakanaToHiragana = function (str) {
	return $elm$core$String$fromList(
		A2(
			$elm$core$List$map,
			$elm$core$Char$fromCode,
			A2(
				$elm$core$List$map,
				function (x) {
					return ((12448 <= x) && (x <= 12543)) ? (x - 96) : x;
				},
				A2(
					$elm$core$List$map,
					$elm$core$Char$toCode,
					$elm$core$String$toList(str)))));
};
var $author$project$Hangul$hangulToHiragana = A2($elm$core$Basics$composeR, $author$project$Hangul$hangulToKatakana, $author$project$Hangul$katakanaToHiragana);
var $author$project$Utility$removeSpaceButAlpha = function (str) {
	return $elm$core$String$fromList(
		A3(
			$elm$core$List$foldr,
			F2(
				function (ele, acc) {
					if ((acc.b && (' ' === acc.a.valueOf())) && acc.b.b) {
						var _v1 = acc.b;
						var b = _v1.a;
						var tl = _v1.b;
						return ($elm$core$Char$isAlpha(ele) && $elm$core$Char$isAlpha(b)) ? A2($elm$core$List$cons, ele, acc) : A2(
							$elm$core$List$cons,
							ele,
							A2($elm$core$List$cons, b, tl));
					} else {
						return A2($elm$core$List$cons, ele, acc);
					}
				}),
			_List_Nil,
			$elm$core$String$toList(str)));
};
var $author$project$Utility$getSpeakString = function (card) {
	return A2(
		$elm$core$List$all,
		function (code) {
			return (12448 <= code) && (code <= 12543);
		},
		A2(
			$elm$core$List$map,
			$elm$core$Char$toCode,
			$elm$core$String$toList(card.word))) ? card.word : ($elm$core$String$isEmpty(
		$elm$core$String$trim(card.pron)) ? card.word : function (x) {
		return $author$project$Utility$isApple ? x : A3($elm$core$String$replace, 'は', '하', x);
	}(
		$author$project$Utility$removeSpaceButAlpha(
			$author$project$Hangul$hangulToHiragana(
				A3($elm$core$String$replace, '~', '', card.pron)))));
};
var $author$project$DataManage$getSubDataKor = function (raw) {
	return A2(
		$elm$core$List$map,
		function (s) {
			if ((((s.b && (s.a.$ === 'Just')) && s.b.b) && (s.b.a.$ === 'Just')) && (!s.b.b.b)) {
				var time = s.a.a;
				var _v1 = s.b;
				var text = _v1.a.a;
				var _v2 = A2($elm$core$String$split, ' --> ', time);
				if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
					var left = _v2.a;
					var _v3 = _v2.b;
					var right = _v3.a;
					return {
						comment: '',
						endTime: $author$project$DataManage$getSrtTime(right),
						kor: text,
						pron: '',
						rubiedText: '',
						startTime: $author$project$DataManage$getSrtTime(left),
						text: '',
						words: ''
					};
				} else {
					return $author$project$DataManage$errorTimedText;
				}
			} else {
				return $author$project$DataManage$errorTimedText;
			}
		},
		A2(
			$elm$core$List$map,
			function ($) {
				return $.submatches;
			},
			A2(
				$elm$regex$Regex$find,
				$author$project$DataManage$srtRegex,
				A3($elm$core$String$replace, '\u000D', '', raw))));
};
var $author$project$Hangul$hanjaCSV = '家\t집 가\r\n歌\t노래 가\r\n價\t값 가\r\n加\t더할 가\r\n可\t옳을 가\r\n假\t거짓 가\r\n街\t거리 가\r\n暇\t틈/겨를 가\r\n佳\t아름다울 가\r\n架\t시렁 가\r\n柯\t가지 가\r\n賈\t성 가 | 장사 고\r\n軻\t수레/사람이름 가\r\n迦\t부처이름 가\r\n伽\t절 가\r\n嘉\t아름다울 가\r\n呵\t꾸짖을 가\r\n嫁\t시집갈 가\r\n稼\t심을 가\r\n苛\t가혹할 가\r\n袈\t가사 가\r\n駕\t멍에 가\r\n哥\t성 가\r\n痂\t헌데딱지 가\r\n珂\t옥이름 가\r\n茄\t가지 가\r\n訶\t꾸짖을 가\r\n跏\t책상다리할 가\r\n枷\t칼/도리깨 가\r\n斝\t옥잔 가\r\n葭\t갈대 가 | 멀 하\r\n檟\t가나무 가\r\n哿\t가할 가\r\n珈\t머리꾸미개 가\r\n各\t각각 각\r\n角\t뿔 각\r\n刻\t새길 각\r\n覺\t깨달을 각\r\n脚\t다리 각\r\n閣\t집 각\r\n却\t물리칠 각\r\n珏\t쌍옥 각\r\n恪\t삼갈 각\r\n殼\t껍질 각\r\n慤\t정성/삼갈 각\r\n桷\t서까래 각\r\n卻\t물리칠 각\r\n間\t사이 간\r\n簡\t대쪽/간략할 간\r\n看\t볼 간\r\n干\t방패 간\r\n刊\t새길 간\r\n幹\t줄기 간\r\n懇\t간절할 간\r\n肝\t간 간\r\n姦\t간음할 간\r\n杆\t몽둥이 간\r\n艮\t괘이름 간\r\n奸\t간사할 간\r\n墾\t개간할 간\r\n澗\t산골물 간\r\n癎\t간질 간\r\n竿\t낚싯대 간\r\n艱\t어려울 간\r\n諫\t간할 간\r\n揀\t가릴 간\r\n稈\t볏짚 간\r\n磵\t시내 간\r\n桿\t막대 간\r\n柬\t가릴 간\r\n侃\t강직할 간\r\n蕑\t난초/연밥 간\r\n玕\t옥돌 간\r\n榦\t줄기 간 | 우물난간 한\r\n瞯\t엿볼 간 | 곁눈질할 한\r\n衎\t즐길/곧을 간\r\n渴\t목마를 갈\r\n葛\t칡 갈\r\n鞨\t오랑캐이름 갈\r\n喝\t꾸짖을 갈\r\n竭\t다할 갈\r\n褐\t갈색/굵은베 갈\r\n碣\t비석 갈\r\n曷\t어찌 갈\r\n乫\t땅이름 갈\r\n蝎\t전갈 갈\r\n秸\t볏짚 갈\r\n感\t느낄 감\r\n減\t덜 감\r\n監\t볼 감\r\n甘\t달 감\r\n敢\t감히/구태여 감\r\n鑑\t거울 감\r\n憾\t섭섭할 감\r\n堪\t견딜 감\r\n柑\t귤 감\r\n疳\t감질 감\r\n瞰\t굽어볼 감\r\n紺\t감색/연보라 감\r\n勘\t헤아릴 감\r\n嵌\t끼울 감\r\n坎\t구덩이 감\r\n橄\t감람나무 감\r\n鑒\t거울 감\r\n戡\t이길 감\r\n龕\t감실 감\r\n矙\t엿볼 감\r\n欿\t서운할 감\r\n减\t덜 감\r\n酣\t술즐길 감\r\n歛\t바랄 감\r\n甲\t갑옷 갑\r\n鉀\t갑옷 갑\r\n岬\t곶 갑\r\n匣\t갑 갑\r\n閘\t수문 갑\r\n胛\t어깻죽지 갑\r\n江\t강 강\r\n強\t강할 강\r\n講\t욀 강\r\n康\t편안 강\r\n降\t내릴 강 | 항복할 항\r\n剛\t굳셀 강\r\n綱\t벼리 강\r\n鋼\t강철 강\r\n姜\t성 강\r\n崗\t언덕 강\r\n疆\t지경 강\r\n岡\t산등성이 강\r\n彊\t굳셀 강\r\n腔\t속빌 강\r\n慷\t슬플 강\r\n糠\t겨 강\r\n薑\t생강 강\r\n絳\t짙게붉을 강\r\n羌\t오랑캐 강\r\n鱇\t아귀 강\r\n畺\t지경 강\r\n强\t강할 강\r\n堈\t독 강\r\n舡\t배 강\r\n襁\t포대기 강\r\n橿\t참죽나무 강\r\n杠\t깃대 강\r\n開\t열 개\r\n改\t고칠 개\r\n個\t낱 개\r\n槪\t대개 개\r\n介\t낄 개\r\n蓋\t덮을 개\r\n皆\t다 개\r\n慨\t슬퍼할 개\r\n价\t클 개\r\n塏\t높은땅 개\r\n愾\t성낼 개\r\n漑\t물댈 개\r\n凱\t개선할 개\r\n箇\t낱 개\r\n芥\t겨자 개\r\n疥\t옴 개\r\n盖\t덮을 개\r\n鎧\t갑옷 개\r\n愷\t즐거울 개\r\n湝\t물흐를 개\r\n喈\t새소리/빠를 개\r\n槩\t평미레 개\r\n玠\t큰홀 개\r\n嘅\t탄식할 개\r\n客\t손 객\r\n喀\t토할 객\r\n坑\t구덩이 갱\r\n羹\t국 갱\r\n粳\t메벼 갱\r\n鏗\t금석소리 갱\r\n賡\t이을 갱\r\n硜\t돌소리 갱\r\n秔\t메벼 갱\r\n臄\t순대 갹\r\n車\t수레 거 | 수레 차\r\n擧\t들 거\r\n去\t갈 거\r\n拒\t막을 거\r\n居\t살 거\r\n據\t근거 거\r\n巨\t클 거\r\n距\t상거할 거\r\n醵\t추렴할 거 | 추렴할 갹\r\n渠\t개천 거\r\n倨\t거만할 거\r\n踞\t걸어앉을 거\r\n炬\t횃불 거\r\n遽\t급할 거\r\n鋸\t톱 거\r\n鉅\t톱/클 거\r\n祛\t떨어없앨 거\r\n据\t일할/의거할 거\r\n虡\t쇠북걸이틀 거\r\n籧\t대자리 거\r\n筥\t광주리 거 | 밥통 려\r\n蘧\t패랭이꽃 거\r\n莒\t나라이름 거\r\n琚\t패옥 거\r\n秬\t검은기장 거\r\n袪\t소매 거\r\n椐\t느티나무 거\r\n件\t물건 건\r\n建\t세울 건\r\n健\t굳셀 건\r\n乾\t하늘/마를 건\r\n鍵\t자물쇠/열쇠 건\r\n巾\t수건 건\r\n腱\t힘줄 건\r\n虔\t공경할 건\r\n愆\t허물 건\r\n楗\t문빗장 건\r\n騫\t이지러질 건\r\n蹇\t절 건\r\n褰\t걷을 건\r\n傑\t뛰어날 걸\r\n乞\t빌 걸\r\n桀\t하왕이름 걸\r\n杰\t뛰어날 걸\r\n朅\t떠날 걸\r\n檢\t검사할 검\r\n儉\t검소할 검\r\n劍\t칼 검\r\n鈐\t자물쇠 검\r\n瞼\t눈시울 검\r\n黔\t검을 검\r\n劒\t칼 검\r\n怯\t겁낼 겁\r\n劫\t위협할 겁\r\n迲\t자래 겁\r\n跲\t엎드러질 겁\r\n憩\t쉴 게\r\n揭\t높이들/걸 게\r\n偈\t불시 게\r\n愒\t쉴 게 | 탐할 개\r\n格\t격식 격\r\n擊\t칠 격\r\n激\t격할 격\r\n隔\t사이뜰 격\r\n檄\t격문 격\r\n膈\t가슴 격\r\n覡\t박수 격\r\n綌\t굵은갈포 격\r\n繳\t주살 격 | 동일 교\r\n鵙\t왜가리 격\r\n鴃\t왜가리 격\r\n見\t볼 견 | 뵈올 현\r\n堅\t굳을 견\r\n犬\t개 견\r\n遣\t보낼 견\r\n肩\t어깨 견\r\n絹\t비단 견\r\n牽\t이끌/끌 견\r\n甄\t질그릇 견\r\n繭\t고치 견\r\n譴\t꾸짖을 견\r\n鵑\t두견새 견\r\n豣\t돼지/노루 견\r\n睊\t흘겨볼 견\r\n獧\t뛸 견 | 급할 현\r\n岍\t산이름 견\r\n蠲\t덜/정결할 견\r\n繾\t곡진할 견\r\n畎\t밭고랑 견\r\n狷\t고집스러울 견\r\n結\t맺을 결\r\n決\t결단할 결\r\n潔\t깨끗할 결\r\n缺\t이지러질 결\r\n訣\t이별할 결\r\n抉\t도려낼 결\r\n袺\t옷섶잡을 결\r\n闋\t마칠 결\r\n觼\t쇠고리 결\r\n兼\t겸할 겸\r\n謙\t겸손할 겸\r\n鎌\t낫 겸\r\n慊\t앙심먹을 겸 | 족할 협\r\n鉗\t집게 겸\r\n箝\t재갈 겸\r\n歉\t흉년들 겸\r\n蒹\t갈대 겸\r\n京\t서울 경\r\n敬\t공경 경\r\n輕\t가벼울 경\r\n競\t다툴 경\r\n景\t볕 경\r\n境\t지경 경\r\n經\t지날/글 경\r\n警\t깨우칠 경\r\n慶\t경사 경\r\n驚\t놀랄 경\r\n更\t고칠 경 | 다시 갱\r\n傾\t기울 경\r\n鏡\t거울 경\r\n頃\t이랑/잠깐 경\r\n徑\t지름길/길 경\r\n硬\t굳을 경\r\n耕\t밭갈 경\r\n卿\t벼슬 경\r\n庚\t별 경\r\n竟\t마침내 경\r\n璟\t옥빛 경\r\n儆\t경계할 경\r\n瓊\t구슬 경\r\n炅\t빛날 경\r\n勁\t굳셀 경\r\n鯨\t고래 경\r\n憬\t깨달을/동경할 경\r\n頸\t목 경\r\n莖\t줄기 경\r\n脛\t정강이 경\r\n磬\t경쇠 경\r\n痙\t경련 경\r\n梗\t줄기/막힐 경\r\n倞\t굳셀 경\r\n勍\t굳셀 경\r\n涇\t물이름 경\r\n逕\t길 경\r\n耿\t빛날 경\r\n絅\t당길/홑옷 경\r\n擎\t받들 경\r\n俓\t지름길 경\r\n坰\t들 경\r\n暻\t밝을 경\r\n璥\t옥이름 경\r\n罄\t다할 경\r\n睘\t놀라서볼 경\r\n鶊\t꾀꼬리 경\r\n牼\t소정강이뼈 경\r\n冂\t멀 경\r\n黥\t자자할 경\r\n褧\t홑옷 경\r\n熲\t빛날 경\r\n焭\t외로울 경\r\n煢\t외로울 경\r\n檠\t등잔걸이 경\r\n惸\t근심할 경\r\n冏\t빛날 경\r\n駉\t살찌고큰 경\r\n界\t지경 계\r\n計\t셀 계\r\n係\t맬 계\r\n階\t섬돌 계\r\n鷄\t닭 계\r\n季\t계절 계\r\n系\t이어맬 계\r\n繼\t이을 계\r\n戒\t경계할 계\r\n契\t맺을 계\r\n桂\t계수나무 계\r\n啓\t열 계\r\n溪\t시내 계\r\n械\t기계 계\r\n繫\t맬 계\r\n癸\t북방/천간 계\r\n悸\t두근거릴 계\r\n屆\t이를 계\r\n堺\t지경 계\r\n磎\t시내 계\r\n稽\t머무를 계\r\n谿\t시내 계\r\n棨\t중계 계\r\n誡\t경계할 계\r\n笄\t비녀 계\r\n雞\t닭 계\r\n烓\t화덕 계\r\n高\t높을 고\r\n古\t옛 고\r\n苦\t쓸 고\r\n告\t고할 고\r\n考\t생각할 고\r\n固\t굳을 고\r\n故\t연고 고\r\n孤\t외로울 고\r\n庫\t곳집 고\r\n姑\t시어미 고\r\n稿\t원고/볏짚 고\r\n鼓\t북 고\r\n顧\t돌아볼 고\r\n枯\t마를 고\r\n雇\t품팔 고\r\n皐\t언덕 고\r\n敲\t두드릴 고\r\n辜\t허물 고\r\n袴\t바지 고\r\n拷\t칠 고\r\n叩\t두드릴 고\r\n股\t넓적다리 고\r\n呱\t울 고\r\n膏\t기름 고\r\n痼\t고질 고\r\n錮\t막을 고\r\n菰\t줄풀 고\r\n藁\t짚 고\r\n蠱\t독벌레/고혹할 고\r\n誥\t깨우칠 고\r\n羔\t새끼양 고\r\n沽\t살/팔 고\r\n槁\t마를 고\r\n暠\t밝을 고 | 흴 호\r\n攷\t상고할 고\r\n尻\t꽁무니 고\r\n苽\t줄 고 | 오이 과\r\n睾\t불알 고\r\n翶\t노닐 고\r\n楛\t거칠 고 | 나무이름 호\r\n槀\t마른나무 고\r\n櫜\t칼집 고\r\n盬\t짠못/마실 고\r\n瞽\t소경 고\r\n罟\t그물 고\r\n羖\t염소 고\r\n栲\t북나무 고\r\n杲\t밝을 고\r\n刳\t가를 고\r\n鼛\t큰북 고\r\n稾\t원고/볏짚 고\r\n罛\t큰물고기그물 고\r\n觚\t술잔 고\r\n酤\t단술 고\r\n熇\t말릴 고\r\n曲\t굽을 곡\r\n穀\t곡식 곡\r\n哭\t울 곡\r\n谷\t골 곡\r\n梏\t수갑 곡\r\n鵠\t고니/과녁 곡\r\n斛\t휘 곡\r\n觳\t곱송그릴 곡 | 비교할 각\r\n轂\t수레바퀴통 곡\r\n牿\t외양간 곡\r\n困\t곤할 곤\r\n坤\t따 곤\r\n昆\t맏 곤\r\n棍\t몽둥이 곤\r\n袞\t곤룡포 곤\r\n琨\t옥돌 곤\r\n鯤\t곤어 곤\r\n滾\t넘쳐흐를 곤\r\n梱\t문지방 곤\r\n崑\t산이름 곤\r\n髡\t머리깎을 곤\r\n棞\t문지방 곤\r\n錕\t붉은쇠 곤\r\n緄\t띠 곤 | 오랑캐이름 혼\r\n鯀\t큰물고기 곤\r\n骨\t뼈 골\r\n汨\t골몰할 골 | 물이름 멱\r\n工\t장인 공\r\n空\t빌 공\r\n公\t공평할 공\r\n共\t한가지 공\r\n功\t공 공\r\n孔\t구멍 공\r\n攻\t칠 공\r\n貢\t바칠 공\r\n供\t이바지할 공\r\n恐\t두려울 공\r\n恭\t공손할 공\r\n鞏\t굳을 공\r\n拱\t팔짱낄 공\r\n控\t당길 공\r\n蚣\t지네 공\r\n珙\t큰옥 공\r\n悾\t정성 공\r\n邛\t수고할 공\r\n果\t실과 과\r\n科\t과목 과\r\n課\t공부할/과정 과\r\n過\t지날 과\r\n誇\t자랑할 과\r\n寡\t적을 과\r\n菓\t과자 과/실과 과\r\n戈\t창 과\r\n瓜\t외 과\r\n顆\t낱알 과\r\n鍋\t노구솥 과\r\n跨\t넘을 과\r\n薖\t너그러울 과\r\n夸\t사치할/자랑할 과\r\n蜾\t나나니벌 과\r\n裹\t쌀 과\r\n郭\t둘레/외성 곽\r\n廓\t둘레 곽 | 클 확\r\n槨\t외관 곽\r\n藿\t콩잎/미역 곽\r\n霍\t곽란 곽\r\n躩\t바삐갈 곽\r\n鞹\t가죽 곽\r\n觀\t볼 관\r\n關\t관계할 관\r\n官\t벼슬 관\r\n管\t대롱/주관할 관\r\n寬\t너그러울 관\r\n貫\t꿸 관\r\n館\t집 관\r\n慣\t익숙할 관\r\n冠\t갓 관\r\n款\t항목 관\r\n琯\t옥피리 관\r\n串\t꿸 관 | 땅이름 곶\r\n棺\t널 관\r\n顴\t광대뼈 관\r\n灌\t물댈 관\r\n瓘\t옥 관\r\n菅\t왕골 관\r\n罐\t물동이 관\r\n梡\t도마 관\r\n盥\t낯씻을 관\r\n瘝\t앓을 관\r\n痯\t병에지칠 관\r\n鸛\t황새 관\r\n錧\t비녀장 관\r\n祼\t강신제 관\r\n丱\t쌍상투 관\r\n綰\t얽을 관\r\n刮\t긁을 괄\r\n括\t묶을 괄\r\n适\t빠를 괄\r\n恝\t괄시할 괄\r\n栝\t전나무 괄\r\n佸\t모일 괄\r\n聒\t떠지껄일 괄\r\n光\t빛 광\r\n廣\t넓을 광\r\n鑛\t쇳돌 광\r\n狂\t미칠 광\r\n曠\t빌 광\r\n壙\t뫼구덩이 광\r\n匡\t바룰 광\r\n胱\t오줌통 광\r\n珖\t옥피리 광\r\n洸\t물솟을 광\r\n筐\t광주리 광\r\n侊\t성할 광\r\n炚\t빛날 광\r\n纊\t고운솜 광\r\n誑\t속일 광\r\n桄\t광랑나무 광\r\n迋\t속일 광 | 갈 왕\r\n掛\t걸 괘\r\n罫\t줄 괘\r\n卦\t점괘 괘\r\n壞\t무너질 괴\r\n怪\t괴이할 괴\r\n塊\t흙덩이 괴\r\n愧\t부끄러울 괴\r\n傀\t허수아비 괴\r\n槐\t회화나무/느티나무 괴\r\n拐\t후릴 괴\r\n魁\t괴수 괴\r\n乖\t어그러질 괴\r\n蕢\t흙덩이 괴 | 삼태기 궤\r\n瑰\t옥돌 괴\r\n虢\t나라이름 괵\r\n肱\t팔뚝 굉\r\n轟\t울릴/수레소리 굉\r\n宏\t클 굉\r\n紘\t벼리 굉\r\n觥\t뿔잔 굉\r\n鞃\t고삐 굉\r\n校\t학교 교\r\n敎\t가르칠 교\r\n交\t사귈 교\r\n橋\t다리 교\r\n巧\t공교할 교\r\n較\t견줄/비교할 교\r\n郊\t들 교\r\n矯\t바로잡을 교\r\n僑\t더부살이 교\r\n膠\t아교 교\r\n絞\t목맬 교\r\n攪\t흔들 교\r\n咬\t물/새소리 교\r\n喬\t높을 교\r\n驕\t교만할 교\r\n轎\t가마 교\r\n蛟\t교룡 교\r\n皎\t달밝을 교\r\n狡\t교활할 교\r\n嬌\t아리따울 교\r\n嶠\t산길 교\r\n鮫\t상어 교\r\n餃\t교자 교\r\n翹\t우뚝할 교\r\n蕎\t메밀 교\r\n儌\t갈 교\r\n敽\t맬 교\r\n荍\t당아욱 교\r\n磽\t자갈땅 교\r\n茭\t마른꼴 교 | 풀뿌리 효\r\n蹻\t발들 교 | 짚신 갹\r\n嘐\t깨물 교 | 클 효\r\n佼\t예쁠/업신여길 교\r\n鷮\t꿩 교\r\n曒\t밝을 교\r\n姣\t아름다울/아양부릴 교\r\n九\t아홉 구\r\n口\t입 구\r\n球\t공 구\r\n區\t구분할/지경 구\r\n具\t갖출 구\r\n舊\t예 구\r\n救\t구원할 구\r\n求\t구할 구\r\n句\t글귀 구\r\n究\t연구할 구\r\n構\t얽을 구\r\n久\t오랠 구\r\n拘\t잡을 구\r\n丘\t언덕 구\r\n俱\t함께 구\r\n龜\t거북 구 | 거북 귀 | 터질 균\r\n驅\t몰 구\r\n苟\t진실로/구차할 구\r\n懼\t두려워할 구\r\n狗\t개 구\r\n鷗\t갈매기 구\r\n歐\t구라파/칠 구\r\n購\t살 구\r\n邱\t언덕 구\r\n玖\t옥돌 구\r\n矩\t모날/법 구\r\n駒\t망아지 구\r\n鳩\t비둘기 구\r\n舅\t시아비/외삼촌 구\r\n枸\t구기자 구\r\n廏\t마구 구\r\n寇\t도적 구\r\n嘔\t게울 구\r\n仇\t원수 구\r\n垢\t때 구\r\n衢\t네거리 구\r\n鉤\t갈고리 구\r\n臼\t절구 구\r\n毆\t때릴 구\r\n溝\t도랑 구\r\n灸\t뜸 구\r\n軀\t몸 구\r\n柩\t널 구\r\n謳\t노래 구\r\n嶇\t험할 구\r\n絿\t급할 구\r\n廐\t마구간 구\r\n勾\t굽을 구\r\n坵\t언덕 구\r\n瞿\t놀랄 구\r\n逑\t짝 구\r\n銶\t끌 구\r\n耈\t늙은이 구\r\n咎\t허물 구\r\n柾\t널 구\r\n毬\t제기/공 구\r\n屨\t신 구\r\n嫗\t할미 구\r\n俅\t공순할 구\r\n劬\t수고할 구\r\n姤\t만날 구\r\n糗\t미숫가루 구\r\n雊\t장끼울 구\r\n觩\t뿔굽을 구\r\n艽\t변방 구 | 진교 교\r\n笱\t통발 구\r\n韭\t부추 구\r\n遘\t만날 구\r\n媾\t겹혼인/화친할 구\r\n裘\t갖옷 구\r\n彀\t활당길 구\r\n窶\t가난할 구 | 기울어진땅 루\r\n疚\t오랜병 구\r\n璆\t옥경쇠 구\r\n漚\t물거품 구\r\n搆\t얽을 구\r\n捄\t흙파올릴 구\r\n扣\t두드릴 구\r\n覯\t만나볼 구\r\n國\t나라 국\r\n局\t판 국\r\n菊\t국화 국\r\n鞠\t성/국문할 국\r\n鞫\t국문할 국\r\n麴\t누룩 국\r\n匊\t움큼 국\r\n軍\t군사 군\r\n郡\t고을 군\r\n君\t임금 군\r\n群\t무리 군\r\n窘\t군색할 군\r\n裙\t치마 군\r\n屈\t굽힐 굴\r\n窟\t굴 굴\r\n掘\t팔 굴\r\n堀\t팔 굴\r\n詘\t말막힐 굴 | 내칠 출\r\n宮\t집 궁\r\n窮\t다할/궁할 궁\r\n弓\t활 궁\r\n躬\t몸 궁\r\n穹\t하늘 궁\r\n芎\t궁궁이 궁\r\n權\t권세 권\r\n券\t문서 권\r\n勸\t권할 권\r\n卷\t책 권\r\n拳\t주먹 권\r\n圈\t우리 권\r\n眷\t돌볼 권\r\n捲\t거둘/말 권\r\n倦\t게으를 권\r\n淃\t돌아흐를 권\r\n棬\t나무그릇 권\r\n睠\t돌아볼 권\r\n綣\t정다울 권\r\n鬈\t머리고울 권\r\n厥\t그 궐\r\n闕\t대궐 궐\r\n蹶\t일어설/넘어질 궐\r\n蕨\t고사리 궐\r\n獗\t날뛸 궐\r\n軌\t바퀴자국 궤\r\n潰\t무너질 궤\r\n詭\t속일 궤\r\n几\t안석 궤\r\n櫃\t궤짝 궤\r\n机\t책상 궤\r\n饋\t먹일 궤\r\n垝\t무너질 궤\r\n匱\t갑/다할 궤\r\n氿\t구멍샘 궤\r\n簋\t제기이름 궤\r\n跪\t꿇어앉을 궤\r\n餽\t먹일 궤\r\n匭\t상자 궤\r\n簣\t삼태기 궤\r\n貴\t귀할 귀\r\n歸\t돌아갈 귀\r\n鬼\t귀신 귀\r\n晷\t해그림자 귀\r\n宄\t간악할 귀\r\n規\t법 규\r\n糾\t얽힐 규\r\n叫\t부르짖을 규\r\n閨\t안방 규\r\n珪\t홀 규\r\n揆\t헤아릴 규\r\n奎\t별 규\r\n圭\t서옥/쌍토 규\r\n逵\t길거리 규\r\n葵\t아욱/해바라기 규\r\n窺\t엿볼 규\r\n硅\t규소 규\r\n赳\t헌걸찰 규\r\n竅\t구멍 규\r\n槻\t물푸레나무 규\r\n闚\t엿볼 규\r\n糺\t살필 규\r\n戣\t창 규\r\n頍\t머리들 규\r\n睽\t어그러질/반목할 규\r\n樛\t휠 규\r\n刲\t찌를/벨 규\r\n騤\t말건장할 규\r\n頄\t광대뼈 규 | 광대뼈 구\r\n均\t고를 균\r\n菌\t버섯 균\r\n鈞\t무거울 균\r\n勻\t고를 균\r\n畇\t밭일굴 균\r\n筠\t대껍질 균\r\n麕\t노루 균\r\n箘\t죽순 균\r\n橘\t귤 귤\r\n極\t다할/극진할 극\r\n劇\t심할 극\r\n克\t이길 극\r\n隙\t틈 극\r\n剋\t이길 극\r\n戟\t창 극\r\n棘\t가시 극\r\n殛\t귀양보낼 극\r\n亟\t빠를 극 | 자주 기\r\n郤\t틈 극\r\n襋\t옷깃 극\r\n根\t뿌리 근\r\n近\t가까울 근\r\n勤\t부지런할 근\r\n筋\t힘줄 근\r\n僅\t겨우 근\r\n謹\t삼갈 근\r\n斤\t근/날 근\r\n瑾\t아름다운옥 근\r\n槿\t무궁화 근\r\n饉\t주릴 근\r\n覲\t뵐 근\r\n劤\t힘셀 근\r\n芹\t미나리 근\r\n菫\t씀바귀 근\r\n懃\t은근할 근\r\n漌\t맑을 근\r\n墐\t묻을 근\r\n金\t쇠 금 | 성 김\r\n今\t이제 금\r\n禁\t금할 금\r\n禽\t새 금\r\n錦\t비단 금\r\n琴\t거문고 금\r\n襟\t옷깃 금\r\n擒\t사로잡을 금\r\n衾\t이불 금\r\n昑\t밝을 금\r\n檎\t능금 금\r\n芩\t풀이름 금\r\n衿\t옷깃 금\r\n妗\t외숙모 금\r\n急\t급할 급\r\n級\t등급 급\r\n給\t줄 급\r\n及\t미칠 급\r\n扱\t거둘 급 | 꽂을 삽\r\n汲\t물길을 급\r\n伋\t생각할 급\r\n岌\t산높을 급\r\n肯\t즐길 긍\r\n兢\t떨릴 긍\r\n矜\t자랑할 긍\r\n亘\t뻗칠 긍 | 베풀 선\r\n亙\t뻗칠 긍\r\n氣\t기운 기\r\n記\t기록할 기\r\n旗\t기 기\r\n基\t터 기\r\n己\t몸 기\r\n汽\t물끓는김 기\r\n期\t기약할 기\r\n技\t재주 기\r\n器\t그릇 기\r\n起\t일어날 기\r\n機\t틀 기\r\n寄\t부칠 기\r\n奇\t기특할 기\r\n紀\t벼리 기\r\n騎\t말탈 기\r\n祈\t빌 기\r\n畿\t경기 기\r\n其\t그 기\r\n企\t꾀할 기\r\n旣\t이미 기\r\n忌\t꺼릴 기\r\n棄\t버릴 기\r\n欺\t속일 기\r\n飢\t주릴 기\r\n豈\t어찌 기\r\n幾\t몇 기\r\n棋\t바둑 기\r\n冀\t바랄 기\r\n岐\t갈림길 기\r\n驥\t천리마 기\r\n耆\t늙을 기\r\n麒\t기린 기\r\n沂\t물이름 기\r\n淇\t물이름 기\r\n琦\t옥이름 기\r\n琪\t아름다운옥 기\r\n璣\t별이름 기\r\n箕\t키 기\r\n騏\t준마 기\r\n譏\t비웃을 기\r\n肌\t살 기\r\n綺\t비단 기\r\n杞\t구기자 기\r\n朞\t돌 기\r\n崎\t험할 기\r\n妓\t기생 기\r\n伎\t재간 기\r\n羈\t굴레/나그네 기\r\n嗜\t즐길 기\r\n畸\t뙈기밭/불구 기\r\n磯\t여울돌 기\r\n埼\t갑 기\r\n圻\t경기 기\r\n碁\t바둑 기\r\n夔\t조심할 기\r\n璂\t피변옥 기\r\n祁\t클 기\r\n祇\t지신 기\r\n祺\t길할 기\r\n玘\t패옥 기\r\n錡\t세발가마 기\r\n錤\t호미 기\r\n耭\t밭갈 기\r\n饑\t주릴 기\r\n歧\t두갈래길 기\r\n棊\t바둑 기\r\n曁\t미칠 기\r\n暣\t볕 기\r\n旂\t용대기 기\r\n覊\t굴레/나그네 기\r\n跂\t육발이/발돋움할 기\r\n蘷\t조심할 기\r\n墍\t흙바를 기\r\n屺\t민둥산 기\r\n忮\t사나울 기\r\n軝\t수레굴통대 기\r\n頎\t헌걸찰 기\r\n芑\t흰차조 기\r\n掎\t당길 기\r\n僛\t비틀거려춤출 기\r\n羇\t굴레/나그네 기\r\n綦\t들메끈 기\r\n緊\t긴할 긴\r\n吉\t길할 길\r\n拮\t일할 길\r\n佶\t바를 길\r\n桔\t도라지 길\r\n姞\t삼갈 길\r\n喫\t먹을 끽\r\n那\t어찌 나\r\n拏\t잡을 나\r\n懦\t나약할 나\r\n拿\t잡을 나\r\n儺\t푸닥거리 나\r\n娜\t아리따울 나\r\n諾\t허락할 낙\r\n暖\t따뜻할 난\r\n難\t어려울 난\r\n煖\t더울 난\r\n戁\t두려워할 난\r\n赧\t부끄러울 난\r\n捏\t꾸밀 날\r\n捺\t누를 날\r\n陧\t위태할 날\r\n南\t남녘 남\r\n男\t사내 남\r\n楠\t녹나무 남\r\n枏\t녹나무 남\r\n湳\t물이름 남\r\n納\t들일 납\r\n衲\t기울 납\r\n軜\t고삐 납\r\n娘\t계집 낭\r\n囊\t주머니 낭\r\n曩\t지난번 낭\r\n內\t안 내\r\n耐\t견딜 내\r\n奈\t어찌 내\r\n乃\t이에 내\r\n柰\t사과/어찌 내\r\n鼐\t큰솥 내\r\n迺\t이에 내\r\n女\t계집 녀\r\n年\t해 년\r\n撚\t비빌 년\r\n秊\t해 년\r\n涅\t열반 녈\r\n念\t생각 념\r\n拈\t집을 념 | 집을 점\r\n恬\t편안할 념\r\n捻\t비틀 념\r\n寧\t편안 녕\r\n寗\t차라리 녕\r\n獰\t사나울 녕\r\n甯\t차라리 녕\r\n佞\t재주있을/아첨할 녕\r\n怒\t성낼 노\r\n努\t힘쓸 노\r\n奴\t종 노\r\n弩\t쇠뇌 노\r\n駑\t둔한말 노\r\n瑙\t마노 노\r\n峱\t산이름 노\r\n猱\t원숭이 노\r\n呶\t지껄일 노\r\n孥\t자식 노\r\n砮\t돌살촉 노\r\n怓\t어지러울 노\r\n農\t농사 농\r\n濃\t짙을 농\r\n膿\t고름 농\r\n穠\t무성할 농\r\n腦\t골/뇌수 뇌\r\n惱\t번뇌할 뇌\r\n餒\t주릴 뇌\r\n尿\t오줌 뇨\r\n撓\t휠 뇨\r\n鬧\t지껄일 뇨\r\n耨\t호미 누\r\n嫩\t어릴 눈\r\n訥\t말더듬거릴 눌\r\n紐\t맺을 뉴\r\n杻\t싸리 뉴 | 수갑 추\r\n忸\t익을 뉴 | 부끄러울 뉵\r\n鈕\t인꼭지 뉴\r\n狃\t익숙할 뉴\r\n能\t능할 능\r\n泥\t진흙 니\r\n尼\t여승 니\r\n你\t너 니\r\n柅\t굄목 니\r\n怩\t부끄러워할 니\r\n溺\t빠질 닉\r\n匿\t숨길 닉\r\n昵\t친할 닐 | 아비사당 녜\r\n多\t많을 다\r\n茶\t차 다 | 차 차\r\n爹\t아비 다\r\n短\t짧을 단\r\n團\t둥글 단\r\n壇\t단 단\r\n斷\t끊을 단\r\n單\t홑 단\r\n檀\t박달나무 단\r\n端\t끝 단\r\n段\t층계 단\r\n旦\t아침 단\r\n但\t다만 단\r\n丹\t붉을 단\r\n鍛\t쇠불릴 단\r\n湍\t여울 단\r\n蛋\t새알 단\r\n簞\t소쿠리 단\r\n緞\t비단 단\r\n亶\t진실로 단\r\n彖\t판단할 단\r\n袒\t옷벗어멜 단\r\n鄲\t한단 단\r\n漙\t이슬많을 단\r\n慱\t근심할 단\r\n襢\t웃통벗을 단 | 흰베 전\r\n癉\t앓을 단\r\n煅\t쇠불릴 단\r\n達\t통달할 달\r\n撻\t때릴 달\r\n疸\t황달 달\r\n獺\t수달 달\r\n澾\t미끄러울 달\r\n怛\t슬플 달\r\n闥\t궐문 달\r\n談\t말씀 담\r\n擔\t멜 담\r\n淡\t맑을 담\r\n潭\t못 담\r\n膽\t쓸개 담\r\n憺\t참담할 담\r\n曇\t흐릴 담\r\n澹\t맑을 담\r\n痰\t가래 담\r\n譚\t클/말씀 담\r\n錟\t창 담\r\n坍\t무너질 담\r\n啖\t씹을 담\r\n覃\t깊을 담\r\n蕁\t지모 담 | 쐐기풀 심\r\n聃\t귓바퀴없을 담\r\n湛\t즐길 담 | 잠길 잠\r\n惔\t속탈 담\r\n萏\t연봉오리 담\r\n餤\t먹을 담\r\n驔\t정강이흰말 담\r\n髧\t머리늘어질 담\r\n耼\t귓바퀴없을 담\r\n菼\t달 담\r\n窞\t구덩이 담\r\n黮\t검을 담 | 오디 심\r\n答\t대답 답\r\n踏\t밟을 답\r\n畓\t논 답\r\n遝\t뒤섞일 답\r\n沓\t겹칠 답\r\n堂\t집 당\r\n當\t마땅 당\r\n黨\t무리 당\r\n糖\t엿 당\r\n唐\t당나라/당황할 당\r\n塘\t못 당\r\n撞\t칠 당\r\n棠\t아가위 당\r\n螳\t버마재비 당\r\n戇\t어리석을 당\r\n幢\t기 당\r\n儻\t고상할/구차할 당\r\n鏜\t종고소리 당\r\n鐺\t목쇠사슬 당 | 노구 쟁\r\n螗\t씽씽매미 당\r\n倘\t만일 당 | 노닐 상\r\n大\t큰 대\r\n代\t대신할 대\r\n對\t대할 대\r\n待\t기다릴 대\r\n帶\t띠 대\r\n隊\t무리 대\r\n臺\t대 대\r\n貸\t빌릴/뀔 대\r\n戴\t일 대\r\n垈\t집터 대\r\n擡\t들 대\r\n袋\t자루 대\r\n黛\t눈썹그릴 대\r\n岱\t산이름 대\r\n坮\t돈대 대\r\n玳\t대모 대\r\n祋\t창 대\r\n譈\t원망할 대\r\n懟\t원망할 대\r\n憝\t원망할/악할 대\r\n德\t큰 덕\r\n悳\t큰 덕\r\n道\t길 도\r\n圖\t그림 도\r\n度\t법도 도 | 헤아릴 탁\r\n到\t이를 도\r\n都\t도읍 도\r\n島\t섬 도\r\n導\t인도할 도\r\n徒\t무리 도\r\n盜\t도둑 도\r\n逃\t도망할 도\r\n渡\t건널 도\r\n桃\t복숭아 도\r\n倒\t넘어질 도\r\n陶\t질그릇 도\r\n途\t길 도\r\n刀\t칼 도\r\n跳\t뛸 도\r\n挑\t돋울 도\r\n塗\t칠할 도\r\n稻\t벼 도\r\n悼\t슬퍼할 도\r\n燾\t비칠 도\r\n搗\t찧을 도\r\n鍍\t도금할 도\r\n蹈\t밟을 도\r\n賭\t내기 도\r\n萄\t포도 도\r\n禱\t빌 도\r\n睹\t볼 도\r\n濤\t물결 도\r\n屠\t죽일 도\r\n淘\t쌀일 도\r\n掉\t흔들 도\r\n堵\t담 도\r\n滔\t물넘칠 도\r\n嶋\t섬 도\r\n覩\t볼 도\r\n韜\t감출 도\r\n櫂\t상앗대 도\r\n棹\t노 도 | 책상 탁\r\n翿\t깃일산 도\r\n咷\t울 도\r\n闍\t성문 도\r\n稌\t찰벼 도\r\n檮\t등걸 도 | 산대 주\r\n擣\t찧을 도\r\n慆\t기뻐할 도\r\n鼗\t작은북 도\r\n叨\t탐할 도\r\n綯\t노꼴 도\r\n荼\t씀바귀 도\r\n謟\t의심할 도\r\n鞉\t소고 도\r\n瘏\t앓을 도\r\n忉\t근심할 도\r\n讀\t읽을 독 | 구절 두\r\n獨\t홀로 독\r\n毒\t독 독\r\n督\t감독할 독\r\n篤\t도타울 독\r\n禿\t대머리 독\r\n瀆\t도랑/더럽힐 독\r\n犢\t송아지 독\r\n牘\t편지 독\r\n纛\t둑 독\r\n匵\t손궤 독\r\n櫝\t궤 독\r\n黷\t더러울 독\r\n敦\t도타울 돈\r\n豚\t돼지 돈\r\n惇\t도타울 돈\r\n燉\t불빛 돈\r\n頓\t조아릴 돈\r\n沌\t엉길 돈\r\n暾\t해돋을 돈\r\n遯\t도망할 돈 | 도망할 둔\r\n旽\t밝을 돈\r\n墩\t돈대 돈\r\n焞\t어스름할 돈 | 성할 퇴\r\n突\t갑자기 돌\r\n乭\t이름 돌\r\n東\t동녘 동\r\n動\t움직일 동\r\n同\t한가지 동\r\n洞\t골 동 | 밝을 통\r\n冬\t겨울 동\r\n童\t아이 동\r\n銅\t구리 동\r\n凍\t얼 동\r\n棟\t마룻대 동\r\n桐\t오동나무 동\r\n董\t바를 동\r\n疼\t아플 동\r\n瞳\t눈동자 동\r\n胴\t큰창자/몸통 동\r\n憧\t동경할 동\r\n仝\t한가지 동\r\n潼\t물이름 동\r\n僮\t아이종 동\r\n侗\t지각없을 동 | 키멀쑥할 통\r\n烔\t뜨거울 동\r\n罿\t새그물 동\r\n彤\t붉은칠할 동\r\n蝀\t무지개 동\r\n頭\t머리 두\r\n斗\t말 두\r\n豆\t콩 두\r\n杜\t막을 두\r\n兜\t투구 두 | 도솔천 도\r\n痘\t역질 두\r\n竇\t구멍 두\r\n荳\t팥 두\r\n逗\t머무를 두\r\n枓\t주두 두\r\n斁\t무너질 두 | 싫어할 역\r\n屯\t진칠 둔\r\n鈍\t둔할 둔\r\n臀\t볼기 둔\r\n遁\t숨을 둔\r\n芚\t싹돋을 둔\r\n得\t얻을 득\r\n登\t오를 등\r\n等\t무리 등\r\n燈\t등 등\r\n騰\t오를 등\r\n藤\t등나무 등\r\n謄\t베낄 등\r\n鄧\t나라이름 등\r\n橙\t귤/걸상 등\r\n嶝\t고개 등\r\n螣\t등사 등\r\n滕\t물솟아오를 등\r\n縢\t노/꿰맬 등\r\n羅\t벌릴 라\r\n裸\t벗을 라\r\n邏\t순라 라\r\n螺\t소라 라\r\n懶\t게으를 라\r\n癩\t문둥이 라\r\n喇\t나팔 라\r\n蘿\t담쟁이 라\r\n臝\t벌거벗을 라\r\n蠃\t나나니벌 라\r\n樂\t즐길 락 | 노래 악 | 좋아할 요\r\n落\t떨어질 락\r\n絡\t이을/얽을 락\r\n洛\t물이름 락\r\n駱\t낙타 락\r\n烙\t지질 락\r\n酪\t쇠젖 락\r\n珞\t구슬 락\r\n雒\t올빼미/표가라 락\r\n亂\t어지러울 란\r\n卵\t알 란\r\n欄\t난간 란\r\n蘭\t난초 란\r\n爛\t빛날 란\r\n瀾\t물결 란\r\n鸞\t난새 란\r\n欒\t단란할 란\r\n闌\t가로막을 란\r\n瓓\t옥빛 란\r\n剌\t발랄할 랄\r\n辣\t매울 랄\r\n捋\t뽑을/문지를 랄\r\n覽\t볼 람\r\n濫\t넘칠 람\r\n藍\t쪽 람\r\n籃\t대바구니 람\r\n嵐\t아지랑이 람\r\n襤\t남루할 람\r\n擥\t잡을 람\r\n攬\t잡을 람\r\n纜\t닻줄 람\r\n欖\t감람나무 람\r\n拉\t끌 랍\r\n蠟\t밀 랍\r\n臘\t섣달 랍\r\n朗\t밝을 랑\r\n浪\t물결 랑\r\n廊\t사랑채/행랑 랑\r\n郞\t사내 랑\r\n狼\t이리 랑\r\n螂\t사마귀 랑\r\n琅\t옥소리 랑\r\n瑯\t법랑 랑\r\n稂\t가라지/강아지풀 랑\r\n來\t올 래\r\n萊\t명아주 래\r\n崍\t산이름 래\r\n徠\t올 래\r\n勑\t위로할 래 | 조서 칙\r\n倈\t올/위로할 래\r\n騋\t큰말 래\r\n冷\t찰 랭\r\n略\t간략할/약할 략\r\n掠\t노략질할 략\r\n良\t어질 량\r\n量\t헤아릴 량\r\n兩\t두 량\r\n糧\t양식 량\r\n涼\t서늘할 량\r\n梁\t들보/돌다리 량\r\n諒\t살펴알/믿을 량\r\n輛\t수레 량\r\n樑\t들보 량\r\n亮\t밝을 량\r\n倆\t재주 량\r\n粱\t기장 량\r\n粮\t양식 량\r\n凉\t서늘할 량\r\n旅\t나그네 려\r\n麗\t고울 려\r\n慮\t생각할 려\r\n勵\t힘쓸 려\r\n廬\t농막집 려\r\n礪\t숫돌 려\r\n呂\t성/법칙 려\r\n驪\t검은말 려 | 검은말 리\r\n侶\t짝 려\r\n戾\t어그러질 려\r\n濾\t거를 려\r\n閭\t마을 려\r\n黎\t검을 려\r\n藜\t명아주 려\r\n驢\t나귀 려\r\n儷\t짝 려\r\n櫚\t종려나무 려\r\n蠣\t굴 려\r\n犁\t쟁기 려 | 얼룩소 리\r\n膂\t등골뼈 려\r\n厲\t엄할/숫돌 려\r\n蠡\t좀먹을 려 | 소라 라\r\n藘\t꼭두서니 려\r\n力\t힘 력\r\n歷\t지날 력\r\n曆\t책력 력\r\n瀝\t스밀 력\r\n礫\t조약돌 력\r\n轢\t차에치일/삐걱거릴 력\r\n靂\t벼락 력\r\n櫟\t떡갈나무 력\r\n鬲\t솥 력 | 가로막을 격\r\n酈\t땅이름 력 | 땅이름 리\r\n練\t익힐 련\r\n連\t이을 련\r\n鍊\t쇠불릴/단련할 련\r\n蓮\t연꽃 련\r\n聯\t연이을 련\r\n戀\t그리워할/그릴 련\r\n憐\t불쌍히여길 련\r\n煉\t달굴 련\r\n漣\t잔물결 련\r\n輦\t가마 련\r\n攣\t손발굽을 련\r\n璉\t호련 련\r\n孌\t아름다울 련\r\n列\t벌릴 렬\r\n烈\t매울 렬\r\n裂\t찢어질 렬\r\n劣\t못할 렬\r\n冽\t찰 렬\r\n洌\t맑을 렬\r\n栵\t산밤나무 렬 | 늘어설 례\r\n廉\t청렴할 렴\r\n濂\t물이름 렴\r\n斂\t거둘 렴\r\n殮\t염할 렴\r\n簾\t발 렴\r\n蘞\t거지덩굴 렴\r\n獵\t사냥 렵\r\n領\t거느릴 령\r\n令\t하여금 령\r\n靈\t신령 령\r\n嶺\t고개 령\r\n零\t떨어질/영 령\r\n玲\t옥소리 령\r\n齡\t나이 령\r\n囹\t옥 령\r\n逞\t쾌할 령\r\n鈴\t방울 령\r\n聆\t들을 령\r\n伶\t악공/영리할 령\r\n怜\t영리할 령\r\n羚\t영양 령\r\n岺\t산깊을 령\r\n笭\t다래끼 령\r\n翎\t깃 령\r\n蛉\t고추잠자리 령\r\n苓\t복령 령\r\n姈\t여자영리할 령\r\n昤\t햇빛 령\r\n例\t법식 례\r\n禮\t예도 례\r\n隷\t종 례\r\n醴\t단술 례\r\n澧\t물이름 례\r\n鱧\t가물치 례\r\n老\t늙을 로\r\n路\t길 로\r\n勞\t일할 로\r\n露\t이슬 로\r\n爐\t화로 로\r\n盧\t성 로\r\n鷺\t해오라기/백로 로\r\n蘆\t갈대 로\r\n魯\t노나라/노둔할 로\r\n虜\t사로잡을 로\r\n擄\t노략질할 로\r\n撈\t건질 로\r\n瀘\t물이름 로\r\n潞\t물이름 로\r\n櫓\t노/방패 로\r\n輅\t수레 로\r\n鹵\t개펄 로\r\n纑\t베올 로\r\n簵\t대이름 로\r\n壚\t검은흙 로\r\n綠\t푸를 록\r\n錄\t기록할 록\r\n祿\t녹 록\r\n鹿\t사슴 록\r\n麓\t산기슭 록\r\n碌\t푸른돌 록\r\n菉\t조개풀 록\r\n彔\t새길 록\r\n論\t논할 론\r\n弄\t희롱할 롱\r\n籠\t대바구니 롱\r\n壟\t밭두둑 롱\r\n聾\t귀먹을 롱\r\n瓏\t옥소리 롱\r\n瀧\t젖을 롱\r\n朧\t몽롱할 롱\r\n隴\t언덕 롱\r\n賴\t의뢰할 뢰\r\n雷\t우레 뢰\r\n賂\t뇌물 뢰\r\n磊\t돌무더기 뢰\r\n牢\t우리 뢰\r\n儡\t꼭두각시 뢰\r\n瀨\t여울 뢰\r\n賚\t줄 뢰\r\n耒\t따비 뢰\r\n罍\t술잔 뢰\r\n料\t헤아릴 료\r\n僚\t동료 료\r\n了\t마칠 료\r\n療\t병고칠 료\r\n遼\t멀 료\r\n燎\t횃불 료\r\n瞭\t밝을 료\r\n聊\t애오라지 료\r\n寥\t쓸쓸할 료\r\n寮\t동관 료\r\n蓼\t여뀌 료\r\n廖\t공허할 료\r\n敹\t가릴 료\r\n繚\t동일 료\r\n潦\t장마 료 | 장마 로\r\n龍\t용 룡\r\n漏\t샐 루\r\n樓\t다락 루\r\n累\t여러/자주 루\r\n淚\t눈물 루\r\n屢\t여러 루\r\n壘\t보루 루\r\n陋\t더러울 루\r\n褸\t남루할 루\r\n蔞\t물쑥 루\r\n瘻\t부스럼 루\r\n縷\t실오리 루\r\n鏤\t새길 루\r\n婁\t끌 루\r\n摟\t안을 루\r\n流\t흐를 류\r\n類\t무리 류\r\n留\t머무를 류\r\n柳\t버들 류\r\n硫\t유황 류\r\n謬\t그르칠 류\r\n劉\t죽일/묘금도 류\r\n琉\t유리 류\r\n溜\t처마물 류\r\n瘤\t혹 류\r\n旒\t깃발 류\r\n榴\t석류 류\r\n瀏\t맑을 류\r\n瑠\t유리 류\r\n纍\t가둘 류 | 가둘 루\r\n懰\t근심할/아름다울 류\r\n罶\t통발 류\r\n藟\t덩굴풀 류\r\n虆\t덩굴 류\r\n駵\t월따말 류\r\n六\t여섯 륙\r\n陸\t뭍 륙\r\n戮\t죽일 륙\r\n僇\t욕할 륙\r\n穋\t올벼 륙\r\n輪\t바퀴 륜\r\n倫\t인륜 륜\r\n崙\t산이름 륜\r\n淪\t빠질 륜\r\n綸\t벼리 륜\r\n侖\t산이름/차례 륜\r\n律\t법칙 률\r\n率\t비율 률 | 거느릴 솔\r\n栗\t밤 률\r\n慄\t떨릴 률\r\n隆\t높을 륭\r\n肋\t갈빗대 륵\r\n勒\t굴레 륵\r\n凜\t찰 름\r\n懍\t두려워할 름\r\n廩\t쌀곳간 름\r\n陵\t언덕 릉\r\n楞\t네모질 릉\r\n稜\t모날 릉\r\n綾\t비단 릉\r\n凌\t업신여길 릉\r\n菱\t마름 릉\r\n里\t마을 리\r\n利\t이할 리\r\n理\t다스릴 리\r\n李\t오얏/성 리\r\n離\t떠날 리\r\n吏\t벼슬아치/관리 리\r\n履\t밟을 리\r\n裏\t속 리\r\n梨\t배 리\r\n悧\t영리할 리\r\n籬\t울타리 리\r\n釐\t다스릴 리\r\n俚\t속될 리\r\n裡\t속 리\r\n痢\t이질 리\r\n罹\t걸릴 리\r\n狸\t삵 리\r\n羸\t야윌 리\r\n莉\t말리 리\r\n厘\t다스릴 리 | 가게 전\r\n唎\t소리 리\r\n鯉\t잉어 리\r\n浬\t해리 리\r\n璃\t유리 리\r\n纚\t맬 리 | 머리싸개 사\r\n莅\t임할 리\r\n詈\t꾸짖을 리\r\n俐\t영리할 리\r\n縭\t신꾸밀 리\r\n离\t도깨비/산신 리\r\n涖\t임할 리\r\n梩\t삼태기 리\r\n隣\t이웃 린\r\n麟\t기린 린\r\n吝\t아낄 린\r\n鱗\t비늘 린\r\n燐\t도깨비불 린\r\n躪\t짓밟을 린\r\n璘\t옥빛 린\r\n藺\t골풀 린\r\n潾\t맑을 린\r\n粼\t물맑을 린\r\n鄰\t이웃 린\r\n林\t수풀 림\r\n臨\t임할 림\r\n淋\t임질 림\r\n霖\t장마 림\r\n琳\t아름다운옥 림\r\n立\t설 립\r\n笠\t삿갓 립\r\n粒\t낟알 립\r\n砬\t돌소리 립\r\n苙\t구릿대/짐승우리 립\r\n馬\t말 마\r\n磨\t갈 마\r\n麻\t삼 마\r\n摩\t문지를 마\r\n痲\t저릴 마\r\n魔\t마귀 마\r\n碼\t마노 마\r\n瑪\t마노 마\r\n禡\t마제 마\r\n漠\t넓을 막\r\n莫\t없을 막\r\n幕\t장막 막\r\n膜\t꺼풀/막 막\r\n寞\t고요할 막\r\n邈\t멀 막\r\n藐\t멀 막 | 작을 묘\r\n瘼\t병들 막\r\n萬\t일만 만\r\n滿\t찰 만\r\n晩\t늦을 만\r\n慢\t거만할 만\r\n漫\t흩어질 만\r\n娩\t낳을 만\r\n灣\t물굽이 만\r\n蠻\t오랑캐 만\r\n輓\t끌/애도할 만\r\n饅\t만두 만\r\n蔓\t덩굴 만\r\n鰻\t뱀장어 만\r\n卍\t만 만\r\n彎\t굽을 만\r\n挽\t당길 만\r\n瞞\t속일 만\r\n万\t일만 만\r\n巒\t멧부리 만\r\n曼\t길 만\r\n鏋\t금 만\r\n墁\t바를 만\r\n末\t끝 말\r\n靺\t말갈 말\r\n抹\t지울 말\r\n沫\t물거품 말\r\n襪\t버선 말\r\n唜\t끝 말\r\n茉\t말리 말\r\n秣\t말먹이 말\r\n望\t바랄 망\r\n亡\t망할 망\r\n妄\t망령될 망\r\n忘\t잊을 망\r\n茫\t아득할 망\r\n忙\t바쁠 망\r\n罔\t없을 망\r\n網\t그물 망\r\n芒\t까끄라기 망\r\n惘\t멍할 망\r\n莽\t풀 망\r\n邙\t북망산 망\r\n輞\t바퀴테 망\r\n蘉\t힘쓸 망\r\n每\t매양 매\r\n買\t살 매\r\n賣\t팔 매\r\n妹\t누이 매\r\n媒\t중매 매\r\n梅\t매화 매\r\n埋\t묻을 매\r\n魅\t매혹할 매\r\n枚\t낱 매\r\n煤\t그을음 매\r\n罵\t꾸짖을 매\r\n邁\t갈 매\r\n呆\t어리석을 매\r\n昧\t어두울 매\r\n寐\t잘 매\r\n脢\t등심 매\r\n沬\t희미할 매 | 낯씻을 회\r\n韎\t가죽 매\r\n霾\t흙비 매\r\n鋂\t사슬고리 매\r\n痗\t병들 매\r\n浼\t더럽힐 매 | 펀히흐를 면\r\n苺\t딸기 매\r\n勱\t힘쓸 매\r\n脈\t줄기 맥\r\n麥\t보리 맥\r\n貊\t맥국 맥\r\n驀\t뛰어넘을 맥\r\n陌\t밭두둑길 맥\r\n貉\t오랑캐 맥\r\n霢\t가랑비 맥\r\n孟\t맏 맹\r\n猛\t사나울 맹\r\n盲\t소경/눈멀 맹\r\n盟\t맹세 맹\r\n萌\t움 맹\r\n氓\t백성 맹\r\n覓\t찾을 멱\r\n冪\t덮을 멱\r\n面\t낯 면\r\n勉\t힘쓸 면\r\n眠\t잘 면\r\n綿\t솜 면\r\n免\t면할 면\r\n俛\t힘쓸/구푸릴 면\r\n沔\t물이름/빠질 면\r\n冕\t면류관 면\r\n棉\t목화 면\r\n眄\t곁눈질할 면\r\n緬\t멀 면\r\n麪\t국수 면\r\n麵\t국수 면\r\n湎\t빠질 면\r\n滅\t꺼질/멸할 멸\r\n蔑\t업신여길 멸\r\n篾\t대껍질 멸\r\n幭\t덮개 멸\r\n名\t이름 명\r\n命\t목숨 명\r\n明\t밝을 명\r\n鳴\t울 명\r\n銘\t새길 명\r\n冥\t어두울 명\r\n溟\t바다 명\r\n皿\t그릇 명\r\n螟\t멸구 명\r\n暝\t저물 명\r\n酩\t술취할 명\r\n椧\t홈통 명\r\n瞑\t눈감을 명\r\n蓂\t명협 명\r\n茗\t차싹 명\r\n袂\t소매 몌\r\n母\t어미 모\r\n毛\t터럭 모\r\n模\t본뜰 모\r\n謀\t꾀 모\r\n貌\t모양 모\r\n慕\t그릴 모\r\n某\t아무 모\r\n暮\t저물 모\r\n募\t모을/뽑을 모\r\n冒\t무릅쓸 모\r\n侮\t업신여길 모\r\n矛\t창 모\r\n帽\t모자 모\r\n茅\t띠 모\r\n謨\t꾀 모\r\n牟\t성/보리 모\r\n摸\t더듬을 모\r\n牡\t수컷 모\r\n糢\t모호할 모\r\n耗\t소모할 모\r\n芼\t나물 모\r\n眸\t눈동자 모\r\n瑁\t대모 모\r\n姆\t여스승 모\r\n摹\t모뜰 모\r\n麰\t보리 모\r\n眊\t눈흐릴/늙을 모\r\n旄\t털기 모\r\n耄\t늙을 모\r\n髦\t다박머리 모\r\n蟊\t해충 모\r\n木\t나무 목\r\n目\t눈 목\r\n牧\t칠 목\r\n睦\t화목할 목\r\n沐\t머리감을 목\r\n穆\t화목할 목\r\n鶩\t집오리 목\r\n霂\t가랑비 목\r\n楘\t수레장식 목\r\n沒\t빠질 몰\r\n歿\t죽을 몰\r\n蒙\t어두울 몽\r\n夢\t꿈 몽\r\n朦\t몽롱할 몽\r\n饛\t밥수북히담을 몽\r\n幪\t덮을 몽\r\n濛\t이슬비 몽\r\n矇\t소경 몽\r\n墓\t무덤 묘\r\n妙\t묘할 묘\r\n卯\t토끼 묘\r\n廟\t사당 묘\r\n苗\t모 묘\r\n昴\t별이름 묘\r\n猫\t고양이 묘\r\n描\t그릴 묘\r\n杳\t아득할 묘\r\n渺\t아득할/물질펀할 묘\r\n竗\t묘할 묘\r\n錨\t닻 묘\r\n眇\t애꾸 묘\r\n貓\t고양이 묘\r\n茆\t띠 묘 | 갯버들 류\r\n無\t없을 무\r\n務\t힘쓸 무\r\n武\t호반 무\r\n舞\t춤출 무\r\n貿\t무역할 무\r\n茂\t무성할 무\r\n戊\t천간 무\r\n霧\t안개 무\r\n巫\t무당 무\r\n蕪\t거칠 무\r\n畝\t이랑 무 | 이랑 묘\r\n毋\t말 무\r\n撫\t어루만질 무\r\n拇\t엄지손가락 무\r\n憮\t어루만질 무\r\n誣\t속일 무\r\n楙\t모과나무 무\r\n珷\t옥돌 무\r\n繆\t얽을 무 | 어그러질 류\r\n鵡\t앵무새 무\r\n懋\t힘쓸 무\r\n无\t없을 무\r\n儛\t춤출 무\r\n廡\t행랑 무\r\n膴\t두터울 무\r\n髳\t다박머리 무\r\n墨\t먹 묵\r\n默\t잠잠할 묵\r\n纆\t노 묵\r\n門\t문 문\r\n文\t글월 문\r\n問\t물을 문\r\n聞\t들을 문\r\n紋\t무늬 문\r\n紊\t어지러울/문란할 문\r\n汶\t물이름 문\r\n蚊\t모기 문\r\n吻\t입술 문\r\n刎\t목자를 문\r\n們\t무리 문\r\n雯\t구름무늬 문\r\n捫\t어루만질 문\r\n炆\t따뜻할 문\r\n璊\t붉은옥 문\r\n穈\t붉은기장 문 | 검은기장 미\r\n物\t물건 물\r\n勿\t말 물\r\n沕\t아득할 물\r\n美\t아름다울 미\r\n米\t쌀 미\r\n未\t아닐 미\r\n味\t맛 미\r\n微\t작을 미\r\n尾\t꼬리 미\r\n迷\t미혹할 미\r\n眉\t눈썹 미\r\n彌\t미륵/오랠 미\r\n靡\t쓰러질 미\r\n薇\t장미 미\r\n媚\t아첨할/예쁠 미\r\n湄\t물가 미\r\n謎\t수수께끼 미\r\n渼\t물놀이 미\r\n楣\t인중방 미\r\n黴\t기미낄 미\r\n梶\t나무끝 미\r\n嵋\t산이름 미\r\n麋\t고라니 미\r\n亹\t힘쓸 미\r\n弭\t활고자 미\r\n敉\t어루만질 미\r\n糜\t죽 미\r\n郿\t땅이름 미\r\n瀰\t물가득할 미\r\n民\t백성 민\r\n敏\t민첩할 민\r\n憫\t민망할 민\r\n旻\t하늘 민\r\n閔\t성 민\r\n玟\t아름다운돌 민\r\n珉\t옥돌 민\r\n旼\t화할 민\r\n悶\t답답할 민\r\n泯\t빠질 민\r\n岷\t산이름 민\r\n愍\t슬퍼할 민\r\n緡\t돈꿰미 민\r\n慜\t총명할 민\r\n敃\t힘쓸 민\r\n潣\t물졸졸흐를 민\r\n忞\t힘쓸 민\r\n痻\t병들 민\r\n暋\t강할/번민할 민\r\n黽\t힘쓸 민 | 맹꽁이 맹 | 땅이름 면\r\n密\t빽빽할 밀\r\n蜜\t꿀 밀\r\n謐\t고요할 밀\r\n朴\t성 박\r\n博\t넓을 박\r\n拍\t칠 박\r\n迫\t핍박할 박\r\n薄\t엷을 박\r\n泊\t머무를/배댈 박\r\n舶\t배 박\r\n膊\t팔뚝 박\r\n搏\t두드릴 박\r\n縛\t얽을 박\r\n箔\t발 박\r\n撲\t칠 박\r\n剝\t벗길 박\r\n珀\t호박 박\r\n樸\t순박할 박\r\n粕\t지게미 박\r\n駁\t논박할 박\r\n璞\t옥덩어리 박\r\n雹\t우박 박\r\n亳\t땅이름 박\r\n鎛\t호미 박\r\n襮\t수놓은깃 박\r\n鉑\t금박 박\r\n半\t반 반\r\n反\t돌이킬/돌아올 반\r\n班\t나눌 반\r\n般\t가지/일반 반\r\n盤\t소반 반\r\n飯\t밥 반\r\n伴\t짝 반\r\n叛\t배반할 반\r\n返\t돌이킬 반\r\n搬\t옮길 반\r\n潘\t성 반\r\n磻\t반계 반 | 반계 번\r\n槃\t쟁반 반\r\n斑\t아롱질 반\r\n礬\t백반 반\r\n絆\t얽어맬 반\r\n畔\t밭두둑 반\r\n蟠\t서릴 반\r\n頒\t나눌 반\r\n攀\t더위잡을 반\r\n拌\t버릴 반\r\n瘢\t흉터 반\r\n泮\t얼음풀릴/학교 반\r\n盼\t눈예쁠 반\r\n磐\t너럭바위 반\r\n鞶\t가죽띠 반\r\n胖\t살찔 반\r\n發\t필 발\r\n髮\t터럭 발\r\n拔\t뽑을 발\r\n渤\t바다이름 발\r\n鉢\t바리때 발\r\n跋\t밟을 발\r\n勃\t노할 발\r\n魃\t가물 발\r\n醱\t술괼 발\r\n潑\t물뿌릴 발\r\n撥\t다스릴 발\r\n茇\t풀뿌리 발\r\n浡\t우쩍일어날 발\r\n軷\t길제사 발\r\n方\t모 방\r\n放\t놓을 방\r\n防\t막을 방\r\n房\t방 방\r\n訪\t찾을 방\r\n妨\t방해할 방\r\n芳\t꽃다울 방\r\n倣\t본뜰 방\r\n傍\t곁 방\r\n邦\t나라 방\r\n紡\t길쌈 방\r\n旁\t곁 방\r\n龐\t높은집 방\r\n彷\t헤맬 방\r\n尨\t삽살개 방\r\n謗\t헐뜯을 방\r\n坊\t동네 방\r\n膀\t오줌통 방\r\n幇\t도울 방\r\n昉\t밝을 방\r\n肪\t기름 방\r\n榜\t방붙일 방\r\n枋\t다목 방\r\n蒡\t우엉 방\r\n滂\t비퍼부을 방\r\n磅\t돌떨어지는소리 방\r\n舫\t쌍배 방\r\n蚌\t조개 방\r\n厖\t클 방\r\n雱\t눈내릴 방\r\n逄\t막을 방\r\n魴\t방어 방\r\n幫\t도울 방\r\n倍\t곱 배\r\n拜\t절 배\r\n背\t등 배\r\n配\t나눌/짝 배\r\n輩\t무리 배\r\n培\t북돋울 배\r\n排\t밀칠 배\r\n杯\t잔 배\r\n賠\t물어줄 배\r\n俳\t배우 배\r\n裵\t성 배\r\n陪\t모실 배\r\n胚\t아기밸 배\r\n湃\t물결칠 배\r\n徘\t어정거릴 배\r\n裴\t성 배\r\n盃\t잔 배\r\n褙\t배자 배\r\n焙\t불쬘 배\r\n桮\t술잔 배\r\n白\t흰 백\r\n百\t일백 백\r\n伯\t맏 백\r\n柏\t측백 백\r\n魄\t넋 백\r\n帛\t비단 백\r\n栢\t측백 백\r\n佰\t우두머리 백\r\n番\t차례 번\r\n繁\t번성할 번\r\n飜\t번역할 번\r\n煩\t번거로울 번\r\n藩\t울타리 번\r\n蕃\t불을 번\r\n樊\t울 번\r\n燔\t구울 번\r\n幡\t기 번\r\n翻\t날/뒤칠 번\r\n蘩\t흰쑥 번\r\n袢\t속옷 번\r\n墦\t무덤 번\r\n罰\t벌할 벌\r\n伐\t칠 벌\r\n閥\t문벌 벌\r\n筏\t뗏목 벌\r\n犯\t범할 범\r\n範\t법 범\r\n凡\t무릇 범\r\n汎\t넓을 범\r\n范\t성 범\r\n帆\t돛 범\r\n梵\t불경 범\r\n氾\t넘칠 범\r\n泛\t뜰 범\r\n杋\t나무이름 범\r\n法\t법 법\r\n琺\t법랑 법\r\n壁\t벽 벽\r\n碧\t푸를 벽\r\n僻\t궁벽할 벽\r\n癖\t버릇 벽\r\n劈\t쪼갤 벽\r\n闢\t열 벽\r\n擘\t엄지손가락 벽\r\n璧\t구슬 벽\r\n霹\t벼락 벽\r\n蘗\t황경나무 벽\r\n檗\t황벽나무 벽\r\n辟\t물리칠 벽\r\n甓\t벽돌 벽\r\n變\t변할 변\r\n邊\t가 변\r\n辯\t말씀 변\r\n辨\t분별할 변\r\n弁\t고깔 변\r\n卞\t성 변\r\n騈\t쌍말 변 | 나란히할 병\r\n籩\t제기이름 변\r\n釆\t나눌 변\r\n別\t다를/나눌 별\r\n鼈\t자라 별\r\n瞥\t눈깜짝할 별\r\n鱉\t자라 별\r\n病\t병 병\r\n兵\t병사 병\r\n丙\t남녘 병\r\n竝\t나란히 병\r\n屛\t병풍 병\r\n倂\t아우를 병\r\n昺\t밝을 병\r\n昞\t밝을 병\r\n秉\t잡을 병\r\n柄\t자루 병\r\n炳\t불꽃 병\r\n甁\t병 병\r\n餠\t떡 병\r\n棅\t자루 병\r\n幷\t아우를 병\r\n輧\t수레 병\r\n荓\t풀이름 병\r\n怲\t근심할 병\r\n迸\t흩어질 병\r\n缾\t병 병\r\n保\t지킬 보\r\n步\t걸음 보\r\n報\t갚을/알릴 보\r\n寶\t보배 보\r\n普\t넓을 보\r\n譜\t족보 보\r\n補\t기울 보\r\n甫\t클 보\r\n輔\t도울 보\r\n潽\t물이름 보\r\n菩\t보살 보\r\n堡\t작은성 보\r\n洑\t보 보 | 스며흐를 복\r\n褓\t포대기 보\r\n湺\t사람이름 보\r\n珤\t보배 보\r\n鴇\t너새 보\r\n黼\t수놓은옷 보\r\n服\t옷 복\r\n福\t복 복\r\n復\t회복할 복 | 다시 부\r\n伏\t엎드릴 복\r\n複\t겹칠 복\r\n覆\t덮을 부 | 다시 복\r\n腹\t배 복\r\n卜\t점 복\r\n馥\t향기 복\r\n鰒\t전복 복\r\n僕\t종 복\r\n匐\t길 복\r\n輻\t바퀴살 복 | 바퀴살 폭\r\n輹\t바퀴통 복\r\n宓\t성 복\r\n蔔\t무 복\r\n茯\t복령 복\r\n濮\t물이름 복\r\n楅\t뿔막이 복 | 뿔막이 벽\r\n葍\t순무 복\r\n扑\t칠 복\r\n鍑\t솥 복\r\n本\t근본 본\r\n乶\t땅이름 볼\r\n奉\t받들 봉\r\n鳳\t봉새 봉\r\n封\t봉할 봉\r\n峯\t봉우리 봉\r\n逢\t만날 봉\r\n蜂\t벌 봉\r\n俸\t녹 봉\r\n縫\t꿰맬 봉\r\n蓬\t쑥 봉\r\n鋒\t칼날 봉\r\n烽\t봉화 봉\r\n捧\t받들 봉\r\n棒\t막대 봉\r\n琫\t칼장식 봉\r\n峰\t멧부리 봉\r\n熢\t내자옥할 봉\r\n菶\t풀우거질 봉\r\n丰\t예쁠 봉\r\n唪\t크게웃을 봉\r\n葑\t순무 봉\r\n芃\t풀무성할 봉\r\n父\t아비 부\r\n夫\t지아비 부\r\n部\t떼 부\r\n府\t마을 부\r\n富\t부자 부\r\n副\t버금 부\r\n婦\t며느리 부\r\n否\t아닐 부\r\n負\t질 부\r\n符\t부호 부\r\n付\t부칠 부\r\n浮\t뜰 부\r\n賦\t부세 부\r\n腐\t썩을 부\r\n附\t붙을 부\r\n簿\t문서 부\r\n扶\t도울 부\r\n赴\t다다를/갈 부\r\n敷\t펼 부\r\n膚\t살갗 부\r\n傅\t스승 부\r\n釜\t가마 부\r\n阜\t언덕 부\r\n賻\t부의 부\r\n駙\t부마 부\r\n訃\t부고 부\r\n芙\t연꽃 부\r\n腑\t육부 부\r\n斧\t도끼 부\r\n埠\t부두 부\r\n咐\t분부할/불 부\r\n剖\t쪼갤 부\r\n俯\t구부릴 부\r\n孵\t알깔 부\r\n孚\t믿을 부\r\n鳧\t물오리 부\r\n趺\t가부좌할 부\r\n艀\t거룻배 부\r\n溥\t넓을 부\r\n缶\t장군 부\r\n莩\t갈청 부 | 굶어죽을 표\r\n祔\t합장할 부\r\n拊\t어루만질 부\r\n痡\t앓을 부\r\n紑\t옷깨끗할 부\r\n鈇\t작두/도끼 부\r\n裒\t모을 부\r\n蜉\t하루살이 부\r\n芣\t질경이 부\r\n鮒\t붕어 부\r\n掊\t헤칠 부\r\n罦\t덮을 부\r\n俘\t사로잡을 부\r\n桴\t대마루 부\r\n北\t북녘 북 | 달아날 배\r\n分\t나눌 분\r\n粉\t가루 분\r\n憤\t분할 분\r\n奔\t달릴 분\r\n奮\t떨칠 분\r\n紛\t어지러울 분\r\n墳\t무덤 분\r\n芬\t향기 분\r\n扮\t꾸밀 분\r\n雰\t눈날릴 분\r\n盆\t동이 분\r\n焚\t불사를 분\r\n吩\t분부할 분\r\n噴\t뿜을 분\r\n忿\t성낼 분\r\n糞\t똥 분\r\n昐\t햇빛 분\r\n汾\t물이름 분\r\n賁\t클 분 | 꾸밀 비\r\n幩\t재갈장식 분\r\n鼖\t큰북 분\r\n饙\t찐밥 분\r\n苯\t우거질 분\r\n蕡\t열매많을 분\r\n濆\t물가 분\r\n棼\t어지러울 분\r\n枌\t흰느릅나무 분\r\n豶\t불깐돼지 분\r\n不\t아닐 불\r\n佛\t부처 불\r\n拂\t떨칠 불\r\n弗\t아닐/말 불\r\n彿\t비슷할 불\r\n紼\t인끈 불\r\n咈\t어길 불\r\n紱\t인끈 불\r\n笰\t수레가리개 불\r\n巿\t슬갑 불\r\n黻\t슬갑/보불 불\r\n茀\t우거질 불\r\n艴\t성발끈낼 불 | 성발끈낼 발\r\n芾\t슬갑/우거질 불\r\n崩\t무너질 붕\r\n朋\t벗 붕\r\n鵬\t새 붕\r\n棚\t사다리 붕\r\n硼\t붕사 붕\r\n繃\t묶을 붕\r\n比\t견줄 비\r\n費\t쓸 비\r\n鼻\t코 비\r\n飛\t날 비\r\n備\t갖출 비\r\n非\t아닐 비\r\n悲\t슬플 비\r\n批\t비평할 비\r\n祕\t숨길 비\r\n碑\t비석 비\r\n妃\t왕비 비\r\n婢\t계집종 비\r\n肥\t살찔 비\r\n卑\t낮을 비\r\n匪\t비적 비\r\n泌\t분비할 비 | 스며흐를 필\r\n丕\t클 비\r\n毖\t삼갈 비\r\n毘\t도울 비\r\n誹\t헐뜯을 비\r\n砒\t비상 비\r\n妣\t죽은어미 비\r\n鄙\t더러울 비\r\n譬\t비유할 비\r\n裨\t도울 비\r\n臂\t팔 비\r\n脾\t지라 비\r\n翡\t물총새 비\r\n扉\t사립문 비\r\n秕\t쭉정이 비\r\n痺\t저릴 비\r\n琵\t비파 비\r\n沸\t끓을 비 | 용솟음할 불\r\n憊\t고단할 비\r\n匕\t비수 비\r\n蜚\t바퀴/날 비\r\n庇\t덮을 비\r\n緋\t비단 비\r\n斐\t아롱질 비\r\n榧\t비자나무 비\r\n枇\t비파나무 비\r\n粃\t쭉정이 비\r\n菲\t엷을 비\r\n秘\t숨길 비\r\n毗\t도울 비\r\n閟\t닫을 비\r\n剕\t발벨 비\r\n圮\t무너질 비\r\n埤\t더할 비\r\n庳\t낮을 비\r\n悱\t분할 비\r\n棐\t도지개 비\r\n淠\t물이름 비\r\n紕\t꾸밀 비\r\n腓\t장딴지 비\r\n俾\t하여금 비\r\n轡\t고삐 비\r\n痹\t저릴 비\r\n霏\t눈펄펄내릴 비\r\n騑\t곁마 비\r\n伾\t힘셀 비\r\n奰\t장대할 비\r\n岯\t산겹칠 비\r\n朏\t초승달 비\r\n畀\t줄 비\r\n秠\t검은기장 비\r\n篚\t대광주리 비\r\n鞞\t마상북 비 | 칼집 병\r\n駓\t황부루 비\r\n貔\t맹수이름 비\r\n羆\t곰 비\r\n仳\t떠날 비\r\n貧\t가난할 빈\r\n賓\t손 빈\r\n頻\t자주 빈\r\n彬\t빛날 빈\r\n殯\t빈소 빈\r\n濱\t물가 빈\r\n嬪\t궁녀벼슬이름 빈\r\n嚬\t찡그릴 빈\r\n瀕\t물가/가까울 빈\r\n檳\t빈랑나무 빈\r\n浜\t물가 빈\r\n牝\t암컷 빈\r\n玭\t진주 빈\r\n斌\t빛날 빈\r\n繽\t어지러울 빈\r\n邠\t나라이름 빈\r\n璸\t옥의무늬 빈\r\n儐\t인도할 빈\r\n擯\t물리칠 빈\r\n鬢\t살쩍 빈\r\n豳\t나라이름 빈\r\n蠙\t진주조개 빈\r\n蘋\t마름 빈\r\n氷\t얼음 빙\r\n聘\t부를 빙\r\n馮\t탈 빙 | 성 풍\r\n憑\t비길 빙\r\n騁\t달릴 빙\r\n四\t넉 사\r\n事\t일 사\r\n社\t모일 사\r\n使\t하여금/부릴 사\r\n死\t죽을 사\r\n史\t사기 사\r\n士\t선비 사\r\n仕\t섬길 사\r\n寫\t베낄 사\r\n思\t생각 사\r\n査\t조사할 사\r\n寺\t절 사\r\n師\t스승 사\r\n謝\t사례할 사\r\n舍\t집 사\r\n辭\t말씀 사\r\n私\t사사 사\r\n絲\t실 사\r\n射\t쏠 사\r\n邪\t간사할 사\r\n沙\t모래 사\r\n司\t맡을 사\r\n蛇\t긴뱀 사\r\n斜\t비낄 사\r\n詞\t말/글 사\r\n祀\t제사 사\r\n巳\t뱀 사\r\n捨\t버릴 사\r\n斯\t이 사\r\n詐\t속일 사\r\n賜\t줄 사\r\n似\t닮을 사\r\n赦\t용서할 사\r\n飼\t기를 사\r\n唆\t부추길 사\r\n泗\t물이름 사\r\n些\t적을 사\r\n麝\t사향노루 사\r\n祠\t사당 사\r\n紗\t비단 사\r\n嗣\t이을 사\r\n奢\t사치할 사\r\n娑\t춤출/사바세상 사\r\n徙\t옮길 사\r\n瀉\t쏟을 사\r\n獅\t사자 사\r\n蓑\t도롱이 사\r\n篩\t체 사\r\n肆\t방자할/베풀 사\r\n俟\t기다릴 사\r\n渣\t찌끼 사\r\n梭\t북 사\r\n柶\t숟가락/윷 사\r\n僿\t잘게부술 사 | 잘게부술 새\r\n裟\t가사 사\r\n砂\t모래 사\r\n乍\t잠깐 사\r\n莎\t사초 사\r\n伺\t엿볼 사\r\n駟\t사마 사\r\n鯊\t상어/모래무지 사\r\n耜\t따비/보습 사\r\n笥\t옷상자 사\r\n戺\t문지방 사\r\n涘\t물가 사\r\n簑\t도롱이 사\r\n傞\t취한춤 사\r\n汜\t늪 사\r\n榭\t정자/사당 사\r\n糸\t실 사 | 가는실 멱\r\n葸\t겁낼 사\r\n蓰\t다섯곱 사\r\n蹝\t천천히걸을 사\r\n削\t깎을 삭\r\n朔\t초하루 삭\r\n鑠\t쇠녹일 삭\r\n山\t메 산\r\n算\t셈 산\r\n産\t낳을 산\r\n散\t흩을 산\r\n傘\t우산 산\r\n酸\t실 산\r\n疝\t산증 산\r\n珊\t산호 산\r\n刪\t깎을 산\r\n汕\t오구 산\r\n蒜\t마늘 산\r\n霰\t싸락눈 산\r\n潸\t눈물줄줄흘릴 산\r\n殺\t죽일 살 | 감할/빠를 쇄\r\n撒\t뿌릴 살\r\n煞\t죽일 살\r\n薩\t보살 살\r\n乷\t땅이름 살\r\n三\t석 삼\r\n森\t수풀 삼\r\n蔘\t삼 삼\r\n滲\t스밀 삼\r\n衫\t적삼 삼\r\n杉\t삼나무 삼\r\n芟\t풀벨 삼\r\n揷\t꽂을 삽\r\n澁\t떫을 삽\r\n鈒\t새길 삽\r\n颯\t바람소리 삽\r\n歃\t마실 삽\r\n上\t윗 상\r\n商\t장사 상\r\n相\t서로 상\r\n賞\t상줄 상\r\n常\t떳떳할 상\r\n床\t상 상\r\n想\t생각 상\r\n狀\t형상 상 | 문서 장\r\n傷\t다칠 상\r\n象\t코끼리 상\r\n霜\t서리 상\r\n裳\t치마 상\r\n桑\t뽕나무 상\r\n喪\t잃을 상\r\n詳\t자세할 상\r\n尙\t오히려 상\r\n像\t모양 상\r\n償\t갚을 상\r\n祥\t상서 상\r\n嘗\t맛볼 상\r\n箱\t상자 상\r\n庠\t학교 상\r\n爽\t시원할 상\r\n翔\t날 상\r\n觴\t잔 상\r\n孀\t홀어미 상\r\n牀\t평상 상\r\n峠\t고개 상\r\n橡\t상수리 상\r\n廂\t곁채 상\r\n湘\t물이름 상\r\n鱨\t자가사리/날치 상\r\n塽\t높고밝은땅 상\r\n殤\t어려서죽을 상\r\n顙\t이마 상\r\n璽\t옥새 새\r\n賽\t굿할 새\r\n色\t빛 색\r\n索\t찾을 색 | 노 삭\r\n塞\t막힐 색 | 변방 새\r\n嗇\t아낄 색\r\n穡\t거둘 색\r\n生\t날 생\r\n牲\t희생 생\r\n甥\t생질 생\r\n笙\t생황 생\r\n眚\t재앙 생\r\n西\t서녘 서\r\n書\t글 서\r\n序\t차례 서\r\n恕\t용서할 서\r\n緖\t실마리 서\r\n徐\t천천할 서\r\n署\t마을 서\r\n暑\t더울 서\r\n敍\t펼 서\r\n逝\t갈 서\r\n庶\t여러 서\r\n誓\t맹세할 서\r\n瑞\t상서 서\r\n舒\t펼 서\r\n抒\t풀 서\r\n棲\t깃들일 서\r\n犀\t무소 서\r\n胥\t서로 서\r\n薯\t감자 서\r\n黍\t기장 서\r\n嶼\t섬 서\r\n曙\t새벽 서\r\n鼠\t쥐 서\r\n壻\t사위 서\r\n絮\t솜 서 | 성 여\r\n筮\t점대 서\r\n栖\t깃들일 서\r\n鋤\t호미 서\r\n墅\t농막 서\r\n捿\t깃들일 서\r\n鱮\t연어 서\r\n噬\t씹을 서\r\n婿\t사위 서\r\n湑\t이슬맺힐 서\r\n澨\t물가 서\r\n紓\t늘어질 서\r\n諝\t슬기 서\r\n癙\t근심병 서\r\n藇\t아름다울 서 | 마 여\r\n夕\t저녁 석\r\n席\t자리 석\r\n石\t돌 석\r\n惜\t아낄 석\r\n釋\t풀 석\r\n昔\t예 석\r\n析\t쪼갤 석\r\n碩\t클 석\r\n錫\t주석 석\r\n奭\t클/쌍백 석\r\n晳\t밝을 석\r\n潟\t개펄 석\r\n蓆\t클 석\r\n汐\t조수 석\r\n淅\t쌀일 석\r\n鼫\t다람쥐 석\r\n螫\t쏠 석\r\n裼\t벗어맬 석 | 포대기 체\r\n腊\t육포 석\r\n鉐\t놋쇠 석\r\n舃\t신 석\r\n先\t먼저 선\r\n線\t줄 선\r\n鮮\t고울 선\r\n仙\t신선 선\r\n善\t착할 선\r\n選\t가릴 선\r\n船\t배 선\r\n宣\t베풀 선\r\n禪\t선 선\r\n旋\t돌 선\r\n繕\t기울 선\r\n璇\t옥 선\r\n瑄\t도리옥 선\r\n璿\t구슬 선\r\n煽\t부채질할 선\r\n銑\t무쇠 선\r\n膳\t선물/반찬 선\r\n羨\t부러워할 선 | 무덤길 연\r\n扇\t부채 선\r\n腺\t샘 선\r\n詵\t말전할/많을 선\r\n僊\t춤훨훨출 선\r\n鐥\t대야 선\r\n琁\t옥 선\r\n蟬\t매미 선\r\n蘚\t이끼 선\r\n饍\t반찬 선\r\n癬\t버짐 선\r\n嬋\t고울 선\r\n跣\t맨발 선\r\n渲\t바림 선\r\n敾\t사람이름 선\r\n墡\t흰흙 선\r\n愃\t상쾌할 선 | 너그러울 훤\r\n僎\t갖출 선 | 준작 준\r\n墠\t제터 선\r\n毨\t털갈 선\r\n珗\t옥돌 선\r\n雪\t눈 설\r\n說\t말씀 설 | 달랠 세\r\n設\t베풀 설\r\n舌\t혀 설\r\n薛\t성 설\r\n卨\t사람이름 설\r\n屑\t가루 설\r\n泄\t샐 설\r\n洩\t샐 설 | 퍼질 예\r\n渫\t파낼 설\r\n齧\t깨물 설\r\n褻\t무람없을 설\r\n楔\t문설주 설\r\n暬\t설만할 설\r\n偰\t맑을 설\r\n紲\t고삐 설\r\n挈\t끌 설 | 이지러질 계\r\n絏\t맬 설 | 소매 예\r\n纖\t가늘 섬\r\n陝\t땅이름 섬\r\n蟾\t두꺼비 섬\r\n暹\t햇살치밀/나라이름 섬\r\n閃\t번쩍일 섬\r\n殲\t다죽일 섬\r\n贍\t넉넉할 섬\r\n憸\t아첨할 섬\r\n攝\t다스릴/잡을 섭\r\n涉\t건널 섭\r\n燮\t불꽃 섭\r\n韘\t깍지 섭\r\n姓\t성 성\r\n成\t이룰 성\r\n省\t살필 성 | 덜 생\r\n性\t성품 성\r\n誠\t정성 성\r\n聲\t소리 성\r\n盛\t성할 성\r\n聖\t성인 성\r\n城\t재 성\r\n星\t별 성\r\n晟\t밝을 성\r\n醒\t깰 성\r\n惺\t깨달을 성\r\n腥\t비릴 성\r\n珹\t옥이름 성\r\n宬\t서고 성\r\n猩\t성성이 성\r\n筬\t바디 성\r\n瑆\t옥빛 성\r\n騂\t붉은소 성\r\n娍\t아름다울 성\r\n世\t인간 세\r\n洗\t씻을 세\r\n歲\t해 세\r\n勢\t형세 세\r\n稅\t세금 세\r\n細\t가늘 세\r\n貰\t세놓을 세\r\n笹\t가는대 세\r\n帨\t수건 세\r\n小\t작을 소\r\n少\t적을 소\r\n所\t바 소\r\n消\t사라질 소\r\n笑\t웃음 소\r\n掃\t쓸 소\r\n素\t본디/흴 소\r\n訴\t호소할 소\r\n燒\t사를 소\r\n疏\t소통할 소\r\n蘇\t되살아날 소\r\n召\t부를 소\r\n昭\t밝을 소\r\n蔬\t나물 소\r\n騷\t떠들 소\r\n紹\t이을 소\r\n沼\t못 소\r\n巢\t새집 소\r\n邵\t땅이름/성 소\r\n簫\t퉁소 소\r\n塑\t흙빚을 소\r\n遡\t거스를 소\r\n逍\t노닐 소\r\n蕭\t쓸쓸할 소\r\n瘙\t피부병 소\r\n疎\t성길 소\r\n甦\t깨어날 소\r\n梳\t얼레빗 소\r\n宵\t밤 소\r\n搔\t긁을 소\r\n嘯\t휘파람 소\r\n瀟\t물이름 소\r\n銷\t쇠녹일 소\r\n溯\t거슬러올라갈 소\r\n篠\t조릿대 소\r\n韶\t풍류/아름다울 소\r\n炤\t밝을 소 | 비출 조\r\n愬\t하소연할 소 | 두려워할 색\r\n艘\t고물 소\r\n蛸\t갈거미 소\r\n玿\t아름다운옥 소\r\n埽\t쓸 소\r\n翛\t날개소리 소\r\n繅\t고치켤 소\r\n蠨\t갈거미 소\r\n霄\t하늘 소\r\n愫\t정성 소\r\n慅\t소란스러울 소 | 고달플 초\r\n柖\t나무흔들릴 소\r\n速\t빠를 속\r\n束\t묶을 속\r\n續\t이을 속\r\n俗\t풍속 속\r\n屬\t붙일 속\r\n粟\t조 속\r\n贖\t속죄할 속\r\n涑\t물이름 속\r\n謖\t일어날 속\r\n餗\t삶은나물 속\r\n樕\t참나무 속\r\n蔌\t푸성귀 속\r\n觫\t곱송그릴 속\r\n藚\t쇠귀나물 속\r\n孫\t손자 손\r\n損\t덜 손\r\n遜\t겸손할 손\r\n蓀\t향풀 손\r\n巽\t부드러울 손\r\n飡\t밥 손 | 벼슬이름 찬\r\n飱\t저녁밥 손\r\n飧\t저녁밥/물만밥 손\r\n蟀\t귀뚜라미 솔\r\n送\t보낼 송\r\n頌\t기릴/칭송할 송\r\n松\t소나무 송\r\n訟\t송사할 송\r\n誦\t욀 송\r\n宋\t성 송\r\n悚\t두려울 송\r\n淞\t물이름 송\r\n竦\t공경할/두려울 송\r\n鎖\t쇠사슬 쇄\r\n刷\t인쇄할 쇄\r\n碎\t부술 쇄\r\n灑\t뿌릴 쇄\r\n洒\t뿌릴 쇄 | 씻을 세\r\n瑣\t옥가루 쇄\r\n衰\t쇠할 쇠\r\n釗\t쇠 쇠\r\n水\t물 수\r\n手\t손 수\r\n數\t셈 수\r\n樹\t나무 수\r\n首\t머리 수\r\n修\t닦을 수\r\n受\t받을 수\r\n守\t지킬 수\r\n授\t줄 수\r\n收\t거둘 수\r\n秀\t빼어날 수\r\n愁\t근심 수\r\n壽\t목숨 수\r\n帥\t장수 수\r\n殊\t다를 수\r\n輸\t보낼 수\r\n隨\t따를 수\r\n需\t쓰일/쓸 수\r\n垂\t드리울 수\r\n獸\t짐승 수\r\n睡\t졸음 수\r\n須\t모름지기 수\r\n雖\t비록 수\r\n誰\t누구 수\r\n搜\t찾을 수\r\n囚\t가둘 수\r\n遂\t드디어 수\r\n銖\t저울눈 수\r\n隋\t수나라 수\r\n洙\t물가 수\r\n蒐\t모을 수\r\n嫂\t형수 수\r\n戍\t수자리 수\r\n髓\t뼛골 수\r\n酬\t갚을 수\r\n袖\t소매 수\r\n羞\t부끄러울 수\r\n狩\t사냥할 수\r\n繡\t수놓을 수\r\n粹\t순수할 수\r\n竪\t세울 수\r\n穗\t이삭 수\r\n瘦\t여윌 수\r\n讎\t원수 수\r\n蓚\t수산 수\r\n綬\t인끈 수\r\n綏\t편안할 수 | 기드리움 유\r\n琇\t옥돌 수\r\n鬚\t수염 수\r\n漱\t양치할 수\r\n峀\t산굴 수\r\n銹\t쇳녹날 수\r\n嗽\t기침할 수\r\n邃\t깊을 수\r\n璲\t패옥 수\r\n藪\t숲 수\r\n隧\t길 수\r\n讐\t원수 수\r\n燧\t봉화 수\r\n茱\t수유 수\r\n岫\t산굴 수\r\n脩\t길 수\r\n魗\t미워할 수 | 미워할 추\r\n叟\t늙은이 수\r\n售\t팔 수\r\n廋\t숨길 수\r\n殳\t창 수\r\n濉\t물이름 수 | 노려볼 휴\r\n睟\t바로볼 수\r\n瞍\t소경 수\r\n豎\t세울 수\r\n檖\t산배 수\r\n繻\t고운비단 수\r\n穟\t벼이삭 수\r\n宿\t잘 숙 | 별자리 수\r\n叔\t아재비 숙\r\n肅\t엄숙할 숙\r\n淑\t맑을 숙\r\n熟\t익을 숙\r\n孰\t누구 숙\r\n夙\t이를 숙\r\n菽\t콩 숙\r\n塾\t글방 숙\r\n琡\t옥이름 숙\r\n璹\t옥그릇 숙\r\n潚\t물맑을 숙\r\n橚\t무성할 숙\r\n俶\t비롯할 숙\r\n順\t순할 순\r\n純\t순수할 순\r\n旬\t열흘 순\r\n瞬\t눈깜짝일 순\r\n巡\t돌/순행할 순\r\n循\t돌 순\r\n殉\t따라죽을 순\r\n脣\t입술 순\r\n盾\t방패 순\r\n舜\t순임금 순\r\n珣\t옥이름 순\r\n淳\t순박할 순\r\n洵\t참으로 순\r\n荀\t풀이름 순\r\n醇\t전국술 순\r\n筍\t죽순 순\r\n馴\t길들일 순\r\n詢\t물을 순\r\n錞\t악기이름 순\r\n徇\t부릴/조리돌릴 순\r\n恂\t미쁠/무서울 순\r\n栒\t나무이름 순\r\n楯\t난간 순\r\n橓\t무궁화나무 순\r\n蓴\t순채 순\r\n諄\t거듭이를 순\r\n蕣\t무궁화 순\r\n漘\t물가 순\r\n犉\t입술검은누렁소 순\r\n肫\t광대뼈 순\r\n郇\t나라이름 순\r\n鶉\t메추리 순\r\n術\t재주 술\r\n述\t펼 술\r\n戌\t개 술\r\n鉥\t돗바늘 술\r\n崇\t높을 숭\r\n嵩\t산높을 숭\r\n崧\t산높을 숭\r\n瑟\t큰거문고 슬\r\n膝\t무릎 슬\r\n蝨\t이 슬\r\n璱\t아름다운옥 슬\r\n習\t익힐 습\r\n濕\t젖을 습\r\n拾\t주울 습 | 열 십\r\n襲\t엄습할 습\r\n褶\t사마치/주름 습 | 겹옷 첩\r\n隰\t진펄 습\r\n熠\t빛날 습\r\n勝\t이길 승\r\n承\t이을 승\r\n乘\t탈 승\r\n昇\t오를 승\r\n僧\t중 승\r\n升\t되 승\r\n繩\t노끈 승\r\n丞\t정승 승\r\n陞\t오를 승\r\n蠅\t파리 승\r\n時\t때 시\r\n市\t저자 시\r\n始\t비로소 시\r\n示\t보일 시\r\n詩\t시 시\r\n試\t시험 시\r\n視\t볼 시\r\n施\t베풀 시\r\n是\t이/옳을 시\r\n侍\t모실 시\r\n矢\t화살 시\r\n屍\t주검 시\r\n柴\t섶 시\r\n柿\t감 시\r\n匙\t숟가락 시\r\n媤\t시집 시\r\n弑\t윗사람죽일 시\r\n猜\t시기할 시\r\n諡\t시호 시\r\n豺\t승냥이 시\r\n豕\t돼지 시\r\n恃\t믿을 시\r\n翅\t날개 시\r\n蒔\t모종할 시\r\n蓍\t시초 시\r\n尸\t주검 시\r\n嘶\t말울/목쉴 시\r\n屎\t똥 시\r\n諟\t다스릴 시\r\n枲\t수삼 시\r\n塒\t홰 시\r\n啻\t뿐 시\r\n兕\t외뿔소 시\r\n偲\t힘쓸 시\r\n鳲\t뻐꾸기 시\r\n釃\t술거를 시\r\n緦\t시마 시\r\n食\t밥/먹을 식\r\n植\t심을 식\r\n式\t법 식\r\n識\t알 식\r\n息\t쉴 식\r\n飾\t꾸밀 식\r\n殖\t불릴 식\r\n軾\t수레가로나무 식\r\n湜\t물맑을 식\r\n熄\t불꺼질 식\r\n蝕\t좀먹을 식\r\n拭\t씻을 식\r\n寔\t이 식\r\n篒\t땅이름 식\r\n埴\t찰흙 식 | 찰흙 치\r\n栻\t점치는판 식\r\n身\t몸 신\r\n神\t귀신 신\r\n信\t믿을 신\r\n新\t새 신\r\n臣\t신하 신\r\n申\t납 신\r\n愼\t삼갈 신\r\n辛\t매울 신\r\n伸\t펼 신\r\n晨\t새벽 신\r\n紳\t띠 신\r\n腎\t콩팥 신\r\n薪\t섶 신\r\n迅\t빠를 신\r\n蜃\t큰조개 신\r\n燼\t불탄끝 신\r\n宸\t대궐 신\r\n娠\t아이밸 신\r\n呻\t읊조릴 신\r\n訊\t물을 신\r\n侁\t걷는모양 신\r\n莘\t세신 신\r\n藎\t조개풀 신\r\n駪\t많을 신\r\n贐\t노자 신\r\n矧\t하물며 신\r\n甡\t수두룩할 신\r\n璶\t옥돌 신\r\n哂\t웃을 신\r\n室\t집 실\r\n失\t잃을 실\r\n實\t열매 실\r\n悉\t다 실\r\n蟋\t귀뚜라미 실\r\n心\t마음 심\r\n深\t깊을 심\r\n甚\t심할 심\r\n審\t살필 심\r\n尋\t찾을 심\r\n瀋\t즙낼/물이름 심\r\n芯\t골풀 심\r\n諶\t믿을 심\r\n沁\t스며들 심\r\n葚\t오디 심\r\n諗\t고할 심\r\n十\t열 십\r\n什\t열사람 십 | 세간 집\r\n雙\t두/쌍 쌍\r\n氏\t각시/성씨 씨\r\n兒\t아이 아\r\n雅\t맑을 아\r\n我\t나 아\r\n阿\t언덕 아\r\n亞\t버금 아\r\n芽\t싹 아\r\n牙\t어금니 아\r\n餓\t주릴 아\r\n訝\t의심할 아\r\n衙\t마을 아\r\n啞\t벙어리 아\r\n俄\t아까 아\r\n娥\t예쁠 아\r\n峨\t산높을 아\r\n莪\t다북쑥 아\r\n蛾\t누에나방 아\r\n鴉\t갈까마귀 아\r\n鵝\t거위 아\r\n迓\t맞을 아\r\n惡\t악할 악 | 미워할 오\r\n岳\t큰산 악\r\n握\t쥘 악\r\n堊\t흰흙 악\r\n愕\t놀랄 악\r\n顎\t턱 악\r\n嶽\t큰산 악\r\n渥\t비젖을/두터울 악\r\n鰐\t악어 악\r\n幄\t장막 악\r\n鍔\t칼날 악\r\n鄂\t땅이름 악\r\n齷\t악착할 악\r\n咢\t깜짝놀랄 악\r\n安\t편안 안\r\n案\t책상 안\r\n眼\t눈 안\r\n顔\t낯 안\r\n岸\t언덕 안\r\n雁\t기러기 안\r\n晏\t늦을 안\r\n鞍\t안장 안\r\n按\t누를 안\r\n鮟\t아귀 안\r\n鴈\t기러기 안\r\n犴\t들개/옥 안\r\n謁\t뵐 알\r\n閼\t막을 알\r\n斡\t돌 알\r\n軋\t삐걱거릴 알\r\n訐\t들추어낼 알\r\n遏\t막을 알\r\n頞\t콧대 알\r\n歹\t뼈앙상할 알 | 나쁠 대\r\n戛\t창/어근버근할 알\r\n揠\t뽑을 알\r\n暗\t어두울 암\r\n巖\t바위 암\r\n癌\t암 암\r\n闇\t숨을 암\r\n庵\t암자 암\r\n菴\t암자 암\r\n岩\t바위 암\r\n唵\t움켜먹을 암\r\n黯\t검을 암\r\n壓\t누를 압\r\n押\t누를 압\r\n鴨\t오리 압\r\n狎\t친압할 압\r\n仰\t우러를 앙\r\n央\t가운데 앙\r\n殃\t재앙 앙\r\n昂\t높을 앙\r\n怏\t원망할 앙\r\n秧\t모 앙\r\n鴦\t원앙 앙\r\n昻\t높을 앙\r\n泱\t물깊고넓을 앙 | 흰구름일 영\r\n盎\t동이 앙\r\n鞅\t가슴걸이 앙\r\n卬\t나 앙\r\n愛\t사랑 애\r\n哀\t슬플 애\r\n涯\t물가 애\r\n礙\t거리낄 애\r\n艾\t쑥 애\r\n埃\t티끌 애\r\n崖\t언덕 애\r\n曖\t희미할 애\r\n隘\t좁을 애\r\n靄\t아지랑이 애\r\n碍\t거리낄 애\r\n厓\t언덕 애\r\n餲\t밥쉴 애\r\n藹\t초목우거질 애\r\n僾\t비슷할/돋보기 애\r\n液\t진 액\r\n額\t이마 액\r\n厄\t액 액\r\n扼\t잡을 액\r\n腋\t겨드랑이 액\r\n縊\t목맬 액\r\n掖\t낄/겨드랑이 액\r\n頟\t이마 액\r\n戹\t좁을 액\r\n阨\t막힐 액 | 좁을 애\r\n櫻\t앵두 앵\r\n鶯\t꾀꼬리 앵\r\n罌\t양병 앵\r\n鸚\t앵무새 앵\r\n嚶\t꾀꼬리소리 앵\r\n夜\t밤 야\r\n野\t들 야\r\n也\t이끼/어조사 야\r\n耶\t어조사 야\r\n惹\t이끌 야\r\n倻\t가야 야\r\n揶\t야유할 야\r\n冶\t풀무 야\r\n爺\t아비 야\r\n椰\t야자나무 야\r\n弱\t약할 약\r\n藥\t약 약\r\n約\t맺을 약\r\n若\t같을 약 | 반야 야\r\n躍\t뛸 약\r\n葯\t꽃밥 약\r\n蒻\t부들 약\r\n瀹\t데칠/지질 약\r\n籥\t피리 약\r\n禴\t봄제사 약\r\n陽\t볕 양\r\n洋\t큰바다 양\r\n養\t기를 양\r\n羊\t양 양\r\n樣\t모양 양\r\n讓\t사양할 양\r\n壤\t흙덩이 양\r\n揚\t날릴 양\r\n楊\t버들 양\r\n孃\t아가씨 양\r\n襄\t도울 양\r\n攘\t물리칠 양\r\n恙\t병/근심할 양\r\n釀\t술빚을 양\r\n癢\t가려울 양\r\n瘍\t헐 양\r\n瀁\t물깊을 양\r\n佯\t거짓 양\r\n敭\t날릴 양\r\n暘\t해돋을 양\r\n禳\t빌 양\r\n痒\t가려울 양\r\n穰\t볏줄기 양\r\n煬\t녹일 양\r\n颺\t날릴 양\r\n饟\t건량 양\r\n昜\t볕 양\r\n瀼\t이슬많은모양 양\r\n漾\t물출렁거릴 양\r\n鍚\t말이마치장 양\r\n語\t말씀 어\r\n漁\t고기잡을 어\r\n魚\t고기/물고기 어\r\n御\t거느릴 어\r\n於\t어조사 어 | 탄식할 오\r\n圄\t옥 어\r\n禦\t막을 어\r\n瘀\t어혈질 어\r\n齬\t이어긋날 어\r\n馭\t말부릴 어\r\n敔\t막을 어\r\n饇\t배부를 어\r\n飫\t배부를 어\r\n圉\t마부 어\r\n億\t억 억\r\n憶\t생각할 억\r\n抑\t누를 억\r\n臆\t가슴 억\r\n檍\t참죽나무 억\r\n嶷\t숙성할 억 | 산이름 의\r\n言\t말씀 언\r\n焉\t어찌 언\r\n彦\t선비 언\r\n堰\t둑 언\r\n諺\t언문/속담 언\r\n偃\t쓰러질 언\r\n鰋\t메기 언\r\n唁\t위문할 언\r\n蘖\t싹 얼\r\n孼\t서자 얼\r\n臬\t문지방 얼\r\n孽\t서자 얼\r\n臲\t위태할 얼\r\n嚴\t엄할 엄\r\n掩\t가릴 엄\r\n奄\t문득 엄\r\n儼\t엄연할 엄\r\n淹\t담글 엄\r\n俺\t나 엄\r\n閹\t고자/내시 엄\r\n揜\t가릴 엄\r\n渰\t구름일 엄\r\n業\t업 업\r\n嶪\t산높을 업\r\n餘\t남을 여\r\n如\t같을 여\r\n與\t더불/줄 여\r\n輿\t수레 여\r\n汝\t너 여\r\n余\t나 여\r\n予\t나 여\r\n璵\t옥 여\r\n艅\t배이름 여\r\n轝\t수레 여\r\n歟\t어조사 여\r\n茹\t꼭두서니 여\r\n礖\t돌 여\r\n旟\t기 여\r\n鸒\t갈까마귀 여\r\n洳\t물이름/축축할 여\r\n畬\t세해된밭 여 | 따비밭 사\r\n逆\t거스릴 역\r\n域\t지경 역\r\n易\t바꿀 역 | 쉬울 이\r\n疫\t전염병 역\r\n亦\t또 역\r\n役\t부릴 역\r\n譯\t번역할 역\r\n驛\t역 역\r\n繹\t풀 역\r\n鷊\t칠면조 역\r\n鶂\t거위소리 역 | 거위소리 예\r\n罭\t물고기그물 역\r\n埸\t지경/밭두둑 역\r\n嶧\t산이름 역\r\n棫\t두릅나무 역\r\n晹\t햇살약할 역\r\n淢\t빨리흐를 역 | 해자 혁\r\n緎\t혼솔 역\r\n懌\t기뻐할 역\r\n閾\t문지방 역\r\n然\t그럴 연\r\n煙\t연기 연\r\n硏\t갈 연\r\n演\t펼 연\r\n燃\t탈 연\r\n鉛\t납 연\r\n緣\t인연 연\r\n延\t늘일 연\r\n沿\t물따라갈/따를 연\r\n軟\t연할 연\r\n宴\t잔치 연\r\n燕\t제비 연\r\n硯\t벼루 연\r\n衍\t넓을 연\r\n姸\t고울 연\r\n淵\t못 연\r\n鳶\t솔개 연\r\n捐\t버릴 연\r\n筵\t대자리 연\r\n椽\t서까래 연\r\n嚥\t침삼킬 연\r\n縯\t길 연 | 당길 인\r\n烟\t연기 연\r\n涓\t졸졸흐를 연\r\n挻\t당길 연\r\n堧\t빈땅 연\r\n沇\t물이름 연\r\n娟\t예쁠 연\r\n涎\t침 연\r\n醼\t잔치 연\r\n蜎\t벌레꿈틀거릴 연\r\n掾\t아전 연\r\n悁\t성낼 연 | 조급할 견\r\n兗\t땅이름 연\r\n熱\t더울 열\r\n悅\t기쁠 열\r\n閱\t볼 열\r\n噎\t목멜 열\r\n染\t물들 염\r\n鹽\t소금 염\r\n炎\t불꽃 염\r\n厭\t싫어할 염\r\n閻\t마을 염\r\n焰\t불꽃 염\r\n艶\t고울 염\r\n剡\t날카로울 염\r\n琰\t옥 염\r\n苒\t풀우거질 염\r\n髥\t구레나룻 염\r\n艷\t고울 염\r\n饜\t싫을/배부를 염\r\n焱\t불꽃 염 | 불꽃 혁\r\n檿\t산뽕나무 염\r\n燄\t불당길 염\r\n冉\t나아갈 염\r\n葉\t잎 엽\r\n燁\t빛날 엽\r\n曄\t빛날 엽\r\n饁\t들밥먹일 엽\r\n爗\t빗날 엽\r\n英\t꽃부리 영\r\n永\t길 영\r\n榮\t영화 영\r\n迎\t맞을 영\r\n映\t비칠 영\r\n營\t경영할 영\r\n影\t그림자 영\r\n詠\t읊을 영\r\n泳\t헤엄칠 영\r\n盈\t찰 영\r\n瑛\t옥빛 영\r\n暎\t비칠 영\r\n嬰\t어린아이 영\r\n渶\t물이름 영\r\n濚\t물졸졸흐를 영\r\n嶸\t산가파를 영\r\n楹\t기둥 영\r\n塋\t무덤 영\r\n潁\t물이름 영\r\n瀛\t바다 영\r\n煐\t빛날 영\r\n鍈\t방울소리 영\r\n纓\t갓끈 영\r\n瓔\t옥돌 영\r\n瀯\t물소리 영\r\n霙\t진눈깨비 영\r\n穎\t이삭 영\r\n咏\t읊을 영\r\n嬴\t가득할 영\r\n縈\t얽힐 영\r\n贏\t남을 영\r\n郢\t땅이름 영\r\n攖\t찌를/가까이할 영\r\n藝\t재주 예\r\n豫\t미리 예\r\n譽\t기릴/명예 예\r\n銳\t날카로울 예\r\n預\t맡길/미리 예\r\n芮\t성 예\r\n睿\t슬기 예\r\n濊\t종족이름 예\r\n詣\t이를 예\r\n曳\t끌 예\r\n穢\t더러울 예\r\n裔\t후손 예\r\n刈\t벨 예\r\n乂\t깎을 예\r\n霓\t암무지개 예\r\n倪\t어릴 예\r\n叡\t밝을 예\r\n汭\t물굽이 예\r\n蘂\t꽃술 예\r\n猊\t사자 예\r\n瘞\t묻을 예\r\n輗\t멍에막이 예\r\n羿\t사람이름 예\r\n橤\t드리울 예\r\n堄\t성가퀴 예\r\n勩\t수고로울 예 | 수고로울 이\r\n麑\t사슴새끼 예\r\n鷖\t갈매기 예\r\n蚋\t모기 예\r\n蕊\t꽃술 예\r\n翳\t가릴 예\r\n睨\t흘겨볼 예\r\n蓺\t심을 예\r\n五\t다섯 오\r\n午\t낮 오\r\n誤\t그르칠 오\r\n烏\t까마귀 오\r\n悟\t깨달을 오\r\n嗚\t슬플 오\r\n娛\t즐길 오\r\n吾\t나 오\r\n傲\t거만할 오\r\n汚\t더러울 오\r\n梧\t오동나무 오\r\n墺\t물가 오\r\n吳\t성 오\r\n奧\t깊을 오\r\n懊\t한할 오\r\n伍\t다섯사람 오\r\n寤\t잠깰 오\r\n鰲\t자라 오\r\n塢\t산언덕 오\r\n獒\t사나운개 오\r\n晤\t밝을 오\r\n俉\t맞이할 오\r\n蜈\t지네 오\r\n鼇\t자라 오\r\n筽\t버들고리 오\r\n旿\t밝을 오\r\n澳\t물굽이 오\r\n熬\t볶을 오\r\n敖\t거만할 오\r\n珸\t아름다운돌 오\r\n忤\t거스를 오\r\n汙\t더러울 오\r\n隩\t감출 오\r\n嗸\t시끄러울 오\r\n杇\t흙손 오\r\n奡\t거만할 오\r\n屋\t집 옥\r\n玉\t구슬 옥\r\n獄\t옥 옥\r\n鈺\t보배 옥\r\n沃\t기름질 옥\r\n鋈\t도금할 옥\r\n溫\t따뜻할 온\r\n穩\t편안할 온\r\n蘊\t쌓을 온\r\n瑥\t사람이름 온\r\n縕\t묵은솜 온\r\n瘟\t염병 온\r\n韞\t감출 온\r\n慍\t성낼 온\r\n媼\t할미 온\r\n昷\t온화할 온\r\n醞\t술빚을 온\r\n兀\t우뚝할 올\r\n杌\t가지없는나무/위태로울 올\r\n扤\t움직일 올\r\n卼\t위태할 올\r\n擁\t낄 옹\r\n翁\t늙은이 옹\r\n甕\t독 옹\r\n雍\t화할 옹\r\n邕\t막힐 옹\r\n壅\t막을 옹\r\n瓮\t독 옹\r\n饔\t아침밥 옹\r\n癰\t종기 옹\r\n灉\t물이름 옹\r\n雝\t화할/할미새 옹\r\n廱\t막힐 옹\r\n顒\t우러를 옹\r\n瓦\t기와 와\r\n臥\t누울 와\r\n訛\t그릇될 와\r\n渦\t소용돌이 와\r\n蝸\t달팽이 와\r\n窪\t웅덩이 와\r\n蛙\t개구리 와\r\n窩\t움집 와\r\n吪\t움직일 와\r\n完\t완전할 완\r\n緩\t느릴 완\r\n莞\t빙그레할 완 | 왕골 관\r\n婉\t순할/아름다울 완\r\n宛\t완연할 완\r\n玩\t즐길 완\r\n腕\t팔뚝 완\r\n阮\t성 완\r\n頑\t완고할 완\r\n豌\t완두 완\r\n椀\t주발 완\r\n琓\t나라이름 완\r\n琬\t홀 완\r\n翫\t구경할 완\r\n碗\t주발 완\r\n浣\t빨 완\r\n脘\t중완 완\r\n婠\t품성좋을 완\r\n盌\t주발 완\r\n垸\t회섞어바를 완\r\n曰\t가로 왈\r\n王\t임금 왕\r\n往\t갈 왕\r\n汪\t넓을 왕\r\n旺\t왕성할 왕\r\n枉\t굽을 왕\r\n歪\t기울 왜 | 기울 외\r\n倭\t왜나라 왜\r\n矮\t난쟁이 왜\r\n娃\t예쁠 왜 | 미인 와\r\n騧\t공골말 왜\r\n外\t바깥 외\r\n畏\t두려워할 외\r\n巍\t높고클 외\r\n猥\t외람할 외\r\n嵬\t높을 외\r\n要\t요긴할 요\r\n曜\t빛날 요\r\n謠\t노래 요\r\n遙\t멀 요\r\n腰\t허리 요\r\n搖\t흔들 요\r\n妖\t요사할 요\r\n姚\t예쁠 요\r\n堯\t요임금 요\r\n耀\t빛날 요\r\n擾\t시끄러울 요\r\n窈\t고요할 요\r\n窯\t기와가마 요\r\n邀\t맞을 요\r\n饒\t넉넉할 요\r\n僥\t요행 요\r\n凹\t오목할 요\r\n拗\t우길 요\r\n夭\t일찍죽을 요\r\n瑤\t아름다운옥 요\r\n繞\t두를 요\r\n繇\t성할 요 | 부드러울 유\r\n橈\t노/꺾어질 요\r\n蟯\t요충 요\r\n嶢\t높을 요\r\n燿\t비칠/빛날 요\r\n徭\t구실 요\r\n蕘\t나무할 요\r\n喓\t벌레소리 요\r\n殀\t일찍죽을 요\r\n葽\t아기풀 요\r\n鷕\t암꿩이울 요\r\n徼\t구할 요 | 변방 교\r\n浴\t목욕할 욕\r\n慾\t욕심 욕\r\n欲\t하고자할 욕\r\n辱\t욕될 욕\r\n縟\t화문놓을 욕\r\n褥\t요 욕\r\n勇\t날랠 용\r\n用\t쓸 용\r\n容\t얼굴 용\r\n庸\t떳떳할 용\r\n熔\t녹을 용\r\n傭\t품팔 용\r\n瑢\t패옥소리 용\r\n溶\t녹을 용\r\n鎔\t쇠녹일 용\r\n鏞\t쇠북 용\r\n踊\t뛸 용\r\n蓉\t연꽃 용\r\n茸\t풀날 용 | 버섯 이\r\n聳\t솟을 용\r\n涌\t물 솟을 용\r\n冗\t한산할/번잡할 용\r\n榕\t나무이름 용\r\n俑\t허수아비 용\r\n墉\t담 용\r\n甬\t종꼭지 용\r\n湧\t물솟을 용\r\n埇\t길돋울 용\r\n慂\t권할 용\r\n鄘\t나라이름 용\r\n宂\t일없을/번잡할 용\r\n踴\t뛸 용\r\n右\t오를/오른 우\r\n友\t벗 우\r\n雨\t비 우\r\n牛\t소 우\r\n優\t넉넉할 우\r\n遇\t만날 우\r\n郵\t우편 우\r\n憂\t근심 우\r\n偶\t짝 우\r\n宇\t집 우\r\n愚\t어리석을 우\r\n羽\t깃 우\r\n于\t어조사 우\r\n尤\t더욱 우\r\n又\t또 우\r\n佑\t도울 우\r\n禹\t성 우\r\n祐\t복 우\r\n虞\t염려할/나라이름 우\r\n迂\t에돌 우\r\n寓\t부칠 우\r\n嵎\t산굽이 우\r\n隅\t모퉁이 우\r\n釪\t바리때 우\r\n禑\t복 우\r\n旴\t해뜰 우\r\n玗\t옥돌 우\r\n瑀\t옥돌 우\r\n盂\t바리 우\r\n藕\t연뿌리 우\r\n雩\t기우제 우\r\n紆\t얽힐 우\r\n芋\t토란 우\r\n盱\t눈부릅뜰 우\r\n吁\t탄식할 우\r\n俁\t클 우\r\n堣\t땅이름 우\r\n楀\t나무이름 우\r\n耦\t짝 우\r\n訏\t속일 우\r\n懮\t근심할 우\r\n噳\t떼지을/웃는모양 우\r\n麌\t수사슴/떼지어모일 우\r\n麀\t암사슴 우\r\n踽\t홀로걸을 우\r\n耰\t고무래 우\r\n訧\t허물 우\r\n旭\t아침해 욱\r\n昱\t햇빛밝을 욱\r\n煜\t빛날 욱\r\n郁\t성할 욱\r\n頊\t삼갈 욱\r\n栯\t나무이름 욱\r\n彧\t문채 욱\r\n勖\t힘쓸 욱\r\n稶\t무성할 욱\r\n稢\t서직무성할 욱\r\n薁\t머루 욱\r\n勗\t힘쓸 욱\r\n燠\t더울 욱\r\n運\t옮길 운\r\n雲\t구름 운\r\n韻\t운 운\r\n云\t이를 운\r\n芸\t향풀 운\r\n耘\t김맬 운\r\n殞\t죽을 운\r\n隕\t떨어질 운\r\n蕓\t평지 운\r\n澐\t큰물결 운\r\n橒\t나무이름 운\r\n熉\t노란모양 운\r\n沄\t물콸콸흐를 운\r\n篔\t왕대 운\r\n鬱\t답답할 울\r\n蔚\t고을이름 울\r\n亐\t땅이름 울\r\n菀\t무성할 울 | 동산 원 | 개미취 완\r\n雄\t수컷 웅\r\n熊\t곰 웅\r\n園\t동산 원\r\n遠\t멀 원\r\n元\t으뜸 원\r\n原\t언덕 원\r\n院\t집 원\r\n願\t원할 원\r\n圓\t둥글 원\r\n員\t인원 원\r\n怨\t원망할 원\r\n援\t도울 원\r\n源\t근원 원\r\n苑\t나라동산 원\r\n瑗\t구슬 원\r\n袁\t성 원\r\n媛\t계집 원\r\n冤\t원통할 원\r\n猿\t원숭이 원\r\n鴛\t원앙 원\r\n垣\t담 원\r\n轅\t끌채 원\r\n円\t둥글 원\r\n湲\t물졸졸흐를 원\r\n沅\t물이름 원\r\n嫄\t여자이름 원\r\n愿\t삼갈 원\r\n洹\t물이름 원\r\n寃\t원통할  원\r\n爰\t이에 원\r\n黿\t큰자라 원\r\n騵\t붉은말 원\r\n月\t달 월\r\n越\t넘을 월\r\n鉞\t도끼 월\r\n刖\t발꿈치벨 월\r\n軏\t멍에막이 월\r\n偉\t클 위\r\n位\t자리 위\r\n衛\t지킬 위\r\n爲\t하/할 위\r\n圍\t에워쌀 위\r\n委\t맡길 위\r\n威\t위엄 위\r\n慰\t위로할 위\r\n危\t위태할 위\r\n胃\t밥통 위\r\n僞\t거짓 위\r\n謂\t이를 위\r\n違\t어긋날 위\r\n緯\t씨 위\r\n尉\t벼슬 위\r\n渭\t물이름 위\r\n韋\t가죽 위\r\n魏\t성 위\r\n萎\t시들 위\r\n暐\t빛날 위\r\n葦\t갈대 위\r\n瑋\t옥이름 위\r\n蔿\t애기풀 위\r\n蝟\t고슴도치 위\r\n褘\t휘장 위\r\n藯\t익모초 위\r\n韡\t밝고성한모양 위\r\n喟\t한숨쉴 위\r\n煒\t빛날 위\r\n闈\t대궐안작은문 위\r\n有\t있을 유\r\n由\t말미암을 유\r\n油\t기름 유\r\n遊\t놀 유\r\n乳\t젖 유\r\n儒\t선비 유\r\n遺\t남길 유\r\n猶\t오히려 유\r\n幽\t그윽할 유\r\n幼\t어릴 유\r\n柔\t부드러울 유\r\n維\t벼리 유\r\n裕\t넉넉할 유\r\n誘\t꾈 유\r\n悠\t멀 유\r\n唯\t오직 유\r\n酉\t닭 유\r\n愈\t나을 유\r\n惟\t생각할 유\r\n庾\t곳집/노적가리 유\r\n兪\t대답할/인월도 유\r\n踰\t넘을 유\r\n楡\t느릅나무 유\r\n揄\t야유할 유\r\n柚\t유자 유\r\n游\t헤엄칠 유\r\n鍮\t놋쇠 유\r\n癒\t병나을 유\r\n諛\t아첨할 유\r\n諭\t타이를 유\r\n蹂\t밟을 유\r\n喩\t깨우칠 유\r\n愉\t즐거울 유\r\n宥\t너그러울 유\r\n孺\t어릴 유\r\n猷\t꾀할 유\r\n瑜\t아름다운옥 유\r\n釉\t유약 유\r\n逾\t넘을 유\r\n萸\t수유 유\r\n濡\t젖을/막힐 유\r\n侑\t짝/권할 유\r\n洧\t물이름 유\r\n楢\t졸참나무 유\r\n攸\t아득할 유\r\n臾\t잠깐 유\r\n滺\t물흐르는모양 유\r\n秞\t곡식무성할 유\r\n濰\t물이름 유\r\n褎\t옷잘입을/나아갈 유 | 소매 수\r\n槱\t화톳불놓을 유\r\n楰\t산유자나무 유\r\n曘\t햇빛 유\r\n卣\t술통 유\r\n龥\t부르짖을 유\r\n籲\t부르짖을 유\r\n黝\t검푸를 유\r\n醹\t술맛진할 유\r\n莠\t가라지 유\r\n輶\t가벼운수레 유\r\n鮪\t상어 유\r\n窬\t판장문 유\r\n緌\t갓끈 유\r\n呦\t사슴울 유\r\n囿\t동산 유\r\n帷\t휘장/장막 유\r\n揉\t휠 유\r\n牖\t깨우칠/창 유\r\n羑\t인도할 유\r\n育\t기를 육\r\n肉\t고기 육\r\n毓\t키울 육\r\n堉\t기름진땅 육\r\n潤\t불을 윤\r\n閏\t윤달 윤\r\n允\t맏 윤\r\n胤\t자손 윤\r\n鈗\t창 윤\r\n尹\t성 윤\r\n玧\t귀막이옥 윤 | 붉은옥 문\r\n贇\t예쁠 윤 | 예쁠 빈\r\n奫\t물깊고넓을 윤\r\n狁\t오랑캐이름 윤\r\n阭\t높을 윤\r\n聿\t붓 율\r\n繘\t두레박줄 율\r\n驈\t샅흰검은말 율\r\n汩\t물흐를 율 | 빠질 골\r\n鴥\t빨리날 율\r\n融\t녹을 융\r\n絨\t가는베 융\r\n戎\t병장기/오랑캐 융\r\n瀜\t물깊고넓을 융\r\n銀\t은 은\r\n恩\t은혜 은\r\n隱\t숨을 은\r\n垠\t지경 은\r\n誾\t향기 은\r\n殷\t은나라 은\r\n慇\t은근할 은\r\n嚚\t어리석을 은\r\n憖\t물을/원할 은\r\n檼\t마룻대/도지개 은\r\n溵\t물이름 은\r\n訔\t언쟁할 은\r\n乙\t새 을\r\n音\t소리 음\r\n飮\t마실 음\r\n陰\t그늘 음\r\n淫\t음란할 음\r\n吟\t읊을 음\r\n蔭\t그늘 음\r\n邑\t고을 읍\r\n泣\t울 읍\r\n揖\t읍할 읍\r\n挹\t뜰/읍할 읍\r\n浥\t젖을 읍\r\n應\t응할 응\r\n凝\t엉길 응\r\n鷹\t매 응\r\n膺\t가슴 응\r\n意\t뜻 의\r\n醫\t의원 의\r\n衣\t옷 의\r\n議\t의논할 의\r\n義\t옳을 의\r\n依\t의지할 의\r\n儀\t거동 의\r\n疑\t의심할 의\r\n矣\t어조사 의\r\n宜\t마땅 의\r\n毅\t굳셀 의\r\n椅\t의자 의\r\n擬\t비길 의\r\n誼\t정 의\r\n薏\t율무 의 | 연밥속 억\r\n艤\t배댈 의\r\n倚\t기댈 의\r\n懿\t아름다울 의\r\n蟻\t개미 의\r\n猗\t불깐개 의 | 부드러울 아\r\n饐\t밥쉴 의 | 밥쉴 애\r\n扆\t병풍 의\r\n薿\t우거질 의 | 우거질 억\r\n劓\t코벨 의\r\n二\t두 이\r\n以\t써 이\r\n耳\t귀 이\r\n移\t옮길 이\r\n異\t다를 이\r\n已\t이미 이\r\n而\t말이을 이\r\n夷\t오랑캐 이\r\n貳\t두/갖은두 이\r\n怡\t기쁠 이\r\n伊\t저 이\r\n珥\t귀고리 이\r\n餌\t미끼 이\r\n姨\t이모 이\r\n痍\t상처 이\r\n爾\t너 이\r\n弛\t늦출 이\r\n彛\t떳떳할 이\r\n貽\t줄 이\r\n飴\t엿 이\r\n苡\t율무/질경이 이\r\n荑\t흰비름 이 | 띠싹 제\r\n肄\t익힐 이\r\n邇\t가까울 이\r\n洟\t콧물 이\r\n詒\t줄 이 | 속일 태\r\n苢\t질경이 이\r\n樲\t멧대추나무 이\r\n异\t그만둘 이\r\n刵\t귀벨 이\r\n桋\t가시목 이\r\n訑\t자랑할 이 | 방탕할 탄\r\n杝\t나무이름 이 | 쪼갤 치\r\n彝\t떳떳할 이\r\n頤\t턱 이\r\n迤\t든든할 이 | 어정거릴 타\r\n益\t더할 익\r\n翼\t날개 익\r\n翊\t도울 익\r\n翌\t다음날 익\r\n謚\t빙그레할 익 | 시호 시\r\n瀷\t물이름 익\r\n弋\t주살 익\r\n人\t사람 인\r\n因\t인할 인\r\n印\t도장 인\r\n引\t끌 인\r\n認\t알 인\r\n仁\t어질 인\r\n忍\t참을 인\r\n寅\t범/동방 인\r\n姻\t혼인 인\r\n刃\t칼날 인\r\n蚓\t지렁이 인\r\n靭\t질길 인\r\n咽\t목구멍 인 | 목멜 열 | 삼킬 연\r\n湮\t묻힐 인\r\n茵\t자리/사철쑥 인\r\n靷\t가슴걸이 인\r\n絪\t기운 인\r\n駰\t회색얼룩말 인\r\n陻\t막을/막힐 인\r\n仞\t길 인\r\n夤\t공손할 인\r\n禋\t제사지낼 인\r\n牣\t가득할 인\r\n訒\t말더듬거릴 인\r\n闉\t성문 인\r\n軔\t바퀴고임나무 인\r\n一\t한 일\r\n日\t날 일\r\n逸\t편안할 일\r\n壹\t한/갖은한 일\r\n佾\t줄춤 일\r\n鎰\t무게이름 일\r\n溢\t넘칠 일\r\n佚\t편안 일 | 질탕 질\r\n馹\t역말 일\r\n泆\t음탕할/넘칠 일\r\n任\t맡길 임\r\n壬\t북방 임\r\n賃\t품삯 임\r\n妊\t아이밸 임\r\n恁\t생각할 임\r\n荏\t들깨 임\r\n稔\t익을 임 | 익을 념\r\n姙\t아이밸 임\r\n袵\t옷깃 임\r\n衽\t옷깃 임\r\n入\t들 입\r\n卄\t스물 입\r\n剩\t남을 잉\r\n孕\t아이밸 잉\r\n仍\t인할 잉\r\n芿\t새풀싹 잉\r\n陾\t담쌓는소리 잉\r\n子\t아들 자\r\n自\t스스로 자\r\n字\t글자 자\r\n者\t놈 자\r\n資\t재물 자\r\n姿\t모양 자\r\n姉\t손윗누이 자\r\n紫\t자줏빛 자\r\n慈\t사랑 자\r\n刺\t찌를 자 | 찌를 척\r\n恣\t마음대로/방자할 자\r\n玆\t이 자\r\n磁\t자석 자\r\n諮\t물을 자\r\n雌\t암컷 자\r\n滋\t불을 자\r\n疵\t허물 자\r\n仔\t자세할 자\r\n蔗\t사탕수수 자\r\n炙\t구울 자 | 구울 적\r\n煮\t삶을 자\r\n藉\t깔/핑계할 자\r\n瓷\t사기그릇 자\r\n咨\t차탄할/물을 자\r\n孜\t부지런할 자\r\n茨\t남가새 자\r\n鼒\t옹솥 자\r\n孶\t새끼칠 자\r\n赭\t붉은흙 자\r\n鎡\t호미 자\r\n秭\t천억 자\r\n訿\t훼방할/헐뜯을 자\r\n貲\t재물 자\r\n訾\t훼방할/헐뜯을 자\r\n茲\t초목무성할 자\r\n胾\t고깃점 자\r\n耔\t북돋울 자\r\n粢\t서직/젯밥 자\r\n柘\t메뽕나무 자\r\n胏\t밥찌끼 자\r\n作\t지을 작\r\n昨\t어제 작\r\n酌\t술부을/잔질할 작\r\n爵\t벼슬 작\r\n炸\t터질 작\r\n勺\t구기 작\r\n灼\t불사를 작\r\n綽\t너그러울 작\r\n嚼\t씹을 작\r\n芍\t함박꽃 작\r\n雀\t참새 작\r\n鵲\t까치 작\r\n斫\t쪼갤 작\r\n柞\t떡갈나무 작\r\n殘\t남을 잔\r\n盞\t잔 잔\r\n棧\t사다리 잔\r\n潺\t물졸졸흐를 잔\r\n孱\t잔약할 잔\r\n僝\t갖출/욕할 잔\r\n暫\t잠깐 잠\r\n潛\t잠길 잠\r\n蠶\t누에 잠\r\n箴\t경계 잠\r\n簪\t비녀 잠\r\n岑\t산높을 잠\r\n雜\t섞일 잡\r\n長\t긴 장\r\n場\t마당 장\r\n章\t글 장\r\n將\t장수 장\r\n障\t막을 장\r\n獎\t장려할 장\r\n裝\t꾸밀 장\r\n腸\t창자 장\r\n張\t베풀 장\r\n壯\t장할 장\r\n帳\t장막 장\r\n莊\t씩씩할 장\r\n葬\t장사지낼 장\r\n臟\t오장 장\r\n粧\t단장할 장\r\n掌\t손바닥 장\r\n丈\t어른 장\r\n藏\t감출 장\r\n墻\t담 장\r\n獐\t노루 장\r\n庄\t전장 장\r\n璋\t홀 장\r\n蔣\t성 장\r\n檣\t돛대 장\r\n薔\t장미 장\r\n漿\t즙 장\r\n醬\t장 장\r\n杖\t지팡이 장\r\n匠\t장인 장\r\n仗\t의장 장\r\n贓\t장물 장\r\n牆\t담 장\r\n臧\t착할 장\r\n樟\t녹나무 장\r\n欌\t장롱 장\r\n暲\t해돋을 장\r\n漳\t물이름 장\r\n粻\t양식 장\r\n斨\t도끼 장\r\n鏘\t옥소리 장\r\n牂\t암양 장\r\n戕\t찌를 장\r\n奘\t클 장\r\n萇\t보리수 장\r\n才\t재주 재\r\n在\t있을 재\r\n財\t재물 재\r\n材\t재목 재\r\n災\t재앙 재\r\n再\t두 재\r\n栽\t심을 재\r\n裁\t옷마를 재\r\n載\t실을 재\r\n哉\t어조사 재\r\n宰\t재상 재\r\n齋\t재계할/집 재\r\n滓\t찌끼 재\r\n梓\t가래나무 재\r\n齎\t가질 재 | 가질 제\r\n縡\t일 재\r\n渽\t강이름 재\r\n灾\t재앙 재\r\n纔\t겨우 재\r\n賫\t가질 재\r\n爭\t다툴 쟁\r\n錚\t쇳소리 쟁\r\n箏\t쟁 쟁\r\n諍\t간할 쟁\r\n貯\t쌓을 저\r\n低\t낮을 저\r\n底\t밑 저\r\n著\t나타날 저\r\n抵\t막을 저\r\n沮\t막을 저\r\n狙\t원숭이/엿볼 저\r\n豬\t돼지 저\r\n箸\t젓가락 저\r\n咀\t씹을 저\r\n詛\t저주할 저\r\n躇\t머뭇거릴 저\r\n邸\t집 저\r\n觝\t씨름 저\r\n姐\t맏누이 저\r\n齟\t이어긋날 저 | 이어긋날 서\r\n這\t이 저\r\n藷\t감자 저\r\n菹\t김치 저\r\n苧\t모시 저\r\n雎\t물수리 저\r\n疽\t종기 저\r\n紵\t모시 저\r\n佇\t우두커니설 저\r\n杵\t공이 저\r\n楮\t닥나무 저\r\n樗\t가죽나무 저\r\n渚\t물가 저\r\n猪\t돼지 저\r\n儲\t쌓을 저\r\n羜\t새끼양 저\r\n氐\t근본 저\r\n罝\t짐승그물 저\r\n砠\t돌산 저\r\n疷\t앓을 저\r\n苴\t암삼 저 | 두엄풀 자\r\n羝\t숫양 저\r\n杼\t북 저\r\n筯\t젓가락 저\r\n的\t과녁 적\r\n赤\t붉을 적\r\n敵\t대적할 적\r\n積\t쌓을 적\r\n籍\t문서 적\r\n適\t맞을 적\r\n績\t길쌈 적\r\n賊\t도둑 적\r\n跡\t발자취 적\r\n寂\t고요할 적\r\n笛\t피리 적\r\n摘\t딸 적\r\n蹟\t자취 적\r\n滴\t물방울 적\r\n嫡\t정실 적\r\n謫\t귀양갈 적\r\n狄\t오랑캐 적\r\n迹\t자취 적\r\n荻\t물억새 적\r\n迪\t나아갈 적\r\n鏑\t살촉 적\r\n勣\t공 적\r\n翟\t꿩 적\r\n糴\t쌀사들일 적\r\n趯\t뛸 적 | 뛸 약\r\n逖\t멀 적\r\n籊\t가늘고길 적\r\n覿\t볼 적\r\n踖\t조심해서걸을/밟을 적\r\n電\t번개 전\r\n前\t앞 전\r\n全\t온전 전\r\n戰\t싸움 전\r\n傳\t전할 전\r\n典\t법 전\r\n展\t펼 전\r\n田\t밭 전\r\n專\t오로지 전\r\n轉\t구를 전\r\n錢\t돈 전\r\n殿\t전각 전\r\n甸\t경기 전\r\n塡\t메울 전\r\n箋\t기록할 전\r\n餞\t보낼 전\r\n顫\t떨 전\r\n顚\t엎드러질/이마 전\r\n銓\t사람가릴 전\r\n輾\t돌아누울 전\r\n纏\t얽을 전\r\n栓\t마개 전\r\n箭\t살 전\r\n廛\t가게 전\r\n癲\t미칠 전\r\n煎\t달일 전\r\n澱\t앙금 전\r\n剪\t가위 전\r\n氈\t담 전\r\n悛\t고칠 전\r\n篆\t전자 전\r\n奠\t정할/제사 전\r\n筌\t통발 전\r\n佺\t신선이름 전\r\n塼\t벽돌 전\r\n佃\t밭갈 전\r\n鈿\t비녀 전\r\n鐫\t새길 전\r\n詮\t갖출 전\r\n畑\t화전 전\r\n琠\t옥이름 전\r\n腆\t두터울 전\r\n翦\t자를 전\r\n邅\t머뭇거릴 전\r\n靦\t부끄러울 전\r\n顓\t오로지 전\r\n闐\t성할 전\r\n旃\t기 전\r\n巓\t산꼭대기 전\r\n戩\t다할 전\r\n荃\t향초 전\r\n瘨\t앓을 전\r\n牷\t희생 전\r\n瀍\t물이름 전\r\n鱣\t전어 전 | 드렁허리 선\r\n飦\t죽 전\r\n畋\t사냥할 전\r\n節\t마디 절\r\n切\t끊을 절 | 온통 체\r\n絶\t끊을 절\r\n折\t꺾을 절\r\n竊\t훔칠 절\r\n截\t끊을 절\r\n浙\t강이름 절\r\n癤\t부스럼 절\r\n晢\t밝을 절 | 별반짝일 제\r\n晣\t밝을 절 | 별반짝일 제\r\n店\t가게 점\r\n點\t점 점\r\n占\t점령할 점/점칠 점\r\n漸\t점점 점\r\n霑\t젖을 점\r\n粘\t붙을 점\r\n岾\t고개 재 | 절이름 점\r\n鮎\t메기 점\r\n点\t점 점\r\n玷\t옥티 점\r\n墊\t빠질 점\r\n坫\t잔돌려놓는자리 점\r\n簟\t대자리 점\r\n接\t이을 접\r\n蝶\t나비 접\r\n摺\t접을 접 | 접을 섭\r\n正\t바를 정\r\n庭\t뜰 정\r\n定\t정할 정\r\n情\t뜻 정\r\n停\t머무를 정\r\n政\t정사 정\r\n程\t한도/길 정\r\n精\t정할 정\r\n靜\t고요할 정\r\n丁\t고무래/장정 정\r\n整\t가지런할 정\r\n淨\t깨끗할 정\r\n頂\t정수리 정\r\n井\t우물 정\r\n亭\t정자 정\r\n廷\t조정 정\r\n貞\t곧을 정\r\n征\t칠 정\r\n訂\t바로잡을 정\r\n艇\t배 정\r\n偵\t염탐할 정\r\n呈\t드릴 정\r\n汀\t물가 정\r\n楨\t광나무 정\r\n晶\t맑을 정\r\n鼎\t솥 정\r\n鄭\t나라 정\r\n禎\t상서로울 정\r\n旌\t기 정\r\n珽\t옥이름 정\r\n錠\t덩이 정\r\n挺\t빼어날 정\r\n町\t밭두둑 정\r\n睛\t눈동자 정\r\n碇\t닻 정\r\n穽\t함정 정\r\n釘\t못 정\r\n靖\t편안할 정\r\n幀\t그림족자 정\r\n酊\t술취할 정\r\n淀\t얕은물 정\r\n湞\t물이름 정\r\n炡\t빛날 정\r\n渟\t물괼 정\r\n晸\t동틀 정\r\n姃\t단정할 정\r\n鉦\t징 정\r\n諪\t조정할 정\r\n鋌\t쇳덩이 정\r\n綎\t인끈 정\r\n檉\t능수버들 정\r\n瀞\t맑을 정\r\n霆\t벼락 정\r\n玎\t옥 소리 정\r\n梃\t몽둥이 정\r\n阱\t함정 정\r\n赬\t붉을 정\r\n裎\t옷벗을 정\r\n涏\t물결곧을 정 | 윤이날 전\r\n靚\t단장할 정\r\n鋥\t칼날세울 정\r\n酲\t숙취 정\r\n桯\t탁자 정\r\n棖\t문설주 정\r\n珵\t옥이름 정\r\n弟\t아우 제\r\n第\t차례 제\r\n題\t제목 제\r\n濟\t건널 제\r\n提\t끌 제\r\n制\t절제할 제\r\n製\t지을 제\r\n除\t덜 제\r\n際\t즈음/가 제\r\n祭\t제사 제\r\n帝\t임금 제\r\n諸\t모두 제\r\n齊\t가지런할 제\r\n堤\t둑 제\r\n劑\t약제 제\r\n啼\t울 제\r\n梯\t사다리 제\r\n悌\t공손할 제\r\n蹄\t굽 제\r\n醍\t제호 제\r\n霽\t갤 제\r\n薺\t냉이 제\r\n臍\t배꼽 제\r\n隮\t오를 제\r\n禔\t편안할 제\r\n鵜\t사다새 제\r\n穧\t볏단 제\r\n泲\t물이름 제\r\n懠\t성낼 제\r\n嚌\t맛볼 제\r\n隄\t둑/막을 제\r\n躋\t오를 제\r\n稊\t가라지 제\r\n瑅\t옥이름 제\r\n娣\t제수 제\r\n蠐\t굼벵이 제\r\n祖\t할아비 조\r\n朝\t아침 조\r\n調\t고를 조\r\n操\t잡을 조\r\n鳥\t새 조\r\n助\t도울 조\r\n早\t이를 조\r\n造\t지을 조\r\n條\t가지 조\r\n潮\t밀물/조수 조\r\n組\t짤 조\r\n租\t조세 조\r\n照\t비칠 조\r\n兆\t억조 조\r\n燥\t마를 조\r\n弔\t조상할 조\r\n措\t둘 조\r\n釣\t낚을/낚시 조\r\n彫\t새길 조\r\n趙\t나라 조\r\n曺\t성 조\r\n祚\t복 조\r\n詔\t조서 조\r\n藻\t마름 조\r\n躁\t조급할 조\r\n阻\t막힐 조\r\n凋\t시들 조\r\n嘲\t비웃을 조\r\n曹\t무리 조\r\n棗\t대추 조\r\n粗\t거칠 조\r\n肇\t비롯할 조\r\n遭\t만날 조\r\n槽\t구유 조\r\n繰\t고치켤 조\r\n糟\t지게미 조\r\n稠\t빽빽할 조\r\n漕\t배로실어나를 조\r\n爪\t손톱 조\r\n眺\t볼 조\r\n蚤\t벼룩 조\r\n俎\t도마 조\r\n晁\t아침 조\r\n璪\t면류관장식 조\r\n雕\t아로새길 조\r\n吊\t조상할 조\r\n窕\t그윽할 조\r\n鞗\t고삐 조\r\n阼\t동편섬돌 조\r\n螬\t굼벵이 조\r\n蓧\t삼태기 조\r\n罩\t가리 조\r\n旐\t기 조\r\n慥\t독실할 조\r\n鰷\t피라미 조\r\n殂\t죽을 조\r\n皂\t검을/하인 조\r\n佻\t경박할 조\r\n洮\t씻을 조\r\n鼂\t아침 조\r\n蜩\t매미 조\r\n蔦\t담쟁이덩굴 조\r\n竈\t부엌 조\r\n皁\t검을/하인 조\r\n恌\t경박할 조\r\n懆\t근심할 조\r\n徂\t갈 조\r\n足\t발 족\r\n族\t겨레 족\r\n簇\t가는대 족\r\n鏃\t살촉 족\r\n尊\t높을 존\r\n存\t있을 존\r\n卒\t마칠 졸\r\n拙\t졸할 졸\r\n猝\t갑자기 졸\r\n種\t씨 종\r\n終\t마칠 종\r\n宗\t마루 종\r\n鍾\t쇠북 종\r\n從\t좇을 종\r\n縱\t세로 종\r\n綜\t모을 종\r\n琮\t옥홀 종\r\n踵\t발꿈치 종\r\n慫\t권할 종\r\n腫\t종기 종\r\n踪\t자취 종\r\n棕\t종려나무 종\r\n淙\t물소리 종\r\n悰\t즐길 종\r\n鐘\t쇠북 종\r\n倧\t신인 종\r\n螽\t메뚜기 종\r\n尰\t수중다리 종\r\n蹤\t자취 종\r\n瑽\t패옥소리 종\r\n豵\t돼지새끼 종\r\n樅\t전나무 종\r\n鬷\t모일 종\r\n椶\t종려나무 종\r\n左\t왼 좌\r\n座\t자리 좌\r\n坐\t앉을 좌\r\n佐\t도울 좌\r\n挫\t꺾을 좌\r\n脞\t잗달 좌\r\n罪\t허물 죄\r\n住\t살 주\r\n主\t임금/주인 주\r\n注\t부을 주\r\n晝\t낮 주\r\n週\t주일 주\r\n州\t고을 주\r\n走\t달릴 주\r\n酒\t술 주\r\n朱\t붉을 주\r\n周\t두루 주\r\n柱\t기둥 주\r\n珠\t구슬 주\r\n株\t그루 주\r\n奏\t아뢸 주\r\n洲\t물가 주\r\n鑄\t쇠불릴 주\r\n宙\t집 주\r\n舟\t배 주\r\n駐\t머무를 주\r\n疇\t이랑 주\r\n躊\t머뭇거릴 주\r\n輳\t몰려들 주\r\n誅\t벨 주\r\n做\t지을 주\r\n胄\t자손 주\r\n呪\t빌 주\r\n嗾\t부추길 주\r\n廚\t부엌 주\r\n紂\t주임금 주\r\n紬\t명주 주\r\n註\t글뜻풀 주\r\n澍\t단비  주\r\n侏\t난쟁이 주\r\n湊\t모일 주\r\n炷\t심지 주\r\n籌\t산가지/헤아릴 주\r\n冑\t투구 주\r\n蛛\t거미 주\r\n綢\t빽빽할 주\r\n酎\t진한술 주\r\n姝\t예쁠 주\r\n妵\t여자예쁜모양 주\r\n侜\t가릴 주\r\n幬\t휘장 주 | 덮을 도\r\n裯\t홑이불 주 | 소매 도\r\n輈\t수레채 주\r\n遒\t굳셀 주\r\n咮\t새부리 주\r\n燽\t드러날 주\r\n譸\t속일 주\r\n躕\t머뭇거릴 주\r\n邾\t나라이름 주\r\n馵\t뒷발이흰말 주\r\n霔\t시우 주\r\n竹\t대 죽\r\n粥\t죽 죽\r\n鬻\t죽 죽 | 팔 육\r\n準\t준할 준\r\n遵\t좇을 준\r\n俊\t준걸 준\r\n准\t비준 준\r\n駿\t준마 준\r\n濬\t깊을 준\r\n浚\t깊게할 준\r\n晙\t밝을 준\r\n峻\t높을/준엄할 준\r\n埈\t높을 준\r\n竣\t마칠 준\r\n樽\t술통 준\r\n蠢\t꾸물거릴 준\r\n畯\t농부 준\r\n儁\t영특할 준\r\n雋\t영특할 준 | 살질 전\r\n逡\t물러갈 준\r\n寯\t모을 준\r\n焌\t불태울 준\r\n噂\t수군거릴 준\r\n埻\t과녁 준\r\n蹲\t걸어앉을 준\r\n隼\t새매 준\r\n鱒\t송어 준\r\n茁\t풀싹 줄 | 풀싹 절\r\n崒\t산높을 줄\r\n中\t가운데 중\r\n重\t무거울 중\r\n衆\t무리 중\r\n仲\t버금 중\r\n卽\t곧 즉\r\n櫛\t빗 즐\r\n騭\t수말 즐\r\n葺\t기울 즙\r\n汁\t즙 즙\r\n緝\t거둘 즙 | 거둘 집\r\n楫\t노 즙\r\n濈\t화목할 즙\r\n戢\t거둘 즙\r\n增\t더할 증\r\n證\t증거 증\r\n憎\t미울 증\r\n曾\t일찍 증\r\n症\t증세 증\r\n蒸\t찔 증\r\n贈\t줄 증\r\n甑\t시루 증\r\n拯\t건질 증\r\n烝\t찔/뭇 증\r\n繒\t비단 증\r\n璔\t옥 증\r\n紙\t종이 지\r\n地\t따 지\r\n知\t알 지\r\n止\t그칠 지\r\n志\t뜻 지\r\n指\t가리킬 지\r\n支\t지탱할 지\r\n至\t이를 지\r\n持\t가질 지\r\n智\t슬기/지혜 지\r\n誌\t기록할 지\r\n之\t갈 지\r\n池\t못 지\r\n枝\t가지 지\r\n只\t다만 지\r\n遲\t더딜/늦을 지\r\n脂\t기름 지\r\n旨\t뜻 지\r\n芝\t지초 지\r\n址\t터 지\r\n咫\t여덟치 지\r\n摯\t잡을 지\r\n枳\t탱자 지 | 탱자 기\r\n祉\t복 지\r\n肢\t팔다리 지\r\n漬\t적실 지\r\n芷\t구릿대 지\r\n砥\t숫돌 지\r\n贄\t폐백 지\r\n蜘\t거미 지\r\n沚\t물가 지\r\n祗\t공경할 지\r\n趾\t발 지\r\n篪\t저 지\r\n踟\t머뭇거릴 지\r\n蚳\t개미알 지\r\n輊\t수레숙어질 지\r\n鋕\t새길 지\r\n坻\t모래섬 지 | 무너질 저\r\n直\t곧을 직\r\n職\t직분 직\r\n織\t짤 직\r\n稷\t피 직\r\n稙\t올벼 직\r\n進\t나아갈 진\r\n眞\t참 진\r\n珍\t보배 진\r\n盡\t다할 진\r\n陣\t진칠 진\r\n陳\t베풀 진/묵을 진\r\n震\t우레 진\r\n鎭\t진압할 진\r\n辰\t별 진 | 때 신\r\n振\t떨칠 진\r\n診\t진찰할 진\r\n津\t나루 진\r\n塵\t티끌 진\r\n秦\t성 진\r\n晋\t진나라 진\r\n嗔\t성낼 진\r\n疹\t마마 진\r\n唇\t놀랄 진\r\n瑨\t옥돌 진\r\n溱\t많을 진\r\n榛\t개암나무 진\r\n軫\t수레뒤턱나무 진\r\n晉\t성/나아갈 진\r\n畛\t밭두렁 진\r\n搢\t꽂을 진\r\n瞋\t부릅뜰 진\r\n縝\t맺을 진\r\n臻\t이를 진\r\n蔯\t사철쑥 진\r\n桭\t처마 진\r\n賑\t진휼 진\r\n縉\t꽂을 진\r\n璡\t옥돌 진\r\n殄\t끊을/다할 진\r\n袗\t홑옷 진\r\n鬒\t숱많고검을 진\r\n螓\t쓰르라미 진\r\n禛\t복받을 진\r\n蓁\t우거질 진\r\n瑱\t귀막이옥 진\r\n紾\t비틀/거칠 진\r\n質\t바탕 질\r\n疾\t병 질\r\n秩\t차례 질\r\n姪\t조카 질\r\n窒\t막힐 질\r\n帙\t책권차례 질\r\n桎\t차꼬 질\r\n膣\t음도 질\r\n叱\t꾸짖을 질\r\n跌\t거꾸러질 질\r\n迭\t갈마들 질\r\n嫉\t미워할 질\r\n蛭\t거머리 질\r\n侄\t어리석을 질\r\n瓆\t사람이름 질\r\n垤\t개밋둑 질\r\n絰\t요질/수질 질\r\n銍\t짧은낫 질\r\n蒺\t남가새 질\r\n礩\t주춧돌 질\r\n挃\t벼벨 질\r\n耋\t늙을 질\r\n瓞\t북치 질\r\n朕\t나 짐\r\n斟\t짐작할 짐\r\n集\t모을 집\r\n執\t잡을 집\r\n輯\t모을 집\r\n潗\t샘물솟을 집\r\n鏶\t쇳조각 집\r\n徵\t부를 징\r\n懲\t징계할 징\r\n澄\t맑을 징\r\n次\t버금 차\r\n差\t다를 차\r\n此\t이 차\r\n借\t빌/빌릴 차\r\n且\t또 차\r\n遮\t가릴 차\r\n叉\t갈래 차\r\n嗟\t탄식할 차\r\n蹉\t미끄러질 차\r\n箚\t글/찌를 차 | 글/찌를 잡\r\n磋\t갈 차\r\n侘\t자랑할/실의할 차\r\n嵯\t산높고험할 차 | 산세들쭉날쭉한모양 치\r\n瑳\t옥빛 차\r\n佌\t작을 차\r\n泚\t물맑을 차\r\n佽\t도울 차\r\n着\t붙을 착\r\n錯\t어긋날 착\r\n捉\t잡을 착\r\n搾\t짤 착\r\n窄\t좁을 착\r\n鑿\t뚫을 착\r\n齪\t악착할 착\r\n斮\t벨 착\r\n斲\t깎을 착\r\n讚\t기릴 찬\r\n贊\t도울 찬\r\n餐\t밥 찬\r\n瓚\t옥잔 찬\r\n鑽\t뚫을 찬\r\n璨\t옥빛 찬\r\n燦\t빛날 찬\r\n撰\t지을 찬\r\n纂\t모을 찬\r\n饌\t반찬 찬\r\n篡\t빼앗을 찬\r\n竄\t도망할/내칠 찬\r\n簒\t빼앗을 찬\r\n澯\t맑을 찬\r\n纘\t이을 찬\r\n粲\t선명할/하얀쌀밥 찬\r\n爨\t불땔 찬\r\n巑\t높이솟을 찬\r\n湌\t먹을 찬 | 밥 손\r\n察\t살필 찰\r\n刹\t절 찰\r\n札\t편지 찰\r\n擦\t문지를 찰\r\n紮\t묶을 찰\r\n扎\t뽑을 찰\r\n參\t참여할 참\r\n慙\t부끄러울 참\r\n慘\t참혹할 참\r\n斬\t벨 참\r\n塹\t구덩이 참\r\n站\t역마을 참\r\n僭\t주제넘을 참\r\n懺\t뉘우칠 참\r\n讒\t참소할 참\r\n讖\t예언 참\r\n憯\t마음아플 참\r\n譖\t참소할 참\r\n毚\t약은토끼 참\r\n窓\t창 창\r\n唱\t부를 창\r\n創\t비롯할 창\r\n昌\t창성할 창\r\n蒼\t푸를 창\r\n倉\t곳집 창\r\n暢\t화창할 창\r\n滄\t큰바다 창\r\n彰\t드러날 창\r\n敞\t시원할 창\r\n昶\t해길 창\r\n槍\t창 창\r\n脹\t부을 창\r\n娼\t창녀 창\r\n猖\t미쳐날뛸 창\r\n廠\t공장 창\r\n瘡\t부스럼 창\r\n倡\t광대 창\r\n艙\t부두 창\r\n菖\t창포 창\r\n愴\t슬플 창\r\n漲\t넘칠 창\r\n搶\t빼앗을 창\r\n瑲\t옥소리 창\r\n蹌\t추창할 창\r\n窗\t창 창\r\n鶬\t왜가리/꾀꼬리 창\r\n悵\t슬플 창\r\n鬯\t향풀 창\r\n韔\t활집 창\r\n採\t캘 채\r\n債\t빚 채\r\n彩\t채색 채\r\n菜\t나물 채\r\n埰\t사패지 채\r\n采\t풍채 채\r\n蔡\t성 채\r\n寨\t목책 채\r\n綵\t비단 채\r\n寀\t채지 채\r\n釵\t비녀 채 | 비녀 차\r\n砦\t목책 채\r\n瘥\t병나을 채 | 역질 차\r\n瘵\t허로병 채\r\n蠆\t벌/전갈 채\r\n責\t꾸짖을 책\r\n冊\t책 책\r\n策\t꾀 책\r\n柵\t울타리 책\r\n簀\t살평상 책\r\n處\t곳 처\r\n妻\t아내 처\r\n悽\t슬퍼할 처\r\n凄\t쓸쓸할 처\r\n萋\t풀성할 처\r\n尺\t자 척\r\n戚\t친척 척\r\n拓\t넓힐 척\r\n斥\t물리칠 척\r\n隻\t외짝 척\r\n陟\t오를 척\r\n瘠\t여윌 척\r\n滌\t씻을 척\r\n脊\t등마루 척\r\n擲\t던질 척\r\n慽\t근심할 척\r\n倜\t얽매이지않을 척\r\n蹠\t밟을 척\r\n剔\t뼈바를 척\r\n坧\t터 척\r\n蹢\t머뭇거릴 척 | 굽 적\r\n惕\t두려워할 척\r\n蹐\t잔걸음 척\r\n慼\t근심할 척\r\n跖\t발바닥 척\r\n千\t일천 천\r\n天\t하늘 천\r\n川\t내 천\r\n泉\t샘 천\r\n踐\t밟을 천\r\n賤\t천할 천\r\n淺\t얕을 천\r\n遷\t옮길 천\r\n薦\t천거할 천\r\n釧\t팔찌 천\r\n闡\t밝힐 천\r\n穿\t뚫을 천\r\n擅\t멋대로할 천\r\n喘\t숨찰 천\r\n玔\t옥고리 천\r\n韆\t그네 천\r\n仟\t일천 천\r\n舛\t어그러질 천\r\n阡\t밭둑길 천\r\n梴\t나무밋밋할 천\r\n遄\t빠를 천\r\n幝\t해진모양 천\r\n倩\t아름다울 천 | 사위 청\r\n俴\t엷을 천\r\n鐵\t쇠 철\r\n哲\t밝을 철\r\n徹\t통할 철\r\n撤\t거둘 철\r\n澈\t맑을 철\r\n喆\t밝을/쌍길 철\r\n轍\t바퀴자국 철\r\n綴\t엮을 철\r\n凸\t볼록할 철\r\n輟\t그칠 철\r\n歠\t마실 철\r\n驖\t구렁말 철\r\n惙\t근심할 철\r\n啜\t훌쩍거릴 철\r\n掇\t주울 철\r\n尖\t뾰족할 첨\r\n添\t더할 첨\r\n瞻\t볼 첨\r\n籤\t제비 첨\r\n僉\t다/여러 첨\r\n諂\t아첨할 첨\r\n詹\t이를 첨\r\n沾\t젖을 첨\r\n甛\t달 첨\r\n簽\t이름둘 첨\r\n襜\t수레휘장 첨\r\n餂\t핥을 첨\r\n覘\t엿볼 첨 | 엿볼 점\r\n忝\t욕될 첨\r\n妾\t첩 첩\r\n諜\t염탐할 첩\r\n帖\t문서 첩\r\n貼\t붙일 첩\r\n疊\t거듭 첩\r\n牒\t편지 첩\r\n捷\t빠를 첩\r\n睫\t속눈썹 첩\r\n輒\t문득 첩\r\n堞\t성가퀴 첩\r\n靑\t푸를 청\r\n淸\t맑을 청\r\n請\t청할 청\r\n聽\t들을 청\r\n廳\t관청 청\r\n晴\t갤 청\r\n菁\t순무 청 | 빛날 정\r\n鯖\t청어 청\r\n體\t몸 체\r\n滯\t막힐 체\r\n遞\t갈릴 체\r\n逮\t잡을 체\r\n替\t바꿀 체\r\n締\t맺을 체\r\n涕\t눈물 체\r\n諦\t살필 체\r\n剃\t머리깎을 체\r\n疐\t꼭지 체 | 엎어질 치\r\n彘\t돼지 체\r\n棣\t산앵두나무 체 | 익숙할 태\r\n嚔\t재채기할 체\r\n掣\t끌 체 | 당길 철\r\n杕\t나무우뚝설 체 | 키 타\r\n禘\t큰제사 체\r\n蝃\t무지개 체\r\n遆\t갈마들 체 | 두를 대\r\n髢\t딴머리 체\r\n揥\t빗치개 체 | 버릴 제\r\n草\t풀 초\r\n初\t처음 초\r\n招\t부를 초\r\n超\t뛰어넘을 초\r\n肖\t닮을/같을 초\r\n礎\t주춧돌 초\r\n抄\t뽑을 초\r\n秒\t분초 초\r\n哨\t망볼 초\r\n焦\t탈 초\r\n楚\t초나라 초\r\n貂\t담비 초\r\n礁\t암초 초\r\n硝\t화약 초\r\n憔\t파리할 초\r\n醋\t초 초\r\n蕉\t파초 초\r\n樵\t나무할 초\r\n梢\t나무끝 초\r\n稍\t점점 초\r\n炒\t볶을 초\r\n酢\t초 초 | 술권할 작\r\n椒\t산초나무 초\r\n苕\t완두 초\r\n艸\t풀 초\r\n醮\t초례 초\r\n剿\t끊을/노략질할 초\r\n誚\t꾸짖을 초\r\n勦\t노곤할 초\r\n悄\t근심할 초\r\n譙\t꾸짖을 초\r\n觸\t닿을 촉\r\n促\t재촉할 촉\r\n燭\t촛불 촉\r\n蜀\t나라이름 촉\r\n囑\t부탁할 촉\r\n矗\t우뚝솟을 촉\r\n蠋\t뽕나무벌레 촉\r\n躅\t자취 촉\r\n寸\t마디 촌\r\n村\t마을 촌\r\n忖\t헤아릴 촌\r\n邨\t마을 촌\r\n總\t다 총\r\n銃\t총 총\r\n聰\t귀밝을 총\r\n叢\t떨기/모일 총\r\n塚\t무덤 총\r\n寵\t사랑할 총\r\n蔥\t파 총\r\n摠\t거느릴 총\r\n憁\t실심할 총\r\n悤\t바쁠 총\r\n冢\t클/무덤 총\r\n潨\t물모일 총\r\n撮\t모을/사진찍을 촬\r\n最\t가장 최\r\n催\t재촉할 최\r\n崔\t성/높을 최\r\n摧\t꺾을 최\r\n嘬\t물 최\r\n凗\t눈서리쌓일 최\r\n秋\t가을 추\r\n推\t밀 추\r\n追\t쫓을/따를 추\r\n醜\t추할 추\r\n抽\t뽑을 추\r\n趨\t달아날 추\r\n鄒\t추나라 추\r\n楸\t가래 추\r\n槌\t칠 추 | 방망이 퇴\r\n樞\t지도리 추\r\n芻\t꼴 추\r\n墜\t떨어질 추\r\n鰍\t미꾸라지 추\r\n鎚\t쇠망치 추\r\n酋\t우두머리 추\r\n錐\t송곳 추\r\n錘\t저울추 추\r\n椎\t쇠몽치/등골 추\r\n皺\t주름질 추\r\n萩\t다북쑥 추\r\n湫\t늪 추 | 웅덩이 초\r\n諏\t가릴 추\r\n雛\t새새끼 추\r\n騶\t마부 추\r\n瘳\t병나을 추\r\n鄹\t나라이름 추\r\n萑\t익모초 추 | 물억새 환\r\n緅\t아청빛 추\r\n棸\t나무이름 추\r\n麤\t거칠 추\r\n鶖\t무수리 추\r\n鵻\t비둘기 추\r\n甃\t우물벽돌 추\r\n縐\t주름 추\r\n騅\t푸르고흰얼룩말 추\r\n蝤\t나무굼벵이 추 | 하루살이 유\r\n祝\t빌 축\r\n築\t쌓을 축\r\n蓄\t모을 축\r\n縮\t줄일 축\r\n畜\t짐승 축\r\n逐\t쫓을 축\r\n丑\t소 축\r\n蹴\t찰 축\r\n軸\t굴대 축\r\n蹙\t찡그릴/움츠릴 축\r\n筑\t악기이름 축\r\n竺\t천축 축\r\n蓫\t참소리쟁이 축\r\n柷\t악기이름 축\r\n蹜\t종종걸음칠 축\r\n妯\t동서 축 | 슬퍼할 추\r\n顣\t찡그릴 축\r\n踧\t삼갈 축 | 평평할 척\r\n春\t봄 춘\r\n椿\t참죽나무 춘\r\n瑃\t옥이름 춘\r\n賰\t넉넉할 춘\r\n杶\t참죽나무 춘\r\n出\t날 출\r\n黜\t내칠 출\r\n朮\t삽주 출\r\n怵\t두려울 출\r\n充\t채울 충\r\n忠\t충성 충\r\n蟲\t벌레 충\r\n衝\t찌를 충\r\n衷\t속마음 충\r\n沖\t화할 충\r\n忡\t근심할 충\r\n珫\t귀막이 충\r\n虫\t벌레 충 | 벌레 훼\r\n贅\t혹 췌\r\n悴\t파리할 췌\r\n膵\t췌장 췌\r\n萃\t모을 췌\r\n揣\t헤아릴 췌 | 헤아릴  취\r\n惴\t두려워할 췌\r\n瘁\t병들 췌 | 병들 취\r\n取\t가질 취\r\n就\t나아갈 취\r\n趣\t뜻 취\r\n吹\t불 취\r\n醉\t취할 취\r\n臭\t냄새 취\r\n炊\t불땔 취\r\n聚\t모을 취\r\n娶\t장가들 취\r\n翠\t푸를/물총새 취\r\n脆\t연할 취\r\n鷲\t독수리 취\r\n嘴\t부리 취\r\n驟\t빠를 취\r\n毳\t솜털 취\r\n測\t헤아릴 측\r\n側\t곁 측\r\n惻\t슬플 측\r\n厠\t뒷간 측\r\n仄\t기울 측\r\n昃\t해기울 측\r\n廁\t뒷간 측\r\n層\t층 층\r\n致\t이를 치\r\n治\t다스릴 치\r\n置\t둘 치\r\n齒\t이 치\r\n値\t값 치\r\n恥\t부끄러울 치\r\n稚\t어릴 치\r\n峙\t언덕 치\r\n雉\t꿩 치\r\n幟\t기 치\r\n嗤\t비웃을 치\r\n痔\t치질 치\r\n侈\t사치할 치\r\n熾\t성할 치\r\n癡\t어리석을 치\r\n緻\t빽빽할 치\r\n馳\t달릴 치\r\n輜\t짐수레 치\r\n痴\t어리석을 치\r\n穉\t어릴 치\r\n蚩\t어리석을 치\r\n淄\t강이름 치\r\n緇\t검을 치\r\n梔\t치자나무 치\r\n褫\t옷벗길/빼앗을 치\r\n懫\t성낼 치\r\n庤\t쌓을 치\r\n寘\t둘 치\r\n懥\t성낼 치\r\n鴟\t솔개 치\r\n觶\t술잔 치\r\n菑\t묵정밭 치 | 재앙 재\r\n哆\t입벌릴 치\r\n絺\t가는칡베 치\r\n則\t법칙 칙\r\n勅\t칙서 칙\r\n飭\t신칙할 칙\r\n親\t친할 친\r\n七\t일곱 칠\r\n漆\t옻 칠\r\n柒\t옻 칠\r\n侵\t침노할 침\r\n寢\t잘 침\r\n針\t바늘 침\r\n浸\t잠길 침\r\n沈\t잠길 침 | 성 심\r\n枕\t베개 침\r\n鍼\t침 침\r\n砧\t다듬잇돌 침\r\n琛\t보배 침\r\n忱\t정성 침\r\n綅\t붉은실 침 | 비단 섬\r\n寑\t잘 침\r\n駸\t말달릴 침\r\n蟄\t숨을 칩\r\n縶\t말맬 칩\r\n稱\t일컬을 칭\r\n秤\t저울 칭\r\n快\t쾌할 쾌\r\n夬\t괘이름/결단할 쾌\r\n噲\t목구멍 쾌\r\n他\t다를 타\r\n打\t칠 타\r\n妥\t온당할 타\r\n墮\t떨어질 타\r\n駝\t낙타 타\r\n楕\t길고둥글 타\r\n惰\t게으를 타\r\n唾\t침 타\r\n陀\t비탈질/부처 타\r\n舵\t키 타\r\n朶\t꽃송이 타\r\n馱\t짐실을 타\r\n拖\t끌 타\r\n咤\t꾸짖을 타\r\n紽\t타래 타\r\n佗\t짊어질/다를 타\r\n沱\t물이름/눈물흐를 타\r\n鮀\t모래무지 타\r\n鼉\t자라/악어 타\r\n它\t다를 타 | 뱀 사\r\n嶞\t산좁고길 타\r\n卓\t높을 탁\r\n托\t맡길 탁\r\n濁\t흐릴 탁\r\n濯\t씻을 탁\r\n琢\t다듬을 탁\r\n託\t부탁할 탁\r\n擢\t뽑을 탁\r\n鐸\t방울 탁\r\n倬\t클 탁\r\n啄\t쪼을 탁\r\n坼\t터질 탁\r\n晫\t밝을 탁\r\n柝\t쪼갤/딱따기 탁\r\n琸\t사람이름 탁\r\n橐\t전대 탁\r\n椓\t칠 탁\r\n蘀\t낙엽 탁\r\n炭\t숯 탄\r\n歎\t탄식할 탄\r\n彈\t탄알 탄\r\n誕\t낳을/거짓 탄\r\n灘\t여울 탄\r\n呑\t삼킬 탄\r\n坦\t평탄할 탄\r\n憚\t꺼릴 탄\r\n綻\t터질 탄\r\n嘆\t한숨쉴 탄\r\n嘽\t헐떡거릴 탄 | 느릿할 천\r\n驒\t연전총 탄\r\n殫\t다할 탄\r\n僤\t빠를 탄\r\n疃\t짐승발자국/마을 탄\r\n脫\t벗을 탈\r\n奪\t빼앗을 탈\r\n梲\t막대기 탈 | 동자기둥 절\r\n探\t찾을 탐\r\n貪\t탐낼 탐\r\n耽\t즐길 탐\r\n眈\t노려볼 탐\r\n醓\t육장 탐\r\n嗿\t먹는소리/많을 탐\r\n塔\t탑 탑\r\n搭\t탈 탑\r\n榻\t긴걸상 탑\r\n漯\t물이모이는모양 탑 | 강이름 루\r\n湯\t끓을 탕\r\n宕\t호탕할 탕\r\n蕩\t방탕할 탕\r\n帑\t국고/재물 탕 | 처자 노\r\n簜\t왕대 탕\r\n蝪\t땅거미 탕\r\n盪\t씻을 탕\r\n太\t클 태\r\n態\t모습 태\r\n殆\t거의 태\r\n泰\t클 태\r\n怠\t게으를 태\r\n颱\t태풍 태\r\n胎\t아이밸 태\r\n兌\t바꿀/기쁠 태\r\n台\t별 태\r\n笞\t볼기칠 태\r\n苔\t이끼 태\r\n跆\t밟을 태\r\n汰\t일 태\r\n邰\t나라이름 태\r\n駾\t말빨리달릴 태\r\n迨\t미칠 태\r\n宅\t집 택\r\n擇\t가릴 택\r\n澤\t못 택\r\n撐\t버틸 탱\r\n撑\t버틸 탱\r\n攄\t펼 터\r\n土\t흙 토\r\n討\t칠 토\r\n吐\t토할 토\r\n兔\t토끼 토\r\n兎\t토끼 토\r\n噋\t느릿할 톤 | 일깨울 순\r\n噸\t무게단위 톤\r\n瓲\t톤 톤\r\n畽\t염우없을 톤 | 빈터 탄\r\n啍\t느릿할 톤 | 일깨울 순\r\n通\t통할 통\r\n統\t거느릴 통\r\n痛\t아플 통\r\n慟\t서러워할 통\r\n桶\t통 통\r\n筒\t통 통\r\n恫\t슬플 통 | 으를 동\r\n退\t물러날 퇴\r\n頹\t무너질 퇴\r\n堆\t쌓을 퇴\r\n褪\t바랠 퇴\r\n腿\t넓적다리 퇴\r\n蓷\t익모초 퇴\r\n魋\t짐승이름 퇴 | 북상투 추\r\n隤\t무너질 퇴\r\n投\t던질 투\r\n鬪\t싸움 투\r\n透\t사무칠 투\r\n套\t씌울 투\r\n妬\t샘낼 투\r\n偸\t훔칠 투\r\n渝\t변할 투\r\n特\t특별할 특\r\n慝\t사특할 특\r\n忒\t변할 특\r\n闖\t엿볼 틈\r\n波\t물결 파\r\n破\t깨뜨릴 파\r\n派\t갈래 파\r\n播\t뿌릴 파\r\n把\t잡을 파\r\n罷\t마칠 파\r\n頗\t자못 파\r\n坡\t언덕 파\r\n巴\t꼬리 파\r\n爬\t긁을 파\r\n琶\t비파 파\r\n芭\t파초 파\r\n跛\t절름발이 파 | 비스듬히설 피\r\n婆\t할미 파\r\n杷\t비파나무/써레 파\r\n擺\t벌릴/열 파\r\n嶓\t산이름 파\r\n皤\t머리흴 파\r\n豝\t암퇘지 파\r\n簸\t까부를 파\r\n板\t널 판\r\n判\t판단할 판\r\n版\t판목 판\r\n販\t팔 판\r\n阪\t언덕 판\r\n辦\t힘들일 판\r\n坂\t언덕 판\r\n鈑\t금박 판\r\n瓣\t꽃잎/날름 판\r\n昄\t클 판\r\n八\t여덟 팔\r\n捌\t깨뜨릴 팔\r\n叭\t나팔 팔\r\n敗\t패할 패\r\n貝\t조개 패\r\n霸\t으뜸 패\r\n沛\t비쏟아질 패\r\n牌\t패 패\r\n悖\t거스를 패\r\n唄\t염불소리 패\r\n佩\t찰 패\r\n稗\t피 패\r\n浿\t강이름 패\r\n覇\t으뜸 패\r\n狽\t이리 패\r\n旆\t기 패\r\n粺\t정미 패\r\n茷\t풀잎무성할 패\r\n孛\t살별 패 | 안색변할 발\r\n彭\t성 팽\r\n膨\t불을 팽\r\n澎\t물소리 팽\r\n烹\t삶을 팽\r\n祊\t제사이름 팽\r\n伻\t심부름꾼 팽\r\n愎\t강퍅할 퍅\r\n便\t편할 편 | 똥오줌 변\r\n篇\t책 편\r\n編\t엮을 편\r\n片\t조각 편\r\n偏\t치우칠 편\r\n遍\t두루 편\r\n扁\t작을 편\r\n鞭\t채찍 편\r\n騙\t속일 편\r\n翩\t빨리날 편\r\n徧\t두루 편 | 두루 변\r\n褊\t옷좁을 편\r\n諞\t교묘히말할 편\r\n貶\t낮출 폄\r\n平\t평평할 평\r\n評\t평할 평\r\n坪\t들 평\r\n萍\t부평초 평\r\n枰\t바둑판 평\r\n苹\t다북쑥 평\r\n閉\t닫을 폐\r\n肺\t허파 폐\r\n廢\t폐할/버릴 폐\r\n弊\t폐단/해질 폐\r\n幣\t화폐 폐\r\n蔽\t덮을 폐\r\n斃\t죽을 폐\r\n陛\t대궐섬돌 폐\r\n嬖\t사랑할 폐\r\n吠\t짖을 폐\r\n敝\t해질 폐\r\n砲\t대포 포\r\n包\t쌀 포\r\n布\t베/펼 포 | 보시 보\r\n胞\t세포 포\r\n捕\t잡을 포\r\n浦\t개 포\r\n抱\t안을 포\r\n飽\t배부를 포\r\n怖\t두려워할 포\r\n鋪\t펼/가게 포\r\n抛\t던질 포\r\n鮑\t절인물고기 포\r\n葡\t포도 포\r\n疱\t물집 포\r\n庖\t부엌 포\r\n逋\t도망갈 포\r\n褒\t기릴 포\r\n袍\t도포 포\r\n匍\t길 포\r\n脯\t포 포\r\n泡\t거품 포\r\n圃\t채마밭 포\r\n哺\t먹일 포\r\n咆\t고함지를 포\r\n蒲\t부들 포\r\n佈\t펼 포\r\n苞\t떨기 포\r\n匏\t박 포\r\n麃\t고라니 포 | 김맬 표\r\n襃\t기릴 포\r\n餔\t저녁밥 포\r\n炰\t구울 포\r\n炮\t싸서구울 포\r\n暴\t사나울 폭 | 모질 포\r\n爆\t불터질 폭\r\n幅\t폭 폭\r\n曝\t쪼일 폭 | 쪼일 포\r\n瀑\t폭포 폭 | 소나기 포\r\n表\t겉 표\r\n票\t표 표\r\n標\t표할 표\r\n漂\t떠다닐 표\r\n杓\t북두자루 표\r\n豹\t표범 표\r\n慓\t급할 표\r\n飄\t나부낄 표\r\n剽\t겁박할 표\r\n俵\t나누어줄 표\r\n彪\t범 표\r\n驃\t누런말 표\r\n瓢\t표주박 표\r\n飇\t폭풍 표\r\n鑣\t재갈 표\r\n滮\t물흐르는모양 표 | 물흐르는모양 퓨\r\n瀌\t눈비퍼부을 표\r\n飆\t폭풍 표\r\n摽\t칠 표\r\n殍\t굶어죽을 표\r\n嘌\t빠를 표\r\n儦\t떼지어다닐 표\r\n品\t물건 품\r\n稟\t여쭐 품\r\n風\t바람 풍\r\n豊\t풍년 풍\r\n楓\t단풍 풍\r\n諷\t풍자할 풍\r\n豐\t풍년 풍\r\n灃\t강이름 풍\r\n疲\t피곤할 피\r\n避\t피할 피\r\n被\t입을 피\r\n皮\t가죽 피\r\n彼\t저 피\r\n披\t헤칠 피\r\n陂\t방죽 피 | 언덕 파\r\n詖\t치우칠 피\r\n必\t반드시 필\r\n筆\t붓 필\r\n畢\t마칠 필\r\n匹\t짝 필\r\n弼\t도울 필\r\n疋\t필 필\r\n苾\t필추 필\r\n珌\t칼집장식옥 필\r\n馝\t향기로울 필\r\n佖\t점잖을/가득할 필\r\n鉍\t창자루 필\r\n怭\t설만할 필\r\n駜\t말살찔 필\r\n鞸\t슬갑 필 | 칼집 병\r\n觱\t피리/쌀쌀할 필\r\n飶\t음식의향기 필\r\n逼\t핍박할 핍\r\n乏\t모자랄 핍\r\n偪\t핍박할 핍\r\n下\t아래 하\r\n夏\t여름 하\r\n河\t물 하\r\n荷\t멜 하\r\n賀\t하례할 하\r\n何\t어찌 하\r\n霞\t노을 하\r\n遐\t멀 하\r\n蝦\t두꺼비/새우 하\r\n瑕\t허물 하\r\n廈\t큰집 하\r\n厦\t큰집 하\r\n昰\t여름 하 | 이 시\r\n鰕\t새우 하\r\n騢\t적부루마 하\r\n芐\t지황 하 | 지황 호\r\n呀\t입벌릴 하\r\n嘏\t클 하\r\n菏\t풀이름/늪이름 하\r\n學\t배울 학\r\n鶴\t학 학\r\n虐\t모질 학\r\n壑\t구렁 학\r\n謔\t희롱할 학\r\n瘧\t학질 학\r\n翯\t함치르르할 학\r\n韓\t한국/나라 한\r\n漢\t한수/한나라 한\r\n寒\t찰 한\r\n限\t한할 한\r\n閑\t한가할 한\r\n恨\t한 한\r\n汗\t땀 한\r\n旱\t가물 한\r\n翰\t편지 한\r\n邯\t조나라서울 한 | 사람이름 감\r\n罕\t드물 한\r\n悍\t사나울 한\r\n澣\t빨래할/열흘 한\r\n瀚\t넓고클 한\r\n閒\t한가할 한\r\n扞\t막을 한\r\n暵\t마를/말릴 한\r\n哻\t코고는소리 한\r\n熯\t마를/말릴 한\r\n僩\t너그러울/노할 한\r\n割\t벨 할\r\n轄\t다스릴 할\r\n劼\t삼갈 할\r\n舝\t비녀장 할\r\n含\t머금을 함\r\n陷\t빠질 함\r\n咸\t다 함\r\n艦\t큰 배 함\r\n緘\t봉할 함\r\n涵\t젖을 함\r\n檻\t난간 함\r\n喊\t소리칠 함\r\n函\t함 함\r\n銜\t재갈 함\r\n鹹\t짤 함\r\n啣\t재갈 함\r\n諴\t화할 함\r\n鬫\t범우는소리 함\r\n菡\t연꽃봉오리 함\r\n合\t합할 합\r\n盒\t합 합\r\n蛤\t조개 합\r\n闔\t문짝 합\r\n閤\t합문 합\r\n哈\t마실 합\r\n嗑\t입다물 합\r\n柙\t짐승우리 합\r\n盍\t덮을 합 | 새이름 갈\r\n航\t배 항\r\n港\t항구 항\r\n抗\t겨룰 항\r\n恒\t항상 항\r\n項\t항목 항\r\n巷\t거리 항\r\n沆\t넓을 항\r\n亢\t높을 항\r\n缸\t항아리 항\r\n肛\t항문 항\r\n桁\t차꼬 항 | 도리 형\r\n姮\t항아 항\r\n杭\t거룻배 항\r\n嫦\t항아 항 | 항아 상\r\n伉\t강직할/짝 항\r\n頏\t새날아내릴/목구멍 항\r\n海\t바다 해\r\n害\t해할 해\r\n解\t풀 해\r\n亥\t돼지 해\r\n奚\t어찌 해\r\n該\t갖출/마땅 해\r\n諧\t화할 해\r\n骸\t뼈 해\r\n楷\t본보기 해\r\n偕\t함께 해\r\n駭\t놀랄 해\r\n懈\t게으를 해\r\n咳\t기침 해\r\n邂\t우연히만날 해\r\n蟹\t게 해\r\n瀣\t이슬 해\r\n孩\t어린아이 해\r\n垓\t땅가장자리 해\r\n陔\t섬돌 해\r\n醢\t젓 해\r\n核\t씨 핵\r\n劾\t꾸짖을 핵\r\n覈\t핵실할 핵\r\n幸\t다행 행\r\n行\t다닐 행 | 항렬 항\r\n杏\t살구 행\r\n荇\t마름풀 행\r\n倖\t요행 행\r\n悻\t발끈성낼 행\r\n向\t향할 향\r\n鄕\t시골 향\r\n香\t향기 향\r\n響\t울릴 향\r\n享\t누릴 향\r\n嚮\t길잡을 향\r\n饗\t잔치할 향\r\n珦\t옥구슬 향\r\n餉\t먹일/양식 향\r\n許\t허락할 허\r\n虛\t빌 허\r\n噓\t불 허\r\n墟\t터 허\r\n栩\t상수리나무 허 | 상수리나무 우\r\n憲\t법 헌\r\n獻\t드릴 헌\r\n軒\t집 헌\r\n櫶\t나무이름 헌\r\n巘\t산봉우리 헌\r\n歇\t쉴 헐\r\n驗\t시험 험\r\n險\t험할 험\r\n玁\t오랑캐이름 험\r\n獫\t오랑캐이름 험 | 개 렴\r\n革\t가죽 혁\r\n爀\t불빛 혁\r\n赫\t빛날 혁\r\n奕\t클 혁\r\n侐\t고요할 혁\r\n洫\t빌/넘칠 혁\r\n焃\t붉을 혁\r\n虩\t두려워할 혁\r\n衋\t애통해할 혁\r\n現\t나타날 현\r\n賢\t어질 현\r\n顯\t나타날 현\r\n懸\t달 현\r\n玄\t검을 현\r\n絃\t줄 현\r\n縣\t고을 현\r\n弦\t시위 현\r\n峴\t고개 현\r\n鉉\t솥귀 현\r\n炫\t밝을 현\r\n衒\t자랑할 현\r\n眩\t어지러울 현\r\n絢\t무늬 현\r\n睍\t눈불거질 현\r\n俔\t엿볼 현\r\n晛\t햇살 현\r\n玹\t옥돌 현\r\n舷\t뱃전 현\r\n泫\t눈물흘릴/이슬맺힐 현\r\n鞙\t멍에끈 현\r\n儇\t영리할 현\r\n嬛\t산뜻할 현 | 외로울 경\r\n昡\t햇빛 현\r\n駽\t검푸른말 현\r\n莧\t비름 현\r\n怰\t팔 현\r\n血\t피 혈\r\n穴\t굴 혈\r\n孑\t외로울 혈\r\n頁\t머리 혈\r\n絜\t잴 혈 | 깨끗할 결\r\n嫌\t싫어할 혐\r\n協\t화할 협\r\n脅\t위협할 협\r\n峽\t골짜기 협\r\n陜\t좁을 협 | 땅이름 합\r\n俠\t의기로울 협\r\n挾\t낄 협\r\n狹\t좁을 협\r\n頰\t뺨 협\r\n脇\t갈비 협\r\n浹\t두루미칠 협\r\n夾\t낄 협\r\n鋏\t가위 협\r\n莢\t콩꼬투리 협\r\n冾\t젖을 협\r\n恊\t맞을 협\r\n兄\t형 형\r\n形\t모양 형\r\n刑\t형벌 형\r\n衡\t저울대 형\r\n亨\t형통할 형\r\n螢\t반딧불 형\r\n型\t모형 형\r\n馨\t꽃다울 형\r\n邢\t성 형\r\n瑩\t밝을 형 | 옥돌 영\r\n炯\t빛날 형\r\n瀅\t물맑을 형\r\n荊\t가시 형\r\n灐\t사람이름 형\r\n烱\t빛날 형\r\n滎\t실개천 형\r\n泂\t멀 형\r\n逈\t멀 형\r\n珩\t패옥 형\r\n鎣\t줄 형\r\n熒\t등불반짝거릴 형\r\n惠\t은혜 혜\r\n慧\t슬기로울 혜\r\n兮\t어조사 혜\r\n彗\t살별 혜\r\n醯\t식혜 혜\r\n暳\t별반짝거릴 혜\r\n蹊\t지름길 혜\r\n鞋\t신 혜\r\n蕙\t난초/혜초 혜\r\n嘒\t반짝거릴 혜\r\n憓\t사랑할 혜\r\n盻\t눈흘길 혜\r\n徯\t기다릴 혜\r\n傒\t기다릴/가둘 혜\r\n譓\t슬기로울 혜\r\n號\t이름 호\r\n湖\t호수 호\r\n好\t좋을 호\r\n戶\t집 호\r\n護\t도울 호\r\n呼\t부를 호\r\n浩\t넓을 호\r\n豪\t호걸 호\r\n胡\t되 호\r\n虎\t범 호\r\n乎\t어조사 호\r\n互\t서로 호\r\n毫\t터럭 호\r\n濠\t호주 호\r\n壕\t해자 호\r\n扈\t따를 호\r\n昊\t하늘 호\r\n鎬\t호경 호\r\n澔\t넓을 호\r\n皓\t흴 호\r\n祜\t복 호\r\n晧\t밝을 호\r\n糊\t풀칠할 호\r\n弧\t활 호\r\n狐\t여우 호\r\n瑚\t산호 호\r\n琥\t호박 호\r\n蒿\t다북쑥 호 | 다북쑥 고\r\n葫\t물외/마늘 호\r\n芦\t지황 호\r\n壺\t병 호\r\n蝴\t나비 호\r\n頀\t구할 호\r\n顥\t클 호\r\n縞\t흰깁 호\r\n灝\t물줄기멀 호\r\n瓠\t박 호\r\n滸\t물가 호\r\n岵\t초목이우거진산 호\r\n淏\t맑을 호\r\n濩\t퍼질 호 | 낙숫물떨어지는모양 확\r\n薅\t김맬 호\r\n皥\t밝을 호\r\n皜\t흴 호\r\n怙\t믿을 호\r\n嘑\t부르짖을 호\r\n或\t혹 혹\r\n惑\t미혹할 혹\r\n酷\t심할 혹\r\n婚\t혼인할 혼\r\n混\t섞을 혼\r\n魂\t넋 혼\r\n昏\t어두울 혼\r\n渾\t흐릴 혼\r\n琿\t아름다운옥 혼\r\n惛\t흐릴 혼 | 번민할 민\r\n忽\t갑자기 홀\r\n笏\t홀 홀\r\n惚\t황홀할 홀\r\n紅\t붉을 홍\r\n洪\t넓을 홍\r\n鴻\t기러기 홍\r\n弘\t클 홍\r\n泓\t물깊을 홍\r\n哄\t떠들썩할 홍\r\n訌\t어지러울 홍\r\n虹\t무지개 홍\r\n烘\t불쬘 홍\r\n汞\t수은 홍\r\n鉷\t쇠뇌 홍\r\n鬨\t싸움소리 홍\r\n洚\t물넘칠 홍\r\n火\t불 화\r\n話\t말씀 화\r\n花\t꽃 화\r\n和\t화할 화\r\n畫\t그림 화 | 그을 획\r\n化\t될 화\r\n貨\t재물 화\r\n華\t빛날 화\r\n禍\t재앙 화\r\n禾\t벼 화\r\n靴\t신 화\r\n樺\t벚나무/자작나무 화\r\n嬅\t탐스러울 화\r\n譁\t지껄일 화\r\n畵\t그림 화 | 그을 획\r\n確\t굳을 확\r\n穫\t거둘 확\r\n擴\t넓힐 확\r\n碻\t굳을 확\r\n攫\t움킬 확\r\n雘\t붉을/진사 확\r\n矍\t두리번거릴 확\r\n患\t근심 환\r\n歡\t기쁠 환\r\n環\t고리 환\r\n還\t돌아올 환\r\n換\t바꿀 환\r\n丸\t둥글 환\r\n幻\t헛보일 환\r\n煥\t빛날 환\r\n桓\t굳셀 환\r\n宦\t벼슬 환\r\n鰥\t홀아비 환\r\n喚\t부를 환\r\n驩\t기뻐할 환\r\n奐\t빛날 환\r\n晥\t밝을 환\r\n紈\t흰깁 환\r\n渙\t물흩어질 환\r\n芄\t왕골 환\r\n鐶\t고리 환\r\n鍰\t무게단위/고리 환\r\n豢\t기를 환\r\n逭\t도망할 환\r\n睆\t밝을 환\r\n懽\t기뻐할 환\r\n圜\t두를 환 | 둥글 원\r\n活\t살 활\r\n滑\t미끄러울 활 | 익살스러울 골\r\n猾\t교활할 활\r\n闊\t넓을 활\r\n豁\t넓을 활\r\n濶\t넓을 활\r\n黃\t누를 황\r\n況\t상황 황\r\n皇\t임금 황\r\n荒\t거칠 황\r\n晃\t밝을 황\r\n滉\t깊을 황\r\n煌\t빛날 황\r\n徨\t헤맬 황\r\n遑\t급할 황\r\n恍\t황홀할 황\r\n慌\t어리둥절할 황\r\n凰\t봉황 황\r\n惶\t두려울 황\r\n篁\t대숲 황\r\n榥\t책상 황\r\n湟\t웅덩이 황\r\n潢\t웅덩이 황\r\n璜\t패옥 황\r\n簧\t생황 황\r\n蝗\t황충 황\r\n幌\t휘장 황\r\n愰\t들뜰 황\r\n晄\t밝을 황\r\n隍\t해자 황\r\n喤\t울음소리 황\r\n堭\t해자 황\r\n媓\t어머니 황\r\n會\t모일 회\r\n回\t돌아올 회\r\n灰\t재 회\r\n懷\t품을 회\r\n悔\t뉘우칠 회\r\n廻\t돌 회\r\n淮\t물이름 회\r\n檜\t전나무 회\r\n賄\t재물/뇌물 회\r\n誨\t가르칠 회\r\n蛔\t회충 회\r\n膾\t회 회\r\n繪\t그림 회\r\n晦\t그믐 회\r\n徊\t머뭇거릴 회\r\n恢\t넓을 회\r\n匯\t물돌아모일 회\r\n澮\t봇도랑 회\r\n茴\t회향 회\r\n獪\t교활할 회 | 교활할 쾌\r\n頮\t낯씻을 회\r\n洄\t거슬러흐를/돌아흐를 회\r\n薈\t초목무성할 회\r\n獲\t얻을 획\r\n劃\t그을 획\r\n擭\t잡을 획 | 덫 확\r\n橫\t가로 횡\r\n鐄\t큰쇠북 횡\r\n宖\t집울릴 횡\r\n孝\t효도 효\r\n效\t본받을 효\r\n曉\t새벽 효\r\n嚆\t울릴 효\r\n爻\t사귈/가로그을 효\r\n酵\t삭힐 효\r\n哮\t성낼 효\r\n驍\t날랠 효\r\n斅\t가르칠 효\r\n梟\t올빼미 효\r\n淆\t뒤섞일 효\r\n涍\t물이름 효\r\n肴\t안주 효\r\n鴞\t부엉이/올빼미 효\r\n効\t본받을 효\r\n嘵\t두려워할 효\r\n傚\t본받을 효\r\n囂\t들렐 효\r\n殽\t섞일/안주 효\r\n虓\t범울부짖을 효\r\n後\t뒤 후\r\n厚\t두터울 후\r\n候\t기후 후\r\n侯\t제후 후\r\n喉\t목구멍 후\r\n后\t임금/왕후 후\r\n逅\t만날 후\r\n朽\t썩을 후\r\n嗅\t맡을 후\r\n吼\t울부짖을 후\r\n帿\t과녁 후\r\n珝\t옥이름 후\r\n煦\t따스할 후\r\n酗\t주정할 후\r\n餱\t건량 후\r\n鍭\t화살촉 후\r\n詡\t자랑할 후\r\n訓\t가르칠 훈\r\n勳\t공 훈\r\n熏\t불길 훈\r\n薰\t향풀 훈\r\n壎\t질나팔 훈\r\n暈\t무리 훈\r\n焄\t향내 훈\r\n塤\t질나발 훈\r\n勛\t공 훈\r\n燻\t연기치밀 훈\r\n纁\t분홍빛 훈\r\n鑂\t금빛바랠 훈\r\n薨\t죽을 훙\r\n喧\t지껄일 휜\r\n暄\t따뜻할 훤\r\n萱\t원추리 훤\r\n煊\t밝을 훤\r\n貆\t담비새끼 훤\r\n諼\t속일/잊을 훤\r\n咺\t울 훤\r\n諠\t지껄일/잊을 훤\r\n毁\t헐 훼\r\n喙\t부리 훼\r\n卉\t풀 훼\r\n虺\t독사/작은뱀 훼\r\n揮\t휘두를 휘\r\n輝\t빛날 휘\r\n徽\t아름다울 휘\r\n麾\t기 휘\r\n彙\t무리 휘\r\n諱\t숨길/꺼릴 휘\r\n煇\t빛날 휘 | 햇무리 운\r\n暉\t햇빛 휘\r\n翬\t날개훨훨칠/꿩 휘\r\n休\t쉴 휴\r\n携\t이끌 휴\r\n烋\t아름다울 휴\r\n虧\t이지러질 휴\r\n畦\t밭이랑 휴 | 밭이랑 규\r\n觿\t뿔송곳 휴\r\n睢\t부릅떠볼 휴 | 물이름 수\r\n咻\t지껄일 휴 | 따뜻하게할 후\r\n攜\t끌 휴\r\n恤\t불쌍할 휼\r\n譎\t속일 휼\r\n鷸\t도요새 휼\r\n遹\t좇을/간사할 휼\r\n凶\t흉할 흉\r\n胸\t가슴 흉\r\n匈\t오랑캐 흉\r\n兇\t흉악할 흉\r\n洶\t용솟음칠 흉\r\n訩\t흉악할/다툴 흉\r\n黑\t검을 흑\r\n欣\t기쁠 흔\r\n痕\t흔적 흔\r\n昕\t해돋을 흔\r\n炘\t화끈거릴 흔\r\n釁\t틈 흔\r\n忻\t기뻐할 흔\r\n屹\t산우뚝할 흘\r\n吃\t말더듬을 흘\r\n紇\t질낮은실 흘\r\n訖\t이를 흘\r\n齕\t씹을/깨물 흘\r\n迄\t이를 흘\r\n汔\t거의 흘\r\n仡\t날랠 흘 | 배흔들리는모양 올\r\n欽\t공경할 흠\r\n歆\t흠향할 흠\r\n欠\t하품 흠\r\n吸\t마실 흡\r\n洽\t흡족할 흡\r\n恰\t흡사할 흡\r\n翕\t모을 흡\r\n潝\t물빨리흐를 흡\r\n興\t일 흥\r\n希\t바랄 희\r\n喜\t기쁠 희\r\n稀\t드물 희\r\n戲\t놀이 희\r\n煕\t빛날 희\r\n姬\t계집 희\r\n噫\t한숨쉴 희\r\n熹\t빛날 희\r\n憙\t기뻐할 희\r\n嬉\t아름다울 희\r\n羲\t복희 희\r\n禧\t복 희\r\n犧\t희생 희\r\n熺\t빛날 희\r\n凞\t화할 희\r\n僖\t즐거울 희\r\n囍\t쌍희 희\r\n憘\t기쁠 희\r\n戱\t놀이 희\r\n晞\t마를 희\r\n曦\t햇빛 희\r\n饎\t주식 희\r\n咥\t웃을 희 | 깨물 절\r\n嘻\t탄식하는소리/화락할 희\r\n爔\t불 희\r\n豨\t돼지 희\r\n餼\t보낼 희\r\n橲\t나무이름 희\r\n詰\t꾸짖을 힐\r\n襭\t옷자락에꽂을 힐\r\n';
var $author$project$Hangul$kanjiCSV = '家\t집 가\r\n歌\t노래 가\r\n加\t더할 가\r\n街\t거리 가\r\n可\t옳을 가\r\n仮\t거짓 가\r\n価\t값 가\r\n暇\t틈/겨를 가\r\n佳\t아름다울 가\r\n架\t시렁 가\r\n嫁\t시집갈 가\r\n稼\t심을 가\r\n苛\t가혹할 가\r\n角\t뿔 각\r\n各\t각각 각\r\n覚\t깨달을 각\r\n刻\t새길 각\r\n閣\t집 각\r\n却\t물리칠 각\r\n脚\t다리 각\r\n殻\t껍질 각\r\n間\t사이 간\r\n刊\t새길 간\r\n幹\t줄기 간\r\n干\t방패 간\r\n看\t볼 간\r\n簡\t대쪽/간략할 간\r\n肝\t간 간\r\n墾\t개간할 간\r\n懇\t간절할 간\r\n喝\t꾸짖을 갈\r\n渇\t목마를 갈\r\n褐\t갈색/굵은베 갈\r\n葛\t칡 갈\r\n感\t느낄 감\r\n減\t덜 감\r\n甘\t달 감\r\n監\t볼 감\r\n鑑\t거울 감\r\n勘\t헤아릴 감\r\n紺\t감색/연보라 감\r\n敢\t감히/구태여 감\r\n堪\t견딜 감\r\n憾\t섭섭할 감\r\n甲\t갑옷 갑\r\n岬\t곶 갑\r\n強\t강할 강\r\n康\t편안 강\r\n講\t욀 강\r\n降\t내릴 강 | 항복할 항\r\n鋼\t강철 강\r\n綱\t벼리 강\r\n江\t강 강\r\n剛\t굳셀 강\r\n岡\t산등성이 강\r\n開\t열 개\r\n改\t고칠 개\r\n個\t낱 개\r\n介\t낄 개\r\n皆\t다 개\r\n箇\t낱 개\r\n慨\t슬퍼할 개\r\n概\t대개 개\r\n蓋\t덮을 개\r\n客\t손 객\r\n坑\t구덩이 갱\r\n車\t수레 거 | 수레 차\r\n去\t갈 거\r\n挙\t들 거\r\n居\t살 거\r\n巨\t클 거\r\n拠\t근거 거\r\n距\t상거할 거\r\n拒\t막을 거\r\n据\t일할/의거할 거\r\n裾\t옷자락 거\r\n建\t세울 건\r\n健\t굳셀 건\r\n件\t물건 건\r\n乾\t하늘/마를 건\r\n巾\t수건 건\r\n鍵\t자물쇠/열쇠 건\r\n傑\t뛰어날 걸\r\n乞\t빌 걸\r\n検\t검사할 검\r\n剣\t칼 검\r\n倹\t검소할 검\r\n掲\t높이들/걸 게\r\n憩\t쉴 게\r\n格\t격식 격\r\n激\t격할 격\r\n撃\t칠 격\r\n隔\t사이뜰 격\r\n犬\t개 견\r\n見\t볼 견 | 뵈올 현\r\n絹\t비단 견\r\n肩\t어깨 견\r\n堅\t굳을 견\r\n遣\t보낼 견\r\n繭\t고치 견\r\n決\t결단할 결\r\n欠\t이지러질 결\r\n結\t맺을 결\r\n潔\t깨끗할 결\r\n兼\t겸할 겸\r\n謙\t겸손할 겸\r\n鎌\t낫 겸\r\n京\t서울 경\r\n軽\t가벼울 경\r\n径\t지름길/길 경\r\n景\t볕 경\r\n鏡\t거울 경\r\n競\t다툴 경\r\n耕\t밭갈 경\r\n経\t지날/글 경\r\n境\t지경 경\r\n敬\t공경 경\r\n警\t깨우칠 경\r\n更\t고칠 경 | 다시 갱\r\n傾\t기울 경\r\n驚\t놀랄 경\r\n硬\t굳을 경\r\n鯨\t고래 경\r\n茎\t줄기 경\r\n慶\t경사 경\r\n頃\t이랑/잠깐 경\r\n梗\t줄기/막힐 경\r\n憬\t깨달을/동경할 경\r\n計\t셀 계\r\n界\t지경 계\r\n係\t맬 계\r\n階\t섬돌 계\r\n季\t계절 계\r\n械\t기계 계\r\n系\t이어맬 계\r\n届\t이를 계\r\n戒\t경계할 계\r\n継\t이을 계\r\n契\t맺을 계\r\n啓\t열 계\r\n鶏\t닭 계\r\n渓\t시내 계\r\n稽\t머무를 계\r\n古\t옛 고\r\n考\t생각할 고\r\n高\t높을 고\r\n苦\t쓸 고\r\n庫\t곳집 고\r\n告\t고할 고\r\n固\t굳을 고\r\n故\t연고 고\r\n枯\t마를 고\r\n鼓\t북 고\r\n稿\t원고/볏짚 고\r\n孤\t외로울 고\r\n雇\t품팔 고\r\n顧\t돌아볼 고\r\n拷\t칠 고\r\n尻\t꽁무니 고\r\n股\t넓적다리 고\r\n錮\t막을 고\r\n谷\t골 곡\r\n曲\t굽을 곡\r\n穀\t곡식 곡\r\n困\t곤할 곤\r\n昆\t맏 곤\r\n骨\t뼈 골\r\n空\t빌 공\r\n工\t장인 공\r\n公\t공평할 공\r\n功\t공 공\r\n共\t한가지 공\r\n供\t이바지할 공\r\n攻\t칠 공\r\n恐\t두려울 공\r\n孔\t구멍 공\r\n控\t당길 공\r\n恭\t공손할 공\r\n貢\t바칠 공\r\n科\t과목 과\r\n果\t실과 과\r\n課\t공부할/과정 과\r\n過\t지날 과\r\n菓\t과자 과/실과 과\r\n誇\t자랑할 과\r\n寡\t적을 과\r\n鍋\t노구솥 과\r\n郭\t둘레/외성 곽\r\n館\t집 관\r\n官\t벼슬 관\r\n関\t관계할 관\r\n管\t대롱/주관할 관\r\n観\t볼 관\r\n慣\t익숙할 관\r\n冠\t갓 관\r\n貫\t꿸 관\r\n款\t항목 관\r\n棺\t널 관\r\n寛\t너그러울 관\r\n串\t꿸 관 | 땅이름 곶\r\n括\t묶을 괄\r\n広\t넓을 광\r\n光\t빛 광\r\n鉱\t쇳돌 광\r\n狂\t미칠 광\r\n掛\t걸 괘\r\n壊\t무너질 괴\r\n怪\t괴이할 괴\r\n塊\t흙덩이 괴\r\n拐\t후릴 괴\r\n校\t학교 교\r\n交\t사귈 교\r\n教\t가르칠 교\r\n橋\t다리 교\r\n較\t견줄/비교할 교\r\n巧\t공교할 교\r\n郊\t들 교\r\n絞\t목맬 교\r\n矯\t바로잡을 교\r\n九\t아홉 구\r\n口\t입 구\r\n区\t구분할/지경 구\r\n究\t연구할 구\r\n具\t갖출 구\r\n球\t공 구\r\n求\t구할 구\r\n救\t구원할 구\r\n久\t오랠 구\r\n旧\t예 구\r\n句\t글귀 구\r\n構\t얽을 구\r\n丘\t언덕 구\r\n駆\t몰 구\r\n殴\t때릴 구\r\n欧\t구라파/칠 구\r\n拘\t잡을 구\r\n溝\t도랑 구\r\n購\t살 구\r\n勾\t굽을 구\r\n臼\t절구 구\r\n惧\t두려워할 구\r\n亀\t거북 구 | 거북 귀 | 터질 균\r\n駒\t망아지 구\r\n国\t나라 국\r\n局\t판 국\r\n菊\t국화 국\r\n君\t임금 군\r\n軍\t군사 군\r\n郡\t고을 군\r\n群\t무리 군\r\n屈\t굽힐 굴\r\n掘\t팔 굴\r\n堀\t팔 굴\r\n窟\t굴 굴\r\n弓\t활 궁\r\n宮\t집 궁\r\n窮\t다할/궁할 궁\r\n券\t문서 권\r\n巻\t책 권\r\n権\t권세 권\r\n圏\t우리 권\r\n勧\t권할 권\r\n拳\t주먹 권\r\n机\t책상 궤\r\n軌\t바퀴자국 궤\r\n潰\t무너질 궤\r\n帰\t돌아갈 귀\r\n貴\t귀할 귀\r\n鬼\t귀신 귀\r\n規\t법 규\r\n叫\t부르짖을 규\r\n糾\t얽힐 규\r\n均\t고를 균\r\n菌\t버섯 균\r\n極\t다할/극진할 극\r\n劇\t심할 극\r\n克\t이길 극\r\n隙\t틈 극\r\n近\t가까울 근\r\n根\t뿌리 근\r\n勤\t부지런할 근\r\n筋\t힘줄 근\r\n斤\t근/날 근\r\n謹\t삼갈 근\r\n僅\t겨우 근\r\n金\t쇠 금 | 성 김\r\n今\t이제 금\r\n禁\t금할 금\r\n琴\t거문고 금\r\n襟\t옷깃 금\r\n錦\t비단 금\r\n急\t급할 급\r\n級\t등급 급\r\n給\t줄 급\r\n及\t미칠 급\r\n扱\t거둘 급 | 꽂을 삽\r\n肯\t즐길 긍\r\n気\t기운 기\r\n汽\t물끓는김 기\r\n記\t기록할 기\r\n起\t일어날 기\r\n期\t기약할 기\r\n紀\t벼리 기\r\n旗\t기 기\r\n器\t그릇 기\r\n機\t틀 기\r\n技\t재주 기\r\n基\t터 기\r\n寄\t부칠 기\r\n己\t몸 기\r\n祈\t빌 기\r\n奇\t기특할 기\r\n幾\t몇 기\r\n企\t꾀할 기\r\n忌\t꺼릴 기\r\n岐\t갈림길 기\r\n既\t이미 기\r\n欺\t속일 기\r\n棋\t바둑 기\r\n棄\t버릴 기\r\n騎\t말탈 기\r\n肌\t살 기\r\n飢\t주릴 기\r\n崎\t험할 기\r\n碁\t바둑 기\r\n伎\t재간 기\r\n埼\t갑 기\r\n畿\t경기 기\r\n緊\t긴할 긴\r\n吉\t길할 길\r\n喫\t먹을 끽\r\n那\t어찌 나\r\n諾\t허락할 낙\r\n暖\t따뜻할 난\r\n難\t어려울 난\r\n男\t사내 남\r\n南\t남녘 남\r\n納\t들일 납\r\n娘\t계집 낭\r\n内\t안 내\r\n耐\t견딜 내\r\n匂\t향기 내\r\n奈\t어찌 내\r\n女\t계집 녀\r\n年\t해 년\r\n念\t생각 념\r\n捻\t비틀 념\r\n寧\t편안 녕\r\n努\t힘쓸 노\r\n奴\t종 노\r\n怒\t성낼 노\r\n農\t농사 농\r\n濃\t짙을 농\r\n脳\t골/뇌수 뇌\r\n悩\t번뇌할 뇌\r\n尿\t오줌 뇨\r\n能\t능할 능\r\n尼\t여승 니\r\n泥\t진흙 니\r\n匿\t숨길 닉\r\n溺\t빠질 닉\r\n多\t많을 다\r\n茶\t차 다 | 차 차\r\n短\t짧을 단\r\n単\t홑 단\r\n団\t둥글 단\r\n断\t끊을 단\r\n段\t층계 단\r\n丹\t붉을 단\r\n端\t끝 단\r\n壇\t단 단\r\n鍛\t쇠불릴 단\r\n但\t다만 단\r\n旦\t아침 단\r\n達\t통달할 달\r\n談\t말씀 담\r\n担\t멜 담\r\n淡\t맑을 담\r\n曇\t흐릴 담\r\n胆\t쓸개 담\r\n答\t대답 답\r\n踏\t밟을 답\r\n当\t마땅 당\r\n堂\t집 당\r\n党\t무리 당\r\n糖\t엿 당\r\n唐\t당나라/당황할 당\r\n大\t큰 대\r\n台\t대 대\r\n代\t대신할 대\r\n対\t대할 대\r\n待\t기다릴 대\r\n帯\t띠 대\r\n隊\t무리 대\r\n貸\t빌릴/뀔 대\r\n袋\t자루 대\r\n戴\t일 대\r\n徳\t큰 덕\r\n刀\t칼 도\r\n図\t그림 도\r\n道\t길 도\r\n度\t법도 도 | 헤아릴 탁\r\n島\t섬 도\r\n都\t도읍 도\r\n徒\t무리 도\r\n導\t인도할 도\r\n到\t이를 도\r\n逃\t도망할 도\r\n倒\t넘어질 도\r\n桃\t복숭아 도\r\n途\t길 도\r\n盗\t도둑 도\r\n渡\t건널 도\r\n跳\t뛸 도\r\n稲\t벼 도\r\n陶\t질그릇 도\r\n塗\t칠할 도\r\n挑\t돋울 도\r\n悼\t슬퍼할 도\r\n賭\t내기 도\r\n読\t읽을 독 | 구절 두\r\n毒\t독 독\r\n独\t홀로 독\r\n篤\t도타울 독\r\n督\t감독할 독\r\n豚\t돼지 돈\r\n頓\t조아릴 돈\r\n突\t갑자기 돌\r\n冬\t겨울 동\r\n同\t한가지 동\r\n東\t동녘 동\r\n動\t움직일 동\r\n童\t아이 동\r\n働\t일할 동\r\n銅\t구리 동\r\n胴\t큰창자/몸통 동\r\n凍\t얼 동\r\n洞\t골 동 | 밝을 통\r\n棟\t마룻대 동\r\n憧\t동경할 동\r\n瞳\t눈동자 동\r\n頭\t머리 두\r\n豆\t콩 두\r\n斗\t말 두\r\n痘\t역질 두\r\n鈍\t둔할 둔\r\n屯\t진칠 둔\r\n得\t얻을 득\r\n登\t오를 등\r\n等\t무리 등\r\n灯\t등 등\r\n謄\t베낄 등\r\n騰\t오를 등\r\n藤\t등나무 등\r\n裸\t벗을 라\r\n羅\t벌릴 라\r\n楽\t즐길 락 | 노래 악 | 좋아할 요\r\n落\t떨어질 락\r\n絡\t이을/얽을 락\r\n酪\t쇠젖 락\r\n乱\t어지러울 란\r\n卵\t알 란\r\n欄\t난간 란\r\n辣\t매울 랄\r\n覧\t볼 람\r\n濫\t넘칠 람\r\n嵐\t아지랑이 람\r\n藍\t쪽 람\r\n拉\t끌 랍\r\n朗\t밝을 랑\r\n郎\t사내 랑\r\n浪\t물결 랑\r\n廊\t사랑채/행랑 랑\r\n来\t올 래\r\n冷\t찰 랭\r\n略\t간략할/약할 략\r\n両\t두 량\r\n良\t어질 량\r\n量\t헤아릴 량\r\n糧\t양식 량\r\n涼\t서늘할 량\r\n旅\t나그네 려\r\n慮\t생각할 려\r\n麗\t고울 려\r\n励\t힘쓸 려\r\n戻\t어그러질 려\r\n呂\t성/법칙 려\r\n侶\t짝 려\r\n力\t힘 력\r\n歴\t지날 력\r\n暦\t책력 력\r\n練\t익힐 련\r\n連\t이을 련\r\n恋\t그리워할/그릴 련\r\n錬\t쇠불릴/단련할 련\r\n列\t벌릴 렬\r\n劣\t못할 렬\r\n烈\t매울 렬\r\n裂\t찢어질 렬\r\n廉\t청렴할 렴\r\n猟\t사냥 렵\r\n令\t하여금 령\r\n領\t거느릴 령\r\n齢\t나이 령\r\n零\t떨어질/영 령\r\n霊\t신령 령\r\n鈴\t방울 령\r\n礼\t예도 례\r\n例\t법식 례\r\n隷\t종 례\r\n路\t길 로\r\n老\t늙을 로\r\n労\t일할 로\r\n露\t이슬 로\r\n炉\t화로 로\r\n虜\t사로잡을 로\r\n緑\t푸를 록\r\n録\t기록할 록\r\n鹿\t사슴 록\r\n麓\t산기슭 록\r\n論\t논할 론\r\n滝\t젖을 롱\r\n弄\t희롱할 롱\r\n籠\t대바구니 롱\r\n雷\t우레 뢰\r\n頼\t의뢰할 뢰\r\n瀬\t여울 뢰\r\n賂\t뇌물 뢰\r\n料\t헤아릴 료\r\n療\t병고칠 료\r\n了\t마칠 료\r\n僚\t동료 료\r\n寮\t동관 료\r\n瞭\t밝을 료\r\n竜\t용 룡\r\n涙\t눈물 루\r\n楼\t다락 루\r\n漏\t샐 루\r\n累\t여러/자주 루\r\n塁\t보루 루\r\n流\t흐를 류\r\n類\t무리 류\r\n留\t머무를 류\r\n柳\t버들 류\r\n硫\t유황 류\r\n瑠\t유리 류\r\n六\t여섯 륙\r\n陸\t뭍 륙\r\n輪\t바퀴 륜\r\n倫\t인륜 륜\r\n率\t비율 률 | 거느릴 솔\r\n律\t법칙 률\r\n慄\t떨릴 률\r\n隆\t높을 륭\r\n陵\t언덕 릉\r\n里\t마을 리\r\n理\t다스릴 리\r\n利\t이할 리\r\n裏\t속 리\r\n離\t떠날 리\r\n吏\t벼슬아치/관리 리\r\n厘\t다스릴 리\r\n痢\t이질 리\r\n履\t밟을 리\r\n梨\t배 리\r\n璃\t유리 리\r\n隣\t이웃 린\r\n林\t수풀 림\r\n臨\t임할 림\r\n立\t설 립\r\n粒\t낟알 립\r\n馬\t말 마\r\n魔\t마귀 마\r\n麻\t삼 마\r\n摩\t문지를 마\r\n磨\t갈 마\r\n幕\t장막 막\r\n膜\t꺼풀/막 막\r\n漠\t넓을 막\r\n万\t일만 만\r\n満\t찰 만\r\n晩\t늦을 만\r\n慢\t거만할 만\r\n漫\t흩어질 만\r\n湾\t물굽이 만\r\n蛮\t오랑캐 만\r\n末\t끝 말\r\n抹\t지울 말\r\n望\t바랄 망\r\n亡\t망할 망\r\n忘\t잊을 망\r\n忙\t바쁠 망\r\n網\t그물 망\r\n妄\t망령될 망\r\n毎\t매양 매\r\n売\t팔 매\r\n妹\t누이 매\r\n買\t살 매\r\n梅\t매화 매\r\n枚\t낱 매\r\n埋\t묻을 매\r\n魅\t매혹할 매\r\n媒\t중매 매\r\n昧\t어두울 매\r\n罵\t꾸짖을 매\r\n麦\t보리 맥\r\n脈\t줄기 맥\r\n盟\t맹세 맹\r\n猛\t사나울 맹\r\n盲\t소경/눈멀 맹\r\n面\t낯 면\r\n勉\t힘쓸 면\r\n綿\t솜 면\r\n眠\t잘 면\r\n免\t면할 면\r\n麺\t국수 면\r\n滅\t꺼질/멸할 멸\r\n蔑\t업신여길 멸\r\n名\t이름 명\r\n明\t밝을 명\r\n鳴\t울 명\r\n皿\t그릇 명\r\n命\t목숨 명\r\n銘\t새길 명\r\n冥\t어두울 명\r\n毛\t터럭 모\r\n母\t어미 모\r\n暮\t저물 모\r\n模\t본뜰 모\r\n矛\t창 모\r\n冒\t무릅쓸 모\r\n帽\t모자 모\r\n某\t아무 모\r\n募\t모을/뽑을 모\r\n慕\t그릴 모\r\n謀\t꾀 모\r\n侮\t업신여길 모\r\n耗\t소모할 모\r\n貌\t모양 모\r\n木\t나무 목\r\n目\t눈 목\r\n牧\t칠 목\r\n睦\t화목할 목\r\n没\t빠질 몰\r\n夢\t꿈 몽\r\n墓\t무덤 묘\r\n妙\t묘할 묘\r\n描\t그릴 묘\r\n苗\t모 묘\r\n猫\t고양이 묘\r\n無\t없을 무\r\n武\t호반 무\r\n務\t힘쓸 무\r\n貿\t무역할 무\r\n茂\t무성할 무\r\n舞\t춤출 무\r\n霧\t안개 무\r\n畝\t이랑 무 | 이랑 묘\r\n黙\t잠잠할 묵\r\n墨\t먹 묵\r\n文\t글월 문\r\n門\t문 문\r\n聞\t들을 문\r\n問\t물을 문\r\n紋\t무늬 문\r\n蚊\t모기 문\r\n物\t물건 물\r\n米\t쌀 미\r\n味\t맛 미\r\n美\t아름다울 미\r\n未\t아닐 미\r\n迷\t미혹할 미\r\n尾\t꼬리 미\r\n微\t작을 미\r\n弥\t미륵/오랠 미\r\n眉\t눈썹 미\r\n謎\t수수께끼 미\r\n民\t백성 민\r\n敏\t민첩할 민\r\n密\t빽빽할 밀\r\n蜜\t꿀 밀\r\n博\t넓을 박\r\n拍\t칠 박\r\n迫\t핍박할 박\r\n泊\t머무를/배댈 박\r\n薄\t엷을 박\r\n縛\t얽을 박\r\n朴\t성 박\r\n舶\t배 박\r\n撲\t칠 박\r\n剝\t벗길 박\r\n半\t반 반\r\n反\t돌이킬/돌아올 반\r\n返\t돌이킬 반\r\n飯\t밥 반\r\n班\t나눌 반\r\n般\t가지/일반 반\r\n搬\t옮길 반\r\n盤\t소반 반\r\n伴\t짝 반\r\n畔\t밭두둑 반\r\n頒\t나눌 반\r\n斑\t아롱질 반\r\n発\t필 발\r\n抜\t뽑을 발\r\n髪\t터럭 발\r\n鉢\t바리때 발\r\n勃\t노할 발\r\n方\t모 방\r\n放\t놓을 방\r\n防\t막을 방\r\n訪\t찾을 방\r\n坊\t동네 방\r\n肪\t기름 방\r\n傍\t곁 방\r\n芳\t꽃다울 방\r\n妨\t방해할 방\r\n邦\t나라 방\r\n房\t방 방\r\n倣\t본뜰 방\r\n紡\t길쌈 방\r\n倍\t곱 배\r\n配\t나눌/짝 배\r\n拝\t절 배\r\n背\t등 배\r\n俳\t배우 배\r\n杯\t잔 배\r\n輩\t무리 배\r\n排\t밀칠 배\r\n陪\t모실 배\r\n培\t북돋울 배\r\n賠\t물어줄 배\r\n白\t흰 백\r\n百\t일백 백\r\n伯\t맏 백\r\n番\t차례 번\r\n繁\t번성할 번\r\n藩\t울타리 번\r\n翻\t번역할 번\r\n煩\t번거로울 번\r\n罰\t벌할 벌\r\n伐\t칠 벌\r\n閥\t문벌 벌\r\n犯\t범할 범\r\n凡\t무릇 범\r\n範\t법 범\r\n帆\t돛 범\r\n氾\t넘칠 범\r\n汎\t넓을 범\r\n法\t법 법\r\n壁\t벽 벽\r\n癖\t버릇 벽\r\n璧\t구슬 벽\r\n辺\t가 변\r\n変\t변할 변\r\n弁\t고깔 변\r\n別\t다를/나눌 별\r\n病\t병 병\r\n兵\t병사 병\r\n並\t나란히 병\r\n柄\t자루 병\r\n丙\t남녘 병\r\n併\t아우를 병\r\n瓶\t병 병\r\n塀\t담 병\r\n餅\t떡 병\r\n歩\t걸음 보\r\n保\t지킬 보\r\n報\t갚을/알릴 보\r\n宝\t보배 보\r\n補\t기울 보\r\n普\t넓을 보\r\n譜\t족보 보\r\n服\t옷 복\r\n福\t복 복\r\n復\t회복할 복 | 다시 부\r\n複\t겹칠 복\r\n腹\t배 복\r\n伏\t엎드릴 복\r\n覆\t덮을 부 | 다시 복\r\n僕\t종 복\r\n本\t근본 본\r\n棒\t막대 봉\r\n峰\t멧부리 봉\r\n奉\t받들 봉\r\n封\t봉할 봉\r\n縫\t꿰맬 봉\r\n俸\t녹 봉\r\n蜂\t벌 봉\r\n父\t아비 부\r\n負\t질 부\r\n部\t떼 부\r\n夫\t지아비 부\r\n付\t부칠 부\r\n府\t마을 부\r\n副\t버금 부\r\n婦\t며느리 부\r\n富\t부자 부\r\n否\t아닐 부\r\n浮\t뜰 부\r\n腐\t썩을 부\r\n賦\t부세 부\r\n敷\t펼 부\r\n膚\t살갗 부\r\n赴\t다다를/갈 부\r\n符\t부호 부\r\n簿\t문서 부\r\n缶\t장군 부\r\n扶\t도울 부\r\n附\t붙을 부\r\n剖\t쪼갤 부\r\n阜\t언덕 부\r\n訃\t부고 부\r\n釜\t가마 부\r\n北\t북녘 북 | 달아날 배\r\n分\t나눌 분\r\n粉\t가루 분\r\n奮\t떨칠 분\r\n盆\t동이 분\r\n噴\t뿜을 분\r\n紛\t어지러울 분\r\n墳\t무덤 분\r\n奔\t달릴 분\r\n雰\t눈날릴 분\r\n憤\t분할 분\r\n不\t아닐 불\r\n仏\t부처 불\r\n払\t떨칠 불\r\n崩\t무너질 붕\r\n棚\t사다리 붕\r\n悲\t슬플 비\r\n鼻\t코 비\r\n飛\t날 비\r\n費\t쓸 비\r\n比\t견줄 비\r\n非\t아닐 비\r\n肥\t살찔 비\r\n備\t갖출 비\r\n批\t비평할 비\r\n秘\t숨길 비\r\n泌\t분비할 비 | 스며흐를 필\r\n卑\t낮을 비\r\n碑\t비석 비\r\n妃\t왕비 비\r\n沸\t끓을 비 | 용솟음할 불\r\n扉\t사립문 비\r\n貧\t가난할 빈\r\n浜\t물가 빈\r\n賓\t손 빈\r\n頻\t자주 빈\r\n氷\t얼음 빙\r\n四\t넉 사\r\n糸\t실 사\r\n寺\t절 사\r\n社\t모일 사\r\n思\t생각 사\r\n写\t베낄 사\r\n仕\t섬길 사\r\n死\t죽을 사\r\n事\t일 사\r\n使\t하여금/부릴 사\r\n士\t선비 사\r\n史\t사기 사\r\n司\t맡을 사\r\n辞\t말씀 사\r\n似\t닮을 사\r\n舎\t집 사\r\n査\t조사할 사\r\n師\t스승 사\r\n飼\t기를 사\r\n謝\t사례할 사\r\n私\t사사 사\r\n砂\t모래 사\r\n射\t쏠 사\r\n捨\t버릴 사\r\n詞\t말/글 사\r\n伺\t엿볼 사\r\n斜\t비낄 사\r\n邪\t간사할 사\r\n卸\t풀/도매할 사\r\n赦\t용서할 사\r\n唆\t부추길 사\r\n蛇\t긴뱀 사\r\n詐\t속일 사\r\n嗣\t이을 사\r\n賜\t줄 사\r\n沙\t모래 사\r\n削\t깎을 삭\r\n山\t메 산\r\n算\t셈 산\r\n産\t낳을 산\r\n散\t흩을 산\r\n酸\t실 산\r\n傘\t우산 산\r\n殺\t죽일 살 | 감할/빠를 쇄\r\n三\t석 삼\r\n森\t수풀 삼\r\n杉\t삼나무 삼\r\n挿\t꽂을 삽\r\n渋\t떫을 삽\r\n上\t윗 상\r\n相\t서로 상\r\n商\t장사 상\r\n想\t생각 상\r\n箱\t상자 상\r\n象\t코끼리 상\r\n賞\t상줄 상\r\n状\t형상 상 | 문서 장\r\n常\t떳떳할 상\r\n像\t모양 상\r\n傷\t다칠 상\r\n床\t상 상\r\n峠\t고개 상\r\n詳\t자세할 상\r\n桑\t뽕나무 상\r\n尚\t오히려 상\r\n祥\t상서 상\r\n喪\t잃을 상\r\n償\t갚을 상\r\n霜\t서리 상\r\n爽\t시원할 상\r\n璽\t옥새 새\r\n色\t빛 색\r\n索\t찾을 색 | 노 삭\r\n塞\t막힐 색 | 변방 새\r\n生\t날 생\r\n牲\t희생 생\r\n西\t서녘 서\r\n書\t글 서\r\n暑\t더울 서\r\n序\t차례 서\r\n署\t마을 서\r\n徐\t천천할 서\r\n婿\t사위 서\r\n叙\t펼 서\r\n逝\t갈 서\r\n庶\t여러 서\r\n緒\t실마리 서\r\n誓\t맹세할 서\r\n夕\t저녁 석\r\n石\t돌 석\r\n昔\t예 석\r\n席\t자리 석\r\n釈\t풀 석\r\n惜\t아낄 석\r\n析\t쪼갤 석\r\n潟\t개펄 석\r\n先\t먼저 선\r\n船\t배 선\r\n線\t줄 선\r\n選\t가릴 선\r\n宣\t베풀 선\r\n善\t착할 선\r\n扇\t부채 선\r\n鮮\t고울 선\r\n繕\t기울 선\r\n仙\t신선 선\r\n旋\t돌 선\r\n禅\t선 선\r\n羨\t부러워할 선 | 무덤길 연\r\n腺\t샘 선\r\n膳\t선물/반찬 선\r\n雪\t눈 설\r\n説\t말씀 설 | 달랠 세\r\n舌\t혀 설\r\n設\t베풀 설\r\n繊\t가늘 섬\r\n摂\t다스릴/잡을 섭\r\n渉\t건널 섭\r\n声\t소리 성\r\n星\t별 성\r\n成\t이룰 성\r\n省\t살필 성 | 덜 생\r\n性\t성품 성\r\n城\t재 성\r\n盛\t성할 성\r\n聖\t성인 성\r\n誠\t정성 성\r\n姓\t성 성\r\n醒\t깰 성\r\n細\t가늘 세\r\n世\t인간 세\r\n税\t세금 세\r\n勢\t형세 세\r\n洗\t씻을 세\r\n歳\t해 세\r\n小\t작을 소\r\n少\t적을 소\r\n所\t바 소\r\n昭\t밝을 소\r\n消\t사라질 소\r\n笑\t웃음 소\r\n巣\t새집 소\r\n焼\t사를 소\r\n素\t본디/흴 소\r\n召\t부를 소\r\n沼\t못 소\r\n咲\t웃을/필 소\r\n紹\t이을 소\r\n訴\t호소할 소\r\n騒\t떠들 소\r\n掃\t쓸 소\r\n宵\t밤 소\r\n疎\t성길 소\r\n塑\t흙빚을 소\r\n遡\t거스를 소\r\n速\t빠를 속\r\n束\t묶을 속\r\n続\t이을 속\r\n属\t붙일 속\r\n俗\t풍속 속\r\n孫\t손자 손\r\n損\t덜 손\r\n遜\t겸손할 손\r\n送\t보낼 송\r\n松\t소나무 송\r\n訟\t송사할 송\r\n刷\t인쇄할 쇄\r\n鎖\t쇠사슬 쇄\r\n砕\t부술 쇄\r\n衰\t쇠할 쇠\r\n水\t물 수\r\n手\t손 수\r\n首\t머리 수\r\n数\t셈 수\r\n守\t지킬 수\r\n受\t받을 수\r\n修\t닦을 수\r\n授\t줄 수\r\n輸\t보낼 수\r\n収\t거둘 수\r\n垂\t드리울 수\r\n樹\t나무 수\r\n秀\t빼어날 수\r\n狩\t사냥할 수\r\n需\t쓰일/쓸 수\r\n獣\t짐승 수\r\n寿\t목숨 수\r\n粋\t순수할 수\r\n殊\t다를 수\r\n遂\t드디어 수\r\n随\t따를 수\r\n穂\t이삭 수\r\n髄\t뼛골 수\r\n囚\t가둘 수\r\n帥\t장수 수\r\n捜\t찾을 수\r\n愁\t근심 수\r\n睡\t졸음 수\r\n酬\t갚을 수\r\n袖\t소매 수\r\n羞\t부끄러울 수\r\n痩\t여윌 수\r\n須\t모름지기 수\r\n誰\t누구 수\r\n宿\t잘 숙 | 별자리 수\r\n熟\t익을 숙\r\n叔\t아재비 숙\r\n粛\t엄숙할 숙\r\n淑\t맑을 숙\r\n塾\t글방 숙\r\n順\t순할 순\r\n純\t순수할 순\r\n旬\t열흘 순\r\n巡\t돌/순행할 순\r\n盾\t방패 순\r\n瞬\t눈깜짝일 순\r\n唇\t입술 순\r\n殉\t따라죽을 순\r\n循\t돌 순\r\n述\t펼 술\r\n術\t재주 술\r\n崇\t높을 숭\r\n膝\t무릎 슬\r\n拾\t주울 습 | 열 십\r\n習\t익힐 습\r\n襲\t엄습할 습\r\n湿\t젖을 습\r\n乗\t탈 승\r\n勝\t이길 승\r\n承\t이을 승\r\n僧\t중 승\r\n昇\t오를 승\r\n升\t되 승\r\n縄\t노끈 승\r\n市\t저자 시\r\n矢\t화살 시\r\n時\t때 시\r\n始\t비로소 시\r\n詩\t시 시\r\n試\t시험 시\r\n示\t보일 시\r\n視\t볼 시\r\n是\t이/옳을 시\r\n侍\t모실 시\r\n施\t베풀 시\r\n柿\t감 시\r\n食\t밥/먹을 식\r\n式\t법 식\r\n息\t쉴 식\r\n植\t심을 식\r\n識\t알 식\r\n殖\t불릴 식\r\n飾\t꾸밀 식\r\n拭\t씻을 식\r\n新\t새 신\r\n申\t납 신\r\n身\t몸 신\r\n神\t귀신 신\r\n臣\t신하 신\r\n信\t믿을 신\r\n慎\t삼갈 신\r\n薪\t섶 신\r\n伸\t펼 신\r\n辛\t매울 신\r\n迅\t빠를 신\r\n娠\t아이밸 신\r\n紳\t띠 신\r\n腎\t콩팥 신\r\n室\t집 실\r\n実\t열매 실\r\n失\t잃을 실\r\n心\t마음 심\r\n深\t깊을 심\r\n尋\t찾을 심\r\n審\t살필 심\r\n甚\t심할 심\r\n芯\t골풀 심\r\n十\t열 십\r\n双\t두/쌍 쌍\r\n氏\t각시/성씨 씨\r\n児\t아이 아\r\n芽\t싹 아\r\n我\t나 아\r\n雅\t맑을 아\r\n餓\t주릴 아\r\n亜\t버금 아\r\n牙\t어금니 아\r\n悪\t악할 악 | 미워할 오\r\n握\t쥘 악\r\n岳\t큰산 악\r\n顎\t턱 악\r\n顔\t낯 안\r\n安\t편안 안\r\n岸\t언덕 안\r\n案\t책상 안\r\n眼\t눈 안\r\n謁\t뵐 알\r\n岩\t바위 암\r\n暗\t어두울 암\r\n闇\t숨을 암\r\n圧\t누를 압\r\n押\t누를 압\r\n央\t가운데 앙\r\n仰\t우러를 앙\r\n愛\t사랑 애\r\n哀\t슬플 애\r\n涯\t물가 애\r\n挨\t인사할 애\r\n崖\t언덕 애\r\n曖\t희미할 애\r\n液\t진 액\r\n額\t이마 액\r\n厄\t액 액\r\n桜\t앵두 앵\r\n夜\t밤 야\r\n野\t들 야\r\n冶\t풀무 야\r\n弱\t약할 약\r\n薬\t약 약\r\n約\t맺을 약\r\n若\t같을 약 | 반야 야\r\n躍\t뛸 약\r\n羊\t양 양\r\n洋\t큰바다 양\r\n陽\t볕 양\r\n様\t모양 양\r\n養\t기를 양\r\n揚\t날릴 양\r\n嬢\t아가씨 양\r\n譲\t사양할 양\r\n壌\t흙덩이 양\r\n醸\t술빚을 양\r\n瘍\t헐 양\r\n魚\t고기/물고기 어\r\n語\t말씀 어\r\n漁\t고기잡을 어\r\n御\t거느릴 어\r\n億\t억 억\r\n憶\t생각할 억\r\n抑\t누를 억\r\n臆\t가슴 억\r\n言\t말씀 언\r\n厳\t엄할 엄\r\n俺\t나 엄\r\n業\t업 업\r\n余\t나 여\r\n与\t더불/줄 여\r\n如\t같을 여\r\n役\t부릴 역\r\n駅\t역 역\r\n易\t바꿀 역 | 쉬울 이\r\n逆\t거스릴 역\r\n訳\t번역할 역\r\n域\t지경 역\r\n疫\t전염병 역\r\n研\t갈 연\r\n然\t그럴 연\r\n演\t펼 연\r\n燃\t탈 연\r\n沿\t물따라갈/따를 연\r\n延\t늘일 연\r\n鉛\t납 연\r\n煙\t연기 연\r\n縁\t인연 연\r\n宴\t잔치 연\r\n軟\t연할 연\r\n熱\t더울 열\r\n悦\t기쁠 열\r\n閲\t볼 열\r\n塩\t소금 염\r\n染\t물들 염\r\n炎\t불꽃 염\r\n艶\t고울 염\r\n葉\t잎 엽\r\n泳\t헤엄칠 영\r\n英\t꽃부리 영\r\n栄\t영화 영\r\n永\t길 영\r\n営\t경영할 영\r\n映\t비칠 영\r\n迎\t맞을 영\r\n影\t그림자 영\r\n詠\t읊을 영\r\n予\t미리 예\r\n芸\t재주 예\r\n預\t맡길/미리 예\r\n刈\t벨 예\r\n誉\t기릴/명예 예\r\n鋭\t날카로울 예\r\n詣\t이를 예\r\n五\t다섯 오\r\n午\t낮 오\r\n誤\t그르칠 오\r\n汚\t더러울 오\r\n奥\t깊을 오\r\n娯\t즐길 오\r\n悟\t깨달을 오\r\n呉\t성 오\r\n傲\t거만할 오\r\n玉\t구슬 옥\r\n屋\t집 옥\r\n獄\t옥 옥\r\n沃\t기름질 옥\r\n温\t따뜻할 온\r\n穏\t편안할 온\r\n擁\t낄 옹\r\n翁\t늙은이 옹\r\n渦\t소용돌이 와\r\n瓦\t기와 와\r\n完\t완전할 완\r\n腕\t팔뚝 완\r\n緩\t느릴 완\r\n頑\t완고할 완\r\n宛\t완연할 완\r\n玩\t즐길 완\r\n王\t임금 왕\r\n往\t갈 왕\r\n旺\t왕성할 왕\r\n外\t바깥 외\r\n畏\t두려워할 외\r\n曜\t빛날 요\r\n要\t요긴할 요\r\n腰\t허리 요\r\n謡\t노래 요\r\n揺\t흔들 요\r\n凹\t오목할 요\r\n窯\t기와가마 요\r\n妖\t요사할 요\r\n浴\t목욕할 욕\r\n欲\t하고자할 욕\r\n辱\t욕될 욕\r\n用\t쓸 용\r\n勇\t날랠 용\r\n容\t얼굴 용\r\n溶\t녹을 용\r\n踊\t뛸 용\r\n冗\t한산할/번잡할 용\r\n庸\t떳떳할 용\r\n湧\t물 솟을 용\r\n右\t오를/오른 우\r\n雨\t비 우\r\n友\t벗 우\r\n牛\t소 우\r\n羽\t깃 우\r\n宇\t집 우\r\n郵\t우편 우\r\n優\t넉넉할 우\r\n芋\t토란 우\r\n又\t또 우\r\n偶\t짝 우\r\n遇\t만날 우\r\n愚\t어리석을 우\r\n憂\t근심 우\r\n隅\t모퉁이 우\r\n虞\t염려할/나라이름 우\r\n雲\t구름 운\r\n運\t옮길 운\r\n韻\t운 운\r\n鬱\t답답할 울\r\n雄\t수컷 웅\r\n熊\t곰 웅\r\n円\t둥글 원\r\n元\t으뜸 원\r\n原\t언덕 원\r\n園\t동산 원\r\n遠\t멀 원\r\n院\t집 원\r\n員\t인원 원\r\n願\t원할 원\r\n源\t근원 원\r\n援\t도울 원\r\n垣\t담 원\r\n猿\t원숭이 원\r\n怨\t원망할 원\r\n媛\t계집 원\r\n月\t달 월\r\n越\t넘을 월\r\n委\t맡길 위\r\n囲\t에워쌀 위\r\n位\t자리 위\r\n胃\t밥통 위\r\n衛\t지킬 위\r\n危\t위태할 위\r\n為\t하/할 위\r\n威\t위엄 위\r\n偉\t클 위\r\n違\t어긋날 위\r\n緯\t씨 위\r\n慰\t위로할 위\r\n偽\t거짓 위\r\n尉\t벼슬 위\r\n萎\t시들 위\r\n由\t말미암을 유\r\n有\t있을 유\r\n油\t기름 유\r\n遊\t놀 유\r\n幼\t어릴 유\r\n乳\t젖 유\r\n遺\t남길 유\r\n柔\t부드러울 유\r\n維\t벼리 유\r\n幽\t그윽할 유\r\n誘\t꾈 유\r\n悠\t멀 유\r\n唯\t오직 유\r\n愉\t즐거울 유\r\n猶\t오히려 유\r\n裕\t넉넉할 유\r\n諭\t타이를 유\r\n儒\t선비 유\r\n癒\t병나을 유\r\n喩\t깨우칠 유\r\n肉\t고기 육\r\n育\t기를 육\r\n潤\t불을 윤\r\n融\t녹을 융\r\n銀\t은 은\r\n恩\t은혜 은\r\n隠\t숨을 은\r\n乙\t새 을\r\n音\t소리 음\r\n飲\t마실 음\r\n陰\t그늘 음\r\n吟\t읊을 음\r\n淫\t음란할 음\r\n泣\t울 읍\r\n応\t응할 응\r\n凝\t엉길 응\r\n医\t의원 의\r\n意\t뜻 의\r\n衣\t옷 의\r\n議\t의논할 의\r\n義\t옳을 의\r\n疑\t의심할 의\r\n依\t의지할 의\r\n儀\t거동 의\r\n宜\t마땅 의\r\n擬\t비길 의\r\n椅\t의자 의\r\n二\t두 이\r\n耳\t귀 이\r\n以\t써 이\r\n移\t옮길 이\r\n異\t다를 이\r\n弐\t두/갖은두 이\r\n餌\t미끼 이\r\n益\t더할 익\r\n翌\t다음날 익\r\n翼\t날개 익\r\n人\t사람 인\r\n引\t끌 인\r\n印\t도장 인\r\n因\t인할 인\r\n仁\t어질 인\r\n認\t알 인\r\n刃\t칼날 인\r\n忍\t참을 인\r\n姻\t혼인 인\r\n咽\t목구멍 인 | 목멜 열 | 삼킬 연\r\n一\t한 일\r\n日\t날 일\r\n壱\t한/갖은한 일\r\n逸\t편안할 일\r\n任\t맡길 임\r\n賃\t품삯 임\r\n妊\t아이밸 임\r\n入\t들 입\r\n込\t담을/채울/찰 입\r\n剰\t남을 잉\r\n子\t아들 자\r\n字\t글자 자\r\n自\t스스로 자\r\n姉\t손윗누이 자\r\n者\t놈 자\r\n資\t재물 자\r\n姿\t모양 자\r\n磁\t자석 자\r\n刺\t찌를 자 | 찌를 척\r\n煮\t삶을 자\r\n紫\t자줏빛 자\r\n雌\t암컷 자\r\n慈\t사랑 자\r\n諮\t물을 자\r\n滋\t불을 자\r\n茨\t남가새 자\r\n恣\t마음대로/방자할 자\r\n作\t지을 작\r\n昨\t어제 작\r\n酌\t술부을/잔질할 작\r\n爵\t벼슬 작\r\n残\t남을 잔\r\n桟\t사다리 잔\r\n蚕\t누에 잠\r\n潜\t잠길 잠\r\n暫\t잠깐 잠\r\n雑\t섞일 잡\r\n長\t긴 장\r\n場\t마당 장\r\n章\t글 장\r\n帳\t장막 장\r\n腸\t창자 장\r\n張\t베풀 장\r\n将\t장수 장\r\n装\t꾸밀 장\r\n障\t막을 장\r\n蔵\t감출 장\r\n臓\t오장 장\r\n丈\t어른 장\r\n匠\t장인 장\r\n葬\t장사지낼 장\r\n掌\t손바닥 장\r\n壮\t장할 장\r\n荘\t씩씩할 장\r\n粧\t단장할 장\r\n奨\t장려할 장\r\n才\t재주 재\r\n材\t재목 재\r\n在\t있을 재\r\n再\t두 재\r\n災\t재앙 재\r\n財\t재물 재\r\n裁\t옷마를 재\r\n載\t실을 재\r\n栽\t심을 재\r\n宰\t재상 재\r\n斎\t재계할/집 재\r\n争\t다툴 쟁\r\n低\t낮을 저\r\n底\t밑 저\r\n貯\t쌓을 저\r\n著\t나타날 저\r\n抵\t막을 저\r\n邸\t집 저\r\n狙\t원숭이/엿볼 저\r\n箸\t젓가락 저\r\n赤\t붉을 적\r\n笛\t피리 적\r\n的\t과녁 적\r\n積\t쌓을 적\r\n適\t맞을 적\r\n敵\t대적할 적\r\n績\t길쌈 적\r\n寂\t고요할 적\r\n跡\t발자취 적\r\n摘\t딸 적\r\n滴\t물방울 적\r\n賊\t도둑 적\r\n籍\t문서 적\r\n嫡\t정실 적\r\n田\t밭 전\r\n前\t앞 전\r\n電\t번개 전\r\n全\t온전 전\r\n畑\t화전 전\r\n転\t구를 전\r\n伝\t전할 전\r\n典\t법 전\r\n戦\t싸움 전\r\n銭\t돈 전\r\n専\t오로지 전\r\n展\t펼 전\r\n殿\t전각 전\r\n栓\t마개 전\r\n詮\t갖출 전\r\n煎\t달일 전\r\n塡 \t메울 전\r\n箋\t기록할 전\r\n切\t끊을 절 | 온통 체\r\n折\t꺾을 절\r\n節\t마디 절\r\n絶\t끊을 절\r\n窃\t훔칠 절\r\n店\t가게 점\r\n点\t점 점\r\n占\t점령할 점/점칠 점\r\n粘\t붙을 점\r\n漸\t점점 점\r\n接\t이을 접\r\n正\t바를 정\r\n町\t밭두둑 정\r\n丁\t고무래/장정 정\r\n定\t정할 정\r\n庭\t뜰 정\r\n整\t가지런할 정\r\n停\t머무를 정\r\n静\t고요할 정\r\n政\t정사 정\r\n情\t뜻 정\r\n程\t한도/길 정\r\n精\t정할 정\r\n頂\t정수리 정\r\n井\t우물 정\r\n征\t칠 정\r\n訂\t바로잡을 정\r\n晶\t맑을 정\r\n錠\t덩이 정\r\n呈\t드릴 정\r\n廷\t조정 정\r\n浄\t깨끗할 정\r\n亭\t정자 정\r\n貞\t곧을 정\r\n偵\t염탐할 정\r\n艇\t배 정\r\n丼\t덮밥 정\r\n弟\t아우 제\r\n第\t차례 제\r\n祭\t제사 제\r\n題\t제목 제\r\n制\t절제할 제\r\n提\t끌 제\r\n製\t지을 제\r\n際\t즈음/가 제\r\n除\t덜 제\r\n済\t건널 제\r\n諸\t모두 제\r\n剤\t약제 제\r\n堤\t둑 제\r\n帝\t임금 제\r\n斉\t가지런할 제\r\n早\t이를 조\r\n鳥\t새 조\r\n組\t짤 조\r\n朝\t아침 조\r\n助\t도울 조\r\n調\t고를 조\r\n兆\t억조 조\r\n照\t비칠 조\r\n条\t가지 조\r\n祖\t할아비 조\r\n造\t지을 조\r\n潮\t밀물/조수 조\r\n操\t잡을 조\r\n燥\t마를 조\r\n繰\t고치켤 조\r\n阻\t막힐 조\r\n彫\t새길 조\r\n措\t둘 조\r\n粗\t거칠 조\r\n遭\t만날 조\r\n弔\t조상할 조\r\n租\t조세 조\r\n釣\t낚을/낚시 조\r\n曹\t무리 조\r\n眺\t볼 조\r\n詔\t조서 조\r\n槽\t구유 조\r\n藻\t마름 조\r\n爪\t손톱 조\r\n嘲\t비웃을 조\r\n足\t발 족\r\n族\t겨레 족\r\n存\t있을 존\r\n尊\t높을 존\r\n卒\t마칠 졸\r\n拙\t졸할 졸\r\n終\t마칠 종\r\n種\t씨 종\r\n宗\t마루 종\r\n従\t좇을 종\r\n縦\t세로 종\r\n鐘\t쇠북 종\r\n腫\t종기 종\r\n踪\t자취 종\r\n左\t왼 좌\r\n座\t자리 좌\r\n佐\t도울 좌\r\n挫\t꺾을 좌\r\n罪\t허물 죄\r\n走\t달릴 주\r\n昼\t낮 주\r\n週\t주일 주\r\n主\t임금/주인 주\r\n州\t고을 주\r\n住\t살 주\r\n注\t부을 주\r\n柱\t기둥 주\r\n酒\t술 주\r\n周\t두루 주\r\n宙\t집 주\r\n奏\t아뢸 주\r\n株\t그루 주\r\n朱\t붉을 주\r\n舟\t배 주\r\n鋳\t쇠불릴 주\r\n駐\t머무를 주\r\n珠\t구슬 주\r\n肘\t팔꿈치 주\r\n呪\t빌 주\r\n酎\t진한술 주\r\n竹\t대 죽\r\n準\t준할 준\r\n遵\t좇을 준\r\n俊\t준걸 준\r\n准\t비준 준\r\n中\t가운데 중\r\n重\t무거울 중\r\n仲\t버금 중\r\n衆\t무리 중\r\n即\t곧 즉\r\n汁\t즙 즙\r\n証\t증거 증\r\n増\t더할 증\r\n蒸\t찔 증\r\n贈\t줄 증\r\n憎\t미울 증\r\n症\t증세 증\r\n曽\t일찍 증\r\n止\t그칠 지\r\n地\t따 지\r\n池\t못 지\r\n知\t알 지\r\n紙\t종이 지\r\n指\t가리킬 지\r\n持\t가질 지\r\n支\t지탱할 지\r\n志\t뜻 지\r\n枝\t가지 지\r\n至\t이를 지\r\n誌\t기록할 지\r\n芝\t지초 지\r\n旨\t뜻 지\r\n脂\t기름 지\r\n遅\t더딜/늦을 지\r\n祉\t복 지\r\n肢\t팔다리 지\r\n漬\t적실 지\r\n摯\t잡을 지\r\n直\t곧을 직\r\n職\t직분 직\r\n織\t짤 직\r\n真\t참 진\r\n進\t나아갈 진\r\n尽\t다할 진\r\n珍\t보배 진\r\n陣\t진칠 진\r\n振\t떨칠 진\r\n震\t우레 진\r\n陳\t베풀 진/묵을 진\r\n鎮\t진압할 진\r\n津\t나루 진\r\n診\t진찰할 진\r\n質\t바탕 질\r\n疾\t병 질\r\n窒\t막힐 질\r\n迭\t갈마들 질\r\n秩\t차례 질\r\n叱\t꾸짖을 질\r\n嫉\t미워할 질\r\n朕\t나 짐\r\n集\t모을 집\r\n執\t잡을 집\r\n徴\t부를 징\r\n澄\t맑을 징\r\n懲\t징계할 징\r\n次\t버금 차\r\n差\t다를 차\r\n借\t빌/빌릴 차\r\n且\t또 차\r\n遮\t가릴 차\r\n着\t붙을 착\r\n搾\t짤 착\r\n錯\t어긋날 착\r\n捉\t잡을 착\r\n賛\t도울 찬\r\n札\t편지 찰\r\n察\t살필 찰\r\n擦\t문지를 찰\r\n刹\t절 찰\r\n拶\t인사할 찰\r\n参\t참여할 참\r\n惨\t참혹할 참\r\n斬\t벨 참\r\n倉\t곳집 창\r\n唱\t부를 창\r\n窓\t창 창\r\n創\t비롯할 창\r\n彰\t드러날 창\r\n菜\t나물 채\r\n採\t캘 채\r\n彩\t채색 채\r\n債\t빚 채\r\n采\t풍채 채\r\n責\t꾸짖을 책\r\n冊\t책 책\r\n策\t꾀 책\r\n柵\t울타리 책\r\n妻\t아내 처\r\n処\t곳 처\r\n凄\t쓸쓸할 처\r\n尺\t자 척\r\n拓\t넓힐 척\r\n斥\t물리칠 척\r\n隻\t외짝 척\r\n捗\t진척될 척\r\n脊\t등마루 척\r\n戚\t친척 척\r\n千\t일천 천\r\n川\t내 천\r\n天\t하늘 천\r\n浅\t얕을 천\r\n泉\t샘 천\r\n践\t밟을 천\r\n遷\t옮길 천\r\n薦\t천거할 천\r\n鉄\t쇠 철\r\n哲\t밝을 철\r\n凸\t볼록할 철\r\n徹\t통할 철\r\n撤\t거둘 철\r\n添\t더할 첨\r\n畳\t거듭 첩\r\n貼\t붙일 첩\r\n青\t푸를 청\r\n晴\t갤 청\r\n清\t맑을 청\r\n庁\t관청 청\r\n請\t청할 청\r\n聴\t들을 청\r\n体\t몸 체\r\n替\t바꿀 체\r\n逮\t잡을 체\r\n滞\t막힐 체\r\n締\t맺을 체\r\n逓\t갈릴 체\r\n諦\t살필 체\r\n草\t풀 초\r\n秒\t분초 초\r\n初\t처음 초\r\n招\t부를 초\r\n超\t뛰어넘을 초\r\n焦\t탈 초\r\n礎\t주춧돌 초\r\n肖\t닮을/같을 초\r\n抄\t뽑을 초\r\n硝\t화약 초\r\n酢\t초 초 | 술권할 작\r\n礁\t암초 초\r\n触\t닿을 촉\r\n促\t재촉할 촉\r\n嘱\t부탁할 촉\r\n村\t마을 촌\r\n寸\t마디 촌\r\n総\t다 총\r\n塚\t무덤 총\r\n銃\t총 총\r\n撮\t모을/사진찍을 촬\r\n最\t가장 최\r\n催\t재촉할 최\r\n秋\t가을 추\r\n追\t쫓을/따를 추\r\n推\t밀 추\r\n抽\t뽑을 추\r\n墜\t떨어질 추\r\n枢\t지도리 추\r\n醜\t추할 추\r\n椎\t쇠몽치/등골 추\r\n祝\t빌 축\r\n築\t쌓을 축\r\n縮\t줄일 축\r\n蓄\t모을 축\r\n畜\t짐승 축\r\n軸\t굴대 축\r\n逐\t쫓을 축\r\n蹴\t찰 축\r\n春\t봄 춘\r\n出\t날 출\r\n虫\t벌레 충\r\n忠\t충성 충\r\n沖\t화할 충\r\n衝\t찌를 충\r\n充\t채울 충\r\n衷\t속마음 충\r\n取\t가질 취\r\n就\t나아갈 취\r\n吹\t불 취\r\n趣\t뜻 취\r\n炊\t불땔 취\r\n酔\t취할 취\r\n臭\t냄새 취\r\n側\t곁 측\r\n測\t헤아릴 측\r\n層\t층 층\r\n歯\t이 치\r\n治\t다스릴 치\r\n置\t둘 치\r\n値\t값 치\r\n致\t이를 치\r\n恥\t부끄러울 치\r\n稚\t어릴 치\r\n痴\t어리석을 치\r\n緻\t빽빽할 치\r\n則\t법칙 칙\r\n勅\t칙서 칙\r\n親\t친할 친\r\n七\t일곱 칠\r\n漆\t옻 칠\r\n針\t바늘 침\r\n沈\t잠길 침 | 성 심\r\n侵\t침노할 침\r\n浸\t잠길 침\r\n寝\t잘 침\r\n枕\t베개 침\r\n称\t일컬을 칭\r\n快\t쾌할 쾌\r\n他\t다를 타\r\n打\t칠 타\r\n妥\t온당할 타\r\n堕\t떨어질 타\r\n惰\t게으를 타\r\n駄\t짐실을 타\r\n唾\t침 타\r\n濁\t흐릴 탁\r\n卓\t높을 탁\r\n託\t부탁할 탁\r\n濯\t씻을 탁\r\n炭\t숯 탄\r\n誕\t낳을/거짓 탄\r\n弾\t탄알 탄\r\n嘆\t탄식할 탄\r\n綻\t터질 탄\r\n脱\t벗을 탈\r\n奪\t빼앗을 탈\r\n探\t찾을 탐\r\n貪\t탐낼 탐\r\n塔\t탑 탑\r\n搭\t탈 탑\r\n湯\t끓을 탕\r\n太\t클 태\r\n態\t모습 태\r\n怠\t게으를 태\r\n胎\t아이밸 태\r\n泰\t클 태\r\n汰\t일 태\r\n宅\t집 택\r\n沢\t못 택\r\n択\t가릴 택\r\n土\t흙 토\r\n討\t칠 토\r\n吐\t토할 토\r\n通\t통할 통\r\n統\t거느릴 통\r\n痛\t아플 통\r\n筒\t통 통\r\n退\t물러날 퇴\r\n堆\t쌓을 퇴\r\n投\t던질 투\r\n透\t사무칠 투\r\n闘\t싸움 투\r\n妬\t샘낼 투\r\n特\t특별할 특\r\n波\t물결 파\r\n破\t깨뜨릴 파\r\n派\t갈래 파\r\n婆\t할미 파\r\n把\t잡을 파\r\n罷\t마칠 파\r\n坂\t언덕 판\r\n板\t널 판\r\n判\t판단할 판\r\n版\t판목 판\r\n販\t팔 판\r\n阪\t언덕 판\r\n八\t여덟 팔\r\n貝\t조개 패\r\n敗\t패할 패\r\n覇\t으뜸 패\r\n唄\t염불소리 패\r\n膨\t불을 팽\r\n便\t편할 편 | 똥오줌 변\r\n編\t엮을 편\r\n片\t조각 편\r\n偏\t치우칠 편\r\n遍\t두루 편\r\n平\t평평할 평\r\n評\t평할 평\r\n坪\t들 평\r\n肺\t허파 폐\r\n陛\t대궐섬돌 폐\r\n閉\t닫을 폐\r\n廃\t폐할/버릴 폐\r\n幣\t화폐 폐\r\n弊\t폐단/해질 폐\r\n蔽\t덮을 폐\r\n包\t쌀 포\r\n布\t베/펼 포 | 보시 보\r\n抱\t안을 포\r\n怖\t두려워할 포\r\n砲\t대포 포\r\n捕\t잡을 포\r\n舗\t펼/가게 포\r\n胞\t세포 포\r\n飽\t배부를 포\r\n泡\t거품 포\r\n浦\t개 포\r\n褒\t기릴 포\r\n哺\t먹일 포\r\n暴\t사나울 폭 | 모질 포\r\n幅\t폭 폭\r\n爆\t불터질 폭\r\n表\t겉 표\r\n票\t표 표\r\n標\t표할 표\r\n俵\t나누어줄 표\r\n漂\t떠다닐 표\r\n品\t물건 품\r\n風\t바람 풍\r\n豊\t풍년 풍\r\n皮\t가죽 피\r\n彼\t저 피\r\n疲\t피곤할 피\r\n被\t입을 피\r\n避\t피할 피\r\n披\t헤칠 피\r\n筆\t붓 필\r\n必\t반드시 필\r\n匹\t짝 필\r\n乏\t모자랄 핍\r\n下\t아래 하\r\n何\t어찌 하\r\n夏\t여름 하\r\n荷\t멜 하\r\n河\t물 하\r\n賀\t하례할 하\r\n学\t배울 학\r\n虐\t모질 학\r\n鶴\t학 학\r\n寒\t찰 한\r\n漢\t한수/한나라 한\r\n限\t한할 한\r\n汗\t땀 한\r\n恨\t한 한\r\n閑\t한가할 한\r\n韓\t한국/나라 한\r\n割\t벨 할\r\n轄\t다스릴 할\r\n含\t머금을 함\r\n陥\t빠질 함\r\n艦\t큰 배 함\r\n合\t합할 합\r\n港\t항구 항\r\n航\t배 항\r\n抗\t겨룰 항\r\n恒\t항상 항\r\n項\t항목 항\r\n桁\t차꼬 항 | 도리 형\r\n海\t바다 해\r\n害\t해할 해\r\n解\t풀 해\r\n該\t갖출/마땅 해\r\n楷\t본보기 해\r\n諧\t화할 해\r\n骸\t뼈 해\r\n劾\t꾸짖을 핵\r\n核\t씨 핵\r\n行\t다닐 행 | 항렬 항\r\n幸\t다행 행\r\n向\t향할 향\r\n郷\t시골 향\r\n香\t향기 향\r\n響\t울릴 향\r\n享\t누릴 향\r\n許\t허락할 허\r\n虚\t빌 허\r\n憲\t법 헌\r\n軒\t집 헌\r\n献\t드릴 헌\r\n験\t시험 험\r\n険\t험할 험\r\n革\t가죽 혁\r\n嚇\t성낼 혁\r\n県\t고을 현\r\n現\t나타날 현\r\n玄\t검을 현\r\n賢\t어질 현\r\n弦\t시위 현\r\n顕\t나타날 현\r\n懸\t달 현\r\n舷\t뱃전 현\r\n血\t피 혈\r\n穴\t굴 혈\r\n嫌\t싫어할 혐\r\n協\t화할 협\r\n狭\t좁을 협\r\n峡\t골짜기 협\r\n脅\t위협할 협\r\n挟\t낄 협\r\n脇\t갈비 협\r\n頰 \t뺨 협\r\n兄\t형 형\r\n形\t모양 형\r\n型\t모형 형\r\n刑\t형벌 형\r\n蛍\t반딧불 형\r\n衡\t저울대 형\r\n恵\t은혜 혜\r\n戸\t집 호\r\n号\t이름 호\r\n湖\t호수 호\r\n好\t좋을 호\r\n護\t도울 호\r\n呼\t부를 호\r\n互\t서로 호\r\n豪\t호걸 호\r\n弧\t활 호\r\n虎\t범 호\r\n惑\t미혹할 혹\r\n酷\t심할 혹\r\n混\t섞을 혼\r\n婚\t혼인할 혼\r\n魂\t넋 혼\r\n紅\t붉을 홍\r\n洪\t넓을 홍\r\n虹\t무지개 홍\r\n火\t불 화\r\n花\t꽃 화\r\n画\t그림 화 | 그을 획\r\n話\t말씀 화\r\n化\t될 화\r\n和\t화할 화\r\n貨\t재물 화\r\n華\t빛날 화\r\n枠\t테/테두리/틀 화\r\n禍\t재앙 화\r\n靴\t신 화\r\n確\t굳을 확\r\n拡\t넓힐 확\r\n穫\t거둘 확\r\n丸\t둥글 환\r\n歓\t기쁠 환\r\n環\t고리 환\r\n幻\t헛보일 환\r\n換\t바꿀 환\r\n喚\t부를 환\r\n患\t근심 환\r\n還\t돌아올 환\r\n活\t살 활\r\n滑\t미끄러울 활 | 익살스러울 골\r\n黄\t누를 황\r\n皇\t임금 황\r\n況\t상황 황\r\n荒\t거칠 황\r\n慌\t어리둥절할 황\r\n会\t모일 회\r\n回\t돌아올 회\r\n絵\t그림 회\r\n灰\t재 회\r\n悔\t뉘우칠 회\r\n賄\t재물/뇌물 회\r\n懐\t품을 회\r\n栃\t칠엽수 회\r\n獲\t얻을 획\r\n横\t가로 횡\r\n効\t본받을 효\r\n孝\t효도 효\r\n酵\t삭힐 효\r\n暁\t새벽 효\r\n後\t뒤 후\r\n候\t기후 후\r\n厚\t두터울 후\r\n后\t임금/왕후 후\r\n朽\t썩을 후\r\n侯\t제후 후\r\n喉\t목구멍 후\r\n嗅\t맡을 후\r\n訓\t가르칠 훈\r\n勲\t공 훈\r\n薫\t향풀 훈\r\n毀\t헐 훼\r\n揮\t휘두를 휘\r\n輝\t빛날 휘\r\n彙\t무리 휘\r\n休\t쉴 휴\r\n携\t이끌 휴\r\n胸\t가슴 흉\r\n凶\t흉할 흉\r\n黒\t검을 흑\r\n痕\t흔적 흔\r\n吸\t마실 흡\r\n興\t일 흥\r\n希\t바랄 희\r\n喜\t기쁠 희\r\n戯\t놀이 희\r\n姫\t계집 희\r\n犠\t희생 희\r\n詰\t꾸짖을 힐\r\n';
var $author$project$Hangul$userCSV = '降\t내릴 강\r\n郭\t둘레 곽\r\n見\t볼 견\r\n切\t끊을 절\r\n恋\t그리워할 련\r\n嘘\t거짓말 허\r\n沈\t잠길 침\r\n儚\t어두울 몽\r\n零\t떨어질 령\r\n掴\t칠 괵\r\n込\t담을 입\r\n為\t할 위\r\n釣\t낚을 조\r\n繋\t맬 계\r\n度\t법도 도\r\n覗\t엿볼 사\r\n乾\t마를 건\r\n頬\t뺨 협\r\n追\t쫓을 추\r\n咲\t필 소\r\n錆\t자세할 청\r\n噤\t입다물 금\r\n噛\t깨물 교\r\n遅\t늦을 지\r\n遥\t멀 요\r\n濡\t적실 유\r\n素\t본디 소\r\n行\t다닐 행\r\n車\t수레 차\r\n喰\t먹을 식\r\n叶\t맞을 협\r\n頃\t잠깐 경\r\n羨\t부러워할 선\r\n肚\t배 두\r\n憑\t기댈 빙\r\n癪\t가슴앓이 적\r\n雫\t물방울 하\r\n揃\t자를 전\r\n踠\t구부릴 원\r\n喋\t재재거릴 첩\r\n縋\t매달 추\r\n泪\t눈물 루\r\n冴\t얼 호\r\n嘩\t떠들썩할 화\r\n冗\t쓸데없을 용\r\n栞\t표할 간\r\n凪\t그칠 지\r\n辿\t천천히 걸을 천\r\n躰\t몸 체\r\n蕾\t꽃봉오리 뢰\r\n蝉\t매미 선\r\n掻\t긁을 소\r\n祓\t푸닥거리할 불\r\n聡\t귀 밝을 총\r\n';
var $author$project$Hangul$kanjiDic = function () {
	var list3 = A2(
		$elm$core$List$filterMap,
		function (s) {
			var _v4 = A2($elm$core$String$split, '\t', s);
			if ((_v4.b && _v4.b.b) && (!_v4.b.b.b)) {
				var a = _v4.a;
				var _v5 = _v4.b;
				var b = _v5.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, b));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		},
		A2(
			$elm$core$String$split,
			'\n',
			A3($elm$core$String$replace, '\u000D', '', $author$project$Hangul$userCSV)));
	var list2 = A2(
		$elm$core$List$filterMap,
		function (s) {
			var _v2 = A2($elm$core$String$split, '\t', s);
			if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
				var a = _v2.a;
				var _v3 = _v2.b;
				var b = _v3.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, b));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		},
		A2(
			$elm$core$String$split,
			'\n',
			A3($elm$core$String$replace, '\u000D', '', $author$project$Hangul$kanjiCSV)));
	var list1 = A2(
		$elm$core$List$filterMap,
		function (s) {
			var _v0 = A2($elm$core$String$split, '\t', s);
			if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
				var a = _v0.a;
				var _v1 = _v0.b;
				var b = _v1.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, b));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		},
		A2(
			$elm$core$String$split,
			'\n',
			A3($elm$core$String$replace, '\u000D', '', $author$project$Hangul$hanjaCSV)));
	return $elm$core$Dict$fromList(
		$elm$core$List$concat(
			_List_fromArray(
				[list1, list2, list3])));
}();
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $author$project$ListenPage$listenTimeValidateA = function (listenData) {
	return A2(
		$elm$core$String$append,
		'listenTimeValidateA',
		A2(
			$elm$core$String$join,
			'\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, c) {
						return _Utils_ap(
							$elm$core$String$fromInt(i),
							c.kor);
					}),
				A2(
					$elm$core$List$filter,
					function (c) {
						return !((c.endTime - c.startTime) > 100);
					},
					listenData.cardList))));
};
var $author$project$ListenPage$listenTimeValidateB = function (listenData) {
	var aux = F2(
		function (li, result) {
			aux:
			while (true) {
				if (li.b && li.b.b) {
					var a = li.a;
					var _v1 = li.b;
					var b = _v1.a;
					var tl = _v1.b;
					if (_Utils_cmp(b.startTime, a.endTime) < 0) {
						var $temp$li = A2($elm$core$List$cons, b, tl),
							$temp$result = A2($elm$core$List$cons, a, result);
						li = $temp$li;
						result = $temp$result;
						continue aux;
					} else {
						var $temp$li = A2($elm$core$List$cons, b, tl),
							$temp$result = result;
						li = $temp$li;
						result = $temp$result;
						continue aux;
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		$elm$core$String$append,
		'listenTimeValidateB',
		A2(
			$elm$core$String$join,
			'\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, c) {
						return _Utils_ap(
							$elm$core$String$fromInt(i),
							c.kor);
					}),
				$elm$core$List$reverse(
					A2(aux, listenData.cardList, _List_Nil)))));
};
var $author$project$ListenPage$listenTimeValidate = function (listenData) {
	return A2(
		$elm$core$String$join,
		'\n\n',
		_List_fromArray(
			[
				$author$project$ListenPage$listenTimeValidateA(listenData),
				$author$project$ListenPage$listenTimeValidateB(listenData)
			]));
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$file$File$name = _File_name;
var $author$project$GlobalPort$pauseYoutubeCmd = $author$project$GlobalPort$sendToPlayer(
	A2($author$project$GlobalPort$TaggedData, 'pauseYoutube', $elm$json$Json$Encode$null));
var $author$project$GlobalPort$playYoutubeCmd = $author$project$GlobalPort$sendToPlayer(
	A2($author$project$GlobalPort$TaggedData, 'playYoutube', $elm$json$Json$Encode$null));
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $elm$http$Http$post = function (r) {
	return $elm$http$Http$request(
		{body: r.body, expect: r.expect, headers: _List_Nil, method: 'POST', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$ListenPage$previousSub = function (model) {
	return A2($elm$core$Array$get, model.subIdx - 1, model.subArray);
};
var $author$project$ListenPage$rubyReplace = function (str) {
	return A3(
		$elm$core$String$replace,
		'</rt>',
		'}',
		A3(
			$elm$core$String$replace,
			'<rt>',
			'{',
			A3(
				$elm$core$String$replace,
				'</ruby>',
				'>',
				A3(
					$elm$core$String$replace,
					'<ruby>',
					'<',
					A3(
						$elm$core$String$replace,
						'<rp>)</rp>',
						'',
						A3(
							$elm$core$String$replace,
							'<rp>(</rp>',
							'',
							A3(
								$elm$core$String$replace,
								'2<ruby>人<rp>(</rp><rt>にん</rt><rp>)</rp></ruby>',
								'<ruby>2人<rp>(</rp><rt>ふたり</rt><rp>)</rp></ruby>',
								A3(
									$elm$core$String$replace,
									'<ruby>一<rp>(</rp><rt>いち</rt><rp>)</rp></ruby><ruby>人<rp>(</rp><rt>にん</rt><rp>)</rp></ruby>',
									'<ruby>一人<rp>(</rp><rt>ひとり</rt><rp>)</rp></ruby>',
									A3($elm$core$String$replace, '<ruby>二<rp>(</rp><rt>に</rt><rp>)</rp></ruby><ruby>人<rp>(</rp><rt>にん</rt><rp>)</rp></ruby>', '<ruby>二人<rp>(</rp><rt>ふたり</rt><rp>)</rp></ruby>', str)))))))));
};
var $author$project$ListenPage$sentenceTimeValidateA = function (sentenceData) {
	return A2(
		$elm$core$String$append,
		'sentenceTimeValidateA',
		A2(
			$elm$core$String$join,
			'\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, c) {
						return _Utils_ap(
							$elm$core$String$fromInt(i),
							c.kor);
					}),
				A2(
					$elm$core$List$filter,
					function (c) {
						return !((c.endTime - c.startTime) > 100);
					},
					sentenceData.cardList))));
};
var $author$project$ListenPage$sentenceTimeValidateB = function (sentenceData) {
	var aux = F2(
		function (li, result) {
			aux:
			while (true) {
				if (li.b && li.b.b) {
					var a = li.a;
					var _v1 = li.b;
					var b = _v1.a;
					var tl = _v1.b;
					if (_Utils_cmp(b.startTime, a.endTime) < 0) {
						var $temp$li = A2($elm$core$List$cons, b, tl),
							$temp$result = A2($elm$core$List$cons, a, result);
						li = $temp$li;
						result = $temp$result;
						continue aux;
					} else {
						var $temp$li = A2($elm$core$List$cons, b, tl),
							$temp$result = result;
						li = $temp$li;
						result = $temp$result;
						continue aux;
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		$elm$core$String$append,
		'sentenceTimeValidateB',
		A2(
			$elm$core$String$join,
			'\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, c) {
						return _Utils_ap(
							$elm$core$String$fromInt(i),
							c.kor);
					}),
				$elm$core$List$reverse(
					A2(aux, sentenceData.cardList, _List_Nil)))));
};
var $author$project$ListenPage$sentenceTimeValidate = function (sentenceData) {
	return A2(
		$elm$core$String$join,
		'\n\n',
		_List_fromArray(
			[
				$author$project$ListenPage$sentenceTimeValidateA(sentenceData),
				$author$project$ListenPage$sentenceTimeValidateB(sentenceData)
			]));
};
var $author$project$GlobalPort$setItemCmd = F2(
	function (key, item) {
		return $author$project$GlobalPort$sendToPlayer(
			A2(
				$author$project$GlobalPort$TaggedData,
				'setItem',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'key',
							$elm$json$Json$Encode$string(key)),
							_Utils_Tuple2(
							'item',
							$elm$json$Json$Encode$string(item))
						]))));
	});
var $author$project$DataManage$setListenData = F3(
	function (videoId, listen, appData) {
		return _Utils_update(
			appData,
			{
				listen: A2(
					$elm$core$List$map,
					function (o) {
						return _Utils_eq(o.videoId, videoId) ? listen : o;
					},
					appData.listen)
			});
	});
var $author$project$DataManage$getIdx = F2(
	function (time, timedTexts) {
		return function (x) {
			if (x.$ === 'Just') {
				var _v2 = x.a;
				var idx = _v2.a;
				return idx;
			} else {
				return 0;
			}
		}(
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var startTime = _v0.b.startTime;
							var endTime = _v0.b.endTime;
							return _Utils_cmp(startTime, time) < 1;
						},
						A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, timedTexts)))));
	});
var $author$project$ListenPage$subUpdate = F2(
	function (t, model) {
		if ($author$project$ListenPage$isManual) {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		} else {
			if (model.isLoopMode) {
				var _v0 = A2($elm$core$Array$get, model.subIdx, model.subArray);
				if (_v0.$ === 'Just') {
					var sub = _v0.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentTime: t}),
						(_Utils_cmp(sub.endTime, t) < 0) ? $author$project$GlobalPort$seekToMillisCmd(sub.startTime) : $elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			} else {
				var _v1 = $elm$core$List$head(
					$elm$core$List$reverse(model.data.cardList));
				if (_v1.$ === 'Just') {
					var lastSub = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentTime: t,
								subIdx: A2(
									$author$project$DataManage$getIdx,
									t,
									$elm$core$Array$toList(model.subArray))
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			}
		}
	});
var $author$project$ListenPage$isVideoMode = false;
var $elm$core$Basics$round = _Basics_round;
var $author$project$ListenPage$timeShiftUpdate = F2(
	function (timeShiftVal, model) {
		if ($author$project$ListenPage$isVideoMode) {
			var newCardList = A2(
				$elm$core$List$map,
				function (c) {
					return _Utils_update(
						c,
						{endTime: c.endTime + timeShiftVal, startTime: c.startTime + timeShiftVal});
				},
				model.data.cardList);
			var data = model.data;
			return A2(
				$author$project$ListenPage$subUpdate,
				$elm$core$Basics$round(model.currentTime),
				_Utils_update(
					model,
					{
						data: _Utils_update(
							data,
							{cardList: newCardList}),
						subArray: $elm$core$Array$fromList(newCardList)
					})).a;
		} else {
			return model;
		}
	});
var $elm$file$File$toString = _File_toString;
var $author$project$GlobalPort$encodeProgress = function (progress) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'videoId',
				$elm$json$Json$Encode$string(progress.videoId)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(progress.name)),
				_Utils_Tuple2(
				'level',
				$elm$json$Json$Encode$int(progress.level)),
				_Utils_Tuple2(
				'date',
				$elm$json$Json$Encode$int(progress.date))
			]));
};
var $author$project$GlobalPort$saveProgressCmd = function (progress) {
	return $author$project$GlobalPort$sendToPlayer(
		A2(
			$author$project$GlobalPort$TaggedData,
			'saveProgress',
			$author$project$GlobalPort$encodeProgress(progress)));
};
var $author$project$ListenPage$gameEnd = function (model) {
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{isComplete: true, isCompleteAlertOpen: true}),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$GlobalPort$saveProgressCmd(
					A4($author$project$GlobalPort$Progress, model.data.videoId, $author$project$GlobalPort$listenName, 0, model.date)),
					A2($author$project$GlobalPort$logCmd, 'end_listen', model.data.name)
				])));
};
var $author$project$ListenPage$whenProgressEnd = function (_v0) {
	var model = _v0.a;
	var cmd = _v0.b;
	if (_Utils_eq(
		model.subIdx,
		$elm$core$Array$length(model.subArray) - 1) && (!model.isComplete)) {
		var _v1 = $author$project$ListenPage$gameEnd(model);
		var newModel = _v1.a;
		var newCmd = _v1.b;
		return _Utils_Tuple2(
			newModel,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[cmd, newCmd])));
	} else {
		return _Utils_Tuple2(model, cmd);
	}
};
var $author$project$ListenPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotCurrentTime':
				var t = msg.a;
				return $author$project$ListenPage$whenProgressEnd(
					A2($author$project$ListenPage$subUpdate, t, model));
			case 'GotPlayerState':
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{playerState: str}),
					$elm$core$Platform$Cmd$none);
			case 'GotVideoDuration':
				var dur = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{videoDuration: dur}),
					$elm$core$Platform$Cmd$none);
			case 'GoLeft':
				var _v1 = $author$project$ListenPage$previousSub(model);
				if (_v1.$ === 'Just') {
					var sub = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentTime: sub.startTime, subIdx: model.subIdx - 1}),
						$author$project$GlobalPort$seekToMillisCmd(sub.startTime));
				} else {
					return _Utils_Tuple2(
						model,
						$author$project$GlobalPort$seekToMillisCmd(0));
				}
			case 'GoRight':
				if (!model.subIdx) {
					var _v2 = $author$project$ListenPage$currentSub(model);
					if (_v2.$ === 'Just') {
						var sub = _v2.a;
						return (_Utils_cmp(model.currentTime, sub.startTime) < 0) ? _Utils_Tuple2(
							_Utils_update(
								model,
								{currentTime: sub.startTime, subIdx: model.subIdx}),
							$author$project$GlobalPort$seekToMillisCmd(sub.startTime)) : $author$project$ListenPage$basicGoRight(model);
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				} else {
					return $author$project$ListenPage$basicGoRight(model);
				}
			case 'TapContent':
				return (model.playerState === 'onPlaying') ? _Utils_Tuple2(model, $author$project$GlobalPort$pauseYoutubeCmd) : _Utils_Tuple2(model, $author$project$GlobalPort$playYoutubeCmd);
			case 'ToRoadMapPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'SaveClicked':
				return _Utils_Tuple2(
					model,
					A3(
						$elm$file$File$Download$string,
						'data.txt',
						'text',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$EditableValue$encode(model.editableValue))));
			case 'SetEditableValue':
				var editableValue = msg.a;
				var newSubInfo = A2(
					$elm$core$Result$withDefault,
					$author$project$DataManage$emptyListenData,
					A2(
						$elm$json$Json$Decode$decodeValue,
						$author$project$DataManage$listenDataDecoder,
						$author$project$EditableValue$encode(editableValue)));
				var newSubArray = $elm$core$Array$fromList(newSubInfo.cardList);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							editableValue: editableValue,
							subArray: newSubArray,
							subIdx: A3(
								$elm$core$Basics$clamp,
								0,
								$elm$core$Array$length(newSubArray) - 1,
								model.subIdx)
						}),
					$elm$core$Platform$Cmd$none);
			case 'JpFileRequested':
				return _Utils_Tuple2(
					model,
					A2($elm$file$File$Select$file, _List_Nil, $author$project$ListenPage$JpFileSelected));
			case 'JpFileSelected':
				var file = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							jpFileName: $elm$file$File$name(file)
						}),
					A2(
						$elm$core$Task$perform,
						$author$project$ListenPage$JpFileLoaded,
						$elm$file$File$toString(file)));
			case 'JpFileLoaded':
				var content = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jpFile: content}),
					$elm$core$Platform$Cmd$none);
			case 'KorFileRequested':
				return _Utils_Tuple2(
					model,
					A2($elm$file$File$Select$file, _List_Nil, $author$project$ListenPage$KorFileSelected));
			case 'KorFileSelected':
				var file = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							korFileName: $elm$file$File$name(file)
						}),
					A2(
						$elm$core$Task$perform,
						$author$project$ListenPage$KorFileLoaded,
						$elm$file$File$toString(file)));
			case 'KorFileLoaded':
				var content = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{korFile: content}),
					$elm$core$Platform$Cmd$none);
			case 'MergeClicked':
				var subInfo = A2(
					$elm$core$Result$withDefault,
					$author$project$DataManage$emptyListenData,
					A2(
						$elm$json$Json$Decode$decodeValue,
						$author$project$DataManage$listenDataDecoder,
						$author$project$EditableValue$encode(model.editableValue)));
				var merged = A2($author$project$DataManage$getMerged, model.korFile, model.jpFile);
				var newSubInfo = _Utils_update(
					subInfo,
					{cardList: merged});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							editableValue: $author$project$EditableValue$decode(
								$author$project$DataManage$encodeListenData(newSubInfo))
						}),
					$elm$core$Platform$Cmd$none);
			case 'ApplyJpClicked':
				var updateSubInfo = F2(
					function (subData, data) {
						return _Utils_update(
							data,
							{cardList: subData});
					});
				var newData = A2(
					updateSubInfo,
					$author$project$DataManage$getSubData(model.jpFile),
					model.data);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: newData,
							editableValue: $author$project$EditableValue$decode(
								$author$project$DataManage$encodeListenData(newData))
						}),
					$elm$core$Platform$Cmd$none);
			case 'ApplyKorClicked':
				var updateSubInfo = F2(
					function (subData, data) {
						return _Utils_update(
							data,
							{cardList: subData});
					});
				var newData = A2(
					updateSubInfo,
					$author$project$DataManage$getSubDataKor(model.korFile),
					model.data);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: newData,
							editableValue: $author$project$EditableValue$decode(
								$author$project$DataManage$encodeListenData(newData))
						}),
					$elm$core$Platform$Cmd$none);
			case 'Restart':
				return A2($author$project$ListenPage$init, model.data.videoId, model.appData);
			case 'GotRuby':
				var rubiedTextList = msg.a;
				if (rubiedTextList.$ === 'Ok') {
					var value = rubiedTextList.a;
					var d = model.data;
					var cardList = model.data.cardList;
					var newData = _Utils_update(
						d,
						{
							cardList: A3(
								$elm$core$List$map2,
								F2(
									function (r, c) {
										return _Utils_update(
											c,
											{
												rubiedText: $author$project$ListenPage$rubyReplace(r)
											});
									}),
								value,
								cardList)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								data: newData,
								editableValue: $author$project$EditableValue$decode(
									$author$project$DataManage$encodeListenData(newData)),
								subArray: $elm$core$Array$fromList(newData.cardList)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = rubiedTextList.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'RubyBtnClicked':
				return _Utils_Tuple2(
					model,
					$elm$http$Http$post(
						{
							body: $elm$http$Http$jsonBody(
								A2(
									$elm$json$Json$Encode$list,
									$elm$json$Json$Encode$string,
									A2(
										$elm$core$List$map,
										function ($) {
											return $.text;
										},
										model.data.cardList))),
							expect: A2(
								$elm$http$Http$expectJson,
								$author$project$ListenPage$GotRuby,
								$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
							url: 'http://localhost:3000/ruby'
						}));
			case 'LoopChangeBtnClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isLoopMode: !model.isLoopMode}),
					$elm$core$Platform$Cmd$none);
			case 'ModeChangeBtnClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							pronMode: _Utils_eq(model.pronMode, $author$project$ListenPage$HiraMode) ? $author$project$ListenPage$HanMode : $author$project$ListenPage$HiraMode
						}),
					$elm$core$Platform$Cmd$none);
			case 'AutoKanjiClicked':
				var data = model.data;
				var addKanjiInfo = function (card) {
					var apply = F3(
						function (a, b, c) {
							var kanjiStr = A2(
								$elm$core$String$join,
								', ',
								A2(
									$elm$core$List$filterMap,
									function (k) {
										return A2(
											$elm$core$Maybe$map,
											function (result) {
												return A2(
													$elm$core$String$join,
													' ',
													_List_fromArray(
														[k, result]));
											},
											A2($elm$core$Dict$get, k, $author$project$Hangul$kanjiDic));
									},
									A2(
										$elm$core$List$map,
										$elm$core$String$fromChar,
										A2(
											$elm$core$List$filterMap,
											function (ch) {
												return ((19968 <= $elm$core$Char$toCode(ch)) && ($elm$core$Char$toCode(ch) <= 40879)) ? $elm$core$Maybe$Just(ch) : $elm$core$Maybe$Nothing;
											},
											$elm$core$String$toList(b)))));
							return $elm$core$String$isEmpty(kanjiStr) ? A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[a, b, c])) : A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[a, b, c, kanjiStr]));
						});
					var newWords = A2(
						$elm$core$String$join,
						'\n\n',
						A2(
							$elm$core$List$map,
							function (x) {
								var _v4 = A2($elm$core$String$split, '\n', x);
								if ((_v4.b && _v4.b.b) && _v4.b.b.b) {
									if (_v4.b.b.b.b) {
										var a = _v4.a;
										var _v5 = _v4.b;
										var b = _v5.a;
										var _v6 = _v5.b;
										var c = _v6.a;
										var _v7 = _v6.b;
										var d = _v7.a;
										return $elm$core$String$isEmpty(
											$elm$core$String$trim(d)) ? A3(apply, a, b, c) : x;
									} else {
										var a = _v4.a;
										var _v8 = _v4.b;
										var b = _v8.a;
										var _v9 = _v8.b;
										var c = _v9.a;
										return A3(apply, a, b, c);
									}
								} else {
									return x;
								}
							},
							A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
								A2($elm$core$String$split, '\n\n', card.words))));
					return _Utils_update(
						card,
						{words: newWords});
				};
				var newCardList = A2($elm$core$List$map, addKanjiInfo, model.data.cardList);
				return A2(
					$author$project$ListenPage$init,
					model.data.videoId,
					A3(
						$author$project$DataManage$setListenData,
						model.data.videoId,
						_Utils_update(
							data,
							{cardList: newCardList}),
						model.appData));
			case 'AutoKanjiOverwriteClicked':
				var data = model.data;
				var addKanjiInfo = function (card) {
					var apply = F3(
						function (a, b, c) {
							var kanjiStr = A2(
								$elm$core$String$join,
								', ',
								A2(
									$elm$core$List$filterMap,
									function (k) {
										return A2(
											$elm$core$Maybe$map,
											function (result) {
												return A2(
													$elm$core$String$join,
													' ',
													_List_fromArray(
														[k, result]));
											},
											A2($elm$core$Dict$get, k, $author$project$Hangul$kanjiDic));
									},
									A2(
										$elm$core$List$map,
										$elm$core$String$fromChar,
										A2(
											$elm$core$List$filterMap,
											function (ch) {
												return ((19968 <= $elm$core$Char$toCode(ch)) && ($elm$core$Char$toCode(ch) <= 40879)) ? $elm$core$Maybe$Just(ch) : $elm$core$Maybe$Nothing;
											},
											$elm$core$String$toList(b)))));
							return $elm$core$String$isEmpty(kanjiStr) ? A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[a, b, c])) : A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[a, b, c, kanjiStr]));
						});
					var newWords = A2(
						$elm$core$String$join,
						'\n\n',
						A2(
							$elm$core$List$map,
							function (x) {
								var _v10 = A2($elm$core$String$split, '\n', x);
								if ((_v10.b && _v10.b.b) && _v10.b.b.b) {
									if (_v10.b.b.b.b) {
										var a = _v10.a;
										var _v11 = _v10.b;
										var b = _v11.a;
										var _v12 = _v11.b;
										var c = _v12.a;
										var _v13 = _v12.b;
										var d = _v13.a;
										return A3(apply, a, b, c);
									} else {
										var a = _v10.a;
										var _v14 = _v10.b;
										var b = _v14.a;
										var _v15 = _v14.b;
										var c = _v15.a;
										return A3(apply, a, b, c);
									}
								} else {
									return x;
								}
							},
							A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
								A2($elm$core$String$split, '\n\n', card.words))));
					return _Utils_update(
						card,
						{words: newWords});
				};
				var newCardList = A2($elm$core$List$map, addKanjiInfo, model.data.cardList);
				return A2(
					$author$project$ListenPage$init,
					model.data.videoId,
					A3(
						$author$project$DataManage$setListenData,
						model.data.videoId,
						_Utils_update(
							data,
							{cardList: newCardList}),
						model.appData));
			case 'TimeShiftClicked':
				if (!model.timeShift) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newCardList = A2(
						$elm$core$List$map,
						function (c) {
							return _Utils_update(
								c,
								{endTime: c.endTime + model.timeShift, startTime: c.startTime + model.timeShift});
						},
						model.data.cardList);
					var data = model.data;
					return A2(
						$author$project$ListenPage$init,
						model.data.videoId,
						A3(
							$author$project$DataManage$setListenData,
							model.data.videoId,
							_Utils_update(
								data,
								{cardList: newCardList}),
							model.appData));
				}
			case 'UpdateTimeShiftInput':
				var str = msg.a;
				var _v16 = $elm$core$String$toInt(str);
				if (_v16.$ === 'Just') {
					var shift = _v16.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{timeShift: shift}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'LoadSuccess':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isLoadSuccess: true}),
					$elm$core$Platform$Cmd$none);
			case 'LoadFail':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'WordBtnClick':
				var pron = msg.a;
				var word = msg.b;
				var key = msg.c;
				var newKeyList = A2(
					$elm$core$List$map,
					function (_v18) {
						var x = _v18.a;
						var b = _v18.b;
						return _Utils_eq(x, key) ? _Utils_Tuple2(x, !b) : _Utils_Tuple2(x, b);
					},
					model.keyList);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{keyList: newKeyList}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$GlobalPort$setItemCmd,
								'listen-' + model.data.videoId,
								A2(
									$elm$json$Json$Encode$encode,
									0,
									A2(
										$elm$json$Json$Encode$list,
										function (_v17) {
											var v = _v17.a;
											var b = _v17.b;
											return $elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'v',
														$elm$json$Json$Encode$string(v)),
														_Utils_Tuple2(
														'b',
														$elm$json$Json$Encode$bool(b))
													]));
										},
										newKeyList)))
							])));
			case 'SpeakPron':
				var _v19 = $author$project$ListenPage$currentSub(model);
				if (_v19.$ === 'Just') {
					var sub = _v19.a;
					return _Utils_Tuple2(
						model,
						$author$project$GlobalPort$speakCmd(
							$author$project$Utility$getSpeakString(
								{pron: sub.pron, word: sub.text})));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'PlayVideo':
				return _Utils_Tuple2(model, $author$project$GlobalPort$playYoutubeCmd);
			case 'CloseCompleteAlert':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isCompleteAlertOpen: false}),
					$elm$core$Platform$Cmd$none);
			case 'GotDate':
				var d = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{date: d}),
					$elm$core$Platform$Cmd$none);
			case 'GotKeyWordStr':
				var str = msg.a;
				var list = A2(
					$elm$core$Result$withDefault,
					_List_Nil,
					A2(
						$elm$json$Json$Decode$decodeString,
						$elm$json$Json$Decode$list(
							A3(
								$elm$json$Json$Decode$map2,
								$elm$core$Tuple$pair,
								A2($elm$json$Json$Decode$field, 'v', $elm$json$Json$Decode$string),
								A2($elm$json$Json$Decode$field, 'b', $elm$json$Json$Decode$bool))),
						str));
				var bList = A2($elm$core$List$map, $elm$core$Tuple$first, list);
				var aList = A2($elm$core$List$map, $elm$core$Tuple$first, model.keyList);
				return _Utils_eq(aList, bList) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{keyList: list}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'KanjiValidate':
				var validateResult = A2(
					$elm$core$String$join,
					'\n\n',
					A2(
						$elm$core$List$map,
						function (_v20) {
							var text = _v20.text;
							var words = _v20.words;
							var wordsResult = $elm$core$String$concat(
								A2(
									$elm$core$List$filter,
									function (y) {
										return A2($elm$core$Dict$member, y, $author$project$Hangul$kanjiDic);
									},
									A2(
										$elm$core$List$map,
										$elm$core$String$fromChar,
										$elm$core$String$toList(
											A2(
												$elm$core$String$join,
												'',
												A2(
													$elm$core$List$map,
													function (x) {
														var _v21 = A2($elm$core$String$split, '\n', x);
														if ((_v21.b && _v21.b.b) && _v21.b.b.b) {
															if (_v21.b.b.b.b) {
																var a = _v21.a;
																var _v22 = _v21.b;
																var b = _v22.a;
																var _v23 = _v22.b;
																var c = _v23.a;
																var _v24 = _v23.b;
																var d = _v24.a;
																return b;
															} else {
																var a = _v21.a;
																var _v25 = _v21.b;
																var b = _v25.a;
																var _v26 = _v25.b;
																var c = _v26.a;
																return b;
															}
														} else {
															return '';
														}
													},
													A2(
														$elm$core$List$filter,
														A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
														A2($elm$core$String$split, '\n\n', words))))))));
							var textResult = $elm$core$String$concat(
								A2(
									$elm$core$List$filter,
									function (y) {
										return A2($elm$core$Dict$member, y, $author$project$Hangul$kanjiDic);
									},
									A2(
										$elm$core$List$map,
										$elm$core$String$fromChar,
										$elm$core$String$toList(text))));
							return A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[textResult, wordsResult]));
						},
						model.data.cardList));
				return _Utils_Tuple2(
					model,
					A3($elm$file$File$Download$string, 'data.txt', 'text', validateResult));
			case 'TimeShiftShort':
				var val = msg.a;
				return _Utils_Tuple2(
					A2($author$project$ListenPage$timeShiftUpdate, val, model),
					$elm$core$Platform$Cmd$none);
			case 'TimeValidate':
				var sentenceResult = A2(
					$elm$core$String$join,
					'\n\n',
					A2($elm$core$List$map, $author$project$ListenPage$sentenceTimeValidate, model.appData.sentence));
				var listenResult = A2(
					$elm$core$String$join,
					'\n\n',
					A2($elm$core$List$map, $author$project$ListenPage$listenTimeValidate, model.appData.listen));
				return _Utils_Tuple2(
					model,
					A3($elm$file$File$Download$string, 'data.txt', 'text', listenResult + ('\n\n' + sentenceResult)));
			case 'SlidePrevPressed':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{subIdx: model.subIdx - 1}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{subIdx: model.subIdx + 1}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$MainPage$EndApp = {$: 'EndApp'};
var $author$project$MainPage$ToSearchPage = {$: 'ToSearchPage'};
var $author$project$GlobalPort$endAppCmd = $author$project$GlobalPort$sendToPlayer(
	A2($author$project$GlobalPort$TaggedData, 'endApp', $elm$json$Json$Encode$null));
var $author$project$GlobalPort$purchaseCmd = $author$project$GlobalPort$sendToPlayer(
	A2($author$project$GlobalPort$TaggedData, 'purchase', $elm$json$Json$Encode$null));
var $author$project$MainPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToRoadMapPage':
				var name = msg.a;
				var videoId = msg.b;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'SetEditableValue':
				var editableValue = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: A2(
								$elm$core$Result$withDefault,
								_List_Nil,
								A2(
									$elm$json$Json$Decode$decodeValue,
									$elm$json$Json$Decode$list($author$project$DataManage$videoDataDecoder),
									$author$project$EditableValue$encode(editableValue))),
							editableValue: editableValue
						}),
					$elm$core$Platform$Cmd$none);
			case 'SaveClicked':
				return _Utils_Tuple2(
					model,
					A3(
						$elm$file$File$Download$string,
						'data.txt',
						'text',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$EditableValue$encode(model.editableValue))));
			case 'LeftClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							isClickBlocked: true,
							videoIdx: (!model.videoIdx) ? ($elm$core$List$length(model.data) - 1) : (model.videoIdx - 1)
						}),
					$elm$core$Platform$Cmd$none);
			case 'RightClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							isClickBlocked: true,
							videoIdx: _Utils_eq(
								model.videoIdx,
								$elm$core$List$length(model.data) - 1) ? 0 : (model.videoIdx + 1)
						}),
					$elm$core$Platform$Cmd$none);
			case 'SeekBarMoved':
				var ratio = msg.a;
				var newIdx = A3(
					$elm$core$Basics$clamp,
					0,
					$elm$core$List$length(model.data) - 1,
					$elm$core$Basics$floor(
						ratio * $elm$core$List$length(model.data)));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{videoIdx: newIdx}),
					$elm$core$Platform$Cmd$none);
			case 'EndApp':
				return _Utils_Tuple2(model, $author$project$GlobalPort$endAppCmd);
			case 'ToAwardPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'HomeBtnClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isRecentMode: true}),
					(!$author$project$Utility$isApple) ? $elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2($author$project$HtmlElement$jumpToTop, 'group-list', $author$project$MainPage$NoOp),
								$elm$core$Platform$Cmd$batch(
								A2(
									$elm$core$List$map,
									function (x) {
										return A2(
											$author$project$HtmlElement$jumpToTop,
											'video-scroll' + $elm$core$String$fromInt(x),
											$author$project$MainPage$NoOp);
									},
									A2($elm$core$List$range, 0, 10)))
							])) : $elm$core$Platform$Cmd$none);
			case 'ClickBlockEnd':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isClickBlocked: false}),
					$elm$core$Platform$Cmd$none);
			case 'ToSearchPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotSubUser':
				var isSubUser = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isSubUser: isSubUser}),
					$elm$core$Platform$Cmd$none);
			case 'ShopBtnClicked':
				return model.isSubUser ? _Utils_Tuple2(
					model,
					$author$project$GlobalPort$newTab('https://play.google.com/store/account/subscriptions')) : _Utils_Tuple2(model, $author$project$GlobalPort$purchaseCmd);
			case 'QuestionBtnClicked':
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$newTab('https://haneumjp.tistory.com/22'));
			case 'ToQuestionPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToMarketPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'BackPressed':
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Task$perform,
						function (_v1) {
							return $author$project$MainPage$EndApp;
						},
						$elm$time$Time$now));
			case 'GotHistory':
				var maybeHistory = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{visitHistory: maybeHistory}),
					$elm$core$Platform$Cmd$none);
			case 'RecentToggle':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isRecentMode: !model.isRecentMode}),
					$elm$core$Platform$Cmd$none);
			default:
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{selectedTag: str}),
					A2(
						$elm$core$Task$perform,
						function (_v2) {
							return $author$project$MainPage$ToSearchPage;
						},
						$elm$time$Time$now));
		}
	});
var $author$project$MarketPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToMainPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotSubUser':
				var isSubUser = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isSubUser: isSubUser}),
					$elm$core$Platform$Cmd$none);
			case 'SubBtnClick':
				return _Utils_Tuple2(model, $author$project$GlobalPort$purchaseCmd);
			case 'AlreadySubBtnClick':
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$newTab('https://play.google.com/store/account/subscriptions?sku=haneum_jp_sub&package=com.rnnwkals1.munjangJapanese'));
			case 'SubCheckBtnClick':
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$newTab('https://play.google.com/store/account/subscriptions'));
			default:
				var newTapCnt = model.tapCnt + 1;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{tapCnt: newTapCnt}),
					(newTapCnt >= 10) ? A2($author$project$GlobalPort$logCmd, 'force_activation', '') : $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$PrintPage$GotRuby = function (a) {
	return {$: 'GotRuby', a: a};
};
var $author$project$PrintPage$HanMode = {$: 'HanMode'};
var $author$project$PrintPage$HiraMode = {$: 'HiraMode'};
var $author$project$PrintPage$JpFileLoaded = function (a) {
	return {$: 'JpFileLoaded', a: a};
};
var $author$project$PrintPage$JpFileSelected = function (a) {
	return {$: 'JpFileSelected', a: a};
};
var $author$project$PrintPage$KorFileLoaded = function (a) {
	return {$: 'KorFileLoaded', a: a};
};
var $author$project$PrintPage$KorFileSelected = function (a) {
	return {$: 'KorFileSelected', a: a};
};
var $author$project$PrintPage$nextSub = function (model) {
	return A2($elm$core$Array$get, model.subIdx + 1, model.subArray);
};
var $author$project$PrintPage$basicGoRight = function (model) {
	var _v0 = $author$project$PrintPage$nextSub(model);
	if (_v0.$ === 'Just') {
		var sub = _v0.a;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{currentTime: sub.startTime, subIdx: model.subIdx + 1}),
			$author$project$GlobalPort$seekToMillisCmd(sub.startTime));
	} else {
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	}
};
var $author$project$PrintPage$currentSub = function (model) {
	return A2($elm$core$Array$get, model.subIdx, model.subArray);
};
var $author$project$PrintPage$GotDate = function (a) {
	return {$: 'GotDate', a: a};
};
var $author$project$PrintPage$GotKeyWordStr = function (a) {
	return {$: 'GotKeyWordStr', a: a};
};
var $author$project$PrintPage$getTitle = function (model) {
	var infoData = A2($author$project$DataManage$getInfoData, model.data.videoId, model.appData);
	var forward = model.data.name + (' - ' + (infoData.artistKor + ', '));
	var backward = function () {
		var _v0 = model.pronMode;
		if (_v0.$ === 'HiraMode') {
			return '가사 및 단어 정리(후리가나)';
		} else {
			return '가사 및 단어 정리(한글 발음)';
		}
	}();
	return _Utils_ap(forward, backward);
};
var $author$project$PrintPage$printPronMode = $author$project$PrintPage$HiraMode;
var $author$project$GlobalPort$strSend = F2(
	function (tag, str) {
		return $author$project$GlobalPort$sendToPlayer(
			A2(
				$author$project$GlobalPort$TaggedData,
				tag,
				$elm$json$Json$Encode$string(str)));
	});
var $author$project$PrintPage$words2list = function (words) {
	return A2(
		$elm$core$List$map,
		$elm$core$String$split('\n'),
		A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
			A2($elm$core$String$split, '\n\n', words)));
};
var $author$project$PrintPage$init = F2(
	function (vid, appData) {
		var data = A2($author$project$DataManage$getListenData, vid, appData);
		return function (_v0) {
			var m = _v0.a;
			var c = _v0.b;
			return _Utils_Tuple2(
				m,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							c,
							A2(
							$author$project$GlobalPort$strSend,
							'renameTitle',
							$author$project$PrintPage$getTitle(m))
						])));
		}(
			_Utils_Tuple2(
				{
					appData: appData,
					currentTime: 0,
					data: data,
					date: 0,
					editableValue: $author$project$EditableValue$decode(
						$author$project$DataManage$encodeListenData(data)),
					isComplete: false,
					isCompleteAlertOpen: false,
					isLoadSuccess: false,
					isLoopMode: false,
					jpFile: '',
					jpFileName: '',
					keyList: A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(x, false);
						},
						$elm$core$List$concat(
							A2(
								$elm$core$List$indexedMap,
								F2(
									function (i, v) {
										return A2(
											$elm$core$List$map,
											function (x) {
												return _Utils_ap(
													$elm$core$String$fromInt(i),
													$elm$core$String$concat(
														A2($elm$core$List$take, 2, x)));
											},
											$author$project$PrintPage$words2list(v.words));
									}),
								data.cardList))),
					korFile: '',
					korFileName: '',
					playerState: '',
					pronMode: $author$project$PrintPage$printPronMode,
					subArray: $elm$core$Array$fromList(data.cardList),
					subIdx: 0,
					timeShift: 0,
					videoDuration: 10
				},
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							$author$project$GlobalPort$loadVideoCmd(data.videoId),
							$author$project$GlobalPort$seekToMillisCmd(0),
							$author$project$GlobalPort$openYoutubeCmd,
							A2($author$project$Utility$getLocal, 'listen-' + data.videoId, $author$project$PrintPage$GotKeyWordStr),
							A2($author$project$GlobalPort$logCmd, 'listen_page', data.name),
							$author$project$GlobalPort$pageMoveCmd('listen_page'),
							A2($elm$core$Task$perform, $author$project$PrintPage$GotDate, $author$project$TimeHelper$getDate)
						]))));
	});
var $author$project$PrintPage$listenTimeValidateA = function (listenData) {
	return A2(
		$elm$core$String$append,
		'listenTimeValidateA',
		A2(
			$elm$core$String$join,
			'\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, c) {
						return _Utils_ap(
							$elm$core$String$fromInt(i),
							c.kor);
					}),
				A2(
					$elm$core$List$filter,
					function (c) {
						return !((c.endTime - c.startTime) > 100);
					},
					listenData.cardList))));
};
var $author$project$PrintPage$listenTimeValidateB = function (listenData) {
	var aux = F2(
		function (li, result) {
			aux:
			while (true) {
				if (li.b && li.b.b) {
					var a = li.a;
					var _v1 = li.b;
					var b = _v1.a;
					var tl = _v1.b;
					if (_Utils_cmp(b.startTime, a.endTime) < 0) {
						var $temp$li = A2($elm$core$List$cons, b, tl),
							$temp$result = A2($elm$core$List$cons, a, result);
						li = $temp$li;
						result = $temp$result;
						continue aux;
					} else {
						var $temp$li = A2($elm$core$List$cons, b, tl),
							$temp$result = result;
						li = $temp$li;
						result = $temp$result;
						continue aux;
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		$elm$core$String$append,
		'listenTimeValidateB',
		A2(
			$elm$core$String$join,
			'\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, c) {
						return _Utils_ap(
							$elm$core$String$fromInt(i),
							c.kor);
					}),
				$elm$core$List$reverse(
					A2(aux, listenData.cardList, _List_Nil)))));
};
var $author$project$PrintPage$listenTimeValidate = function (listenData) {
	return A2(
		$elm$core$String$join,
		'\n\n',
		_List_fromArray(
			[
				$author$project$PrintPage$listenTimeValidateA(listenData),
				$author$project$PrintPage$listenTimeValidateB(listenData)
			]));
};
var $author$project$PrintPage$previousSub = function (model) {
	return A2($elm$core$Array$get, model.subIdx - 1, model.subArray);
};
var $author$project$PrintPage$rubyReplace = function (str) {
	return A3(
		$elm$core$String$replace,
		'2<ruby>人<rp>(</rp><rt>にん</rt><rp>)</rp></ruby>',
		'<ruby>2人<rp>(</rp><rt>ふたり</rt><rp>)</rp></ruby>',
		A3(
			$elm$core$String$replace,
			'<ruby>一<rp>(</rp><rt>いち</rt><rp>)</rp></ruby><ruby>人<rp>(</rp><rt>にん</rt><rp>)</rp></ruby>',
			'<ruby>一人<rp>(</rp><rt>ひとり</rt><rp>)</rp></ruby>',
			A3($elm$core$String$replace, '<ruby>二<rp>(</rp><rt>に</rt><rp>)</rp></ruby><ruby>人<rp>(</rp><rt>にん</rt><rp>)</rp></ruby>', '<ruby>二人<rp>(</rp><rt>ふたり</rt><rp>)</rp></ruby>', str)));
};
var $author$project$PrintPage$sentenceTimeValidateA = function (sentenceData) {
	return A2(
		$elm$core$String$append,
		'sentenceTimeValidateA',
		A2(
			$elm$core$String$join,
			'\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, c) {
						return _Utils_ap(
							$elm$core$String$fromInt(i),
							c.kor);
					}),
				A2(
					$elm$core$List$filter,
					function (c) {
						return !((c.endTime - c.startTime) > 100);
					},
					sentenceData.cardList))));
};
var $author$project$PrintPage$sentenceTimeValidateB = function (sentenceData) {
	var aux = F2(
		function (li, result) {
			aux:
			while (true) {
				if (li.b && li.b.b) {
					var a = li.a;
					var _v1 = li.b;
					var b = _v1.a;
					var tl = _v1.b;
					if (_Utils_cmp(b.startTime, a.endTime) < 0) {
						var $temp$li = A2($elm$core$List$cons, b, tl),
							$temp$result = A2($elm$core$List$cons, a, result);
						li = $temp$li;
						result = $temp$result;
						continue aux;
					} else {
						var $temp$li = A2($elm$core$List$cons, b, tl),
							$temp$result = result;
						li = $temp$li;
						result = $temp$result;
						continue aux;
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		$elm$core$String$append,
		'sentenceTimeValidateB',
		A2(
			$elm$core$String$join,
			'\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, c) {
						return _Utils_ap(
							$elm$core$String$fromInt(i),
							c.kor);
					}),
				$elm$core$List$reverse(
					A2(aux, sentenceData.cardList, _List_Nil)))));
};
var $author$project$PrintPage$sentenceTimeValidate = function (sentenceData) {
	return A2(
		$elm$core$String$join,
		'\n\n',
		_List_fromArray(
			[
				$author$project$PrintPage$sentenceTimeValidateA(sentenceData),
				$author$project$PrintPage$sentenceTimeValidateB(sentenceData)
			]));
};
var $author$project$PrintPage$subUpdate = F2(
	function (t, model) {
		if ($author$project$PrintPage$isManual) {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		} else {
			if (model.isLoopMode) {
				var _v0 = A2($elm$core$Array$get, model.subIdx, model.subArray);
				if (_v0.$ === 'Just') {
					var sub = _v0.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentTime: t}),
						(_Utils_cmp(sub.endTime, t) < 0) ? $author$project$GlobalPort$seekToMillisCmd(sub.startTime) : $elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			} else {
				var _v1 = $elm$core$List$head(
					$elm$core$List$reverse(model.data.cardList));
				if (_v1.$ === 'Just') {
					var lastSub = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentTime: t,
								subIdx: A2(
									$author$project$DataManage$getIdx,
									t,
									$elm$core$Array$toList(model.subArray))
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			}
		}
	});
var $author$project$PrintPage$isVideoMode = true;
var $author$project$PrintPage$timeShiftUpdate = F2(
	function (timeShiftVal, model) {
		if ($author$project$PrintPage$isVideoMode) {
			var newCardList = A2(
				$elm$core$List$map,
				function (c) {
					return _Utils_update(
						c,
						{endTime: c.endTime + timeShiftVal, startTime: c.startTime + timeShiftVal});
				},
				model.data.cardList);
			var data = model.data;
			return A2(
				$author$project$PrintPage$subUpdate,
				$elm$core$Basics$round(model.currentTime),
				_Utils_update(
					model,
					{
						data: _Utils_update(
							data,
							{cardList: newCardList}),
						subArray: $elm$core$Array$fromList(newCardList)
					})).a;
		} else {
			return model;
		}
	});
var $author$project$PrintPage$gameEnd = function (model) {
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{isComplete: true, isCompleteAlertOpen: true}),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$GlobalPort$saveProgressCmd(
					A4($author$project$GlobalPort$Progress, model.data.videoId, $author$project$GlobalPort$listenName, 0, model.date)),
					A2($author$project$GlobalPort$logCmd, 'end_listen', model.data.name)
				])));
};
var $author$project$PrintPage$whenProgressEnd = function (_v0) {
	var model = _v0.a;
	var cmd = _v0.b;
	if (_Utils_eq(
		model.subIdx,
		$elm$core$Array$length(model.subArray) - 1) && (!model.isComplete)) {
		var _v1 = $author$project$PrintPage$gameEnd(model);
		var newModel = _v1.a;
		var newCmd = _v1.b;
		return _Utils_Tuple2(
			newModel,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[cmd, newCmd])));
	} else {
		return _Utils_Tuple2(model, cmd);
	}
};
var $author$project$PrintPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotCurrentTime':
				var t = msg.a;
				return $author$project$PrintPage$whenProgressEnd(
					A2($author$project$PrintPage$subUpdate, t, model));
			case 'GotPlayerState':
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{playerState: str}),
					$elm$core$Platform$Cmd$none);
			case 'GotVideoDuration':
				var dur = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{videoDuration: dur}),
					$elm$core$Platform$Cmd$none);
			case 'GoLeft':
				var _v1 = $author$project$PrintPage$previousSub(model);
				if (_v1.$ === 'Just') {
					var sub = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentTime: sub.startTime, subIdx: model.subIdx - 1}),
						$author$project$GlobalPort$seekToMillisCmd(sub.startTime));
				} else {
					return _Utils_Tuple2(
						model,
						$author$project$GlobalPort$seekToMillisCmd(0));
				}
			case 'GoRight':
				if (!model.subIdx) {
					var _v2 = $author$project$PrintPage$currentSub(model);
					if (_v2.$ === 'Just') {
						var sub = _v2.a;
						return (_Utils_cmp(model.currentTime, sub.startTime) < 0) ? _Utils_Tuple2(
							_Utils_update(
								model,
								{currentTime: sub.startTime, subIdx: model.subIdx}),
							$author$project$GlobalPort$seekToMillisCmd(sub.startTime)) : $author$project$PrintPage$basicGoRight(model);
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				} else {
					return $author$project$PrintPage$basicGoRight(model);
				}
			case 'TapContent':
				return (model.playerState === 'onPlaying') ? _Utils_Tuple2(model, $author$project$GlobalPort$pauseYoutubeCmd) : _Utils_Tuple2(model, $author$project$GlobalPort$playYoutubeCmd);
			case 'ToRoadMapPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'SaveClicked':
				return _Utils_Tuple2(
					model,
					A3(
						$elm$file$File$Download$string,
						'data.txt',
						'text',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$EditableValue$encode(model.editableValue))));
			case 'SetEditableValue':
				var editableValue = msg.a;
				var newSubInfo = A2(
					$elm$core$Result$withDefault,
					$author$project$DataManage$emptyListenData,
					A2(
						$elm$json$Json$Decode$decodeValue,
						$author$project$DataManage$listenDataDecoder,
						$author$project$EditableValue$encode(editableValue)));
				var newSubArray = $elm$core$Array$fromList(newSubInfo.cardList);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							editableValue: editableValue,
							subArray: newSubArray,
							subIdx: A3(
								$elm$core$Basics$clamp,
								0,
								$elm$core$Array$length(newSubArray) - 1,
								model.subIdx)
						}),
					$elm$core$Platform$Cmd$none);
			case 'JpFileRequested':
				return _Utils_Tuple2(
					model,
					A2($elm$file$File$Select$file, _List_Nil, $author$project$PrintPage$JpFileSelected));
			case 'JpFileSelected':
				var file = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							jpFileName: $elm$file$File$name(file)
						}),
					A2(
						$elm$core$Task$perform,
						$author$project$PrintPage$JpFileLoaded,
						$elm$file$File$toString(file)));
			case 'JpFileLoaded':
				var content = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jpFile: content}),
					$elm$core$Platform$Cmd$none);
			case 'KorFileRequested':
				return _Utils_Tuple2(
					model,
					A2($elm$file$File$Select$file, _List_Nil, $author$project$PrintPage$KorFileSelected));
			case 'KorFileSelected':
				var file = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							korFileName: $elm$file$File$name(file)
						}),
					A2(
						$elm$core$Task$perform,
						$author$project$PrintPage$KorFileLoaded,
						$elm$file$File$toString(file)));
			case 'KorFileLoaded':
				var content = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{korFile: content}),
					$elm$core$Platform$Cmd$none);
			case 'MergeClicked':
				var subInfo = A2(
					$elm$core$Result$withDefault,
					$author$project$DataManage$emptyListenData,
					A2(
						$elm$json$Json$Decode$decodeValue,
						$author$project$DataManage$listenDataDecoder,
						$author$project$EditableValue$encode(model.editableValue)));
				var merged = A2($author$project$DataManage$getMerged, model.korFile, model.jpFile);
				var newSubInfo = _Utils_update(
					subInfo,
					{cardList: merged});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							editableValue: $author$project$EditableValue$decode(
								$author$project$DataManage$encodeListenData(newSubInfo))
						}),
					$elm$core$Platform$Cmd$none);
			case 'ApplyJpClicked':
				var updateSubInfo = F2(
					function (subData, data) {
						return _Utils_update(
							data,
							{cardList: subData});
					});
				var newData = A2(
					updateSubInfo,
					$author$project$DataManage$getSubData(model.jpFile),
					model.data);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: newData,
							editableValue: $author$project$EditableValue$decode(
								$author$project$DataManage$encodeListenData(newData))
						}),
					$elm$core$Platform$Cmd$none);
			case 'ApplyKorClicked':
				var updateSubInfo = F2(
					function (subData, data) {
						return _Utils_update(
							data,
							{cardList: subData});
					});
				var newData = A2(
					updateSubInfo,
					$author$project$DataManage$getSubDataKor(model.korFile),
					model.data);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: newData,
							editableValue: $author$project$EditableValue$decode(
								$author$project$DataManage$encodeListenData(newData))
						}),
					$elm$core$Platform$Cmd$none);
			case 'Restart':
				return A2($author$project$PrintPage$init, model.data.videoId, model.appData);
			case 'GotRuby':
				var rubiedTextList = msg.a;
				if (rubiedTextList.$ === 'Ok') {
					var value = rubiedTextList.a;
					var d = model.data;
					var cardList = model.data.cardList;
					var newData = _Utils_update(
						d,
						{
							cardList: A3(
								$elm$core$List$map2,
								F2(
									function (r, c) {
										return _Utils_update(
											c,
											{
												rubiedText: $author$project$PrintPage$rubyReplace(r)
											});
									}),
								value,
								cardList)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								data: newData,
								editableValue: $author$project$EditableValue$decode(
									$author$project$DataManage$encodeListenData(newData)),
								subArray: $elm$core$Array$fromList(newData.cardList)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = rubiedTextList.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'RubyBtnClicked':
				return _Utils_Tuple2(
					model,
					$elm$http$Http$post(
						{
							body: $elm$http$Http$jsonBody(
								A2(
									$elm$json$Json$Encode$list,
									$elm$json$Json$Encode$string,
									A2(
										$elm$core$List$map,
										function ($) {
											return $.text;
										},
										model.data.cardList))),
							expect: A2(
								$elm$http$Http$expectJson,
								$author$project$PrintPage$GotRuby,
								$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
							url: 'http://localhost:3000/ruby'
						}));
			case 'LoopChangeBtnClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isLoopMode: !model.isLoopMode}),
					$elm$core$Platform$Cmd$none);
			case 'ModeChangeBtnClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							pronMode: _Utils_eq(model.pronMode, $author$project$PrintPage$HiraMode) ? $author$project$PrintPage$HanMode : $author$project$PrintPage$HiraMode
						}),
					$elm$core$Platform$Cmd$none);
			case 'AutoKanjiClicked':
				var data = model.data;
				var addKanjiInfo = function (card) {
					var apply = F3(
						function (a, b, c) {
							var kanjiStr = A2(
								$elm$core$String$join,
								', ',
								A2(
									$elm$core$List$filterMap,
									function (k) {
										return A2(
											$elm$core$Maybe$map,
											function (result) {
												return A2(
													$elm$core$String$join,
													' ',
													_List_fromArray(
														[k, result]));
											},
											A2($elm$core$Dict$get, k, $author$project$Hangul$kanjiDic));
									},
									A2(
										$elm$core$List$map,
										$elm$core$String$fromChar,
										A2(
											$elm$core$List$filterMap,
											function (ch) {
												return ((19968 <= $elm$core$Char$toCode(ch)) && ($elm$core$Char$toCode(ch) <= 40879)) ? $elm$core$Maybe$Just(ch) : $elm$core$Maybe$Nothing;
											},
											$elm$core$String$toList(b)))));
							return $elm$core$String$isEmpty(kanjiStr) ? A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[a, b, c])) : A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[a, b, c, kanjiStr]));
						});
					var newWords = A2(
						$elm$core$String$join,
						'\n\n',
						A2(
							$elm$core$List$map,
							function (x) {
								var _v4 = A2($elm$core$String$split, '\n', x);
								if ((_v4.b && _v4.b.b) && _v4.b.b.b) {
									if (_v4.b.b.b.b) {
										var a = _v4.a;
										var _v5 = _v4.b;
										var b = _v5.a;
										var _v6 = _v5.b;
										var c = _v6.a;
										var _v7 = _v6.b;
										var d = _v7.a;
										return $elm$core$String$isEmpty(
											$elm$core$String$trim(d)) ? A3(apply, a, b, c) : x;
									} else {
										var a = _v4.a;
										var _v8 = _v4.b;
										var b = _v8.a;
										var _v9 = _v8.b;
										var c = _v9.a;
										return A3(apply, a, b, c);
									}
								} else {
									return x;
								}
							},
							A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
								A2($elm$core$String$split, '\n\n', card.words))));
					return _Utils_update(
						card,
						{words: newWords});
				};
				var newCardList = A2($elm$core$List$map, addKanjiInfo, model.data.cardList);
				return A2(
					$author$project$PrintPage$init,
					model.data.videoId,
					A3(
						$author$project$DataManage$setListenData,
						model.data.videoId,
						_Utils_update(
							data,
							{cardList: newCardList}),
						model.appData));
			case 'AutoKanjiOverwriteClicked':
				var data = model.data;
				var addKanjiInfo = function (card) {
					var apply = F3(
						function (a, b, c) {
							var kanjiStr = A2(
								$elm$core$String$join,
								', ',
								A2(
									$elm$core$List$filterMap,
									function (k) {
										return A2(
											$elm$core$Maybe$map,
											function (result) {
												return A2(
													$elm$core$String$join,
													' ',
													_List_fromArray(
														[k, result]));
											},
											A2($elm$core$Dict$get, k, $author$project$Hangul$kanjiDic));
									},
									A2(
										$elm$core$List$map,
										$elm$core$String$fromChar,
										A2(
											$elm$core$List$filterMap,
											function (ch) {
												return ((19968 <= $elm$core$Char$toCode(ch)) && ($elm$core$Char$toCode(ch) <= 40879)) ? $elm$core$Maybe$Just(ch) : $elm$core$Maybe$Nothing;
											},
											$elm$core$String$toList(b)))));
							return $elm$core$String$isEmpty(kanjiStr) ? A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[a, b, c])) : A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[a, b, c, kanjiStr]));
						});
					var newWords = A2(
						$elm$core$String$join,
						'\n\n',
						A2(
							$elm$core$List$map,
							function (x) {
								var _v10 = A2($elm$core$String$split, '\n', x);
								if ((_v10.b && _v10.b.b) && _v10.b.b.b) {
									if (_v10.b.b.b.b) {
										var a = _v10.a;
										var _v11 = _v10.b;
										var b = _v11.a;
										var _v12 = _v11.b;
										var c = _v12.a;
										var _v13 = _v12.b;
										var d = _v13.a;
										return A3(apply, a, b, c);
									} else {
										var a = _v10.a;
										var _v14 = _v10.b;
										var b = _v14.a;
										var _v15 = _v14.b;
										var c = _v15.a;
										return A3(apply, a, b, c);
									}
								} else {
									return x;
								}
							},
							A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
								A2($elm$core$String$split, '\n\n', card.words))));
					return _Utils_update(
						card,
						{words: newWords});
				};
				var newCardList = A2($elm$core$List$map, addKanjiInfo, model.data.cardList);
				return A2(
					$author$project$PrintPage$init,
					model.data.videoId,
					A3(
						$author$project$DataManage$setListenData,
						model.data.videoId,
						_Utils_update(
							data,
							{cardList: newCardList}),
						model.appData));
			case 'TimeShiftClicked':
				if (!model.timeShift) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newCardList = A2(
						$elm$core$List$map,
						function (c) {
							return _Utils_update(
								c,
								{endTime: c.endTime + model.timeShift, startTime: c.startTime + model.timeShift});
						},
						model.data.cardList);
					var data = model.data;
					return A2(
						$author$project$PrintPage$init,
						model.data.videoId,
						A3(
							$author$project$DataManage$setListenData,
							model.data.videoId,
							_Utils_update(
								data,
								{cardList: newCardList}),
							model.appData));
				}
			case 'UpdateTimeShiftInput':
				var str = msg.a;
				var _v16 = $elm$core$String$toInt(str);
				if (_v16.$ === 'Just') {
					var shift = _v16.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{timeShift: shift}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'LoadSuccess':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isLoadSuccess: true}),
					$elm$core$Platform$Cmd$none);
			case 'LoadFail':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'WordBtnClick':
				var pron = msg.a;
				var word = msg.b;
				var key = msg.c;
				var newKeyList = A2(
					$elm$core$List$map,
					function (_v18) {
						var x = _v18.a;
						var b = _v18.b;
						return _Utils_eq(x, key) ? _Utils_Tuple2(x, !b) : _Utils_Tuple2(x, b);
					},
					model.keyList);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{keyList: newKeyList}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$GlobalPort$setItemCmd,
								'listen-' + model.data.videoId,
								A2(
									$elm$json$Json$Encode$encode,
									0,
									A2(
										$elm$json$Json$Encode$list,
										function (_v17) {
											var v = _v17.a;
											var b = _v17.b;
											return $elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'v',
														$elm$json$Json$Encode$string(v)),
														_Utils_Tuple2(
														'b',
														$elm$json$Json$Encode$bool(b))
													]));
										},
										newKeyList)))
							])));
			case 'SpeakPron':
				var _v19 = $author$project$PrintPage$currentSub(model);
				if (_v19.$ === 'Just') {
					var sub = _v19.a;
					return _Utils_Tuple2(
						model,
						$author$project$GlobalPort$speakCmd(
							$author$project$Utility$getSpeakString(
								{pron: sub.pron, word: sub.text})));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'PlayVideo':
				return _Utils_Tuple2(model, $author$project$GlobalPort$playYoutubeCmd);
			case 'CloseCompleteAlert':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isCompleteAlertOpen: false}),
					$elm$core$Platform$Cmd$none);
			case 'GotDate':
				var d = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{date: d}),
					$elm$core$Platform$Cmd$none);
			case 'GotKeyWordStr':
				var str = msg.a;
				var list = A2(
					$elm$core$Result$withDefault,
					_List_Nil,
					A2(
						$elm$json$Json$Decode$decodeString,
						$elm$json$Json$Decode$list(
							A3(
								$elm$json$Json$Decode$map2,
								$elm$core$Tuple$pair,
								A2($elm$json$Json$Decode$field, 'v', $elm$json$Json$Decode$string),
								A2($elm$json$Json$Decode$field, 'b', $elm$json$Json$Decode$bool))),
						str));
				var bList = A2($elm$core$List$map, $elm$core$Tuple$first, list);
				var aList = A2($elm$core$List$map, $elm$core$Tuple$first, model.keyList);
				return _Utils_eq(aList, bList) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{keyList: list}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'KanjiValidate':
				var validateResult = A2(
					$elm$core$String$join,
					'\n\n',
					A2(
						$elm$core$List$map,
						function (_v20) {
							var text = _v20.text;
							var words = _v20.words;
							var wordsResult = $elm$core$String$concat(
								A2(
									$elm$core$List$filter,
									function (y) {
										return A2($elm$core$Dict$member, y, $author$project$Hangul$kanjiDic);
									},
									A2(
										$elm$core$List$map,
										$elm$core$String$fromChar,
										$elm$core$String$toList(
											A2(
												$elm$core$String$join,
												'',
												A2(
													$elm$core$List$map,
													function (x) {
														var _v21 = A2($elm$core$String$split, '\n', x);
														if ((_v21.b && _v21.b.b) && _v21.b.b.b) {
															if (_v21.b.b.b.b) {
																var a = _v21.a;
																var _v22 = _v21.b;
																var b = _v22.a;
																var _v23 = _v22.b;
																var c = _v23.a;
																var _v24 = _v23.b;
																var d = _v24.a;
																return b;
															} else {
																var a = _v21.a;
																var _v25 = _v21.b;
																var b = _v25.a;
																var _v26 = _v25.b;
																var c = _v26.a;
																return b;
															}
														} else {
															return '';
														}
													},
													A2(
														$elm$core$List$filter,
														A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
														A2($elm$core$String$split, '\n\n', words))))))));
							var textResult = $elm$core$String$concat(
								A2(
									$elm$core$List$filter,
									function (y) {
										return A2($elm$core$Dict$member, y, $author$project$Hangul$kanjiDic);
									},
									A2(
										$elm$core$List$map,
										$elm$core$String$fromChar,
										$elm$core$String$toList(text))));
							return A2(
								$elm$core$String$join,
								'\n',
								_List_fromArray(
									[textResult, wordsResult]));
						},
						model.data.cardList));
				return _Utils_Tuple2(
					model,
					A3($elm$file$File$Download$string, 'data.txt', 'text', validateResult));
			case 'TimeShiftShort':
				var val = msg.a;
				return _Utils_Tuple2(
					A2($author$project$PrintPage$timeShiftUpdate, val, model),
					$elm$core$Platform$Cmd$none);
			case 'TimeValidate':
				var sentenceResult = A2(
					$elm$core$String$join,
					'\n\n',
					A2($elm$core$List$map, $author$project$PrintPage$sentenceTimeValidate, model.appData.sentence));
				var listenResult = A2(
					$elm$core$String$join,
					'\n\n',
					A2($elm$core$List$map, $author$project$PrintPage$listenTimeValidate, model.appData.listen));
				return _Utils_Tuple2(
					model,
					A3($elm$file$File$Download$string, 'data.txt', 'text', listenResult + ('\n\n' + sentenceResult)));
			case 'SlidePrevPressed':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{subIdx: model.subIdx - 1}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{subIdx: model.subIdx + 1}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$PronPage$GotRuby = function (a) {
	return {$: 'GotRuby', a: a};
};
var $author$project$PronPage$PronBtn = F4(
	function (isRemoved, boxPos, btnPos, str) {
		return {boxPos: boxPos, btnPos: btnPos, isRemoved: isRemoved, str: str};
	});
var $author$project$PronPage$QuizWait = {$: 'QuizWait'};
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $author$project$PronPage$getPron = function (kanjiWord) {
	switch (kanjiWord.$) {
		case 'IsNoneKanjiWord':
			return _List_Nil;
		case 'IsOneKanjiWord':
			var oneKanjiWord = kanjiWord.a;
			return oneKanjiWord.pron;
		default:
			var manyKanjiWord = kanjiWord.a;
			return manyKanjiWord.pron;
	}
};
var $elm$random$Random$listHelp = F4(
	function (revList, n, gen, seed) {
		listHelp:
		while (true) {
			if (n < 1) {
				return _Utils_Tuple2(revList, seed);
			} else {
				var _v0 = gen(seed);
				var value = _v0.a;
				var newSeed = _v0.b;
				var $temp$revList = A2($elm$core$List$cons, value, revList),
					$temp$n = n - 1,
					$temp$gen = gen,
					$temp$seed = newSeed;
				revList = $temp$revList;
				n = $temp$n;
				gen = $temp$gen;
				seed = $temp$seed;
				continue listHelp;
			}
		}
	});
var $elm$random$Random$list = F2(
	function (n, _v0) {
		var gen = _v0.a;
		return $elm$random$Random$Generator(
			function (seed) {
				return A4($elm$random$Random$listHelp, _List_Nil, n, gen, seed);
			});
	});
var $elm$random$Random$constant = function (value) {
	return $elm$random$Random$Generator(
		function (seed) {
			return _Utils_Tuple2(value, seed);
		});
};
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $elm$core$Set$diff = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$diff, dict1, dict2));
	});
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$PronPage$hiragana = A2(
	$elm$core$List$map,
	$elm$core$String$fromChar,
	$elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$elm$core$String$toList,
			_List_fromArray(
				['あいうえお', 'かきくけこ', 'さしすせそ', 'たちつてと', 'なにぬねの', 'はひふへほ', 'まみむめも', 'やゆよ', 'らりるれろ', 'わをん']))));
var $elm$random$Random$addOne = function (value) {
	return _Utils_Tuple2(1, value);
};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $elm$random$Random$float = F2(
	function (a, b) {
		return $elm$random$Random$Generator(
			function (seed0) {
				var seed1 = $elm$random$Random$next(seed0);
				var range = $elm$core$Basics$abs(b - a);
				var n1 = $elm$random$Random$peel(seed1);
				var n0 = $elm$random$Random$peel(seed0);
				var lo = (134217727 & n1) * 1.0;
				var hi = (67108863 & n0) * 1.0;
				var val = ((hi * 134217728.0) + lo) / 9007199254740992.0;
				var scaled = (val * range) + a;
				return _Utils_Tuple2(
					scaled,
					$elm$random$Random$next(seed1));
			});
	});
var $elm$random$Random$getByWeight = F3(
	function (_v0, others, countdown) {
		getByWeight:
		while (true) {
			var weight = _v0.a;
			var value = _v0.b;
			if (!others.b) {
				return value;
			} else {
				var second = others.a;
				var otherOthers = others.b;
				if (_Utils_cmp(
					countdown,
					$elm$core$Basics$abs(weight)) < 1) {
					return value;
				} else {
					var $temp$_v0 = second,
						$temp$others = otherOthers,
						$temp$countdown = countdown - $elm$core$Basics$abs(weight);
					_v0 = $temp$_v0;
					others = $temp$others;
					countdown = $temp$countdown;
					continue getByWeight;
				}
			}
		}
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $elm$random$Random$weighted = F2(
	function (first, others) {
		var normalize = function (_v0) {
			var weight = _v0.a;
			return $elm$core$Basics$abs(weight);
		};
		var total = normalize(first) + $elm$core$List$sum(
			A2($elm$core$List$map, normalize, others));
		return A2(
			$elm$random$Random$map,
			A2($elm$random$Random$getByWeight, first, others),
			A2($elm$random$Random$float, 0, total));
	});
var $elm$random$Random$uniform = F2(
	function (value, valueList) {
		return A2(
			$elm$random$Random$weighted,
			$elm$random$Random$addOne(value),
			A2($elm$core$List$map, $elm$random$Random$addOne, valueList));
	});
var $author$project$PronPage$randOneHira = function (occupiedList) {
	var diff = A2(
		$elm$core$Set$diff,
		$elm$core$Set$fromList($author$project$PronPage$hiragana),
		$elm$core$Set$fromList(occupiedList));
	var _v0 = $elm$core$Set$toList(diff);
	if (_v0.b) {
		var hd = _v0.a;
		var tl = _v0.b;
		return A2($elm$random$Random$uniform, hd, tl);
	} else {
		return $elm$random$Random$constant('');
	}
};
var $author$project$PronPage$randWrongList = F2(
	function (occupiedList, num) {
		return A2(
			$elm$random$Random$list,
			num,
			$author$project$PronPage$randOneHira(occupiedList));
	});
var $elm$random$Random$maxInt = 2147483647;
var $elm$random$Random$minInt = -2147483648;
var $author$project$Utility$anyInt = A2($elm$random$Random$int, $elm$random$Random$minInt, $elm$random$Random$maxInt);
var $author$project$Utility$shuffle = function (list) {
	return A2(
		$elm$random$Random$map,
		function (independentSeed) {
			return A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2(
					$elm$core$List$sortBy,
					$elm$core$Tuple$second,
					A3(
						$elm$core$List$foldl,
						F2(
							function (item, _v0) {
								var acc = _v0.a;
								var seed = _v0.b;
								var _v1 = A2($elm$random$Random$step, $author$project$Utility$anyInt, seed);
								var tag = _v1.a;
								var nextSeed = _v1.b;
								return _Utils_Tuple2(
									A2(
										$elm$core$List$cons,
										_Utils_Tuple2(item, tag),
										acc),
									nextSeed);
							}),
						_Utils_Tuple2(_List_Nil, independentSeed),
						list).a));
		},
		$elm$random$Random$independentSeed);
};
var $author$project$PronPage$answerCheckUpdate = function (model) {
	var btnList = _Utils_ap(model.currentBtnList, model.wrongBtnList);
	var userAnswer = $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function ($) {
				return $.str;
			},
			A2(
				$elm$core$List$sortBy,
				function (_v6) {
					var boxPos = _v6.boxPos;
					return A2($elm$core$Maybe$withDefault, 0, boxPos);
				},
				A2(
					$elm$core$List$filter,
					function (_v5) {
						var boxPos = _v5.boxPos;
						return !_Utils_eq(boxPos, $elm$core$Maybe$Nothing);
					},
					btnList))));
	var userFullAnswer = $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function ($) {
				return $.str;
			},
			A2(
				$elm$core$List$sortBy,
				function (_v4) {
					var boxPos = _v4.boxPos;
					return A2($elm$core$Maybe$withDefault, 0, boxPos);
				},
				A2(
					$elm$core$List$filter,
					function (_v3) {
						var boxPos = _v3.boxPos;
						return !_Utils_eq(boxPos, $elm$core$Maybe$Nothing);
					},
					_Utils_ap(model.prevBtnList, btnList)))));
	var answer = $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A2($elm$core$List$concatMap, $author$project$PronPage$getPron, model.card.kanjiWords)));
	var rangedAnswer = A3(
		$elm$core$String$slice,
		$elm$core$List$length(model.prevBtnList),
		$elm$core$List$length(model.prevBtnList) + 4,
		answer);
	if (_Utils_eq(answer, userFullAnswer)) {
		return _Utils_update(
			model,
			{
				isRightAlertOpen: true,
				quizState: $author$project$PronPage$QuizWait,
				removedBtnList: model.wrongBtnList,
				wrongBtnList: A2(
					$elm$core$List$map,
					function (x) {
						return _Utils_update(
							x,
							{isRemoved: true});
					},
					model.wrongBtnList)
			});
	} else {
		if (_Utils_eq(rangedAnswer, userAnswer)) {
			var _v0 = A2(
				$elm$random$Random$step,
				$author$project$Utility$shuffle(
					_List_fromArray(
						[0, 1, 2, 3])),
				model.randomSeed);
			var randomFour = _v0.a;
			var newSeed = _v0.b;
			var currentBtnList = A3(
				$elm$core$List$map2,
				F2(
					function (r, b) {
						return _Utils_update(
							b,
							{
								btnPos: $elm$core$Maybe$Just(r)
							});
					}),
				randomFour,
				A2($elm$core$List$take, 4, model.pendingBtnList));
			var randomDropped = A2(
				$elm$core$List$drop,
				$elm$core$List$length(currentBtnList),
				randomFour);
			var _v1 = A2(
				$elm$random$Random$step,
				A2(
					$author$project$PronPage$randWrongList,
					A2(
						$elm$core$List$map,
						function ($) {
							return $.str;
						},
						currentBtnList),
					$elm$core$List$length(randomDropped)),
				model.randomSeed);
			var randHiraList = _v1.a;
			var wrongBtnList = A3(
				$elm$core$List$map2,
				F2(
					function (r, h) {
						return A4(
							$author$project$PronPage$PronBtn,
							false,
							$elm$core$Maybe$Nothing,
							$elm$core$Maybe$Just(r),
							h);
					}),
				randomDropped,
				randHiraList);
			return _Utils_update(
				model,
				{
					currentBtnList: currentBtnList,
					isRightAlertOpen: true,
					pendingBtnList: A2($elm$core$List$drop, 4, model.pendingBtnList),
					prevBtnList: _Utils_ap(
						model.prevBtnList,
						A2(
							$elm$core$List$filter,
							function (_v2) {
								var boxPos = _v2.boxPos;
								return !_Utils_eq(boxPos, $elm$core$Maybe$Nothing);
							},
							btnList)),
					randomSeed: newSeed,
					wrongBtnList: wrongBtnList
				});
		} else {
			return _Utils_update(
				model,
				{
					canSkip: true,
					currentBtnList: A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_update(
								x,
								{boxPos: $elm$core$Maybe$Nothing});
						},
						model.currentBtnList),
					isWrongAlertOpen: true,
					quizResult: A2(
						$elm$core$List$indexedMap,
						F2(
							function (i, q) {
								return _Utils_eq(i, model.cardIdx) ? _Utils_update(
									q,
									{isRight: false}) : q;
							}),
						model.quizResult),
					wrongBtnList: A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_update(
								x,
								{boxPos: $elm$core$Maybe$Nothing});
						},
						model.wrongBtnList)
				});
		}
	}
};
var $author$project$PronPage$FuriganaOutput = F2(
	function (w, r) {
		return {r: r, w: w};
	});
var $author$project$PronPage$furiganaOutputDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'r',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'w',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed($author$project$PronPage$FuriganaOutput)));
var $author$project$PronPage$GotDate = function (a) {
	return {$: 'GotDate', a: a};
};
var $author$project$ResultData$encodePronItem = function (pronItem) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'isRight',
				$elm$json$Json$Encode$bool(pronItem.isRight)),
				_Utils_Tuple2(
				'pron',
				$elm$json$Json$Encode$string(pronItem.pron)),
				_Utils_Tuple2(
				'word',
				$elm$json$Json$Encode$string(pronItem.word)),
				_Utils_Tuple2(
				'meaning',
				$elm$json$Json$Encode$string(pronItem.meaning))
			]));
};
var $author$project$ResultData$encodePronResult = function (pronResult) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'quizResult',
				A2($elm$json$Json$Encode$list, $author$project$ResultData$encodePronItem, pronResult.quizResult))
			]));
};
var $author$project$GlobalPort$saveResultCmd = F4(
	function (name, level, videoId, val) {
		return $author$project$GlobalPort$sendToPlayer(
			A2(
				$author$project$GlobalPort$TaggedData,
				'saveResult',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'key',
							$elm$json$Json$Encode$string(
								A3($author$project$GlobalPort$getResultKey, name, level, videoId))),
							_Utils_Tuple2('item', val)
						]))));
	});
var $author$project$PronPage$gameEnd = function (model) {
	var resultData = $author$project$ResultData$PronResult(model.quizResult);
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{resultData: resultData}),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2($elm$core$Task$perform, $author$project$PronPage$GotDate, $author$project$TimeHelper$getDate),
					A4(
					$author$project$GlobalPort$saveResultCmd,
					$author$project$GlobalPort$pronName,
					model.level,
					model.data.videoId,
					$author$project$ResultData$encodePronResult(resultData)),
					A2(
					$author$project$GlobalPort$logCmd,
					'end_pron',
					$elm$core$String$fromInt(model.level) + ('_' + model.data.name))
				])));
};
var $author$project$PronPage$getBtnList = function (card) {
	return A2(
		$elm$core$List$indexedMap,
		F2(
			function (i, x) {
				return (i <= 3) ? _Utils_update(
					x,
					{
						btnPos: $elm$core$Maybe$Just(i)
					}) : x;
			}),
		A2(
			$elm$core$List$map,
			A3($author$project$PronPage$PronBtn, false, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$second,
				A2($elm$core$List$concatMap, $author$project$PronPage$getPron, card.kanjiWords))));
};
var $author$project$DataManage$setPronData = F3(
	function (videoId, pron, appData) {
		return _Utils_update(
			appData,
			{
				pron: A2(
					$elm$core$List$map,
					function (o) {
						return _Utils_eq(o.videoId, videoId) ? pron : o;
					},
					appData.pron)
			});
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$Set$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$Set$insert, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$uniqueBy = F2(
	function (f, list) {
		return A4($elm_community$list_extra$List$Extra$uniqueHelp, f, $elm$core$Set$empty, list, _List_Nil);
	});
var $author$project$PronPage$updateCardIdx = F2(
	function (idx, model) {
		var card = A2($author$project$PronPage$getCard, idx, model.info);
		var btnList = $author$project$PronPage$getBtnList(card);
		var pendingBtnList = A2($elm$core$List$drop, 4, btnList);
		var _v0 = A2(
			$elm$random$Random$step,
			$author$project$Utility$shuffle(
				_List_fromArray(
					[0, 1, 2, 3])),
			model.randomSeed);
		var randomFour = _v0.a;
		var newSeed = _v0.b;
		var currentBtnList = A3(
			$elm$core$List$map2,
			F2(
				function (r, b) {
					return _Utils_update(
						b,
						{
							btnPos: $elm$core$Maybe$Just(r)
						});
				}),
			randomFour,
			A2($elm$core$List$take, 4, btnList));
		var randomDropped = A2(
			$elm$core$List$drop,
			$elm$core$List$length(currentBtnList),
			randomFour);
		var _v1 = A2(
			$elm$random$Random$step,
			A2(
				$author$project$PronPage$randWrongList,
				A2(
					$elm$core$List$map,
					function ($) {
						return $.str;
					},
					currentBtnList),
				$elm$core$List$length(randomDropped)),
			model.randomSeed);
		var randHiraList = _v1.a;
		var wrongBtnList = A3(
			$elm$core$List$map2,
			F2(
				function (r, h) {
					return A4(
						$author$project$PronPage$PronBtn,
						false,
						$elm$core$Maybe$Nothing,
						$elm$core$Maybe$Just(r),
						h);
				}),
			randomDropped,
			randHiraList);
		return _Utils_update(
			model,
			{card: card, cardIdx: idx, currentBtnList: currentBtnList, pendingBtnList: pendingBtnList, prevBtnList: _List_Nil, randomSeed: newSeed, wrongBtnList: wrongBtnList});
	});
var $author$project$PronPage$updateIfFilled = function (model) {
	var btnList = _Utils_ap(model.currentBtnList, model.wrongBtnList);
	var userAnswer = $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function ($) {
				return $.str;
			},
			A2(
				$elm$core$List$sortBy,
				function (_v1) {
					var boxPos = _v1.boxPos;
					return A2($elm$core$Maybe$withDefault, 0, boxPos);
				},
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var boxPos = _v0.boxPos;
						return !_Utils_eq(boxPos, $elm$core$Maybe$Nothing);
					},
					btnList))));
	var answer = $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A2($elm$core$List$concatMap, $author$project$PronPage$getPron, model.card.kanjiWords)));
	var rangedAnswer = A3(
		$elm$core$String$slice,
		$elm$core$List$length(model.prevBtnList),
		$elm$core$List$length(model.prevBtnList) + 4,
		answer);
	return _Utils_eq(
		$elm$core$String$length(rangedAnswer),
		$elm$core$String$length(userAnswer)) ? _Utils_update(
		model,
		{isAnswerFilled: true}) : _Utils_update(
		model,
		{isAnswerFilled: false});
};
var $author$project$PronPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'PronBtnClicked':
				var pos = msg.a;
				var _v1 = model.quizState;
				if (_v1.$ === 'QuizPlay') {
					var range = A2(
						$elm$core$List$take,
						$elm$core$List$length(model.currentBtnList),
						A2(
							$elm$core$List$range,
							$elm$core$List$length(model.prevBtnList),
							$elm$core$List$length(model.prevBtnList) + 4));
					var btnList = _Utils_ap(
						model.prevBtnList,
						_Utils_ap(model.currentBtnList, model.wrongBtnList));
					var takenPosList = A2(
						$elm$core$List$filterMap,
						function ($) {
							return $.boxPos;
						},
						btnList);
					var possiblePosList = $elm$core$Set$toList(
						A2(
							$elm$core$Set$diff,
							$elm$core$Set$fromList(range),
							$elm$core$Set$fromList(takenPosList)));
					var mapper = function (x) {
						var _v2 = x.btnPos;
						if (_v2.$ === 'Just') {
							var bp = _v2.a;
							if (_Utils_eq(pos, bp)) {
								var _v3 = x.boxPos;
								if (_v3.$ === 'Just') {
									return _Utils_update(
										x,
										{boxPos: $elm$core$Maybe$Nothing});
								} else {
									if (possiblePosList.b) {
										var hd = possiblePosList.a;
										return _Utils_update(
											x,
											{
												boxPos: $elm$core$Maybe$Just(hd)
											});
									} else {
										return x;
									}
								}
							} else {
								return x;
							}
						} else {
							return x;
						}
					};
					return _Utils_Tuple2(
						$author$project$PronPage$updateIfFilled(
							_Utils_update(
								model,
								{
									currentBtnList: A2($elm$core$List$map, mapper, model.currentBtnList),
									wrongBtnList: A2($elm$core$List$map, mapper, model.wrongBtnList)
								})),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'PronBoxClicked':
				var pos = msg.a;
				var _v5 = model.quizState;
				if (_v5.$ === 'QuizPlay') {
					var mapper = function (x) {
						var _v6 = x.boxPos;
						if (_v6.$ === 'Just') {
							var bp = _v6.a;
							return _Utils_eq(pos, bp) ? _Utils_update(
								x,
								{boxPos: $elm$core$Maybe$Nothing}) : x;
						} else {
							return x;
						}
					};
					return _Utils_Tuple2(
						$author$project$PronPage$updateIfFilled(
							_Utils_update(
								model,
								{
									currentBtnList: A2($elm$core$List$map, mapper, model.currentBtnList),
									wrongBtnList: A2($elm$core$List$map, mapper, model.wrongBtnList)
								})),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'SetEditableValue':
				var newEditableValue = msg.a;
				var newData = A2(
					$elm$core$Result$withDefault,
					$author$project$DataManage$emptyPronData,
					A2(
						$elm$json$Json$Decode$decodeValue,
						$author$project$DataManage$pronDataDecoder,
						$author$project$EditableValue$encode(newEditableValue)));
				return _Utils_Tuple2(
					A2(
						$author$project$PronPage$updateCardIdx,
						model.cardIdx,
						_Utils_update(
							model,
							{
								data: newData,
								editableValue: newEditableValue,
								info: A2($author$project$PronPage$toInfo, model.level, newData)
							})),
					$elm$core$Platform$Cmd$none);
			case 'SaveClicked':
				return _Utils_Tuple2(
					model,
					A3(
						$elm$file$File$Download$string,
						'data.txt',
						'text',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$EditableValue$encode(model.editableValue))));
			case 'ToRoadMapPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotSeed':
				var seed = msg.a;
				var btnList = $author$project$PronPage$getBtnList(model.card);
				var pendingBtnList = A2($elm$core$List$drop, 4, btnList);
				var _v7 = A2(
					$elm$random$Random$step,
					$author$project$Utility$shuffle(
						_List_fromArray(
							[0, 1, 2, 3])),
					seed);
				var randomFour = _v7.a;
				var newSeed = _v7.b;
				var currentBtnList = A3(
					$elm$core$List$map2,
					F2(
						function (r, b) {
							return _Utils_update(
								b,
								{
									btnPos: $elm$core$Maybe$Just(r)
								});
						}),
					randomFour,
					A2($elm$core$List$take, 4, btnList));
				var randomDropped = A2(
					$elm$core$List$drop,
					$elm$core$List$length(currentBtnList),
					randomFour);
				var _v8 = A2(
					$elm$random$Random$step,
					A2(
						$author$project$PronPage$randWrongList,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.str;
							},
							currentBtnList),
						$elm$core$List$length(randomDropped)),
					model.randomSeed);
				var randHiraList = _v8.a;
				var wrongBtnList = A3(
					$elm$core$List$map2,
					F2(
						function (r, h) {
							return A4(
								$author$project$PronPage$PronBtn,
								false,
								$elm$core$Maybe$Nothing,
								$elm$core$Maybe$Just(r),
								h);
						}),
					randomDropped,
					randHiraList);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentBtnList: currentBtnList, pendingBtnList: pendingBtnList, randomSeed: newSeed, wrongBtnList: wrongBtnList}),
					$elm$core$Platform$Cmd$none);
			case 'PrevClicked':
				var newCardIdx = (!model.cardIdx) ? model.cardIdx : (model.cardIdx - 1);
				return _Utils_Tuple2(
					A2($author$project$PronPage$updateCardIdx, newCardIdx, model),
					$elm$core$Platform$Cmd$none);
			case 'NextClicked':
				var newCardIdx = _Utils_eq(
					model.cardIdx,
					$elm$core$Array$length(model.info.cardArray) - 1) ? model.cardIdx : (model.cardIdx + 1);
				return _Utils_Tuple2(
					A2($author$project$PronPage$updateCardIdx, newCardIdx, model),
					$elm$core$Platform$Cmd$none);
			case 'Restart':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GetRubyBtnClicked':
				var getWordList = function (rawStr) {
					return A2(
						$elm$core$List$filterMap,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$split('\n'),
							A2(
								$elm$core$Basics$composeR,
								$elm$core$List$indexedMap($elm$core$Tuple$pair),
								A2(
									$elm$core$Basics$composeR,
									$elm$core$List$filter(
										function (_v9) {
											var i = _v9.a;
											return i === 1;
										}),
									A2(
										$elm$core$Basics$composeR,
										$elm$core$List$head,
										$elm$core$Maybe$map($elm$core$Tuple$second))))),
						A2(
							$elm$core$List$filter,
							A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
							A2($elm$core$String$split, '\n\n', rawStr)));
				};
				return _Utils_Tuple2(
					model,
					$elm$http$Http$post(
						{
							body: $elm$http$Http$jsonBody(
								A2(
									$elm$json$Json$Encode$list,
									$elm$json$Json$Encode$string,
									A2(
										$elm$core$List$concatMap,
										getWordList,
										A2(
											$elm$core$List$map,
											function ($) {
												return $.words;
											},
											A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList)))),
							expect: A2(
								$elm$http$Http$expectJson,
								$author$project$PronPage$GotRuby,
								$elm$json$Json$Decode$list(
									$elm$json$Json$Decode$list($author$project$PronPage$furiganaOutputDecoder))),
							url: 'http://localhost:3000/ruby2'
						}));
			case 'GotRuby':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var wordList = result.a;
					var processKanji = F2(
						function (k, w) {
							if (A2($elm$core$String$contains, ',', k)) {
								var _v26 = A2(
									$elm$core$List$filter,
									$elm$core$String$contains(w),
									A2($elm$core$String$split, ',', k));
								if (_v26.b) {
									var hd = _v26.a;
									return $elm$core$String$trim(
										A3($elm$core$String$replace, w, '', hd));
								} else {
									return '';
								}
							} else {
								return $elm$core$String$trim(
									A3($elm$core$String$replace, w, '', k));
							}
						});
					var toDesWord = F2(
						function (k, _v25) {
							var w = _v25.w;
							var r = _v25.r;
							return _Utils_eq(w, r) ? A4($author$project$DataManage$DesWord, w, '', '', false) : A4(
								$author$project$DataManage$DesWord,
								w,
								r,
								A2(processKanji, k, w),
								false);
						});
					var getList = function (rawStr) {
						return A2(
							$elm$core$List$map,
							function (x) {
								var _v19 = A2($elm$core$String$split, '\n', x);
								if ((_v19.b && _v19.b.b) && _v19.b.b.b) {
									if (_v19.b.b.b.b) {
										var _v20 = _v19.b;
										var _v21 = _v20.b;
										var c = _v21.a;
										var _v22 = _v21.b;
										var d = _v22.a;
										return _Utils_Tuple2(c, d);
									} else {
										var _v23 = _v19.b;
										var _v24 = _v23.b;
										var c = _v24.a;
										return _Utils_Tuple2(c, '');
									}
								} else {
									return _Utils_Tuple2('', '');
								}
							},
							A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
								A2($elm$core$String$split, '\n\n', rawStr)));
					};
					var theList = A2(
						$elm$core$List$concatMap,
						getList,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.words;
							},
							A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList));
					var pronCardListZero = A2(
						$elm_community$list_extra$List$Extra$uniqueBy,
						function (_v18) {
							var kanjiWord = _v18.kanjiWord;
							return $elm$core$String$concat(
								A2(
									$elm$core$List$map,
									function ($) {
										return $.word;
									},
									kanjiWord));
						},
						A2(
							$elm$core$List$filter,
							function (_v16) {
								var kanjiWord = _v16.kanjiWord;
								return !A2(
									$elm$core$List$all,
									function (_v17) {
										var pron = _v17.pron;
										return $elm$core$String$isEmpty(pron);
									},
									kanjiWord);
							},
							A3(
								$elm$core$List$map2,
								F2(
									function (ws, _v15) {
										var d = _v15.a;
										var k = _v15.b;
										return A2(
											$author$project$DataManage$PronCard,
											d,
											A2(
												$elm$core$List$map,
												toDesWord(k),
												ws));
									}),
								wordList,
								theList)));
					var pronCardListFirst = A2(
						$elm$core$List$map,
						function (card) {
							var _v14 = card.kanjiWord;
							if (_v14.b) {
								var hd = _v14.a;
								return A2($elm$core$String$contains, 'ー', hd.word) ? _Utils_update(
									card,
									{
										kanjiWord: A2(
											$elm$core$List$map,
											function (x) {
												return (x === 'ー') ? A4($author$project$DataManage$DesWord, 'ー', '', '', false) : A4(
													$author$project$DataManage$DesWord,
													x,
													$author$project$Hangul$katakanaToHiragana(x),
													'',
													false);
											},
											A2(
												$elm$core$List$map,
												$elm$core$String$fromChar,
												$elm$core$String$toList(hd.word)))
									}) : _Utils_update(
									card,
									{kanjiWord: card.kanjiWord});
							} else {
								return _Utils_update(
									card,
									{kanjiWord: card.kanjiWord});
							}
						},
						pronCardListZero);
					var pronCardListSecond = A2(
						$elm$core$List$map,
						function (card) {
							var _v12 = card.kanjiWord;
							if (_v12.b && _v12.b.b) {
								var a = _v12.a;
								var _v13 = _v12.b;
								var b = _v13.a;
								return ((a.word === '一') && (b.word === '人')) ? _Utils_update(
									card,
									{
										kanjiWord: _List_fromArray(
											[
												A4($author$project$DataManage$DesWord, '一', 'ひとり', '한 일', true),
												A4($author$project$DataManage$DesWord, '人', '', '사람 인', true)
											])
									}) : (((a.word === '二') && (b.word === '人')) ? _Utils_update(
									card,
									{
										kanjiWord: _List_fromArray(
											[
												A4($author$project$DataManage$DesWord, '二', 'ふたり', '두 이', true),
												A4($author$project$DataManage$DesWord, '人', '', '사람 인', true)
											])
									}) : (((a.word === '愛') && (b.word === 'おしい')) ? _Utils_update(
									card,
									{
										kanjiWord: _List_fromArray(
											[
												A4($author$project$DataManage$DesWord, '愛', 'いと', '사랑 애', false),
												A4($author$project$DataManage$DesWord, 'おしい', '', '', false)
											])
									}) : ((b.word === '々') ? _Utils_update(
									card,
									{
										kanjiWord: _List_fromArray(
											[
												a,
												_Utils_update(
												b,
												{des: a.des})
											])
									}) : _Utils_update(
									card,
									{kanjiWord: card.kanjiWord}))));
							} else {
								return _Utils_update(
									card,
									{kanjiWord: card.kanjiWord});
							}
						},
						pronCardListFirst);
					var pronCardListThird = A2(
						$elm$core$List$map,
						function (card) {
							var _v11 = card.kanjiWord;
							if (_v11.b) {
								var hd = _v11.a;
								return (hd.word === '今日') ? _Utils_update(
									card,
									{
										kanjiWord: _List_fromArray(
											[
												A4($author$project$DataManage$DesWord, '今', 'きょう', '이제 금', true),
												A4($author$project$DataManage$DesWord, '日', '', '날 일', true)
											])
									}) : ((hd.word === '昨日') ? _Utils_update(
									card,
									{
										kanjiWord: _List_fromArray(
											[
												A4($author$project$DataManage$DesWord, '昨', 'きのう', '어제 작', true),
												A4($author$project$DataManage$DesWord, '日', '', '날 일', true)
											])
									}) : _Utils_update(
									card,
									{kanjiWord: card.kanjiWord}));
							} else {
								return _Utils_update(
									card,
									{kanjiWord: card.kanjiWord});
							}
						},
						pronCardListSecond);
					var data = model.data;
					var newData = _Utils_update(
						data,
						{cardList: pronCardListThird});
					return A3(
						$author$project$PronPage$init,
						0,
						model.data.videoId,
						A3($author$project$DataManage$setPronData, model.data.videoId, newData, model.appData));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'AnswerCheckBtnClicked':
				return _Utils_Tuple2(
					$author$project$PronPage$updateIfFilled(
						$author$project$PronPage$answerCheckUpdate(model)),
					$elm$core$Platform$Cmd$none);
			case 'SkipBtnClicked':
				var answerList = A2(
					$elm$core$List$indexedMap,
					F2(
						function (i, x) {
							return _Utils_update(
								x,
								{
									boxPos: $elm$core$Maybe$Just(i)
								});
						}),
					A2(
						$elm$core$List$map,
						A3($author$project$PronPage$PronBtn, false, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
						A2(
							$elm$core$List$map,
							$elm$core$Tuple$second,
							A2($elm$core$List$concatMap, $author$project$PronPage$getPron, model.card.kanjiWords))));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							canSkip: false,
							currentBtnList: _List_Nil,
							prevBtnList: answerList,
							quizState: $author$project$PronPage$QuizWait,
							wrongBtnList: A2(
								$elm$core$List$map,
								function (x) {
									return _Utils_update(
										x,
										{isRemoved: true});
								},
								model.wrongBtnList)
						}),
					$elm$core$Platform$Cmd$none);
			case 'CloseRightAlert':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isRightAlertOpen: false}),
					$elm$core$Platform$Cmd$none);
			case 'CloseWrongAlert':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isWrongAlertOpen: false}),
					$elm$core$Platform$Cmd$none);
			case 'NextBtnClicked':
				return _Utils_eq(
					model.cardIdx,
					$elm$core$Array$length(model.info.cardArray) - 1) ? $author$project$PronPage$gameEnd(model) : _Utils_Tuple2(
					A2(
						$author$project$PronPage$updateCardIdx,
						model.cardIdx + 1,
						_Utils_update(
							model,
							{canSkip: false, isAnswerFilled: false, quizState: $author$project$PronPage$QuizPlay})),
					$elm$core$Platform$Cmd$none);
			case 'GotDate':
				var date = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isModalOpen: true}),
					$author$project$GlobalPort$saveProgressCmd(
						A4($author$project$GlobalPort$Progress, model.data.videoId, $author$project$GlobalPort$pronName, model.level, date)));
			case 'ShuffleBtnClicked':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'Speak':
				var str = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$speakCmd(str));
			default:
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$GlobalPort$logCmd,
								'show_full_ad',
								'pron' + ($elm$core$String$fromInt(model.level) + (' : ' + model.data.name))),
								A2(
								$elm$core$Task$perform,
								function (_v27) {
									return $author$project$PronPage$ToRoadMapPage;
								},
								$elm$time$Time$now)
							])));
		}
	});
var $author$project$QuestionPage$update = F2(
	function (msg, model) {
		if (msg.$ === 'NoOp') {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$RankingPage$update = F2(
	function (msg, model) {
		if (msg.$ === 'NoOp') {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$RoadMapPage$toProgressKey = function (_v0) {
	var btnType = _v0.btnType;
	var isActive = _v0.isActive;
	var level = _v0.level;
	switch (btnType.$) {
		case 'ListenBtn':
			return '들어보기';
		case 'TapGameBtn':
			return '제때 누르기' + $elm$core$String$fromInt(level);
		case 'PronBtn':
			return '발음 맞추기' + $elm$core$String$fromInt(level);
		case 'KanjiBtn':
			return '한자 퀴즈' + $elm$core$String$fromInt(level);
		case 'SentenceBtn':
			return '문장 조합하기';
		default:
			return '단어장';
	}
};
var $author$project$RoadMapPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToMainPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToListenPage':
				var videoId = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToTapGamePage':
				var _int = msg.a;
				var videoId = msg.b;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToPronPage':
				var _int = msg.a;
				var videoId = msg.b;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToKanjiPage':
				var _int = msg.a;
				var string = msg.b;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToSentencePage':
				var string = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToVocaPage':
				var string = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotProgress':
				var list = msg.a;
				var newBtnList = A2(
					$elm$core$List$map,
					function (b) {
						return A2(
							$elm$core$List$member,
							$author$project$RoadMapPage$toProgressKey(b),
							A2(
								$elm$core$List$map,
								function (p) {
									return (!p.level) ? p.name : _Utils_ap(
										p.name,
										$elm$core$String$fromInt(p.level));
								},
								list)) ? _Utils_update(
							b,
							{isActive: true}) : b;
					},
					model.btnList);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							btnList: newBtnList,
							shouldCompleteFirst: A2(
								$elm$core$Maybe$withDefault,
								'',
								A2(
									$elm$core$Maybe$map,
									$author$project$RoadMapPage$toProgressKey,
									$elm$core$List$head(
										A2(
											$elm$core$List$filter,
											A2(
												$elm$core$Basics$composeR,
												function ($) {
													return $.isActive;
												},
												$elm$core$Basics$not),
											newBtnList))))
						}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$SearchPage$ToMainPage = {$: 'ToMainPage'};
var $author$project$SearchPage$ToRoadMap = F2(
	function (a, b) {
		return {$: 'ToRoadMap', a: a, b: b};
	});
var $author$project$SearchPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToMainPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToAwardPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToRoadMap':
				var name = msg.a;
				var videoId = msg.b;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'SearchStrChanged':
				var newStr = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{searchStr: newStr, selectedCategory: '전체'}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2($author$project$GlobalPort$logCmd, 'search_keyword', newStr),
								A2($author$project$HtmlElement$jumpToTop, 'list-scroll', $author$project$SearchPage$NoOp)
							])));
			case 'SearchBtnClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{searchStr: '', selectedCategory: '전체'}),
					(!$author$project$Utility$isApple) ? A2($author$project$HtmlElement$jumpToTop, 'list-scroll', $author$project$SearchPage$NoOp) : $elm$core$Platform$Cmd$none);
			case 'CategoryBtnClicked':
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{selectedCategory: str}),
					A2($author$project$HtmlElement$jumpToTop, 'list-scroll', $author$project$SearchPage$NoOp));
			case 'BackPressed':
				return (('전체' === model.selectedCategory) && $elm$core$String$isEmpty(model.searchStr)) ? _Utils_Tuple2(
					model,
					A2(
						$elm$core$Task$perform,
						function (_v1) {
							return $author$project$SearchPage$ToMainPage;
						},
						$elm$time$Time$now)) : _Utils_Tuple2(
					_Utils_update(
						model,
						{searchStr: '', selectedCategory: '전체'}),
					$elm$core$Platform$Cmd$none);
			case 'PreToRoadMap':
				var name = msg.a;
				var videoId = msg.b;
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Task$perform,
						function (_v2) {
							return A2($author$project$SearchPage$ToRoadMap, name, videoId);
						},
						$elm$time$Time$now));
			default:
				var maybeHistory = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{visitHistory: maybeHistory}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$SentencePage$GotSplit = function (a) {
	return {$: 'GotSplit', a: a};
};
var $author$project$SentencePage$WrongAfter1Sec = {$: 'WrongAfter1Sec'};
var $author$project$SentencePage$WrongInputAgain = {$: 'WrongInputAgain'};
var $author$project$SentencePage$getOriginalBase = function (rawW) {
	var w = A2($elm$core$String$startsWith, '*', rawW) ? A2($elm$core$String$dropLeft, 1, rawW) : rawW;
	return A2(
		$elm$core$Maybe$withDefault,
		w,
		$elm$core$List$head(
			A2($elm$core$String$split, '\n', w)));
};
var $author$project$SentencePage$getRubyRead = function (w) {
	var folder = F2(
		function (ele, acc) {
			if (acc.b) {
				if (acc.a === '>') {
					return A2($elm$core$List$cons, ele, acc);
				} else {
					var tl = acc.b;
					return (ele === '{') ? tl : A2($elm$core$List$cons, ele, acc);
				}
			} else {
				return A2($elm$core$List$cons, ele, acc);
			}
		});
	return A3(
		$elm$core$String$replace,
		'}',
		'',
		A3(
			$elm$core$String$replace,
			'{',
			'',
			$elm$core$String$concat(
				A2(
					$elm$core$List$filterMap,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$split('<'),
						$elm$core$List$head),
					A2(
						$elm$core$String$split,
						'>',
						$elm$core$String$concat(
							$elm$core$List$reverse(
								A3(
									$elm$core$List$foldl,
									folder,
									_List_Nil,
									A2(
										$elm$core$List$map,
										$elm$core$String$fromChar,
										$elm$core$String$toList(w))))))))));
};
var $author$project$SentencePage$getOriginalRead = function (rawW) {
	return $author$project$SentencePage$getRubyRead(
		$author$project$SentencePage$getOriginalBase(rawW));
};
var $author$project$SentencePage$idToWordBtn = F2(
	function (list, id) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				function (x) {
					return _Utils_eq(x.id, id);
				},
				list));
	});
var $author$project$SentencePage$btnClickedUpdate = F3(
	function (isUp, id, model) {
		var isLastSelectedId = A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (lId) {
					return _Utils_eq(lId, id);
				},
				$elm$core$List$head(
					$elm$core$List$reverse(model.selectedBtnIds))));
		var newSelectedBtnIds = isUp ? A2(
			$elm$core$List$filter,
			$elm$core$Basics$neq(id),
			model.selectedBtnIds) : (isLastSelectedId ? A2(
			$elm$core$List$filter,
			$elm$core$Basics$neq(id),
			model.selectedBtnIds) : (A2($elm$core$List$member, id, model.selectedBtnIds) ? model.selectedBtnIds : _Utils_ap(
			model.selectedBtnIds,
			_List_fromArray(
				[id]))));
		var newBtnList = A2(
			$elm$core$List$map,
			function (b) {
				return A2($elm$core$List$member, b.id, newSelectedBtnIds) ? _Utils_update(
					b,
					{isMoved: true}) : _Utils_update(
					b,
					{isMoved: false});
			},
			model.btnList);
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{btnList: newBtnList, selectedBtnIds: newSelectedBtnIds}),
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						(model.isPlaying && (model.playerState === 'onPaused')) ? $author$project$GlobalPort$playYoutubeCmd : $elm$core$Platform$Cmd$none,
						(_Utils_eq(model.quizState, $author$project$SentencePage$WrongInputBetween) || _Utils_eq(model.quizState, $author$project$SentencePage$WrongInputAgain)) ? $author$project$GlobalPort$speakCmd(
						A2(
							$elm$core$Maybe$withDefault,
							'',
							A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.word;
									},
									$author$project$SentencePage$getOriginalRead),
								A2($author$project$SentencePage$idToWordBtn, model.btnList, id)))) : $elm$core$Platform$Cmd$none
					])));
	});
var $author$project$Utility$chain = F2(
	function (func, _v0) {
		var m1 = _v0.a;
		var c1 = _v0.b;
		var _v1 = func(m1);
		var m2 = _v1.a;
		var c2 = _v1.b;
		return _Utils_Tuple2(
			m2,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[c1, c2])));
	});
var $author$project$Utility$chainIf = F3(
	function (isChain, func, _v0) {
		var m1 = _v0.a;
		var c1 = _v0.b;
		return isChain(m1) ? A2(
			$author$project$Utility$chain,
			func,
			_Utils_Tuple2(m1, c1)) : _Utils_Tuple2(m1, c1);
	});
var $author$project$Utility$chainModel = F2(
	function (func, _v0) {
		var m1 = _v0.a;
		var c1 = _v0.b;
		return _Utils_Tuple2(
			func(m1),
			c1);
	});
var $author$project$GlobalPort$destroyYoutubeCmd = $author$project$GlobalPort$sendToPlayer(
	A2($author$project$GlobalPort$TaggedData, 'destroyYoutube', $elm$json$Json$Encode$null));
var $author$project$SentencePage$getCard = F2(
	function (cardIdx, cardList) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptySentenceCard,
			A2(
				$elm$core$Array$get,
				cardIdx,
				$elm$core$Array$fromList(cardList)));
	});
var $author$project$SentencePage$getRubyText = function (w) {
	return A3(
		$elm$core$String$replace,
		'>',
		'',
		A3(
			$elm$core$String$replace,
			'<',
			'',
			$elm$core$String$concat(
				A2(
					$elm$core$List$filterMap,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$split('{'),
						$elm$core$List$head),
					A2($elm$core$String$split, '}', w)))));
};
var $author$project$SentencePage$getOriginalWord = function (rawW) {
	return $author$project$SentencePage$getRubyText(
		$author$project$SentencePage$getOriginalBase(rawW));
};
var $author$project$GlobalPort$getPlayerTimeCmd = $author$project$GlobalPort$sendToPlayer(
	A2($author$project$GlobalPort$TaggedData, 'getPlayerTime', $elm$json$Json$Encode$null));
var $author$project$SentencePage$isInputStateBase = function (quizState) {
	return _Utils_eq(quizState, $author$project$SentencePage$InputWaiting) || _Utils_eq(quizState, $author$project$SentencePage$WrongInputAgain);
};
var $author$project$SentencePage$isInputState = function (model) {
	return $author$project$SentencePage$isInputStateBase(model.quizState);
};
var $author$project$SentencePage$GotDate = function (a) {
	return {$: 'GotDate', a: a};
};
var $author$project$ResultData$encodeSentenceItem = function (sentenceItem) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'isRight',
				$elm$json$Json$Encode$bool(sentenceItem.isRight)),
				_Utils_Tuple2(
				'pron',
				$elm$json$Json$Encode$string(sentenceItem.pron)),
				_Utils_Tuple2(
				'sentence',
				$elm$json$Json$Encode$string(sentenceItem.sentence)),
				_Utils_Tuple2(
				'kor',
				$elm$json$Json$Encode$string(sentenceItem.kor))
			]));
};
var $author$project$ResultData$encodeSentenceResult = function (sentenceResult) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'quizResult',
				A2($elm$json$Json$Encode$list, $author$project$ResultData$encodeSentenceItem, sentenceResult.quizResult))
			]));
};
var $author$project$SentencePage$gameEnd = function (model) {
	var resultData = $author$project$ResultData$SentenceResult(model.quizResult);
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{resultData: resultData}),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2($elm$core$Task$perform, $author$project$SentencePage$GotDate, $author$project$TimeHelper$getDate),
					A4(
					$author$project$GlobalPort$saveResultCmd,
					$author$project$GlobalPort$sentenceName,
					0,
					model.data.videoId,
					$author$project$ResultData$encodeSentenceResult(resultData)),
					A2($author$project$GlobalPort$logCmd, 'end_sentence', model.data.name)
				])));
};
var $author$project$SentencePage$toContent = function (model) {
	return {btnList: model.btnList, korTranslation: model.korTranslation, quizState: model.quizState, randomSeed: model.randomSeed, selectedBtnIds: model.selectedBtnIds};
};
var $author$project$SentencePage$nextUpdate = function (model) {
	if (_Utils_eq(
		model.cardIdx,
		$elm$core$List$length(model.data.cardList) - 1)) {
		return $author$project$SentencePage$gameEnd(model);
	} else {
		var newCardIdx = model.cardIdx + 1;
		var newCard = A2($author$project$SentencePage$getCard, newCardIdx, model.data.cardList);
		var _v0 = A2(
			$elm$random$Random$step,
			A2($elm$random$Random$int, 0, 1),
			model.randomSeed);
		var newSeed = _v0.b;
		var _v1 = A2($author$project$SentencePage$toBtnList, model.idCnt, newCard.wordList);
		var newIdCnt = _v1.a;
		var newBtnList = _v1.b;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					btnList: newBtnList,
					cardIdx: newCardIdx,
					idCnt: newIdCnt,
					korTranslation: newCard.kor,
					prevContent: $elm$core$Maybe$Just(
						$author$project$SentencePage$toContent(model)),
					randomSeed: newSeed,
					selectedBtnIds: _List_Nil
				}),
			$author$project$GlobalPort$playYoutubeCmd);
	}
};
var $author$project$SentencePage$replayEndUpdate = function (model) {
	return $author$project$SentencePage$nextUpdate(
		_Utils_update(
			model,
			{quizState: $author$project$SentencePage$InputWaiting}));
};
var $author$project$DataManage$setSentenceData = F3(
	function (videoId, sentence, appData) {
		return _Utils_update(
			appData,
			{
				sentence: A2(
					$elm$core$List$map,
					function (o) {
						return _Utils_eq(o.videoId, videoId) ? sentence : o;
					},
					appData.sentence)
			});
	});
var $author$project$SentencePage$getCurrentCard = function (model) {
	return A2(
		$elm$core$Array$get,
		model.cardIdx,
		$elm$core$Array$fromList(model.data.cardList));
};
var $author$project$SentencePage$getPreviousCard = function (model) {
	return A2(
		$elm$core$Array$get,
		model.cardIdx - 1,
		$elm$core$Array$fromList(model.data.cardList));
};
var $author$project$SentencePage$skipUpdate = F2(
	function (model, cmd) {
		var _v0 = _Utils_Tuple2(
			$author$project$SentencePage$getPreviousCard(model),
			$author$project$SentencePage$getCurrentCard(model));
		if ((_v0.a.$ === 'Nothing') && (_v0.b.$ === 'Just')) {
			var _v1 = _v0.a;
			var c = _v0.b.a;
			var targetTime = c.startTime - 1000;
			return (_Utils_cmp(
				$elm$core$Basics$round(model.currentTime),
				targetTime) < 0) ? _Utils_Tuple2(
				model,
				$author$project$GlobalPort$seekToMillisCmd(targetTime)) : _Utils_Tuple2(model, cmd);
		} else {
			return _Utils_Tuple2(model, cmd);
		}
	});
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $author$project$SentencePage$updateAfterInput = function (model) {
	var selectedWords = A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.word;
			},
			A2($elm$core$Basics$composeR, $author$project$SentencePage$getOriginalWord, $elm$core$String$trim)),
		A2(
			$elm$core$List$filterMap,
			$author$project$SentencePage$idToWordBtn(model.btnList),
			model.selectedBtnIds));
	var isFullInput = _Utils_eq(
		$elm$core$List$length(model.btnList),
		$elm$core$List$length(model.selectedBtnIds));
	var isCorrect = _Utils_eq(
		A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.word;
				},
				A2($elm$core$Basics$composeR, $author$project$SentencePage$getOriginalWord, $elm$core$String$trim)),
			model.btnList),
		selectedWords);
	return isFullInput ? (isCorrect ? _Utils_Tuple2(
		_Utils_update(
			model,
			{
				isRightAlertOpen: true,
				quizResult: _Utils_eq(model.quizState, $author$project$SentencePage$WrongInputAgain) ? model.quizResult : A2(
					$elm$core$List$indexedMap,
					F2(
						function (i, s) {
							return _Utils_eq(i, model.cardIdx) ? _Utils_update(
								s,
								{isRight: true}) : s;
						}),
					model.quizResult),
				quizState: $author$project$SentencePage$RightStart
			}),
		$elm$core$Platform$Cmd$none) : (model.isSpeedMode ? _Utils_Tuple2(
		_Utils_update(
			model,
			{
				isWrongAlertOpen: true,
				quizState: $author$project$SentencePage$WrongStart,
				selectedBtnIds: $elm$core$List$sort(model.selectedBtnIds)
			}),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$GlobalPort$seekToMillisCmd(
					A2($author$project$SentencePage$getCard, model.cardIdx, model.data.cardList).startTime - 500),
					$author$project$GlobalPort$playYoutubeCmd
				]))) : _Utils_Tuple2(
		_Utils_update(
			model,
			{isWrongAlertOpen: true, quizState: $author$project$SentencePage$WrongInputBetween}),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$GlobalPort$seekToMillisCmd(
					A2($author$project$SentencePage$getCard, model.cardIdx, model.data.cardList).startTime - 500),
					$author$project$GlobalPort$playYoutubeCmd
				]))))) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
};
var $author$project$SentencePage$updateAfterTimePast = function (model) {
	var isFullInput = _Utils_eq(
		$elm$core$List$length(model.btnList),
		$elm$core$List$length(model.selectedBtnIds));
	return isFullInput ? _Utils_Tuple2(model, $elm$core$Platform$Cmd$none) : _Utils_Tuple2(
		model,
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$GlobalPort$seekToMillisCmd(
					A2($author$project$SentencePage$getCard, model.cardIdx, model.data.cardList).endTime),
					$author$project$GlobalPort$pauseYoutubeCmd
				])));
};
var $author$project$SentencePage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'PreTranslateText':
				var result = A2(
					$elm$core$String$join,
					'\n',
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (i, c) {
								return A2(
									$elm$core$String$join,
									' ',
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (j, w) {
												return '(' + ($author$project$SentencePage$getOriginalWord(w) + ')');
											}),
										c.wordList));
							}),
						model.data.cardList));
				return _Utils_Tuple2(
					model,
					A3($elm$file$File$Download$string, 'data.txt', 'text', result));
			case 'BtnUpClicked':
				var id = msg.a;
				return $author$project$SentencePage$isInputState(model) ? A3($author$project$SentencePage$btnClickedUpdate, true, id, model) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'BtnClicked':
				var id = msg.a;
				return $author$project$SentencePage$isInputState(model) ? A3(
					$author$project$Utility$chainIf,
					A2(
						$elm$core$Basics$composeL,
						$elm$core$Basics$not,
						function ($) {
							return $.isPlaying;
						}),
					$author$project$SentencePage$updateAfterInput,
					A3($author$project$SentencePage$btnClickedUpdate, false, id, model)) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'SaveClicked':
				return _Utils_Tuple2(
					model,
					A3(
						$elm$file$File$Download$string,
						'data.txt',
						'text',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$EditableValue$encode(model.editableValue))));
			case 'PrevClicked':
				if (!model.cardIdx) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newCardIdx = model.cardIdx - 1;
					var newCard = A2($author$project$SentencePage$getCard, newCardIdx, model.data.cardList);
					var _v1 = A2($author$project$SentencePage$toBtnList, model.idCnt, newCard.wordList);
					var newIdCnt = _v1.a;
					var newBtnList = _v1.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{btnList: newBtnList, cardIdx: newCardIdx, idCnt: newIdCnt, korTranslation: newCard.kor, selectedBtnIds: _List_Nil}),
						$elm$core$Platform$Cmd$none);
				}
			case 'NextClicked':
				if (_Utils_eq(
					model.cardIdx,
					$elm$core$List$length(model.data.cardList) - 1)) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newCardIdx = model.cardIdx + 1;
					var newCard = A2($author$project$SentencePage$getCard, newCardIdx, model.data.cardList);
					var _v2 = A2($author$project$SentencePage$toBtnList, model.idCnt, newCard.wordList);
					var newIdCnt = _v2.a;
					var newBtnList = _v2.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{btnList: newBtnList, cardIdx: newCardIdx, idCnt: newIdCnt, korTranslation: newCard.kor, selectedBtnIds: _List_Nil}),
						$elm$core$Platform$Cmd$none);
				}
			case 'SetEditableValue':
				var editableValue = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{editableValue: editableValue}),
					$elm$core$Platform$Cmd$none);
			case 'Restart':
				return A2($author$project$SentencePage$init, model.data.videoId, model.appData);
			case 'ToRoadMapPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotCurrentTime':
				var time = msg.a;
				return (model.isModalOpen || (model.playerState === 'onPaused')) ? _Utils_Tuple2(model, $elm$core$Platform$Cmd$none) : function (_v3) {
					var m = _v3.a;
					var c = _v3.b;
					return A2($author$project$SentencePage$skipUpdate, m, c);
				}(
					A3(
						$author$project$Utility$chainIf,
						function (m) {
							return _Utils_eq(m.quizState, $author$project$SentencePage$WrongAfter1Sec) && (!m.isPlaying);
						},
						$author$project$SentencePage$replayEndUpdate,
						A3(
							$author$project$Utility$chainIf,
							function (m) {
								return $author$project$SentencePage$isInputState(m) && (!m.isPlaying);
							},
							$author$project$SentencePage$updateAfterInput,
							A3(
								$author$project$Utility$chainIf,
								function (m) {
									return $author$project$SentencePage$isInputState(m) && (!m.isPlaying);
								},
								$author$project$SentencePage$updateAfterTimePast,
								A2(
									$author$project$Utility$chainModel,
									function (m) {
										return _Utils_update(
											m,
											{
												isPlaying: _Utils_cmp(
													$elm$core$Basics$floor(m.currentTime),
													A2($author$project$SentencePage$getCard, m.cardIdx, m.data.cardList).endTime) < 0
											});
									},
									_Utils_Tuple2(
										_Utils_update(
											model,
											{currentTime: time}),
										$elm$core$Platform$Cmd$none))))));
			case 'GotPlayerState':
				var playerState = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{playerState: playerState}),
					(model.playerState === 'onPlaying') ? $author$project$GlobalPort$getPlayerTimeCmd : $elm$core$Platform$Cmd$none);
			case 'GotSeed':
				var seed = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{randomSeed: seed}),
					$elm$core$Platform$Cmd$none);
			case 'CloseRightAlert':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isRightAlertOpen: false}),
					$elm$core$Platform$Cmd$none);
			case 'CloseWrongAlert':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isWrongAlertOpen: false}),
					$elm$core$Platform$Cmd$none);
			case 'GetFromListenClicked':
				var textList = A2(
					$elm$core$List$map,
					function ($) {
						return $.text;
					},
					A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList);
				return _Utils_Tuple2(
					model,
					$elm$http$Http$post(
						{
							body: $elm$http$Http$jsonBody(
								A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, textList)),
							expect: A2(
								$elm$http$Http$expectJson,
								$author$project$SentencePage$GotSplit,
								$elm$json$Json$Decode$list(
									$elm$json$Json$Decode$list($elm$json$Json$Decode$string))),
							url: 'http://localhost:3000/split'
						}));
			case 'GotSplit':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var value = result.a;
					var d = model.data;
					var cardList = A2(
						$elm$core$List$filter,
						function (x) {
							return !$elm$core$String$isEmpty(
								$elm$core$String$trim(x.kor));
						},
						A2(
							$elm$core$List$map,
							function (card) {
								return _Utils_update(
									card,
									{
										wordList: A2(
											$elm$core$List$filter,
											function (word) {
												return !$elm$core$String$isEmpty(
													$elm$core$String$trim(word));
											},
											card.wordList)
									});
							},
							A3(
								$elm$core$List$map2,
								F2(
									function (v, c) {
										return A4($author$project$DataManage$SentenceCard, c.kor, v, c.startTime, c.endTime);
									}),
								value,
								A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList)));
					var newData = _Utils_update(
						d,
						{cardList: cardList});
					return A2(
						$author$project$SentencePage$init,
						model.data.videoId,
						A3($author$project$DataManage$setSentenceData, model.data.videoId, newData, model.appData));
				} else {
					var error = result.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'WrongWaitEnded':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{quizState: $author$project$SentencePage$WrongAfter1Sec}),
					$elm$core$Platform$Cmd$none);
			case 'RightWaitEnded':
				return $author$project$SentencePage$nextUpdate(
					_Utils_update(
						model,
						{quizState: $author$project$SentencePage$InputWaiting}));
			case 'TimeShiftClicked':
				var newCardList = A2(
					$elm$core$List$map,
					function (c) {
						return _Utils_update(
							c,
							{endTime: c.endTime + model.timeShift, startTime: c.startTime + model.timeShift});
					},
					model.data.cardList);
				var d = model.data;
				var newData = _Utils_update(
					d,
					{cardList: newCardList});
				return A2(
					$author$project$SentencePage$init,
					model.data.videoId,
					A3($author$project$DataManage$setSentenceData, model.data.videoId, newData, model.appData));
			case 'UpdateTimeShiftInput':
				var str = msg.a;
				var _v5 = $elm$core$String$toInt(str);
				if (_v5.$ === 'Just') {
					var shift = _v5.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{timeShift: shift}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'GotDate':
				var date = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isModalOpen: true}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$GlobalPort$playYoutubeCmd,
								$author$project$GlobalPort$saveProgressCmd(
								A4($author$project$GlobalPort$Progress, model.data.videoId, $author$project$GlobalPort$sentenceName, 0, date))
							])));
			case 'JumpTo':
				var time = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$seekToMillisCmd(time));
			case 'JumpAndPlay':
				var time = msg.a;
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$GlobalPort$seekToMillisCmd(time),
								$author$project$GlobalPort$playYoutubeCmd
							])));
			case 'LoadSuccess':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isLoadSuccess: true}),
					$elm$core$Platform$Cmd$none);
			case 'LoadFail':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'PlayVideo':
				return _Utils_Tuple2(model, $author$project$GlobalPort$playYoutubeCmd);
			case 'Speak':
				var str = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$speakCmd(str));
			case 'EndBtnClicked':
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$GlobalPort$destroyYoutubeCmd,
								A2($author$project$GlobalPort$logCmd, 'show_full_ad', 'sentence : ' + model.data.name),
								A2(
								$elm$core$Task$perform,
								function (_v6) {
									return $author$project$SentencePage$ToRoadMapPage;
								},
								$elm$time$Time$now)
							])));
			case 'WrongInputBetweenFinish':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							btnList: A2(
								$elm$core$List$map,
								function (x) {
									return _Utils_update(
										x,
										{isMoved: false});
								},
								model.btnList),
							quizState: $author$project$SentencePage$WrongInputAgain,
							selectedBtnIds: _List_Nil
						}),
					$elm$core$Platform$Cmd$none);
			case 'GetFromListenClickedGerman':
				var senCardList = A2(
					$elm$core$List$map,
					function (c) {
						return A4(
							$author$project$DataManage$SentenceCard,
							c.kor,
							A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
								A2(
									$elm$core$List$map,
									$elm$core$String$trim,
									A2(
										$elm$core$List$concatMap,
										$elm$core$String$split('('),
										A2(
											$elm$core$List$concatMap,
											$elm$core$String$split(')'),
											A2(
												$elm$core$List$concatMap,
												$elm$core$String$split(','),
												A2($elm$core$String$split, ' ', c.text)))))),
							c.startTime,
							c.endTime);
					},
					A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList);
				var d = model.data;
				return A2(
					$author$project$SentencePage$init,
					model.data.videoId,
					A3(
						$author$project$DataManage$setSentenceData,
						model.data.videoId,
						_Utils_update(
							d,
							{cardList: senCardList}),
						model.appData));
			case 'UpdateTransData':
				var v = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{transData: v}),
					$elm$core$Platform$Cmd$none);
			case 'ApplyTransData':
				var d = model.data;
				var cardList = model.data.cardList;
				var a = A2(
					$elm$core$List$map,
					$elm$core$Array$fromList,
					A2(
						$elm$core$List$map,
						function (line) {
							return A2(
								$elm$core$List$map,
								$elm$core$String$trim,
								A2(
									$elm$core$String$split,
									')',
									A3($elm$core$String$replace, '(', '', line)));
						},
						A2($elm$core$String$split, '\n', model.transData)));
				var newLineList = A3(
					$elm$core$List$map2,
					F2(
						function (x, y) {
							return A2(
								$elm$core$List$indexedMap,
								F2(
									function (i, w) {
										return w + ('{' + (A2(
											$elm$core$Maybe$withDefault,
											w,
											A2($elm$core$Array$get, i, x)) + '}'));
									}),
								y.wordList);
						}),
					a,
					cardList);
				var newCardList = A3(
					$elm$core$List$map2,
					F2(
						function (x, y) {
							return _Utils_update(
								y,
								{wordList: x});
						}),
					newLineList,
					cardList);
				return A2(
					$author$project$SentencePage$init,
					model.data.videoId,
					A3(
						$author$project$DataManage$setSentenceData,
						model.data.videoId,
						_Utils_update(
							d,
							{cardList: newCardList}),
						model.appData));
			default:
				var testData2 = A2(
					$elm$core$List$map,
					function ($) {
						return $.wordList;
					},
					model.data.cardList);
				var testData = A2(
					$elm$core$List$filterMap,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$split('<'),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$drop(1),
							$elm$core$List$head)),
					A2(
						$elm$core$String$split,
						'>',
						A2(
							$elm$core$String$join,
							' ',
							A2(
								$elm$core$List$map,
								function ($) {
									return $.rubiedText;
								},
								A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList))));
				var testAux = F4(
					function (res, sub, li1, li2) {
						testAux:
						while (true) {
							var _v7 = _Utils_Tuple2(li1, li2);
							if (_v7.b.b) {
								if (_v7.a.b) {
									if (_v7.b.a.b) {
										var _v8 = _v7.a;
										var target = _v8.a;
										var tl1 = _v8.b;
										var _v9 = _v7.b;
										var _v10 = _v9.a;
										var w = _v10.a;
										var l = _v10.b;
										var tl2 = _v9.b;
										var prv = A2(
											$elm$core$Maybe$withDefault,
											'',
											$elm$core$List$head(sub));
										var leftTarget = A2(
											$elm$core$Maybe$withDefault,
											'_',
											$elm$core$List$head(
												A2(
													$elm$core$String$split,
													'{',
													A3($elm$core$String$replace, '}', '', target))));
										var comTarget = A3($elm$core$String$replace, '{', '>{', '<' + target);
										if (A2(
											$elm$core$String$contains,
											leftTarget,
											$elm$core$String$concat(
												A2(
													$elm$core$List$filterMap,
													A2(
														$elm$core$Basics$composeR,
														$elm$core$String$split('<'),
														$elm$core$List$head),
													A2($elm$core$String$split, '>', prv))))) {
											var $temp$res = res,
												$temp$sub = A2(
												$elm$core$List$cons,
												A3($elm$core$String$replace, leftTarget, comTarget, prv),
												A2($elm$core$List$drop, 1, sub)),
												$temp$li1 = tl1,
												$temp$li2 = A2(
												$elm$core$List$cons,
												A2($elm$core$List$cons, w, l),
												tl2);
											res = $temp$res;
											sub = $temp$sub;
											li1 = $temp$li1;
											li2 = $temp$li2;
											continue testAux;
										} else {
											if (A2($elm$core$String$contains, leftTarget, w)) {
												var $temp$res = res,
													$temp$sub = A2(
													$elm$core$List$cons,
													A3($elm$core$String$replace, leftTarget, comTarget, w),
													sub),
													$temp$li1 = tl1,
													$temp$li2 = A2($elm$core$List$cons, l, tl2);
												res = $temp$res;
												sub = $temp$sub;
												li1 = $temp$li1;
												li2 = $temp$li2;
												continue testAux;
											} else {
												var $temp$res = res,
													$temp$sub = A2($elm$core$List$cons, w, sub),
													$temp$li1 = li1,
													$temp$li2 = A2($elm$core$List$cons, l, tl2);
												res = $temp$res;
												sub = $temp$sub;
												li1 = $temp$li1;
												li2 = $temp$li2;
												continue testAux;
											}
										}
									} else {
										var _v11 = _v7.a;
										var target = _v11.a;
										var tl1 = _v11.b;
										var _v12 = _v7.b;
										var tl2 = _v12.b;
										var prv = A2(
											$elm$core$Maybe$withDefault,
											'',
											$elm$core$List$head(sub));
										var leftTarget = A2(
											$elm$core$Maybe$withDefault,
											'_',
											$elm$core$List$head(
												A2(
													$elm$core$String$split,
													'{',
													A3($elm$core$String$replace, '}', '', target))));
										var comTarget = A3($elm$core$String$replace, '{', '>{', '<' + target);
										if (A2(
											$elm$core$String$contains,
											leftTarget,
											$elm$core$String$concat(
												A2(
													$elm$core$List$filterMap,
													A2(
														$elm$core$Basics$composeR,
														$elm$core$String$split('<'),
														$elm$core$List$head),
													A2($elm$core$String$split, '>', prv))))) {
											var newSub = A2(
												$elm$core$List$cons,
												A3($elm$core$String$replace, leftTarget, comTarget, prv),
												A2($elm$core$List$drop, 1, sub));
											var $temp$res = A2(
												$elm$core$List$cons,
												$elm$core$List$reverse(newSub),
												res),
												$temp$sub = _List_Nil,
												$temp$li1 = tl1,
												$temp$li2 = tl2;
											res = $temp$res;
											sub = $temp$sub;
											li1 = $temp$li1;
											li2 = $temp$li2;
											continue testAux;
										} else {
											var $temp$res = A2(
												$elm$core$List$cons,
												$elm$core$List$reverse(sub),
												res),
												$temp$sub = _List_Nil,
												$temp$li1 = li1,
												$temp$li2 = tl2;
											res = $temp$res;
											sub = $temp$sub;
											li1 = $temp$li1;
											li2 = $temp$li2;
											continue testAux;
										}
									}
								} else {
									if (_v7.b.a.b) {
										var _v13 = _v7.b;
										var _v14 = _v13.a;
										var w = _v14.a;
										var l = _v14.b;
										var tl2 = _v13.b;
										var $temp$res = res,
											$temp$sub = A2($elm$core$List$cons, w, sub),
											$temp$li1 = li1,
											$temp$li2 = A2($elm$core$List$cons, l, tl2);
										res = $temp$res;
										sub = $temp$sub;
										li1 = $temp$li1;
										li2 = $temp$li2;
										continue testAux;
									} else {
										var _v15 = _v7.b;
										var tl2 = _v15.b;
										var $temp$res = A2(
											$elm$core$List$cons,
											$elm$core$List$reverse(sub),
											res),
											$temp$sub = _List_Nil,
											$temp$li1 = li1,
											$temp$li2 = tl2;
										res = $temp$res;
										sub = $temp$sub;
										li1 = $temp$li1;
										li2 = $temp$li2;
										continue testAux;
									}
								}
							} else {
								return $elm$core$List$reverse(res);
							}
						}
					});
				var newWordList = A4(testAux, _List_Nil, _List_Nil, testData, testData2);
				var newCardList = A3(
					$elm$core$List$map2,
					F2(
						function (a, b) {
							return _Utils_update(
								b,
								{wordList: a});
						}),
					newWordList,
					model.data.cardList);
				var d = model.data;
				return A2(
					$author$project$SentencePage$init,
					model.data.videoId,
					A3(
						$author$project$DataManage$setSentenceData,
						model.data.videoId,
						_Utils_update(
							d,
							{cardList: newCardList}),
						model.appData));
		}
	});
var $author$project$TapGamePage$bannerOpacityTime = 500;
var $author$project$TapGamePage$EditMode = {$: 'EditMode'};
var $author$project$TapGamePage$touchCircleTime = 600;
var $author$project$TapGamePage$addTouchCircle = F4(
	function (isRight, x, y, touchCircleList) {
		var aux = function (list) {
			if (list.b) {
				var hd = list.a;
				var tl = list.b;
				return (!hd.remainTime) ? A2(
					$elm$core$List$cons,
					_Utils_update(
						hd,
						{isRight: isRight, remainTime: $author$project$TapGamePage$touchCircleTime, x: x, y: y}),
					tl) : A2(
					$elm$core$List$cons,
					hd,
					aux(tl));
			} else {
				return _List_Nil;
			}
		};
		return aux(touchCircleList);
	});
var $author$project$TapGamePage$BannerOopsLate = {$: 'BannerOopsLate'};
var $author$project$TapGamePage$GotDate = function (a) {
	return {$: 'GotDate', a: a};
};
var $author$project$ResultData$encodeTapGameItem = function (tapGameItem) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'isRight',
				$elm$json$Json$Encode$bool(tapGameItem.isRight)),
				_Utils_Tuple2(
				'pron',
				$elm$json$Json$Encode$string(tapGameItem.pron)),
				_Utils_Tuple2(
				'word',
				$elm$json$Json$Encode$string(tapGameItem.word)),
				_Utils_Tuple2(
				'meaning',
				$elm$json$Json$Encode$string(tapGameItem.meaning))
			]));
};
var $author$project$ResultData$encodeTapGameResult = function (tapGameResult) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'bestScore',
				$elm$json$Json$Encode$int(tapGameResult.bestScore)),
				_Utils_Tuple2(
				'currentScore',
				$elm$json$Json$Encode$int(tapGameResult.currentScore)),
				_Utils_Tuple2(
				'quizResult',
				A2($elm$json$Json$Encode$list, $author$project$ResultData$encodeTapGameItem, tapGameResult.quizResult))
			]));
};
var $author$project$TapGamePage$gameEnd = function (model) {
	var newBestScore = (_Utils_cmp(model.score, model.bestScore) > 0) ? model.score : model.bestScore;
	var resultData = A3($author$project$ResultData$TapGameResult, newBestScore, model.score, model.quizResult);
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{resultData: resultData}),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2($elm$core$Task$perform, $author$project$TapGamePage$GotDate, $author$project$TimeHelper$getDate),
					A4(
					$author$project$GlobalPort$saveResultCmd,
					$author$project$GlobalPort$tapGameName,
					model.level,
					model.data.videoId,
					$author$project$ResultData$encodeTapGameResult(resultData)),
					A2(
					$author$project$GlobalPort$logCmd,
					'end_tap',
					$elm$core$String$fromInt(model.level) + ('_' + model.data.name))
				])));
};
var $author$project$TapGamePage$getCurrentCard = function (model) {
	return A2(
		$elm$core$Array$get,
		model.wordIdx,
		$elm$core$Array$fromList(model.data.cardList));
};
var $author$project$TapGamePage$rightTapAllowTimeVal = 1000;
var $author$project$TapGamePage$gameTickUpdate = function (model) {
	var updateWhenWrong = function (m) {
		return _Utils_Tuple2(
			_Utils_update(
				m,
				{
					bannerState: $author$project$TapGamePage$BannerOopsLate,
					quizResult: A2(
						$elm$core$List$indexedMap,
						F2(
							function (i, r) {
								return _Utils_eq(i, m.wordIdx) ? _Utils_update(
									r,
									{isRight: false}) : r;
							}),
						m.quizResult),
					score: m.score - 50,
					wordIdx: m.wordIdx + 1
				}),
			$elm$core$Platform$Cmd$none);
	};
	if (model.isModalOpen) {
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	} else {
		var _v0 = $author$project$TapGamePage$getCurrentCard(model);
		if (_v0.$ === 'Just') {
			var endTime = _v0.a.endTime;
			return (_Utils_cmp(endTime + $author$project$TapGamePage$rightTapAllowTimeVal, model.currentTime) < 0) ? updateWhenWrong(model) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		} else {
			return $author$project$TapGamePage$gameEnd(model);
		}
	}
};
var $author$project$TapGamePage$isAnimEnd = F2(
	function (animList, name) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (a) {
					return !a.remainTime;
				},
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (a) {
							return _Utils_eq(a.name, name);
						},
						animList))));
	});
var $author$project$TapGamePage$leftTapAllowTimeVal = 1500;
var $author$project$TapGamePage$isTapRight = function (model) {
	var _v0 = $author$project$TapGamePage$getCurrentCard(model);
	if (_v0.$ === 'Just') {
		var endTime = _v0.a.endTime;
		var t = $elm$core$Basics$round(model.currentTime);
		return ((_Utils_cmp(endTime - $author$project$TapGamePage$leftTapAllowTimeVal, t) < 1) && (_Utils_cmp(t, endTime + $author$project$TapGamePage$rightTapAllowTimeVal) < 1)) ? true : false;
	} else {
		return false;
	}
};
var $author$project$DataManage$setTapGameData = F3(
	function (videoId, tapGame, appData) {
		return _Utils_update(
			appData,
			{
				tapGame: A2(
					$elm$core$List$map,
					function (o) {
						return _Utils_eq(o.videoId, videoId) ? tapGame : o;
					},
					appData.tapGame)
			});
	});
var $elm$core$Array$filter = F2(
	function (isGood, array) {
		return $elm$core$Array$fromList(
			A3(
				$elm$core$Array$foldr,
				F2(
					function (x, xs) {
						return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
					}),
				_List_Nil,
				array));
	});
var $author$project$TapGamePage$skipUpdate = F2(
	function (model, cmd) {
		var t = $elm$core$Basics$round(model.currentTime);
		var cardArr = $elm$core$Array$fromList(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !$elm$core$String$isEmpty(
						$elm$core$String$trim(x.kor));
				},
				A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList));
		var cardIdx = $elm$core$Array$length(
			A2(
				$elm$core$Array$filter,
				function (x) {
					return _Utils_cmp(x.endTime, t) < 0;
				},
				cardArr));
		var _v0 = _Utils_Tuple2(
			A2($elm$core$Array$get, cardIdx - 1, cardArr),
			A2($elm$core$Array$get, cardIdx, cardArr));
		if ((_v0.a.$ === 'Nothing') && (_v0.b.$ === 'Just')) {
			var _v1 = _v0.a;
			var c = _v0.b.a;
			var targetTime = c.startTime - 1000;
			return (_Utils_cmp(
				$elm$core$Basics$round(model.currentTime),
				targetTime) < 0) ? _Utils_Tuple2(
				model,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							cmd,
							$author$project$GlobalPort$seekToMillisCmd(targetTime)
						]))) : _Utils_Tuple2(model, cmd);
		} else {
			return _Utils_Tuple2(model, cmd);
		}
	});
var $author$project$TapGamePage$BannerOopsEarly = {$: 'BannerOopsEarly'};
var $author$project$TapGamePage$BannerPerfect = {$: 'BannerPerfect'};
var $author$project$TapGamePage$tapUpdate = function (model) {
	var _v0 = model.playMode;
	if (_v0.$ === 'EditMode') {
		var endTimeMapper = F2(
			function (i, w) {
				return _Utils_eq(i, model.wordIdx) ? _Utils_update(
					w,
					{
						endTime: $elm$core$Basics$round(model.currentTime)
					}) : w;
			});
		var d = model.data;
		var newData = _Utils_update(
			d,
			{
				cardList: A2($elm$core$List$indexedMap, endTimeMapper, d.cardList)
			});
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					data: newData,
					editableValue: $author$project$EditableValue$decode(
						$author$project$DataManage$encodeTapGameData(newData)),
					wordIdx: model.wordIdx + 1
				}),
			$elm$core$Platform$Cmd$none);
	} else {
		var t = $elm$core$Basics$round(model.currentTime);
		var _v1 = $author$project$TapGamePage$getCurrentCard(model);
		if (_v1.$ === 'Just') {
			var endTime = _v1.a.endTime;
			return ((_Utils_cmp(endTime - $author$project$TapGamePage$leftTapAllowTimeVal, t) < 1) && (_Utils_cmp(t, endTime + $author$project$TapGamePage$rightTapAllowTimeVal) < 1)) ? _Utils_Tuple2(
				_Utils_update(
					model,
					{bannerState: $author$project$TapGamePage$BannerPerfect, score: model.score + 100, wordIdx: model.wordIdx + 1}),
				$elm$core$Platform$Cmd$none) : _Utils_Tuple2(
				_Utils_update(
					model,
					{
						bannerState: $author$project$TapGamePage$BannerOopsEarly,
						quizResult: A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, r) {
									return _Utils_eq(i, model.wordIdx) ? _Utils_update(
										r,
										{isRight: false}) : r;
								}),
							model.quizResult),
						score: model.score - 50
					}),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{bannerState: $author$project$TapGamePage$NoBanner}),
				$elm$core$Platform$Cmd$none);
		}
	}
};
var $elm$core$String$trimRight = _String_trimRight;
var $author$project$TapGamePage$preUpdate = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotCurrentTime':
				var t = msg.a;
				var _v1 = model.playMode;
				if (_v1.$ === 'EditMode') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentTime: t}),
						$elm$core$Platform$Cmd$none);
				} else {
					return function (_v2) {
						var m = _v2.a;
						var c = _v2.b;
						return A2($author$project$TapGamePage$skipUpdate, m, c);
					}(
						$author$project$TapGamePage$gameTickUpdate(
							_Utils_update(
								model,
								{currentTime: t})));
				}
			case 'GotPlayerState':
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{playerState: str}),
					$elm$core$Platform$Cmd$none);
			case 'ToRoadMapPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ContentTap':
				var _v3 = msg.a;
				var x = _v3.a;
				var y = _v3.b;
				return $author$project$TapGamePage$tapUpdate(
					_Utils_update(
						model,
						{
							touchCircleList: A4(
								$author$project$TapGamePage$addTouchCircle,
								$author$project$TapGamePage$isTapRight(model),
								x,
								y,
								model.touchCircleList)
						}));
			case 'ToEditMode':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: model.originalData,
							editableValue: $author$project$EditableValue$decode(
								$author$project$DataManage$encodeTapGameData(model.originalData)),
							playMode: $author$project$TapGamePage$EditMode,
							wordIdx: 0
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$GlobalPort$pauseYoutubeCmd,
								$author$project$GlobalPort$seekToMillisCmd(0)
							])));
			case 'ToGameMode':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{playMode: $author$project$TapGamePage$GameMode, wordIdx: 0}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$GlobalPort$pauseYoutubeCmd,
								$author$project$GlobalPort$seekToMillisCmd(0)
							])));
			case 'RestoreClicked':
				var maybePrev = A2(
					$elm$core$Array$get,
					model.wordIdx - 2,
					$elm$core$Array$fromList(model.data.cardList));
				if (maybePrev.$ === 'Just') {
					var prev = maybePrev.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentTime: prev.endTime, wordIdx: model.wordIdx - 1}),
						$author$project$GlobalPort$seekToMillisCmd(prev.endTime));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentTime: 0, wordIdx: 0}),
						$author$project$GlobalPort$seekToMillisCmd(0));
				}
			case 'SetEditableValue':
				var editableValue = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: A2(
								$elm$core$Result$withDefault,
								$author$project$DataManage$emptyTapGameData,
								A2(
									$elm$json$Json$Decode$decodeValue,
									$author$project$DataManage$tapGameDataDecoder,
									$author$project$EditableValue$encode(editableValue))),
							editableValue: editableValue
						}),
					$elm$core$Platform$Cmd$none);
			case 'LeftClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{wordIdx: model.wordIdx - 1}),
					$elm$core$Platform$Cmd$none);
			case 'RightClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{wordIdx: model.wordIdx + 1}),
					$elm$core$Platform$Cmd$none);
			case 'SaveClicked':
				return _Utils_Tuple2(
					model,
					A3(
						$elm$file$File$Download$string,
						'data.txt',
						'text',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$EditableValue$encode(model.editableValue))));
			case 'Restart':
				return A3($author$project$TapGamePage$init, model.level, model.data.videoId, model.appData);
			case 'CreateFromListenClicked':
				var updateCardList = F2(
					function (newList, d) {
						return _Utils_update(
							d,
							{cardList: newList});
					});
				var parseWord = function (str) {
					var _v5 = A2($elm$core$String$split, '\n', str);
					if ((_v5.b && _v5.b.b) && _v5.b.b.b) {
						var pron = _v5.a;
						var _v6 = _v5.b;
						var word = _v6.a;
						var _v7 = _v6.b;
						var desc = _v7.a;
						return {desc: desc, endTime: 0, pron: pron, word: word};
					} else {
						return A4($author$project$DataManage$TapGameCard, 0, '', '', '');
					}
				};
				var newData = function (wordList) {
					return A2(updateCardList, wordList, model.data);
				}(
					A2(
						$elm$core$List$filter,
						function (c) {
							return !$elm$core$String$isEmpty(c.word);
						},
						A2(
							$elm$core$List$map,
							parseWord,
							$elm$core$List$concat(
								A2(
									$elm$core$List$map,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$String$trimRight,
										$elm$core$String$split('\n\n')),
									A2(
										$elm$core$List$map,
										function ($) {
											return $.words;
										},
										A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList))))));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: newData,
							editableValue: $author$project$EditableValue$decode(
								$author$project$DataManage$encodeTapGameData(newData)),
							level: 0,
							playMode: $author$project$TapGamePage$EditMode,
							wordIdx: 0
						}),
					$elm$core$Platform$Cmd$none);
			case 'UpdateFromListenClicked':
				var updateCardList = F2(
					function (newList, d) {
						return _Utils_update(
							d,
							{cardList: newList});
					});
				var parseWord = function (str) {
					var _v8 = A2($elm$core$String$split, '\n', str);
					if ((_v8.b && _v8.b.b) && _v8.b.b.b) {
						var pron = _v8.a;
						var _v9 = _v8.b;
						var word = _v9.a;
						var _v10 = _v9.b;
						var desc = _v10.a;
						return {desc: desc, endTime: 0, pron: pron, word: word};
					} else {
						return A4($author$project$DataManage$TapGameCard, 0, '', '', '');
					}
				};
				var newCardList = A2(
					$elm$core$List$filter,
					function (c) {
						return !$elm$core$String$isEmpty(c.word);
					},
					A2(
						$elm$core$List$map,
						parseWord,
						$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$String$trimRight,
									$elm$core$String$split('\n\n')),
								A2(
									$elm$core$List$map,
									function ($) {
										return $.words;
									},
									A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList)))));
				var mergedCardList = A3(
					$elm$core$List$map2,
					F2(
						function (a, b) {
							return _Utils_update(
								b,
								{endTime: a.endTime});
						}),
					model.data.cardList,
					newCardList);
				var newData = A2(updateCardList, mergedCardList, model.data);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: newData,
							editableValue: $author$project$EditableValue$decode(
								$author$project$DataManage$encodeTapGameData(newData)),
							level: 0,
							playMode: $author$project$TapGamePage$EditMode,
							wordIdx: 0
						}),
					$elm$core$Platform$Cmd$none);
			case 'AnimUpdate':
				var delta = msg.a;
				var updateRemainTime = function (anim) {
					var newTime = anim.remainTime - delta;
					return (newTime < 0) ? _Utils_update(
						anim,
						{remainTime: 0}) : _Utils_update(
						anim,
						{remainTime: newTime});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							animList: A2($elm$core$List$map, updateRemainTime, model.animList),
							bannerState: A2($author$project$TapGamePage$isAnimEnd, model.animList, 'bannerOpacity') ? $author$project$TapGamePage$NoBanner : model.bannerState,
							touchCircleList: A2(
								$elm$core$List$map,
								function (c) {
									return _Utils_update(
										c,
										{
											remainTime: ((c.remainTime - delta) < 0) ? 0 : (c.remainTime - delta)
										});
								},
								model.touchCircleList)
						}),
					$elm$core$Platform$Cmd$none);
			case 'TimeShiftClicked':
				var newCardList = A2(
					$elm$core$List$map,
					function (c) {
						return _Utils_update(
							c,
							{endTime: c.endTime + model.timeShift});
					},
					model.data.cardList);
				var d = model.data;
				return A3(
					$author$project$TapGamePage$init,
					0,
					model.data.videoId,
					A3(
						$author$project$DataManage$setTapGameData,
						model.data.videoId,
						_Utils_update(
							d,
							{cardList: newCardList}),
						model.appData));
			case 'UpdateTimeShiftInput':
				var str = msg.a;
				var _v11 = $elm$core$String$toInt(str);
				if (_v11.$ === 'Just') {
					var shift = _v11.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{timeShift: shift}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'GotDate':
				var date = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isModalOpen: true}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$GlobalPort$saveProgressCmd(
								A4($author$project$GlobalPort$Progress, model.data.videoId, $author$project$GlobalPort$tapGameName, model.level, date))
							])));
			case 'GotResult':
				var prevResult = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bestScore: prevResult.bestScore}),
					$elm$core$Platform$Cmd$none);
			case 'JumpTo':
				var time = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$seekToMillisCmd(time));
			case 'JumpAndPlay':
				var time = msg.a;
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$GlobalPort$seekToMillisCmd(time),
								$author$project$GlobalPort$playYoutubeCmd
							])));
			case 'LoadSuccess':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isLoadSuccess: true}),
					$elm$core$Platform$Cmd$none);
			case 'LoadFail':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'PlayVideo':
				return _Utils_Tuple2(model, $author$project$GlobalPort$playYoutubeCmd);
			case 'Speak':
				var str = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$speakCmd(str));
			default:
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$GlobalPort$destroyYoutubeCmd,
								A2(
								$author$project$GlobalPort$logCmd,
								'show_full_ad',
								'tap' + ($elm$core$String$fromInt(model.level) + (' : ' + model.data.name))),
								A2(
								$elm$core$Task$perform,
								function (_v12) {
									return $author$project$TapGamePage$ToRoadMapPage;
								},
								$elm$time$Time$now)
							])));
		}
	});
var $author$project$TapGamePage$update = F2(
	function (msg, m0) {
		var _v0 = A2($author$project$TapGamePage$preUpdate, msg, m0);
		var m1 = _v0.a;
		var cmd = _v0.b;
		var animList1 = (!_Utils_eq(m0.score, m1.score)) ? A2(
			$elm$core$List$map,
			function (a) {
				return (a.name === 'scoreSize') ? _Utils_update(
					a,
					{remainTime: 300}) : ((a.name === 'bannerOpacity') ? _Utils_update(
					a,
					{remainTime: $author$project$TapGamePage$bannerOpacityTime}) : a);
			},
			m1.animList) : m1.animList;
		var animList2 = (!_Utils_eq(m0.wordIdx, m1.wordIdx)) ? A2(
			$elm$core$List$map,
			function (a) {
				return (a.name === 'progressSize') ? _Utils_update(
					a,
					{remainTime: 300}) : a;
			},
			animList1) : animList1;
		return _Utils_Tuple2(
			_Utils_update(
				m1,
				{
					animList: animList2,
					score: (m1.score < 0) ? 0 : m1.score
				}),
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[cmd])));
	});
var $author$project$ValidatePage$update = F2(
	function (msg, model) {
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	});
var $author$project$DataManage$emptyVocaRuby = A2($author$project$DataManage$VocaRuby, '', '');
var $author$project$GlobalPort$getVocaUnique = function (vocaCard) {
	return A2($author$project$GlobalPort$VocaUnique, vocaCard.pron, vocaCard.word);
};
var $author$project$VocaPage$getBookmarkedCardList = function (model) {
	return function (li) {
		return model.isRandomMode ? A2(
			$elm$random$Random$step,
			$author$project$Utility$shuffle(li),
			model.seed).a : li;
	}(
		A2(
			$elm$core$List$filter,
			function (c) {
				return model.isBookmarkMode ? A2(
					$elm$core$List$member,
					$author$project$GlobalPort$getVocaUnique(c),
					model.bookmarkList) : true;
			},
			model.data.cardList));
};
var $author$project$VocaPage$getRangedCardList = F2(
	function (level, data) {
		if (!level) {
			return data.cardList;
		} else {
			var targetNumbers = A2(
				$author$project$Utility$nthWordbook,
				$elm$core$List$length(data.cardList),
				level);
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (i, x) {
							return A2($elm$core$List$member, i + 1, targetNumbers) ? $elm$core$Maybe$Just(x) : $elm$core$Maybe$Nothing;
						}),
					data.cardList));
		}
	});
var $author$project$VocaPage$getCardListLen = function (model) {
	return model.isBookmarkMode ? $elm$core$List$length(model.bookmarkList) : $elm$core$List$length(
		A2($author$project$VocaPage$getRangedCardList, 0, model.data));
};
var $author$project$VocaPage$IsManyKanjiWord = function (a) {
	return {$: 'IsManyKanjiWord', a: a};
};
var $author$project$VocaPage$IsNoneKanjiWord = function (a) {
	return {$: 'IsNoneKanjiWord', a: a};
};
var $author$project$VocaPage$IsOneKanjiWord = function (a) {
	return {$: 'IsOneKanjiWord', a: a};
};
var $author$project$VocaPage$ManyKanjiWord = F2(
	function (wordDesList, pron) {
		return {pron: pron, wordDesList: wordDesList};
	});
var $author$project$VocaPage$NoneKanjiWord = function (word) {
	return {word: word};
};
var $author$project$VocaPage$OneKanjiWord = F3(
	function (word, pron, des) {
		return {des: des, pron: pron, word: word};
	});
var $author$project$VocaPage$toKanjiWordInfo = F3(
	function (cnt, acc, list) {
		toKanjiWordInfo:
		while (true) {
			if (list.b) {
				var hd = list.a;
				var tl = list.b;
				var pron = A2(
					$elm$core$List$map,
					function (_v2) {
						var i = _v2.a;
						var x = _v2.b;
						return _Utils_Tuple2(i + cnt, x);
					},
					A2(
						$elm$core$List$indexedMap,
						$elm$core$Tuple$pair,
						A2(
							$elm$core$List$map,
							$elm$core$String$fromChar,
							$elm$core$String$toList(hd.pron))));
				if (hd.canMerge) {
					if (acc.b && (acc.a.$ === 'IsManyKanjiWord')) {
						var manyKanjiWord = acc.a.a;
						var accTl = acc.b;
						var newManyKanjiWord = _Utils_update(
							manyKanjiWord,
							{
								wordDesList: _Utils_ap(
									manyKanjiWord.wordDesList,
									_List_fromArray(
										[
											_Utils_Tuple2(hd.word, hd.des)
										]))
							});
						var newAcc = A2(
							$elm$core$List$cons,
							$author$project$VocaPage$IsManyKanjiWord(newManyKanjiWord),
							accTl);
						var $temp$cnt = cnt,
							$temp$acc = newAcc,
							$temp$list = tl;
						cnt = $temp$cnt;
						acc = $temp$acc;
						list = $temp$list;
						continue toKanjiWordInfo;
					} else {
						var newAcc = A2(
							$elm$core$List$cons,
							$author$project$VocaPage$IsManyKanjiWord(
								A2(
									$author$project$VocaPage$ManyKanjiWord,
									_List_fromArray(
										[
											_Utils_Tuple2(hd.word, hd.des)
										]),
									pron)),
							acc);
						var $temp$cnt = cnt + $elm$core$List$length(pron),
							$temp$acc = newAcc,
							$temp$list = tl;
						cnt = $temp$cnt;
						acc = $temp$acc;
						list = $temp$list;
						continue toKanjiWordInfo;
					}
				} else {
					var newEle = $elm$core$String$isEmpty(
						$elm$core$String$trim(hd.pron)) ? $author$project$VocaPage$IsNoneKanjiWord(
						$author$project$VocaPage$NoneKanjiWord(hd.word)) : $author$project$VocaPage$IsOneKanjiWord(
						A3($author$project$VocaPage$OneKanjiWord, hd.word, pron, hd.des));
					var newAcc = A2($elm$core$List$cons, newEle, acc);
					var $temp$cnt = cnt + $elm$core$List$length(pron),
						$temp$acc = newAcc,
						$temp$list = tl;
					cnt = $temp$cnt;
					acc = $temp$acc;
					list = $temp$list;
					continue toKanjiWordInfo;
				}
			} else {
				return $elm$core$List$reverse(acc);
			}
		}
	});
var $author$project$VocaPage$toVocaRubyList = function (pronCard) {
	return A2(
		$elm$core$List$map,
		function (x) {
			switch (x.$) {
				case 'IsNoneKanjiWord':
					var word = x.a.word;
					return A2($author$project$DataManage$VocaRuby, '', word);
				case 'IsOneKanjiWord':
					var pron = x.a.pron;
					var word = x.a.word;
					var des = x.a.des;
					return A2(
						$author$project$DataManage$VocaRuby,
						$elm$core$String$concat(
							A2($elm$core$List$map, $elm$core$Tuple$second, pron)),
						word);
				default:
					var wordDesList = x.a.wordDesList;
					var pron = x.a.pron;
					return A2(
						$author$project$DataManage$VocaRuby,
						$elm$core$String$concat(
							A2($elm$core$List$map, $elm$core$Tuple$second, pron)),
						$elm$core$String$concat(
							A2($elm$core$List$map, $elm$core$Tuple$first, wordDesList)));
			}
		},
		A3($author$project$VocaPage$toKanjiWordInfo, 0, _List_Nil, pronCard.kanjiWord));
};
var $author$project$VocaPage$getVocaRubyList = F2(
	function (model, word) {
		return A2(
			$elm$core$Maybe$withDefault,
			_List_fromArray(
				[
					A2($author$project$DataManage$VocaRuby, '', word)
				]),
			A2(
				$elm$core$Maybe$map,
				$author$project$VocaPage$toVocaRubyList,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (x) {
							return _Utils_eq(
								$author$project$DataManage$getKanjiWord(x),
								word);
						},
						A2($author$project$DataManage$getPronData, model.data.videoId, model.appData).cardList))));
	});
var $author$project$GlobalPort$encodeVocaUnique = function (vocaUnique) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'pron',
				$elm$json$Json$Encode$string(vocaUnique.pron)),
				_Utils_Tuple2(
				'word',
				$elm$json$Json$Encode$string(vocaUnique.word))
			]));
};
var $author$project$GlobalPort$encodeBookmarkData = function (bookmarkData) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'videoId',
				$elm$json$Json$Encode$string(bookmarkData.videoId)),
				_Utils_Tuple2(
				'date',
				$elm$json$Json$Encode$int(bookmarkData.date)),
				_Utils_Tuple2(
				'vocaList',
				A2($elm$json$Json$Encode$list, $author$project$GlobalPort$encodeVocaUnique, bookmarkData.vocaList))
			]));
};
var $author$project$GlobalPort$saveBookmarkTask = F3(
	function (videoId, item, date) {
		return A2(
			$author$project$LocalStorage$localPut,
			$author$project$GlobalPort$getBookmarkKey(videoId),
			A2(
				$elm$json$Json$Encode$encode,
				0,
				$author$project$GlobalPort$encodeBookmarkData(
					A3($author$project$GlobalPort$BookmarkData, videoId, date, item))));
	});
var $author$project$DataManage$setVocaData = F3(
	function (videoId, voca, appData) {
		return _Utils_update(
			appData,
			{
				voca: A2(
					$elm$core$List$map,
					function (o) {
						return _Utils_eq(o.videoId, videoId) ? voca : o;
					},
					appData.voca)
			});
	});
var $author$project$GlobalPort$simpleSend = function (tag) {
	return $author$project$GlobalPort$sendToPlayer(
		A2($author$project$GlobalPort$TaggedData, tag, $elm$json$Json$Encode$null));
};
var $author$project$VocaPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'GotCardDragVal':
				var raw = msg.a;
				if (_Utils_eq(model.selectedChar, $elm$core$Maybe$Nothing)) {
					var newDragVal = ($author$project$VocaPage$getCardListLen(model) === 1) ? A3($elm$core$Basics$clamp, -0.5, 0.5, (-raw) / 50) : A3($elm$core$Basics$clamp, -1, 1, (-raw) / 50);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{dragVal: newDragVal}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'CardDragEnd':
				if (_Utils_eq(model.selectedChar, $elm$core$Maybe$Nothing)) {
					var newCardIdx = (model.dragVal === 1) ? (_Utils_eq(
						model.cardIdx,
						$author$project$VocaPage$getCardListLen(model) - 1) ? 0 : (model.cardIdx + 1)) : (_Utils_eq(model.dragVal, -1) ? ((!model.cardIdx) ? ($author$project$VocaPage$getCardListLen(model) - 1) : (model.cardIdx - 1)) : model.cardIdx);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								cardIdx: newCardIdx,
								dragVal: 0,
								isSimpleMode: _Utils_eq(newCardIdx, model.cardIdx) ? (!model.isSimpleMode) : model.isSimpleMode,
								selectedChar: _Utils_eq(model.cardIdx, newCardIdx) ? model.selectedChar : $elm$core$Maybe$Nothing
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'SeekBarMoved':
				var progress = msg.a;
				var newCardIdx = A3(
					$elm$core$Basics$clamp,
					0,
					$author$project$VocaPage$getCardListLen(model) - 1,
					$elm$core$Basics$floor(
						progress * $author$project$VocaPage$getCardListLen(model)));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cardIdx: newCardIdx,
							selectedChar: _Utils_eq(model.cardIdx, newCardIdx) ? model.selectedChar : $elm$core$Maybe$Nothing
						}),
					$elm$core$Platform$Cmd$none);
			case 'SaveClicked':
				return _Utils_Tuple2(
					model,
					A3(
						$elm$file$File$Download$string,
						'data.txt',
						'text',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$EditableValue$encode(model.editableValue))));
			case 'SetEditableValue':
				var editableValue = msg.a;
				var newData = A2(
					$elm$core$Result$withDefault,
					model.data,
					A2(
						$elm$json$Json$Decode$decodeValue,
						$author$project$DataManage$vocaDataDecoder,
						$author$project$EditableValue$encode(editableValue)));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{data: newData, editableValue: editableValue}),
					$elm$core$Platform$Cmd$none);
			case 'ToRoadMapPage':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'LevelInputted':
				var str = msg.a;
				var _v1 = $elm$core$String$toInt(str);
				if (_v1.$ === 'Just') {
					var level = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{cardIdx: 0, level: level, levelStr: str}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{levelStr: str}),
						$elm$core$Platform$Cmd$none);
				}
			case 'BookmarkBtnClicked':
				return ($elm$core$List$length(model.bookmarkList) > 0) ? _Utils_Tuple2(
					model.isBookmarkMode ? _Utils_update(
						model,
						{cardIdx: 0, isBookmarkMode: false, selectedChar: $elm$core$Maybe$Nothing}) : _Utils_update(
						model,
						{cardIdx: 0, isBookmarkMode: true, selectedChar: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(
					_Utils_update(
						model,
						{isZeroAlertOpen: true}),
					$elm$core$Platform$Cmd$none);
			case 'CloseBtnClicked':
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Task$perform,
						function (_v2) {
							return $author$project$VocaPage$ToRoadMapPage;
						},
						$elm$time$Time$now));
			case 'CardBookmarkClicked':
				var vocaUnique = msg.a;
				if (model.isBookmarkMode) {
					var newBookmarkList = A2($elm$core$List$member, vocaUnique, model.bookmarkList) ? A2(
						$elm$core$List$filter,
						$elm$core$Basics$neq(vocaUnique),
						model.bookmarkList) : A2($elm$core$List$cons, vocaUnique, model.bookmarkList);
					var newModel = $elm$core$List$isEmpty(newBookmarkList) ? _Utils_update(
						model,
						{bookmarkList: newBookmarkList, cardIdx: 0, isBookmarkMode: false}) : _Utils_update(
						model,
						{
							bookmarkList: newBookmarkList,
							cardIdx: _Utils_eq(
								$elm$core$List$length(newBookmarkList),
								model.cardIdx) ? (model.cardIdx - 1) : model.cardIdx
						});
					return _Utils_Tuple2(
						newModel,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									$elm$core$Task$attempt,
									function (_v3) {
										return $author$project$VocaPage$NoOp;
									},
									A2(
										$elm$core$Task$andThen,
										function (t) {
											return A3(
												$author$project$GlobalPort$saveBookmarkTask,
												model.data.videoId,
												newBookmarkList,
												$elm$time$Time$posixToMillis(t));
										},
										$elm$time$Time$now))
								])));
				} else {
					var newBookmarkList = A2($elm$core$List$member, vocaUnique, model.bookmarkList) ? A2(
						$elm$core$List$filter,
						$elm$core$Basics$neq(vocaUnique),
						model.bookmarkList) : A2($elm$core$List$cons, vocaUnique, model.bookmarkList);
					var newModel = _Utils_update(
						model,
						{bookmarkList: newBookmarkList});
					return _Utils_Tuple2(
						newModel,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									$elm$core$Task$attempt,
									function (_v4) {
										return $author$project$VocaPage$NoOp;
									},
									A2(
										$elm$core$Task$andThen,
										function (t) {
											return A3(
												$author$project$GlobalPort$saveBookmarkTask,
												model.data.videoId,
												newBookmarkList,
												$elm$time$Time$posixToMillis(t));
										},
										$elm$time$Time$now))
								])));
				}
			case 'GetFromListenClicked':
				var getList = function (rawStr) {
					return A2(
						$elm$core$List$map,
						function (x) {
							var _v5 = A2($elm$core$String$split, '\n', x);
							if ((_v5.b && _v5.b.b) && _v5.b.b.b) {
								if (_v5.b.b.b.b) {
									var a = _v5.a;
									var _v6 = _v5.b;
									var b = _v6.a;
									var _v7 = _v6.b;
									var c = _v7.a;
									var _v8 = _v7.b;
									var d = _v8.a;
									return A5($author$project$DataManage$VocaCard, _List_Nil, a, b, c, d);
								} else {
									var a = _v5.a;
									var _v9 = _v5.b;
									var b = _v9.a;
									var _v10 = _v9.b;
									var c = _v10.a;
									return A5($author$project$DataManage$VocaCard, _List_Nil, a, b, c, '');
								}
							} else {
								return A5($author$project$DataManage$VocaCard, _List_Nil, '', '', '', '');
							}
						},
						A2(
							$elm$core$List$filter,
							A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
							A2($elm$core$String$split, '\n\n', rawStr)));
				};
				var data = model.data;
				var cardList = A2(
					$elm_community$list_extra$List$Extra$uniqueBy,
					function ($) {
						return $.word;
					},
					A2(
						$elm$core$List$concatMap,
						getList,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.words;
							},
							A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList)));
				return A2(
					$author$project$VocaPage$init,
					model.data.videoId,
					A3(
						$author$project$DataManage$setVocaData,
						model.data.videoId,
						_Utils_update(
							data,
							{cardList: cardList}),
						model.appData));
			case 'Speak':
				var str = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$speakCmd(str));
			case 'GotBookmark':
				var bookmark = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							bookmarkList: A2(
								$elm$core$List$filter,
								function (v) {
									return A2(
										$elm$core$List$any,
										function (c) {
											return _Utils_eq(v.pron, c.pron) && _Utils_eq(v.word, c.word);
										},
										model.data.cardList);
								},
								bookmark.vocaList)
						}),
					$elm$core$Platform$Cmd$none);
			case 'GotSeed':
				var seed = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{seed: seed}),
					$elm$core$Platform$Cmd$none);
			case 'ShuffleBtnClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{cardIdx: 0, isRandomMode: !model.isRandomMode, selectedChar: $elm$core$Maybe$Nothing}),
					model.isRandomMode ? A2($elm$random$Random$generate, $author$project$VocaPage$GotSeed, $elm$random$Random$independentSeed) : $elm$core$Platform$Cmd$none);
			case 'GetRubyClicked':
				var data = model.data;
				var cardList = A2(
					$elm$core$List$map,
					function (c) {
						return _Utils_update(
							c,
							{
								rubyList: A2($author$project$VocaPage$getVocaRubyList, model, c.word)
							});
					},
					model.data.cardList);
				return A2(
					$author$project$VocaPage$init,
					model.data.videoId,
					A3(
						$author$project$DataManage$setVocaData,
						model.data.videoId,
						_Utils_update(
							data,
							{cardList: cardList}),
						model.appData));
			case 'HiraBtnClicked':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isRubyMode: !model.isRubyMode, isSimpleMode: false, selectedChar: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 'CloseZeroAlert':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isZeroAlertOpen: false}),
					$elm$core$Platform$Cmd$none);
			case 'OpenCharView':
				var idxA = msg.a;
				var idxB = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							selectedChar: $elm$core$Maybe$Just(
								_Utils_Tuple2(idxA, idxB))
						}),
					$author$project$GlobalPort$simpleSend('clearWriteCanvas'));
			case 'CloseCharView':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isSimpleMode: false, selectedChar: $elm$core$Maybe$Nothing}),
					$author$project$GlobalPort$simpleSend('clearWriteCanvas'));
			case 'ClearCharView':
				return _Utils_Tuple2(
					model,
					$author$project$GlobalPort$simpleSend('clearWriteCanvas'));
			case 'ToggleCharView':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isCharToggleOn: !model.isCharToggleOn}),
					$elm$core$Platform$Cmd$none);
			case 'CharLeft':
				var bookCardList = $author$project$VocaPage$getBookmarkedCardList(model);
				var _v11 = model.selectedChar;
				if (_v11.$ === 'Just') {
					var _v12 = _v11.a;
					var idxA = _v12.a;
					var idxB = _v12.b;
					if ((!idxA) && (!idxB)) {
						var newCardIdx = A2(
							$elm$core$Basics$modBy,
							$elm$core$List$length(bookCardList),
							model.cardIdx - 1);
						var vocaCard = A2(
							$elm$core$Maybe$withDefault,
							$author$project$DataManage$emptyVocaCard,
							A2(
								$elm$core$Array$get,
								newCardIdx,
								$elm$core$Array$fromList(bookCardList)));
						var newRubyIdx = $elm$core$List$length(vocaCard.rubyList) - 1;
						var vocaRuby = A2(
							$elm$core$Maybe$withDefault,
							$author$project$DataManage$emptyVocaRuby,
							A2(
								$elm$core$Array$get,
								newRubyIdx,
								$elm$core$Array$fromList(vocaCard.rubyList)));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									cardIdx: newCardIdx,
									selectedChar: $elm$core$Maybe$Just(
										_Utils_Tuple2(
											newRubyIdx,
											$elm$core$String$length(vocaRuby.w) - 1))
								}),
							$author$project$GlobalPort$simpleSend('clearWriteCanvas'));
					} else {
						if (!idxB) {
							var vocaCard = A2(
								$elm$core$Maybe$withDefault,
								$author$project$DataManage$emptyVocaCard,
								A2(
									$elm$core$Array$get,
									model.cardIdx,
									$elm$core$Array$fromList(bookCardList)));
							var newRubyIdx = idxA - 1;
							var vocaRuby = A2(
								$elm$core$Maybe$withDefault,
								$author$project$DataManage$emptyVocaRuby,
								A2(
									$elm$core$Array$get,
									newRubyIdx,
									$elm$core$Array$fromList(vocaCard.rubyList)));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										selectedChar: $elm$core$Maybe$Just(
											_Utils_Tuple2(
												newRubyIdx,
												$elm$core$String$length(vocaRuby.w) - 1))
									}),
								$author$project$GlobalPort$simpleSend('clearWriteCanvas'));
						} else {
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										selectedChar: $elm$core$Maybe$Just(
											_Utils_Tuple2(idxA, idxB - 1))
									}),
								$author$project$GlobalPort$simpleSend('clearWriteCanvas'));
						}
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			default:
				var bookCardList = $author$project$VocaPage$getBookmarkedCardList(model);
				var _v13 = model.selectedChar;
				if (_v13.$ === 'Just') {
					var _v14 = _v13.a;
					var idxA = _v14.a;
					var idxB = _v14.b;
					var vCard = A2(
						$elm$core$Maybe$withDefault,
						$author$project$DataManage$emptyVocaCard,
						A2(
							$elm$core$Array$get,
							model.cardIdx,
							$elm$core$Array$fromList(bookCardList)));
					var vRuby = A2(
						$elm$core$Maybe$withDefault,
						$author$project$DataManage$emptyVocaRuby,
						A2(
							$elm$core$Array$get,
							idxA,
							$elm$core$Array$fromList(vCard.rubyList)));
					var lenB = $elm$core$String$length(vRuby.w) - 1;
					var lenA = $elm$core$List$length(vCard.rubyList) - 1;
					if (_Utils_eq(idxA, lenA) && _Utils_eq(idxB, lenB)) {
						var newRubyIdx = 0;
						var newCardIdx = A2(
							$elm$core$Basics$modBy,
							$elm$core$List$length(bookCardList),
							model.cardIdx + 1);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									cardIdx: newCardIdx,
									selectedChar: $elm$core$Maybe$Just(
										_Utils_Tuple2(newRubyIdx, 0))
								}),
							$author$project$GlobalPort$simpleSend('clearWriteCanvas'));
					} else {
						if (_Utils_eq(idxB, lenB)) {
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										selectedChar: $elm$core$Maybe$Just(
											_Utils_Tuple2(idxA + 1, 0))
									}),
								$author$project$GlobalPort$simpleSend('clearWriteCanvas'));
						} else {
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										selectedChar: $elm$core$Maybe$Just(
											_Utils_Tuple2(idxA, idxB + 1))
									}),
								$author$project$GlobalPort$simpleSend('clearWriteCanvas'));
						}
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Main$updateKeys = F3(
	function (isDown, key, keys) {
		switch (key) {
			case 'Alt':
				return _Utils_update(
					keys,
					{alt: isDown});
			case 'x':
				return _Utils_update(
					keys,
					{x: isDown});
			default:
				return keys;
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		var updateToken = F2(
			function (token, _v37) {
				var m = _v37.a;
				var c = _v37.b;
				return _Utils_Tuple2(
					_Utils_update(
						m,
						{token: token}),
					c);
			});
		var updatePage = F3(
			function (toPage, toMsg, _v36) {
				var pageModel = _v36.a;
				var pageCmd = _v36.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							page: toPage(pageModel)
						}),
					A2($elm$core$Platform$Cmd$map, toMsg, pageCmd));
			});
		var _v0 = _Utils_Tuple2(msg, model.page);
		_v0$56:
		while (true) {
			switch (_v0.a.$) {
				case 'UrlChanaged':
					var newUrl = _v0.a.a;
					return A2(
						$author$project$Main$onAppDataLoad,
						msg,
						_Utils_update(
							model,
							{rawUrl: newUrl}));
				case 'KeyChanged':
					var _v1 = _v0.a;
					var isDown = _v1.a;
					var key = _v1.b;
					var newKeys = A3($author$project$Main$updateKeys, isDown, key, model.keys);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{keys: newKeys}),
						(newKeys.alt && newKeys.x) ? A3(
							$elm$file$File$Download$string,
							'data.txt',
							'text',
							function (x) {
								return '[' + (x + '\n]');
							}(
								A2(
									$elm$core$String$join,
									'\n\n,',
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											$author$project$DataManage$encodePronData,
											$elm$json$Json$Encode$encode(0)),
										model.data.pron)))) : $elm$core$Platform$Cmd$none);
				case 'GotStartData':
					var rawData = _v0.a.a;
					var newData = A2(
						$elm$core$Result$withDefault,
						$author$project$DataManage$emptyAppData,
						A2($elm$json$Json$Decode$decodeValue, $author$project$DataManage$appDataDecoder, rawData));
					return A2(
						$author$project$Main$onAppDataLoad,
						msg,
						_Utils_update(
							model,
							{data: newData}));
				case 'GotSubUser':
					var isSubUser = _v0.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{isSubUser: isSubUser}),
						$elm$core$Platform$Cmd$none);
				case 'TransitionEnd':
					var _v2 = _v0.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{isTransitioning: false, prevPages: _List_Nil}),
						$elm$core$Platform$Cmd$none);
				case 'NetworkErrAlertEnd':
					var _v3 = _v0.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{isNetworkErr: false}),
						$elm$core$Platform$Cmd$none);
				case 'MainPageMsg':
					if (_v0.b.$ === 'MainPage') {
						switch (_v0.a.a.$) {
							case 'ToAwardPage':
								var _v4 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$AwardPage,
									$author$project$Main$AwardPageMsg,
									A2($author$project$AwardPage$init, model.token, model.data));
							case 'ToRoadMapPage':
								var _v5 = _v0.a.a;
								var name = _v5.a;
								var videoId = _v5.b;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$RoadMapPage,
									$author$project$Main$RoadMapPageMsg,
									A2($author$project$RoadMapPage$init, videoId, model.data));
							case 'ToSearchPage':
								var _v6 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$SearchPage,
									$author$project$Main$SearchPageMsg,
									function (_v7) {
										var m = _v7.a;
										var c = _v7.b;
										return $elm$core$String$isEmpty(pageModel.selectedTag) ? _Utils_Tuple2(m, c) : _Utils_Tuple2(
											_Utils_update(
												m,
												{searchStr: '#' + pageModel.selectedTag}),
											c);
									}(
										A2($author$project$SearchPage$init, model.data.video, model.data.info)));
							case 'ToQuestionPage':
								var _v8 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(updatePage, $author$project$Main$QuestionPage, $author$project$Main$QuestionPageMsg, $author$project$QuestionPage$init);
							case 'ToMarketPage':
								var _v9 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(updatePage, $author$project$Main$MarketPage, $author$project$Main$MarketPageMsg, $author$project$MarketPage$init);
							default:
								var pageMsg = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$MainPage,
									$author$project$Main$MainPageMsg,
									A2($author$project$MainPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'ListenPageMsg':
					if (_v0.b.$ === 'ListenPage') {
						switch (_v0.a.a.$) {
							case 'LoadFail':
								var _v10 = _v0.a.a;
								var pageModel = _v0.b.a;
								return function (_v11) {
									var m = _v11.a;
									var c = _v11.b;
									return _Utils_Tuple2(
										_Utils_update(
											m,
											{isNetworkErr: true}),
										c);
								}(
									A3(
										updatePage,
										$author$project$Main$RoadMapPage,
										$author$project$Main$RoadMapPageMsg,
										A2($author$project$RoadMapPage$init, pageModel.data.videoId, model.data)));
							case 'ToRoadMapPage':
								var _v12 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$RoadMapPage,
									$author$project$Main$RoadMapPageMsg,
									A2($author$project$RoadMapPage$init, pageModel.data.videoId, model.data));
							default:
								var pageMsg = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$ListenPage,
									$author$project$Main$ListenPageMsg,
									A2($author$project$ListenPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'TapGamePageMsg':
					if (_v0.b.$ === 'TapGamePage') {
						switch (_v0.a.a.$) {
							case 'LoadFail':
								var _v13 = _v0.a.a;
								var pageModel = _v0.b.a;
								return function (_v14) {
									var m = _v14.a;
									var c = _v14.b;
									return _Utils_Tuple2(
										_Utils_update(
											m,
											{isNetworkErr: true}),
										c);
								}(
									A3(
										updatePage,
										$author$project$Main$RoadMapPage,
										$author$project$Main$RoadMapPageMsg,
										A2($author$project$RoadMapPage$init, pageModel.data.videoId, model.data)));
							case 'ToRoadMapPage':
								var _v15 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$RoadMapPage,
									$author$project$Main$RoadMapPageMsg,
									A2($author$project$RoadMapPage$init, pageModel.data.videoId, model.data));
							default:
								var pageMsg = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$TapGamePage,
									$author$project$Main$TapGamePageMsg,
									A2($author$project$TapGamePage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'RoadMapPageMsg':
					if (_v0.b.$ === 'RoadMapPage') {
						switch (_v0.a.a.$) {
							case 'ToMainPage':
								var _v16 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$MainPage,
									$author$project$Main$MainPageMsg,
									A3($author$project$MainPage$init, $author$project$Main$focusVideoId, pageModel.data.videoId, model.data.video));
							case 'ToListenPage':
								var videoId = _v0.a.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$ListenPage,
									$author$project$Main$ListenPageMsg,
									A2($author$project$ListenPage$init, videoId, model.data));
							case 'ToTapGamePage':
								var _v17 = _v0.a.a;
								var level = _v17.a;
								var videoId = _v17.b;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$TapGamePage,
									$author$project$Main$TapGamePageMsg,
									A3($author$project$TapGamePage$init, level, videoId, model.data));
							case 'ToPronPage':
								var _v18 = _v0.a.a;
								var level = _v18.a;
								var videoId = _v18.b;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$PronPage,
									$author$project$Main$PronPageMsg,
									A3($author$project$PronPage$init, level, videoId, model.data));
							case 'ToSentencePage':
								var videoId = _v0.a.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$SentencePage,
									$author$project$Main$SentencePageMsg,
									A2($author$project$SentencePage$init, videoId, model.data));
							case 'ToInfoPage':
								var _v19 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$InfoPage,
									$author$project$Main$InfoPageMsg,
									A2($author$project$InfoPage$init, pageModel.data.videoId, model.data));
							case 'ToVocaPage':
								var videoId = _v0.a.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$VocaPage,
									$author$project$Main$VocaPageMsg,
									A2($author$project$VocaPage$init, videoId, model.data));
							default:
								var pageMsg = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$RoadMapPage,
									$author$project$Main$RoadMapPageMsg,
									A2($author$project$RoadMapPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'PronPageMsg':
					if (_v0.b.$ === 'PronPage') {
						if (_v0.a.a.$ === 'ToRoadMapPage') {
							var _v20 = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$RoadMapPage,
								$author$project$Main$RoadMapPageMsg,
								A2($author$project$RoadMapPage$init, pageModel.data.videoId, model.data));
						} else {
							var pageMsg = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$PronPage,
								$author$project$Main$PronPageMsg,
								A2($author$project$PronPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'SentencePageMsg':
					if (_v0.b.$ === 'SentencePage') {
						switch (_v0.a.a.$) {
							case 'LoadFail':
								var _v21 = _v0.a.a;
								var pageModel = _v0.b.a;
								return function (_v22) {
									var m = _v22.a;
									var c = _v22.b;
									return _Utils_Tuple2(
										_Utils_update(
											m,
											{isNetworkErr: true}),
										c);
								}(
									A3(
										updatePage,
										$author$project$Main$RoadMapPage,
										$author$project$Main$RoadMapPageMsg,
										A2($author$project$RoadMapPage$init, pageModel.data.videoId, model.data)));
							case 'ToRoadMapPage':
								var _v23 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$RoadMapPage,
									$author$project$Main$RoadMapPageMsg,
									A2($author$project$RoadMapPage$init, pageModel.data.videoId, model.data));
							default:
								var pageMsg = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$SentencePage,
									$author$project$Main$SentencePageMsg,
									A2($author$project$SentencePage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'VocaPageMsg':
					if (_v0.b.$ === 'VocaPage') {
						if (_v0.a.a.$ === 'ToRoadMapPage') {
							var _v24 = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$RoadMapPage,
								$author$project$Main$RoadMapPageMsg,
								A2($author$project$RoadMapPage$init, pageModel.data.videoId, model.data));
						} else {
							var pageMsg = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$VocaPage,
								$author$project$Main$VocaPageMsg,
								A2($author$project$VocaPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'AwardPageMsg':
					if (_v0.b.$ === 'AwardPage') {
						switch (_v0.a.a.$) {
							case 'ToMainPage':
								var _v25 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$MainPage,
									$author$project$Main$MainPageMsg,
									A3($author$project$MainPage$init, $author$project$Main$focusVideoId, $author$project$Main$focusVideoId, model.data.video));
							case 'ToSearchPage':
								var _v26 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$SearchPage,
									$author$project$Main$SearchPageMsg,
									A2($author$project$SearchPage$init, model.data.video, model.data.info));
							case 'ToRoadMapPage':
								var vid = _v0.a.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$RoadMapPage,
									$author$project$Main$RoadMapPageMsg,
									A2($author$project$RoadMapPage$init, vid, model.data));
							case 'ToListenPage':
								var vid = _v0.a.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$ListenPage,
									$author$project$Main$ListenPageMsg,
									A2($author$project$ListenPage$init, vid, model.data));
							case 'ToTapGamePage':
								var _v27 = _v0.a.a;
								var vid = _v27.a;
								var level = _v27.b;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$TapGamePage,
									$author$project$Main$TapGamePageMsg,
									A3($author$project$TapGamePage$init, level, vid, model.data));
							case 'ToSentencePage':
								var vid = _v0.a.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$SentencePage,
									$author$project$Main$SentencePageMsg,
									A2($author$project$SentencePage$init, vid, model.data));
							case 'ToPronPage':
								var _v28 = _v0.a.a;
								var vid = _v28.a;
								var level = _v28.b;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$PronPage,
									$author$project$Main$PronPageMsg,
									A3($author$project$PronPage$init, level, vid, model.data));
							case 'ToVocaPage':
								var vid = _v0.a.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$VocaPage,
									$author$project$Main$VocaPageMsg,
									A2($author$project$VocaPage$init, vid, model.data));
							default:
								var pageMsg = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$AwardPage,
									$author$project$Main$AwardPageMsg,
									A2($author$project$AwardPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'InfoPageMsg':
					if (_v0.b.$ === 'InfoPage') {
						if (_v0.a.a.$ === 'ToRoadMap') {
							var _v29 = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$RoadMapPage,
								$author$project$Main$RoadMapPageMsg,
								A2($author$project$RoadMapPage$init, pageModel.data.videoId, model.data));
						} else {
							var pageMsg = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$InfoPage,
								$author$project$Main$InfoPageMsg,
								A2($author$project$InfoPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'ValidatePageMsg':
					if (_v0.b.$ === 'ValidatePage') {
						var pageMsg = _v0.a.a;
						var pageModel = _v0.b.a;
						return A3(
							updatePage,
							$author$project$Main$ValidatePage,
							$author$project$Main$ValidatePageMsg,
							A2($author$project$ValidatePage$update, pageMsg, pageModel));
					} else {
						break _v0$56;
					}
				case 'SearchPageMsg':
					if (_v0.b.$ === 'SearchPage') {
						switch (_v0.a.a.$) {
							case 'ToMainPage':
								var _v30 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$MainPage,
									$author$project$Main$MainPageMsg,
									A3($author$project$MainPage$init, $author$project$Main$focusVideoId, $author$project$Main$focusVideoId, model.data.video));
							case 'ToRoadMap':
								var _v31 = _v0.a.a;
								var name = _v31.a;
								var videoId = _v31.b;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$RoadMapPage,
									$author$project$Main$RoadMapPageMsg,
									A2($author$project$RoadMapPage$init, videoId, model.data));
							case 'ToAwardPage':
								var _v32 = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$AwardPage,
									$author$project$Main$AwardPageMsg,
									A2($author$project$AwardPage$init, model.token, model.data));
							default:
								var pageMsg = _v0.a.a;
								var pageModel = _v0.b.a;
								return A3(
									updatePage,
									$author$project$Main$SearchPage,
									$author$project$Main$SearchPageMsg,
									A2($author$project$SearchPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'QuestionPageMsg':
					if (_v0.b.$ === 'QuestionPage') {
						if (_v0.a.a.$ === 'ToMainPage') {
							var _v33 = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$MainPage,
								$author$project$Main$MainPageMsg,
								A3($author$project$MainPage$init, $author$project$Main$focusVideoId, $author$project$Main$focusVideoId, model.data.video));
						} else {
							var pageMsg = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$QuestionPage,
								$author$project$Main$QuestionPageMsg,
								A2($author$project$QuestionPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'MarketPageMsg':
					if (_v0.b.$ === 'MarketPage') {
						if (_v0.a.a.$ === 'ToMainPage') {
							var _v34 = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$MainPage,
								$author$project$Main$MainPageMsg,
								A3($author$project$MainPage$init, $author$project$Main$focusVideoId, $author$project$Main$focusVideoId, model.data.video));
						} else {
							var pageMsg = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$MarketPage,
								$author$project$Main$MarketPageMsg,
								A2($author$project$MarketPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				case 'PrintPageMsg':
					if (_v0.b.$ === 'PrintPage') {
						var pageMsg = _v0.a.a;
						var pageModel = _v0.b.a;
						return A3(
							updatePage,
							$author$project$Main$PrintPage,
							$author$project$Main$PrintPageMsg,
							A2($author$project$PrintPage$update, pageMsg, pageModel));
					} else {
						break _v0$56;
					}
				case 'RankingPageMsg':
					if (_v0.b.$ === 'RankingPage') {
						if (_v0.a.a.$ === 'ToAwardPage') {
							var _v35 = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$AwardPage,
								$author$project$Main$AwardPageMsg,
								A2($author$project$AwardPage$init, model.token, model.data));
						} else {
							var pageMsg = _v0.a.a;
							var pageModel = _v0.b.a;
							return A3(
								updatePage,
								$author$project$Main$RankingPage,
								$author$project$Main$RankingPageMsg,
								A2($author$project$RankingPage$update, pageMsg, pageModel));
						}
					} else {
						break _v0$56;
					}
				default:
					break _v0$56;
			}
		}
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	});
var $rtfeldman$elm_css$Css$Structure$Compatible = {$: 'Compatible'};
var $rtfeldman$elm_css$Css$auto = {alignItemsOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible, cursor: $rtfeldman$elm_css$Css$Structure$Compatible, flexBasis: $rtfeldman$elm_css$Css$Structure$Compatible, intOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible, justifyContentOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAutoOrCoverOrContain: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible, overflow: $rtfeldman$elm_css$Css$Structure$Compatible, pointerEvents: $rtfeldman$elm_css$Css$Structure$Compatible, tableLayout: $rtfeldman$elm_css$Css$Structure$Compatible, textRendering: $rtfeldman$elm_css$Css$Structure$Compatible, touchAction: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'auto'};
var $rtfeldman$elm_css$Css$Preprocess$AppendProperty = function (a) {
	return {$: 'AppendProperty', a: a};
};
var $rtfeldman$elm_css$Css$property = F2(
	function (key, value) {
		return $rtfeldman$elm_css$Css$Preprocess$AppendProperty(key + (':' + value));
	});
var $rtfeldman$elm_css$Css$prop1 = F2(
	function (key, arg) {
		return A2($rtfeldman$elm_css$Css$property, key, arg.value);
	});
var $rtfeldman$elm_css$Css$animationDuration = function (arg) {
	return A2($rtfeldman$elm_css$Css$prop1, 'animation-duration', arg);
};
var $rtfeldman$elm_css$Css$Preprocess$WithKeyframes = function (a) {
	return {$: 'WithKeyframes', a: a};
};
var $rtfeldman$elm_css$Css$animationName = function (arg) {
	return ((arg.value === 'none') || ((arg.value === 'inherit') || ((arg.value === 'unset') || (arg.value === 'initial')))) ? A2($rtfeldman$elm_css$Css$prop1, 'animation-name', arg) : $rtfeldman$elm_css$Css$Preprocess$WithKeyframes(arg.value);
};
var $rtfeldman$elm_css$Css$Preprocess$ApplyStyles = function (a) {
	return {$: 'ApplyStyles', a: a};
};
var $rtfeldman$elm_css$Css$batch = $rtfeldman$elm_css$Css$Preprocess$ApplyStyles;
var $rtfeldman$elm_css$Css$Internal$printKeyframeSelector = function (_v0) {
	var percentage = _v0.a;
	var properties = _v0.b;
	var propertiesStr = A2(
		$elm$core$String$join,
		'',
		A2(
			$elm$core$List$map,
			function (_v1) {
				var prop = _v1.a;
				return prop + ';';
			},
			properties));
	var percentageStr = $elm$core$String$fromInt(percentage) + '%';
	return percentageStr + (' {' + (propertiesStr + '}'));
};
var $rtfeldman$elm_css$Css$Internal$compileKeyframes = function (tuples) {
	return A2(
		$elm$core$String$join,
		'\n\n',
		A2($elm$core$List$map, $rtfeldman$elm_css$Css$Internal$printKeyframeSelector, tuples));
};
var $rtfeldman$elm_css$Css$Animations$keyframes = function (tuples) {
	return $elm$core$List$isEmpty(tuples) ? {keyframes: $rtfeldman$elm_css$Css$Structure$Compatible, none: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'none'} : {
		keyframes: $rtfeldman$elm_css$Css$Structure$Compatible,
		none: $rtfeldman$elm_css$Css$Structure$Compatible,
		value: $rtfeldman$elm_css$Css$Internal$compileKeyframes(tuples)
	};
};
var $rtfeldman$elm_css$Css$UnitlessFloat = {$: 'UnitlessFloat'};
var $elm$core$String$fromFloat = _String_fromNumber;
var $rtfeldman$elm_css$Css$num = function (val) {
	return {
		lengthOrNumber: $rtfeldman$elm_css$Css$Structure$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible,
		number: $rtfeldman$elm_css$Css$Structure$Compatible,
		numberOrInfinite: $rtfeldman$elm_css$Css$Structure$Compatible,
		numericValue: val,
		unitLabel: '',
		units: $rtfeldman$elm_css$Css$UnitlessFloat,
		value: $elm$core$String$fromFloat(val)
	};
};
var $rtfeldman$elm_css$Css$Internal$Property = function (a) {
	return {$: 'Property', a: a};
};
var $rtfeldman$elm_css$Css$Animations$opacity = function (_v0) {
	var value = _v0.value;
	return $rtfeldman$elm_css$Css$Internal$Property('opacity:' + value);
};
var $rtfeldman$elm_css$Css$PxUnits = {$: 'PxUnits'};
var $rtfeldman$elm_css$Css$Internal$lengthConverter = F3(
	function (units, unitLabel, numericValue) {
		return {
			absoluteLength: $rtfeldman$elm_css$Css$Structure$Compatible,
			calc: $rtfeldman$elm_css$Css$Structure$Compatible,
			flexBasis: $rtfeldman$elm_css$Css$Structure$Compatible,
			fontSize: $rtfeldman$elm_css$Css$Structure$Compatible,
			length: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrAutoOrCoverOrContain: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNone: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNoneOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNumber: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible,
			numericValue: numericValue,
			textIndent: $rtfeldman$elm_css$Css$Structure$Compatible,
			unitLabel: unitLabel,
			units: units,
			value: _Utils_ap(
				$elm$core$String$fromFloat(numericValue),
				unitLabel)
		};
	});
var $rtfeldman$elm_css$Css$px = A2($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$PxUnits, 'px');
var $rtfeldman$elm_css$Css$Animations$transform = function (values) {
	return $rtfeldman$elm_css$Css$Internal$Property(
		$elm$core$List$isEmpty(values) ? 'transform:none' : ('transform:' + A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				function ($) {
					return $.value;
				},
				values))));
};
var $rtfeldman$elm_css$Css$cssFunction = F2(
	function (funcName, args) {
		return funcName + ('(' + (A2($elm$core$String$join, ', ', args) + ')'));
	});
var $rtfeldman$elm_css$Css$translateY = function (_v0) {
	var value = _v0.value;
	return {
		transform: $rtfeldman$elm_css$Css$Structure$Compatible,
		value: A2(
			$rtfeldman$elm_css$Css$cssFunction,
			'translateY',
			_List_fromArray(
				[value]))
	};
};
var $author$project$Main$easeInAnim = $rtfeldman$elm_css$Css$Animations$keyframes(
	_List_fromArray(
		[
			_Utils_Tuple2(
			0,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Animations$transform(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$translateY(
							$rtfeldman$elm_css$Css$px(100))
						])),
					$rtfeldman$elm_css$Css$Animations$opacity(
					$rtfeldman$elm_css$Css$num(0))
				])),
			_Utils_Tuple2(
			100,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Animations$transform(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$translateY(
							$rtfeldman$elm_css$Css$px(0))
						])),
					$rtfeldman$elm_css$Css$Animations$opacity(
					$rtfeldman$elm_css$Css$num(1))
				]))
		]));
var $rtfeldman$elm_css$Css$UnitlessInteger = {$: 'UnitlessInteger'};
var $rtfeldman$elm_css$Css$int = function (val) {
	return {
		fontWeight: $rtfeldman$elm_css$Css$Structure$Compatible,
		intOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible,
		lengthOrNumber: $rtfeldman$elm_css$Css$Structure$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible,
		number: $rtfeldman$elm_css$Css$Structure$Compatible,
		numberOrInfinite: $rtfeldman$elm_css$Css$Structure$Compatible,
		numericValue: val,
		unitLabel: '',
		units: $rtfeldman$elm_css$Css$UnitlessInteger,
		value: $elm$core$String$fromInt(val)
	};
};
var $rtfeldman$elm_css$Css$ms = function (amount) {
	return {
		duration: $rtfeldman$elm_css$Css$Structure$Compatible,
		value: $elm$core$String$fromFloat(amount) + 'ms'
	};
};
var $rtfeldman$elm_css$Css$zIndex = $rtfeldman$elm_css$Css$prop1('z-index');
var $author$project$Main$basicStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$zIndex(
			$rtfeldman$elm_css$Css$int(1)),
			$rtfeldman$elm_css$Css$animationName($author$project$Main$easeInAnim),
			$rtfeldman$elm_css$Css$animationDuration(
			$rtfeldman$elm_css$Css$ms(300))
		]));
var $rtfeldman$elm_css$VirtualDom$Styled$Node = F3(
	function (a, b, c) {
		return {$: 'Node', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$node = $rtfeldman$elm_css$VirtualDom$Styled$Node;
var $rtfeldman$elm_css$Html$Styled$node = $rtfeldman$elm_css$VirtualDom$Styled$node;
var $rtfeldman$elm_css$Html$Styled$div = $rtfeldman$elm_css$Html$Styled$node('div');
var $rtfeldman$elm_css$Css$boxShadow = $rtfeldman$elm_css$Css$prop1('box-shadow');
var $rtfeldman$elm_css$Css$Global$everything = function (styles) {
	return A2(
		$rtfeldman$elm_css$VirtualDom$Styled$makeSnippet,
		styles,
		$rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(_List_Nil));
};
var $rtfeldman$elm_css$VirtualDom$Styled$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $rtfeldman$elm_css$VirtualDom$Styled$unstyledNode = $rtfeldman$elm_css$VirtualDom$Styled$Unstyled;
var $rtfeldman$elm_css$Css$Global$global = function (snippets) {
	return $rtfeldman$elm_css$VirtualDom$Styled$unstyledNode(
		A3(
			$elm$virtual_dom$VirtualDom$node,
			'span',
			_List_Nil,
			$elm$core$List$singleton(
				A3(
					$elm$virtual_dom$VirtualDom$node,
					'style',
					_List_Nil,
					$elm$core$List$singleton(
						$elm$virtual_dom$VirtualDom$text(
							$rtfeldman$elm_css$Css$Preprocess$Resolve$compile(
								$elm$core$List$singleton(
									$rtfeldman$elm_css$Css$Preprocess$stylesheet(snippets)))))))));
};
var $elm$core$String$endsWith = _String_endsWith;
var $elm$core$String$toLower = _String_toLower;
var $rtfeldman$elm_css$Css$makeImportant = function (str) {
	return A2(
		$elm$core$String$endsWith,
		' !important',
		$elm$core$String$toLower(str)) ? str : (str + ' !important');
};
var $rtfeldman$elm_css$Css$Preprocess$ExtendSelector = F2(
	function (a, b) {
		return {$: 'ExtendSelector', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Preprocess$mapAllProperties = F2(
	function (update, styles) {
		if (!styles.b) {
			return styles;
		} else {
			if (!styles.b.b) {
				var only = styles.a;
				return _List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$Preprocess$mapProperties, update, only)
					]);
			} else {
				var first = styles.a;
				var rest = styles.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Preprocess$mapAllProperties, update, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$mapProperties = F2(
	function (update, style) {
		switch (style.$) {
			case 'AppendProperty':
				var property = style.a;
				return $rtfeldman$elm_css$Css$Preprocess$AppendProperty(
					update(property));
			case 'ExtendSelector':
				var selector = style.a;
				var styles = style.b;
				return A2(
					$rtfeldman$elm_css$Css$Preprocess$ExtendSelector,
					selector,
					A2($rtfeldman$elm_css$Css$Preprocess$mapAllProperties, update, styles));
			case 'NestSnippet':
				return style;
			case 'WithPseudoElement':
				return style;
			case 'WithMedia':
				return style;
			case 'WithKeyframes':
				return style;
			default:
				var otherStyles = style.a;
				return $rtfeldman$elm_css$Css$Preprocess$ApplyStyles(
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$Css$Preprocess$mapProperties(update),
						otherStyles));
		}
	});
var $rtfeldman$elm_css$Css$important = $rtfeldman$elm_css$Css$Preprocess$mapProperties($rtfeldman$elm_css$Css$makeImportant);
var $rtfeldman$elm_css$Css$none = {backgroundImage: $rtfeldman$elm_css$Css$Structure$Compatible, blockAxisOverflow: $rtfeldman$elm_css$Css$Structure$Compatible, borderStyle: $rtfeldman$elm_css$Css$Structure$Compatible, cursor: $rtfeldman$elm_css$Css$Structure$Compatible, display: $rtfeldman$elm_css$Css$Structure$Compatible, hoverCapability: $rtfeldman$elm_css$Css$Structure$Compatible, inlineAxisOverflow: $rtfeldman$elm_css$Css$Structure$Compatible, keyframes: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNone: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNoneOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible, listStyleType: $rtfeldman$elm_css$Css$Structure$Compatible, listStyleTypeOrPositionOrImage: $rtfeldman$elm_css$Css$Structure$Compatible, none: $rtfeldman$elm_css$Css$Structure$Compatible, outline: $rtfeldman$elm_css$Css$Structure$Compatible, pointerDevice: $rtfeldman$elm_css$Css$Structure$Compatible, pointerEvents: $rtfeldman$elm_css$Css$Structure$Compatible, resize: $rtfeldman$elm_css$Css$Structure$Compatible, scriptingSupport: $rtfeldman$elm_css$Css$Structure$Compatible, textDecorationLine: $rtfeldman$elm_css$Css$Structure$Compatible, textTransform: $rtfeldman$elm_css$Css$Structure$Compatible, touchAction: $rtfeldman$elm_css$Css$Structure$Compatible, transform: $rtfeldman$elm_css$Css$Structure$Compatible, updateFrequency: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'none'};
var $rtfeldman$elm_css$Css$textShadow = $rtfeldman$elm_css$Css$prop1('text-shadow');
var $author$project$Main$graphicOptions = function (model) {
	return $rtfeldman$elm_css$Css$Global$global(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$Global$everything(
				$elm$core$List$concat(
					_List_fromArray(
						[
							model.isShadowOn ? _List_Nil : _List_fromArray(
							[
								$rtfeldman$elm_css$Css$important(
								$rtfeldman$elm_css$Css$boxShadow($rtfeldman$elm_css$Css$none)),
								$rtfeldman$elm_css$Css$important(
								$rtfeldman$elm_css$Css$textShadow($rtfeldman$elm_css$Css$none))
							]),
							model.isAnimationOn ? _List_Nil : _List_fromArray(
							[
								$rtfeldman$elm_css$Css$important(
								A2($rtfeldman$elm_css$Css$property, 'transition', 'none')),
								$rtfeldman$elm_css$Css$important(
								A2($rtfeldman$elm_css$Css$property, 'animation', 'none'))
							])
						])))
			]));
};
var $rtfeldman$elm_css$VirtualDom$Styled$Attribute = F3(
	function (a, b, c) {
		return {$: 'Attribute', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$murmurSeed = 15739;
var $rtfeldman$elm_css$VirtualDom$Styled$getClassname = function (styles) {
	return $elm$core$List$isEmpty(styles) ? 'unstyled' : A2(
		$elm$core$String$cons,
		_Utils_chr('_'),
		$rtfeldman$elm_hex$Hex$toString(
			A2(
				$rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString,
				$rtfeldman$elm_css$VirtualDom$Styled$murmurSeed,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$compile(
					$elm$core$List$singleton(
						$rtfeldman$elm_css$Css$Preprocess$stylesheet(
							$elm$core$List$singleton(
								A2(
									$rtfeldman$elm_css$VirtualDom$Styled$makeSnippet,
									styles,
									$rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(_List_Nil)))))))));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlJson(value));
	});
var $rtfeldman$elm_css$Html$Styled$Internal$css = function (styles) {
	var classname = $rtfeldman$elm_css$VirtualDom$Styled$getClassname(styles);
	var classProperty = A2(
		$elm$virtual_dom$VirtualDom$property,
		'className',
		$elm$json$Json$Encode$string(classname));
	return A3($rtfeldman$elm_css$VirtualDom$Styled$Attribute, classProperty, styles, classname);
};
var $rtfeldman$elm_css$Html$Styled$Attributes$css = $rtfeldman$elm_css$Html$Styled$Internal$css;
var $rtfeldman$elm_css$Css$bottom = $rtfeldman$elm_css$Css$prop1('bottom');
var $rtfeldman$elm_css$Css$fixed = {backgroundAttachment: $rtfeldman$elm_css$Css$Structure$Compatible, position: $rtfeldman$elm_css$Css$Structure$Compatible, tableLayout: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'fixed'};
var $rtfeldman$elm_css$Css$left = $rtfeldman$elm_css$Css$prop1('left');
var $rtfeldman$elm_css$Css$position = $rtfeldman$elm_css$Css$prop1('position');
var $rtfeldman$elm_css$Css$right = $rtfeldman$elm_css$Css$prop1('right');
var $rtfeldman$elm_css$Css$top = $rtfeldman$elm_css$Css$prop1('top');
var $rtfeldman$elm_css$Css$zero = {length: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAutoOrCoverOrContain: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNone: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNoneOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNumber: $rtfeldman$elm_css$Css$Structure$Compatible, number: $rtfeldman$elm_css$Css$Structure$Compatible, numericValue: 0, outline: $rtfeldman$elm_css$Css$Structure$Compatible, unitLabel: '', units: $rtfeldman$elm_css$Css$UnitlessInteger, value: '0'};
var $author$project$Main$fixedStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
			$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
			$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
			$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
			$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero)
		]));
var $elm$virtual_dom$VirtualDom$lazy2 = _VirtualDom_lazy2;
var $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp = F2(
	function (fn, arg) {
		return $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled(
			fn(arg));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$lazy = F2(
	function (fn, arg) {
		return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
			A3($elm$virtual_dom$VirtualDom$lazy2, $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp, fn, arg));
	});
var $rtfeldman$elm_css$Html$Styled$Lazy$lazy = $rtfeldman$elm_css$VirtualDom$Styled$lazy;
var $author$project$Main$pageList = _List_fromArray(
	['MainPage', 'ListenPage', 'TapGamePage', 'RoadMapPage', 'PronPage', 'SentencePage', 'VocaPage', 'AwardPage', 'InfoPage', 'ValidatePage', 'SearchPage', 'QuestionPage', 'MarketPage', 'PrintPage', 'RankingPage']);
var $author$project$InfoPage$SaveClicked = {$: 'SaveClicked'};
var $author$project$InfoPage$SetEditableValue = function (a) {
	return {$: 'SetEditableValue', a: a};
};
var $rtfeldman$elm_css$Css$absolute = {position: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'absolute'};
var $rtfeldman$elm_css$Css$backgroundColor = function (c) {
	return A2($rtfeldman$elm_css$Css$property, 'background-color', c.value);
};
var $rtfeldman$elm_css$Html$Styled$button = $rtfeldman$elm_css$Html$Styled$node('button');
var $rtfeldman$elm_css$Css$displayFlex = A2($rtfeldman$elm_css$Css$property, 'display', 'flex');
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$appendHelpTree = F2(
	function (toAppend, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		var itemsToAppend = $elm$core$Elm$JsArray$length(toAppend);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(tail)) - itemsToAppend;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, tail, toAppend);
		var newArray = A2($elm$core$Array$unsafeReplaceTail, appended, array);
		if (notAppended < 0) {
			var nextTail = A3($elm$core$Elm$JsArray$slice, notAppended, itemsToAppend, toAppend);
			return A2($elm$core$Array$unsafeReplaceTail, nextTail, newArray);
		} else {
			return newArray;
		}
	});
var $elm$core$Array$builderFromArray = function (_v0) {
	var len = _v0.a;
	var tree = _v0.c;
	var tail = _v0.d;
	var helper = F2(
		function (node, acc) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
			} else {
				return A2($elm$core$List$cons, node, acc);
			}
		});
	return {
		nodeList: A3($elm$core$Elm$JsArray$foldl, helper, _List_Nil, tree),
		nodeListSize: (len / $elm$core$Array$branchFactor) | 0,
		tail: tail
	};
};
var $elm$core$Array$append = F2(
	function (a, _v0) {
		var aTail = a.d;
		var bLen = _v0.a;
		var bTree = _v0.c;
		var bTail = _v0.d;
		if (_Utils_cmp(bLen, $elm$core$Array$branchFactor * 4) < 1) {
			var foldHelper = F2(
				function (node, array) {
					if (node.$ === 'SubTree') {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, array, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpTree, leaf, array);
					}
				});
			return A2(
				$elm$core$Array$appendHelpTree,
				bTail,
				A3($elm$core$Elm$JsArray$foldl, foldHelper, a, bTree));
		} else {
			var foldHelper = F2(
				function (node, builder) {
					if (node.$ === 'SubTree') {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, builder, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpBuilder, leaf, builder);
					}
				});
			return A2(
				$elm$core$Array$builderToArray,
				true,
				A2(
					$elm$core$Array$appendHelpBuilder,
					bTail,
					A3(
						$elm$core$Elm$JsArray$foldl,
						foldHelper,
						$elm$core$Array$builderFromArray(a),
						bTree)));
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$property = F2(
	function (key, value) {
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$property, key, value),
			_List_Nil,
			'');
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$checked = $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty('checked');
var $rtfeldman$elm_css$Html$Styled$Attributes$disabled = $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty('disabled');
var $elm$core$Elm$JsArray$indexedMap = _JsArray_indexedMap;
var $elm$core$Array$indexedMap = F2(
	function (func, _v0) {
		var len = _v0.a;
		var tree = _v0.c;
		var tail = _v0.d;
		var initialBuilder = {
			nodeList: _List_Nil,
			nodeListSize: 0,
			tail: A3(
				$elm$core$Elm$JsArray$indexedMap,
				func,
				$elm$core$Array$tailIndex(len),
				tail)
		};
		var helper = F2(
			function (node, builder) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, builder, subTree);
				} else {
					var leaf = node.a;
					var offset = builder.nodeListSize * $elm$core$Array$branchFactor;
					var mappedLeaf = $elm$core$Array$Leaf(
						A3($elm$core$Elm$JsArray$indexedMap, func, offset, leaf));
					return {
						nodeList: A2($elm$core$List$cons, mappedLeaf, builder.nodeList),
						nodeListSize: builder.nodeListSize + 1,
						tail: builder.tail
					};
				}
			});
		return A2(
			$elm$core$Array$builderToArray,
			true,
			A3($elm$core$Elm$JsArray$foldl, helper, initialBuilder, tree));
	});
var $rtfeldman$elm_css$Html$Styled$input = $rtfeldman$elm_css$Html$Styled$node('input');
var $rtfeldman$elm_css$VirtualDom$Styled$KeyedNode = F3(
	function (a, b, c) {
		return {$: 'KeyedNode', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$KeyedNodeNS = F4(
	function (a, b, c, d) {
		return {$: 'KeyedNodeNS', a: a, b: b, c: c, d: d};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$NodeNS = F4(
	function (a, b, c, d) {
		return {$: 'NodeNS', a: a, b: b, c: c, d: d};
	});
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $rtfeldman$elm_css$VirtualDom$Styled$mapAttribute = F2(
	function (transform, _v0) {
		var prop = _v0.a;
		var styles = _v0.b;
		var classname = _v0.c;
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$mapAttribute, transform, prop),
			styles,
			classname);
	});
var $rtfeldman$elm_css$VirtualDom$Styled$map = F2(
	function (transform, vdomNode) {
		switch (vdomNode.$) {
			case 'Node':
				var elemType = vdomNode.a;
				var properties = vdomNode.b;
				var children = vdomNode.c;
				return A3(
					$rtfeldman$elm_css$VirtualDom$Styled$Node,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$map(transform),
						children));
			case 'NodeNS':
				var ns = vdomNode.a;
				var elemType = vdomNode.b;
				var properties = vdomNode.c;
				var children = vdomNode.d;
				return A4(
					$rtfeldman$elm_css$VirtualDom$Styled$NodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$map(transform),
						children));
			case 'KeyedNode':
				var elemType = vdomNode.a;
				var properties = vdomNode.b;
				var children = vdomNode.c;
				return A3(
					$rtfeldman$elm_css$VirtualDom$Styled$KeyedNode,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						function (_v1) {
							var key = _v1.a;
							var child = _v1.b;
							return _Utils_Tuple2(
								key,
								A2($rtfeldman$elm_css$VirtualDom$Styled$map, transform, child));
						},
						children));
			case 'KeyedNodeNS':
				var ns = vdomNode.a;
				var elemType = vdomNode.b;
				var properties = vdomNode.c;
				var children = vdomNode.d;
				return A4(
					$rtfeldman$elm_css$VirtualDom$Styled$KeyedNodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						function (_v2) {
							var key = _v2.a;
							var child = _v2.b;
							return _Utils_Tuple2(
								key,
								A2($rtfeldman$elm_css$VirtualDom$Styled$map, transform, child));
						},
						children));
			default:
				var vdom = vdomNode.a;
				return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
					A2($elm$virtual_dom$VirtualDom$map, transform, vdom));
		}
	});
var $rtfeldman$elm_css$Html$Styled$map = $rtfeldman$elm_css$VirtualDom$Styled$map;
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $rtfeldman$elm_css$VirtualDom$Styled$on = F2(
	function (eventName, handler) {
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$on, eventName, handler),
			_List_Nil,
			'');
	});
var $rtfeldman$elm_css$Html$Styled$Events$on = F2(
	function (event, decoder) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $rtfeldman$elm_css$Html$Styled$Events$targetChecked = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'checked']),
	$elm$json$Json$Decode$bool);
var $rtfeldman$elm_css$Html$Styled$Events$onCheck = function (tagger) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$Events$on,
		'change',
		A2($elm$json$Json$Decode$map, tagger, $rtfeldman$elm_css$Html$Styled$Events$targetChecked));
};
var $rtfeldman$elm_css$Html$Styled$Events$onClick = function (msg) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $rtfeldman$elm_css$Html$Styled$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $rtfeldman$elm_css$Html$Styled$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $rtfeldman$elm_css$Html$Styled$Events$onInput = function (tagger) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$rtfeldman$elm_css$Html$Styled$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $rtfeldman$elm_css$Html$Styled$Events$targetValue)));
};
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (_v0.$ === 'SubTree') {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_v0.$ === 'SubTree') {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_v0.$ === 'SubTree') {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$step = function (n) {
	return A2($rtfeldman$elm_css$Html$Styled$Attributes$stringProperty, 'step', n);
};
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $rtfeldman$elm_css$VirtualDom$Styled$style = F2(
	function (key, val) {
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$style, key, val),
			_List_Nil,
			'');
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$style = $rtfeldman$elm_css$VirtualDom$Styled$style;
var $rtfeldman$elm_css$Html$Styled$table = $rtfeldman$elm_css$Html$Styled$node('table');
var $rtfeldman$elm_css$Html$Styled$tbody = $rtfeldman$elm_css$Html$Styled$node('tbody');
var $rtfeldman$elm_css$Html$Styled$td = $rtfeldman$elm_css$Html$Styled$node('td');
var $rtfeldman$elm_css$VirtualDom$Styled$text = function (str) {
	return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
		$elm$virtual_dom$VirtualDom$text(str));
};
var $rtfeldman$elm_css$Html$Styled$text = $rtfeldman$elm_css$VirtualDom$Styled$text;
var $rtfeldman$elm_css$Html$Styled$textarea = $rtfeldman$elm_css$Html$Styled$node('textarea');
var $elm$core$String$toFloat = _String_toFloat;
var $rtfeldman$elm_css$Html$Styled$tr = $rtfeldman$elm_css$Html$Styled$node('tr');
var $rtfeldman$elm_css$Html$Styled$Attributes$type_ = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('type');
var $rtfeldman$elm_css$Html$Styled$Attributes$value = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('value');
var $author$project$EditableValue$editableViewAux = function (editableValue) {
	var inlineStyle = A2($rtfeldman$elm_css$Html$Styled$Attributes$style, 'display', 'inline-block');
	var arrayInsert = F2(
		function (ii, arr) {
			var _v2 = A2($elm$core$Array$get, ii, arr);
			if (_v2.$ === 'Just') {
				var curr = _v2.a;
				return A2(
					$elm$core$Array$append,
					A2(
						$elm$core$Array$push,
						curr,
						A3($elm$core$Array$slice, 0, ii, arr)),
					A3(
						$elm$core$Array$slice,
						ii,
						$elm$core$Array$length(arr),
						arr));
			} else {
				return arr;
			}
		});
	var arrayDelete = F2(
		function (ii, arr) {
			return A2(
				$elm$core$Array$append,
				A3($elm$core$Array$slice, 0, ii, arr),
				A3(
					$elm$core$Array$slice,
					ii + 1,
					$elm$core$Array$length(arr),
					arr));
		});
	switch (editableValue.$) {
		case 'JsonString':
			var str = editableValue.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[inlineStyle]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$textarea,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$value(str),
								$rtfeldman$elm_css$Html$Styled$Events$onInput(
								function (newString) {
									return $author$project$EditableValue$JsonString(newString);
								})
							]),
						_List_Nil)
					]));
		case 'JsonInt':
			var _int = editableValue.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[inlineStyle]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$input,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$value(
								$elm$core$String$fromInt(_int)),
								$rtfeldman$elm_css$Html$Styled$Events$onInput(
								function (newIntStr) {
									return $author$project$EditableValue$JsonInt(
										A2(
											$elm$core$Maybe$withDefault,
											_int,
											$elm$core$String$toInt(newIntStr)));
								})
							]),
						_List_Nil)
					]));
		case 'JsonFloat':
			var _float = editableValue.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[inlineStyle]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$input,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$type_('number'),
								$rtfeldman$elm_css$Html$Styled$Attributes$value(
								$elm$core$String$fromFloat(_float)),
								$rtfeldman$elm_css$Html$Styled$Attributes$step('any'),
								$rtfeldman$elm_css$Html$Styled$Events$onInput(
								function (newIntStr) {
									return $author$project$EditableValue$JsonFloat(
										A2(
											$elm$core$Maybe$withDefault,
											_float,
											$elm$core$String$toFloat(newIntStr)));
								})
							]),
						_List_Nil)
					]));
		case 'JsonArray':
			var array = editableValue.a;
			var divMapper = F2(
				function (ii, jv) {
					return A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										A2($rtfeldman$elm_css$Html$Styled$Attributes$style, 'display', 'flex'),
										A2($rtfeldman$elm_css$Html$Styled$Attributes$style, 'justify-content', 'space-between')
									]),
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_Nil,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text(
												$elm$core$String$fromInt(ii))
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$button,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Events$onClick(
														$author$project$EditableValue$JsonArray(
															A2(arrayInsert, ii, array)))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('Insert')
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$button,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Events$onClick(
														$author$project$EditableValue$JsonArray(
															A2(arrayDelete, ii, array)))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('Delete')
													]))
											]))
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$map,
								function (newJson) {
									return $author$project$EditableValue$JsonArray(
										A3($elm$core$Array$set, ii, newJson, array));
								},
								$author$project$EditableValue$editableViewAux(jv))
							]));
				});
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[inlineStyle]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_Nil,
						$elm$core$List$concat(
							_List_fromArray(
								[
									$elm$core$Array$toList(
									A2($elm$core$Array$indexedMap, divMapper, array)),
									_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$button,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Events$onClick(
														$author$project$EditableValue$JsonArray(
															A2(
																$elm$core$Array$push,
																A2(
																	$elm$core$Maybe$withDefault,
																	$author$project$EditableValue$JsonNull,
																	A2(
																		$elm$core$Array$get,
																		$elm$core$Array$length(array) - 1,
																		array)),
																array)))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('추가')
													]))
											]))
									])
								])))
					]));
		case 'JsonObject':
			var obj = editableValue.a;
			var trMapper = F2(
				function (ii, _v1) {
					var key = _v1.a;
					var val = _v1.b;
					return A2(
						$rtfeldman$elm_css$Html$Styled$tr,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$td,
								_List_fromArray(
									[
										A2($rtfeldman$elm_css$Html$Styled$Attributes$style, 'vertical-align', 'top')
									]),
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$input,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$type_('text'),
												$rtfeldman$elm_css$Html$Styled$Attributes$value(key),
												A2($rtfeldman$elm_css$Html$Styled$Attributes$style, 'width', '80px'),
												$rtfeldman$elm_css$Html$Styled$Attributes$disabled(true)
											]),
										_List_Nil)
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$td,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$map,
										function (newVal) {
											return $author$project$EditableValue$JsonObject(
												A3(
													$elm$core$Array$set,
													ii,
													_Utils_Tuple2(key, newVal),
													obj));
										},
										$author$project$EditableValue$editableViewAux(val))
									]))
							]));
				});
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[inlineStyle]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$table,
						_List_fromArray(
							[
								A2($rtfeldman$elm_css$Html$Styled$Attributes$style, 'margin', '4px')
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$tbody,
								_List_Nil,
								$elm$core$List$concat(
									_List_fromArray(
										[
											$elm$core$Array$toList(
											A2($elm$core$Array$indexedMap, trMapper, obj))
										])))
							]))
					]));
		case 'JsonBool':
			var bool = editableValue.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[inlineStyle]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$input,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$type_('checkbox'),
								$rtfeldman$elm_css$Html$Styled$Events$onCheck($author$project$EditableValue$JsonBool),
								$rtfeldman$elm_css$Html$Styled$Attributes$checked(bool)
							]),
						_List_Nil)
					]));
		default:
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$button,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick(
								$author$project$EditableValue$JsonString(''))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('str')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$button,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick(
								$author$project$EditableValue$JsonInt(0))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('int')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$button,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick(
								$author$project$EditableValue$JsonFloat(0))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('float')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$button,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick(
								$author$project$EditableValue$JsonObject($elm$core$Array$empty))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('obj')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$button,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick(
								$author$project$EditableValue$JsonArray($elm$core$Array$empty))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('arr')
							]))
					]));
	}
};
var $author$project$EditableValue$editableView = function (editableValue) {
	return A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$EditableValue$editableViewAux, editableValue);
};
var $rtfeldman$elm_css$Css$flexGrow = $rtfeldman$elm_css$Css$prop1('flex-grow');
var $rtfeldman$elm_css$Css$height = $rtfeldman$elm_css$Css$prop1('height');
var $rtfeldman$elm_css$Css$withPrecedingHash = function (str) {
	return A2($elm$core$String$startsWith, '#', str) ? str : A2(
		$elm$core$String$cons,
		_Utils_chr('#'),
		str);
};
var $rtfeldman$elm_css$Css$erroneousHex = function (str) {
	return {
		alpha: 1,
		blue: 0,
		color: $rtfeldman$elm_css$Css$Structure$Compatible,
		green: 0,
		red: 0,
		value: $rtfeldman$elm_css$Css$withPrecedingHash(str)
	};
};
var $elm$core$Basics$pow = _Basics_pow;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $rtfeldman$elm_css$Css$validHex = F5(
	function (str, _v0, _v1, _v2, _v3) {
		var r1 = _v0.a;
		var r2 = _v0.b;
		var g1 = _v1.a;
		var g2 = _v1.b;
		var b1 = _v2.a;
		var b2 = _v2.b;
		var a1 = _v3.a;
		var a2 = _v3.b;
		var toResult = A2(
			$elm$core$Basics$composeR,
			$elm$core$String$fromList,
			A2($elm$core$Basics$composeR, $elm$core$String$toLower, $rtfeldman$elm_hex$Hex$fromString));
		var results = _Utils_Tuple2(
			_Utils_Tuple2(
				toResult(
					_List_fromArray(
						[r1, r2])),
				toResult(
					_List_fromArray(
						[g1, g2]))),
			_Utils_Tuple2(
				toResult(
					_List_fromArray(
						[b1, b2])),
				toResult(
					_List_fromArray(
						[a1, a2]))));
		if ((((results.a.a.$ === 'Ok') && (results.a.b.$ === 'Ok')) && (results.b.a.$ === 'Ok')) && (results.b.b.$ === 'Ok')) {
			var _v5 = results.a;
			var red = _v5.a.a;
			var green = _v5.b.a;
			var _v6 = results.b;
			var blue = _v6.a.a;
			var alpha = _v6.b.a;
			return {
				alpha: alpha / 255,
				blue: blue,
				color: $rtfeldman$elm_css$Css$Structure$Compatible,
				green: green,
				red: red,
				value: $rtfeldman$elm_css$Css$withPrecedingHash(str)
			};
		} else {
			return $rtfeldman$elm_css$Css$erroneousHex(str);
		}
	});
var $rtfeldman$elm_css$Css$hex = function (str) {
	var withoutHash = A2($elm$core$String$startsWith, '#', str) ? A2($elm$core$String$dropLeft, 1, str) : str;
	var _v0 = $elm$core$String$toList(withoutHash);
	_v0$4:
	while (true) {
		if ((_v0.b && _v0.b.b) && _v0.b.b.b) {
			if (!_v0.b.b.b.b) {
				var r = _v0.a;
				var _v1 = _v0.b;
				var g = _v1.a;
				var _v2 = _v1.b;
				var b = _v2.a;
				return A5(
					$rtfeldman$elm_css$Css$validHex,
					str,
					_Utils_Tuple2(r, r),
					_Utils_Tuple2(g, g),
					_Utils_Tuple2(b, b),
					_Utils_Tuple2(
						_Utils_chr('f'),
						_Utils_chr('f')));
			} else {
				if (!_v0.b.b.b.b.b) {
					var r = _v0.a;
					var _v3 = _v0.b;
					var g = _v3.a;
					var _v4 = _v3.b;
					var b = _v4.a;
					var _v5 = _v4.b;
					var a = _v5.a;
					return A5(
						$rtfeldman$elm_css$Css$validHex,
						str,
						_Utils_Tuple2(r, r),
						_Utils_Tuple2(g, g),
						_Utils_Tuple2(b, b),
						_Utils_Tuple2(a, a));
				} else {
					if (_v0.b.b.b.b.b.b) {
						if (!_v0.b.b.b.b.b.b.b) {
							var r1 = _v0.a;
							var _v6 = _v0.b;
							var r2 = _v6.a;
							var _v7 = _v6.b;
							var g1 = _v7.a;
							var _v8 = _v7.b;
							var g2 = _v8.a;
							var _v9 = _v8.b;
							var b1 = _v9.a;
							var _v10 = _v9.b;
							var b2 = _v10.a;
							return A5(
								$rtfeldman$elm_css$Css$validHex,
								str,
								_Utils_Tuple2(r1, r2),
								_Utils_Tuple2(g1, g2),
								_Utils_Tuple2(b1, b2),
								_Utils_Tuple2(
									_Utils_chr('f'),
									_Utils_chr('f')));
						} else {
							if (_v0.b.b.b.b.b.b.b.b && (!_v0.b.b.b.b.b.b.b.b.b)) {
								var r1 = _v0.a;
								var _v11 = _v0.b;
								var r2 = _v11.a;
								var _v12 = _v11.b;
								var g1 = _v12.a;
								var _v13 = _v12.b;
								var g2 = _v13.a;
								var _v14 = _v13.b;
								var b1 = _v14.a;
								var _v15 = _v14.b;
								var b2 = _v15.a;
								var _v16 = _v15.b;
								var a1 = _v16.a;
								var _v17 = _v16.b;
								var a2 = _v17.a;
								return A5(
									$rtfeldman$elm_css$Css$validHex,
									str,
									_Utils_Tuple2(r1, r2),
									_Utils_Tuple2(g1, g2),
									_Utils_Tuple2(b1, b2),
									_Utils_Tuple2(a1, a2));
							} else {
								break _v0$4;
							}
						}
					} else {
						break _v0$4;
					}
				}
			}
		} else {
			break _v0$4;
		}
	}
	return $rtfeldman$elm_css$Css$erroneousHex(str);
};
var $rtfeldman$elm_css$Css$marginLeft = $rtfeldman$elm_css$Css$prop1('margin-left');
var $rtfeldman$elm_css$Css$marginTop = $rtfeldman$elm_css$Css$prop1('margin-top');
var $rtfeldman$elm_css$Css$minWidth = $rtfeldman$elm_css$Css$prop1('min-width');
var $rtfeldman$elm_css$Css$overflow = $rtfeldman$elm_css$Css$prop1('overflow');
var $rtfeldman$elm_css$Css$padding = $rtfeldman$elm_css$Css$prop1('padding');
var $rtfeldman$elm_css$Css$paddingBottom = $rtfeldman$elm_css$Css$prop1('padding-bottom');
var $rtfeldman$elm_css$Css$PercentageUnits = {$: 'PercentageUnits'};
var $rtfeldman$elm_css$Css$pct = A2($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$PercentageUnits, '%');
var $rtfeldman$elm_css$Css$relative = {position: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'relative'};
var $author$project$InfoPage$AYoutubeLinkClicked = {$: 'AYoutubeLinkClicked'};
var $author$project$InfoPage$BYoutubeLinkClicked = {$: 'BYoutubeLinkClicked'};
var $author$project$InfoPage$OriginalYoutubeLinkClicked = {$: 'OriginalYoutubeLinkClicked'};
var $rtfeldman$elm_css$Css$Structure$PseudoClassSelector = function (a) {
	return {$: 'PseudoClassSelector', a: a};
};
var $rtfeldman$elm_css$Css$pseudoClass = function (_class) {
	return $rtfeldman$elm_css$Css$Preprocess$ExtendSelector(
		$rtfeldman$elm_css$Css$Structure$PseudoClassSelector(_class));
};
var $rtfeldman$elm_css$Css$active = $rtfeldman$elm_css$Css$pseudoClass('active');
var $rtfeldman$elm_css$Css$Internal$property = F2(
	function (key, value) {
		return $rtfeldman$elm_css$Css$Preprocess$AppendProperty(key + (':' + value));
	});
var $rtfeldman$elm_css$Css$Internal$getOverloadedProperty = F3(
	function (functionName, desiredKey, style) {
		getOverloadedProperty:
		while (true) {
			switch (style.$) {
				case 'AppendProperty':
					var str = style.a;
					var key = A2(
						$elm$core$Maybe$withDefault,
						'',
						$elm$core$List$head(
							A2($elm$core$String$split, ':', str)));
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, key);
				case 'ExtendSelector':
					var selector = style.a;
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-selector'));
				case 'NestSnippet':
					var combinator = style.a;
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-combinator'));
				case 'WithPseudoElement':
					var pseudoElement = style.a;
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-pseudo-element setter'));
				case 'WithMedia':
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-media-query'));
				case 'WithKeyframes':
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-keyframes'));
				default:
					if (!style.a.b) {
						return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-empty-Style'));
					} else {
						if (!style.a.b.b) {
							var _v1 = style.a;
							var only = _v1.a;
							var $temp$functionName = functionName,
								$temp$desiredKey = desiredKey,
								$temp$style = only;
							functionName = $temp$functionName;
							desiredKey = $temp$desiredKey;
							style = $temp$style;
							continue getOverloadedProperty;
						} else {
							var _v2 = style.a;
							var first = _v2.a;
							var rest = _v2.b;
							var $temp$functionName = functionName,
								$temp$desiredKey = desiredKey,
								$temp$style = $rtfeldman$elm_css$Css$Preprocess$ApplyStyles(rest);
							functionName = $temp$functionName;
							desiredKey = $temp$desiredKey;
							style = $temp$style;
							continue getOverloadedProperty;
						}
					}
			}
		}
	});
var $rtfeldman$elm_css$Css$Internal$IncompatibleUnits = {$: 'IncompatibleUnits'};
var $rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty = A3($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$Internal$IncompatibleUnits, '', 0);
var $rtfeldman$elm_css$Css$alignItems = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'alignItems',
		'align-items',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Css$backgroundImage = $rtfeldman$elm_css$Css$prop1('background-image');
var $rtfeldman$elm_css$Css$prop2 = F3(
	function (key, argA, argB) {
		return A2(
			$rtfeldman$elm_css$Css$property,
			key,
			A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					[argA.value, argB.value])));
	});
var $rtfeldman$elm_css$Css$backgroundSize2 = $rtfeldman$elm_css$Css$prop2('background-size');
var $rtfeldman$elm_css$Css$block = {display: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'block'};
var $rtfeldman$elm_css$Css$center = $rtfeldman$elm_css$Css$prop1('center');
var $rtfeldman$elm_css$Css$color = function (c) {
	return A2($rtfeldman$elm_css$Css$property, 'color', c.value);
};
var $rtfeldman$elm_css$Css$row = {flexDirection: $rtfeldman$elm_css$Css$Structure$Compatible, flexDirectionOrWrap: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'row'};
var $rtfeldman$elm_css$Css$column = _Utils_update(
	$rtfeldman$elm_css$Css$row,
	{value: 'column'});
var $rtfeldman$elm_css$Css$display = $rtfeldman$elm_css$Css$prop1('display');
var $rtfeldman$elm_css$Css$flexDirection = $rtfeldman$elm_css$Css$prop1('flex-direction');
var $rtfeldman$elm_css$Css$fontSize = $rtfeldman$elm_css$Css$prop1('font-size');
var $rtfeldman$elm_css$Html$Styled$img = $rtfeldman$elm_css$Html$Styled$node('img');
var $rtfeldman$elm_css$Css$justifyContent = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'justifyContent',
		'justify-content',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Css$lineHeight = $rtfeldman$elm_css$Css$prop1('line-height');
var $rtfeldman$elm_css$Css$borderRadius = $rtfeldman$elm_css$Css$prop1('border-radius');
var $rtfeldman$elm_css$Css$prop4 = F5(
	function (key, argA, argB, argC, argD) {
		return A2(
			$rtfeldman$elm_css$Css$property,
			key,
			A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					[argA.value, argB.value, argC.value, argD.value])));
	});
var $rtfeldman$elm_css$Css$boxShadow4 = $rtfeldman$elm_css$Css$prop4('box-shadow');
var $rtfeldman$elm_css$Css$flexWrap = $rtfeldman$elm_css$Css$prop1('flex-wrap');
var $rtfeldman$elm_css$Css$inlineBlock = {display: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'inline-block'};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$attribute = F2(
	function (key, value) {
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$attribute, key, value),
			_List_Nil,
			'');
	});
var $rtfeldman$elm_css$Svg$Styled$Attributes$d = $rtfeldman$elm_css$VirtualDom$Styled$attribute('d');
var $rtfeldman$elm_css$Svg$Styled$Attributes$fill = $rtfeldman$elm_css$VirtualDom$Styled$attribute('fill');
var $rtfeldman$elm_css$Svg$Styled$Attributes$height = $rtfeldman$elm_css$VirtualDom$Styled$attribute('height');
var $rtfeldman$elm_css$VirtualDom$Styled$nodeNS = $rtfeldman$elm_css$VirtualDom$Styled$NodeNS;
var $rtfeldman$elm_css$Svg$Styled$node = $rtfeldman$elm_css$VirtualDom$Styled$nodeNS('http://www.w3.org/2000/svg');
var $rtfeldman$elm_css$Svg$Styled$path = $rtfeldman$elm_css$Svg$Styled$node('path');
var $rtfeldman$elm_css$Svg$Styled$svg = $rtfeldman$elm_css$Svg$Styled$node('svg');
var $rtfeldman$elm_css$Svg$Styled$Attributes$viewBox = $rtfeldman$elm_css$VirtualDom$Styled$attribute('viewBox');
var $author$project$SvgElement$linkSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('17'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 640 512')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('#fff'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M579.8 267.7c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114L422.3 334.8c-31.5 31.5-82.5 31.5-114 0c-27.9-27.9-31.5-71.8-8.6-103.8l1.1-1.6c10.3-14.4 6.9-34.4-7.4-44.6s-34.4-6.9-44.6 7.4l-1.1 1.6C206.5 251.2 213 330 263 380c56.5 56.5 148 56.5 204.5 0L579.8 267.7zM60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5L217.7 177.2c31.5-31.5 82.5-31.5 114 0c27.9 27.9 31.5 71.8 8.6 103.9l-1.1 1.6c-10.3 14.4-6.9 34.4 7.4 44.6s34.4 6.9 44.6-7.4l1.1-1.6C433.5 260.8 427 182 377 132c-56.5-56.5-148-56.5-204.5 0L60.2 244.3z')
				]),
			_List_Nil)
		]));
var $rtfeldman$elm_css$Css$marginRight = $rtfeldman$elm_css$Css$prop1('margin-right');
var $rtfeldman$elm_css$Css$opacity = $rtfeldman$elm_css$Css$prop1('opacity');
var $rtfeldman$elm_css$Css$paddingLeft = $rtfeldman$elm_css$Css$prop1('padding-left');
var $rtfeldman$elm_css$Css$valuesOrNone = function (list) {
	return $elm$core$List$isEmpty(list) ? {value: 'none'} : {
		value: A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				function ($) {
					return $.value;
				},
				list))
	};
};
var $rtfeldman$elm_css$Css$transforms = A2(
	$elm$core$Basics$composeL,
	$rtfeldman$elm_css$Css$prop1('transform'),
	$rtfeldman$elm_css$Css$valuesOrNone);
var $rtfeldman$elm_css$Css$translate2 = F2(
	function (tx, ty) {
		return {
			transform: $rtfeldman$elm_css$Css$Structure$Compatible,
			value: A2(
				$rtfeldman$elm_css$Css$cssFunction,
				'translate',
				_List_fromArray(
					[tx.value, ty.value]))
		};
	});
var $rtfeldman$elm_css$Css$width = $rtfeldman$elm_css$Css$prop1('width');
var $rtfeldman$elm_css$Css$wrap = {flexDirectionOrWrap: $rtfeldman$elm_css$Css$Structure$Compatible, flexWrap: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'wrap'};
var $author$project$SvgElement$youtubeSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 576 512'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('25')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('#ff0000'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M549.7 124.1c-6.3-23.7-24.8-42.3-48.3-48.6C458.8 64 288 64 288 64S117.2 64 74.6 75.5c-23.5 6.3-42 24.9-48.3 48.6-11.4 42.9-11.4 132.3-11.4 132.3s0 89.4 11.4 132.3c6.3 23.7 24.8 41.5 48.3 47.8C117.2 448 288 448 288 448s170.8 0 213.4-11.5c23.5-6.3 42-24.2 48.3-47.8 11.4-42.9 11.4-132.3 11.4-132.3s0-89.4-11.4-132.3zm-317.5 213.5V175.2l142.7 81.2-142.7 81.2z')
				]),
			_List_Nil)
		]));
var $author$project$InfoPage$linkBtnBase = F2(
	function (msg, name) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick(msg),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$flexWrap($rtfeldman$elm_css$Css$wrap),
							$rtfeldman$elm_css$Css$marginTop(
							$rtfeldman$elm_css$Css$px(12)),
							$rtfeldman$elm_css$Css$borderRadius(
							$rtfeldman$elm_css$Css$px(50)),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#42A5F5')),
							A4(
							$rtfeldman$elm_css$Css$boxShadow4,
							$rtfeldman$elm_css$Css$px(2),
							$rtfeldman$elm_css$Css$px(2),
							$rtfeldman$elm_css$Css$px(8),
							$rtfeldman$elm_css$Css$hex('#00000011')),
							$rtfeldman$elm_css$Css$active(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0.8))
								])),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$px(40)),
							$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
									$rtfeldman$elm_css$Css$marginRight(
									$rtfeldman$elm_css$Css$px(7)),
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(26)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(26))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(10)),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$px(20)),
											$rtfeldman$elm_css$Css$backgroundColor(
											$rtfeldman$elm_css$Css$hex('#fff')),
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$left(
											$rtfeldman$elm_css$Css$px(4)),
											$rtfeldman$elm_css$Css$top(
											$rtfeldman$elm_css$Css$px(7))
										]))
								]),
							_List_Nil),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$zIndex(
											$rtfeldman$elm_css$Css$int(2))
										]))
								]),
							_List_fromArray(
								[$author$project$SvgElement$youtubeSvg]))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(18))
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(name)
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
									$rtfeldman$elm_css$Css$paddingLeft(
									$rtfeldman$elm_css$Css$px(3)),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$translate2,
											$rtfeldman$elm_css$Css$px(0),
											$rtfeldman$elm_css$Css$px(2))
										]))
								]))
						]),
					_List_fromArray(
						[$author$project$SvgElement$linkSvg]))
				]));
	});
var $author$project$InfoPage$linkBtnBaseAlter = F2(
	function (msg, name) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick(msg),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$flexWrap($rtfeldman$elm_css$Css$wrap),
							$rtfeldman$elm_css$Css$marginTop(
							$rtfeldman$elm_css$Css$px(12)),
							$rtfeldman$elm_css$Css$borderRadius(
							$rtfeldman$elm_css$Css$px(50)),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#6942f5')),
							A4(
							$rtfeldman$elm_css$Css$boxShadow4,
							$rtfeldman$elm_css$Css$px(2),
							$rtfeldman$elm_css$Css$px(2),
							$rtfeldman$elm_css$Css$px(8),
							$rtfeldman$elm_css$Css$hex('#00000011')),
							$rtfeldman$elm_css$Css$active(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0.8))
								])),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$px(40)),
							$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
									$rtfeldman$elm_css$Css$marginRight(
									$rtfeldman$elm_css$Css$px(7)),
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(26)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(26))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(10)),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$px(20)),
											$rtfeldman$elm_css$Css$backgroundColor(
											$rtfeldman$elm_css$Css$hex('#fff')),
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$left(
											$rtfeldman$elm_css$Css$px(4)),
											$rtfeldman$elm_css$Css$top(
											$rtfeldman$elm_css$Css$px(7))
										]))
								]),
							_List_Nil),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$zIndex(
											$rtfeldman$elm_css$Css$int(2))
										]))
								]),
							_List_fromArray(
								[$author$project$SvgElement$youtubeSvg]))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(18))
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(name)
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
									$rtfeldman$elm_css$Css$paddingLeft(
									$rtfeldman$elm_css$Css$px(3)),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$translate2,
											$rtfeldman$elm_css$Css$px(0),
											$rtfeldman$elm_css$Css$px(2))
										]))
								]))
						]),
					_List_fromArray(
						[$author$project$SvgElement$linkSvg]))
				]));
	});
var $rtfeldman$elm_css$Css$overflowY = $rtfeldman$elm_css$Css$prop1('overflow-y');
var $rtfeldman$elm_css$Css$paddingRight = $rtfeldman$elm_css$Css$prop1('padding-right');
var $rtfeldman$elm_css$Css$preLine = {value: 'pre-line', whiteSpace: $rtfeldman$elm_css$Css$Structure$Compatible};
var $rtfeldman$elm_css$Css$rgb = F3(
	function (r, g, b) {
		return {
			alpha: 1,
			blue: b,
			color: $rtfeldman$elm_css$Css$Structure$Compatible,
			green: g,
			red: r,
			value: A2(
				$rtfeldman$elm_css$Css$cssFunction,
				'rgb',
				A2(
					$elm$core$List$map,
					$elm$core$String$fromInt,
					_List_fromArray(
						[r, g, b])))
		};
	});
var $rtfeldman$elm_css$Css$spaceBetween = $rtfeldman$elm_css$Css$prop1('space-between');
var $rtfeldman$elm_css$Html$Styled$Attributes$src = function (url) {
	return A2($rtfeldman$elm_css$Html$Styled$Attributes$stringProperty, 'src', url);
};
var $rtfeldman$elm_css$Css$url = function (urlValue) {
	return {backgroundImage: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'url(' + (urlValue + ')')};
};
var $rtfeldman$elm_css$Css$whiteSpace = $rtfeldman$elm_css$Css$prop1('white-space');
var $author$project$InfoPage$view = function (model) {
	var data = model.data;
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundImage(
						$rtfeldman$elm_css$Css$url('images/bg.webp')),
						A2(
						$rtfeldman$elm_css$Css$backgroundSize2,
						$rtfeldman$elm_css$Css$pct(100),
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url('images/wave.webp')),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(60)),
								A2(
								$rtfeldman$elm_css$Css$backgroundSize2,
								$rtfeldman$elm_css$Css$pct(100),
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
							]))
					]),
				_List_Nil),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$color(
								A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$InfoPage$ToRoadMap),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$active(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0.7))
											])),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(60)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$img,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$src('images/arrow-back.webp'),
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(24))
											]))
									]),
								_List_Nil),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$marginLeft(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(20)),
												$rtfeldman$elm_css$Css$lineHeight(
												$rtfeldman$elm_css$Css$num(1))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('돌아가기')
									]))
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(2)),
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#fff')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(15)),
								$rtfeldman$elm_css$Css$paddingBottom(
								$rtfeldman$elm_css$Css$px(80)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#dedede3a'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(19)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(3))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('곡명')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(17)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(3)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(3))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(
								$elm$core$String$concat(
									_List_fromArray(
										['일본어 : ', data.songNameJp])))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(17)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(3)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(3))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(
								$elm$core$String$concat(
									_List_fromArray(
										['한국어 : ', data.songNameKor])))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(19)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(20))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('아티스트')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(17)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(3)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(3))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(
								$elm$core$String$concat(
									_List_fromArray(
										['일본어 : ', data.artistJp])))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(17)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(3)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(3))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(
								$elm$core$String$concat(
									_List_fromArray(
										['한국어 : ', data.artistKor])))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(19)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(20))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('소개')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(17)),
										$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$preLine),
										$rtfeldman$elm_css$Css$lineHeight(
										$rtfeldman$elm_css$Css$num(1.4)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(5)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(4))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(data.info)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(19)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(20))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('링크')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_Nil,
						_List_fromArray(
							[
								A2($author$project$InfoPage$linkBtnBaseAlter, $author$project$InfoPage$OriginalYoutubeLinkClicked, '원곡 유튜브')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										($elm$core$String$length(model.data.aVid) === 11) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
									]))
							]),
						_List_fromArray(
							[
								A2($author$project$InfoPage$linkBtnBase, $author$project$InfoPage$AYoutubeLinkClicked, '한글 발음 유튜브')
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										($elm$core$String$length(model.data.bVid) === 11) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
									]))
							]),
						_List_fromArray(
							[
								A2($author$project$InfoPage$linkBtnBase, $author$project$InfoPage$BYoutubeLinkClicked, '후리가나 유튜브')
							]))
					]))
			]));
};
var $author$project$InfoPage$editView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$right(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
								$rtfeldman$elm_css$Css$minWidth(
								$rtfeldman$elm_css$Css$px(400)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						$author$project$InfoPage$view(model)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(100)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ccc'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
										$rtfeldman$elm_css$Css$top(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('ccc'))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$InfoPage$SaveClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('저장하기')
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(100)),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(30))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$InfoPage$SetEditableValue,
								$author$project$EditableValue$editableView(model.editableValue))
							]))
					]))
			]));
};
var $author$project$ListenPage$ApplyJpClicked = {$: 'ApplyJpClicked'};
var $author$project$ListenPage$ApplyKorClicked = {$: 'ApplyKorClicked'};
var $author$project$ListenPage$AutoKanjiClicked = {$: 'AutoKanjiClicked'};
var $author$project$ListenPage$AutoKanjiOverwriteClicked = {$: 'AutoKanjiOverwriteClicked'};
var $author$project$ListenPage$JpFileRequested = {$: 'JpFileRequested'};
var $author$project$ListenPage$KanjiValidate = {$: 'KanjiValidate'};
var $author$project$ListenPage$KorFileRequested = {$: 'KorFileRequested'};
var $author$project$ListenPage$MergeClicked = {$: 'MergeClicked'};
var $author$project$ListenPage$RubyBtnClicked = {$: 'RubyBtnClicked'};
var $author$project$ListenPage$SaveClicked = {$: 'SaveClicked'};
var $author$project$ListenPage$SetEditableValue = function (a) {
	return {$: 'SetEditableValue', a: a};
};
var $author$project$ListenPage$SpeakPron = {$: 'SpeakPron'};
var $author$project$ListenPage$TimeShiftClicked = {$: 'TimeShiftClicked'};
var $author$project$ListenPage$TimeValidate = {$: 'TimeValidate'};
var $author$project$ListenPage$UpdateTimeShiftInput = function (a) {
	return {$: 'UpdateTimeShiftInput', a: a};
};
var $author$project$ListenPage$PlayVideo = {$: 'PlayVideo'};
var $author$project$ListenPage$absoluteFullStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
			$rtfeldman$elm_css$Css$left(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$right(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$top(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$bottom(
			$rtfeldman$elm_css$Css$px(0))
		]));
var $rtfeldman$elm_css$Css$backgroundPosition = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'backgroundPosition',
		'background-position',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Css$backgroundSize = $rtfeldman$elm_css$Css$prop1('background-size');
var $rtfeldman$elm_css$Css$cover = {lengthOrAutoOrCoverOrContain: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'cover'};
var $author$project$DataManage$emptyVideoData = A7($author$project$DataManage$VideoData, '', '', '', '', '', '', '');
var $author$project$DataManage$getVideoData = F2(
	function (videoId, appData) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyVideoData,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (x) {
						return _Utils_eq(x.videoId, videoId);
					},
					appData.video)));
	});
var $author$project$ListenPage$isShortForm = false;
var $author$project$ListenPage$alterAlbumCover = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(18)),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(1000)),
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		($author$project$ListenPage$isVideoMode && (!$author$project$ListenPage$isShortForm)) ? _List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url(
									'videoImages/' + (A2($author$project$DataManage$getVideoData, model.data.videoId, model.appData).imageSrc + '.webp'))),
								$rtfeldman$elm_css$Css$backgroundSize($rtfeldman$elm_css$Css$cover),
								$rtfeldman$elm_css$Css$backgroundPosition($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$px(160)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(160)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(10)),
								A4(
								$rtfeldman$elm_css$Css$boxShadow4,
								$rtfeldman$elm_css$Css$px(1),
								$rtfeldman$elm_css$Css$px(1),
								$rtfeldman$elm_css$Css$px(10),
								$rtfeldman$elm_css$Css$hex('#00000030'))
							]))
					]),
				_List_Nil)
			]) : _List_Nil);
};
var $rtfeldman$elm_css$Css$Transitions$Opacity = {$: 'Opacity'};
var $rtfeldman$elm_css$Css$Transitions$Transition = function (a) {
	return {$: 'Transition', a: a};
};
var $rtfeldman$elm_css$Css$Transitions$durationTransition = F2(
	function (animation, duration) {
		return $rtfeldman$elm_css$Css$Transitions$Transition(
			{animation: animation, delay: $elm$core$Maybe$Nothing, duration: duration, timing: $elm$core$Maybe$Nothing});
	});
var $rtfeldman$elm_css$Css$Transitions$opacity = $rtfeldman$elm_css$Css$Transitions$durationTransition($rtfeldman$elm_css$Css$Transitions$Opacity);
var $rtfeldman$elm_css$Css$pointerEvents = $rtfeldman$elm_css$Css$prop1('pointer-events');
var $rtfeldman$elm_css$Css$Transitions$Transform = {$: 'Transform'};
var $rtfeldman$elm_css$Css$Transitions$transform = $rtfeldman$elm_css$Css$Transitions$durationTransition($rtfeldman$elm_css$Css$Transitions$Transform);
var $rtfeldman$elm_css$Css$Transitions$propToString = function (prop) {
	switch (prop.$) {
		case 'Background':
			return 'background';
		case 'BackgroundColor':
			return 'background-color';
		case 'BackgroundPosition':
			return 'background-position';
		case 'BackgroundSize':
			return 'background-size';
		case 'Border':
			return 'border';
		case 'BorderBottom':
			return 'border-bottom';
		case 'BorderBottomColor':
			return 'border-bottom-color';
		case 'BorderBottomLeftRadius':
			return 'border-bottom-left-radius';
		case 'BorderBottomRightRadius':
			return 'border-bottom-right-radius';
		case 'BorderBottomWidth':
			return 'border-bottom-width';
		case 'BorderColor':
			return 'border-color';
		case 'BorderLeft':
			return 'border-left';
		case 'BorderLeftColor':
			return 'border-left-color';
		case 'BorderLeftWidth':
			return 'border-left-width';
		case 'BorderRadius':
			return 'border-radius';
		case 'BorderRight':
			return 'border-right';
		case 'BorderRightColor':
			return 'border-right-color';
		case 'BorderRightWidth':
			return 'border-right-width';
		case 'BorderTop':
			return 'border-top';
		case 'BorderTopColor':
			return 'border-top-color';
		case 'BorderTopLeftRadius':
			return 'border-top-left-radius';
		case 'BorderTopRightRadius':
			return 'border-top-right-radius';
		case 'BorderTopWidth':
			return 'border-top-width';
		case 'BorderWidth':
			return 'border-width';
		case 'Bottom':
			return 'bottom';
		case 'BoxShadow':
			return 'box-shadow';
		case 'CaretColor':
			return 'caret-color';
		case 'Clip':
			return 'clip';
		case 'ClipPath':
			return 'clip-path';
		case 'Color':
			return 'color';
		case 'ColumnCount':
			return 'column-count';
		case 'ColumnGap':
			return 'column-gap';
		case 'ColumnRule':
			return 'column-rule';
		case 'ColumnRuleColor':
			return 'column-rule-color';
		case 'ColumnRuleWidth':
			return 'column-rule-width';
		case 'ColumnWidth':
			return 'column-width';
		case 'Columns':
			return 'columns';
		case 'Filter':
			return 'filter';
		case 'Flex':
			return 'flex';
		case 'FlexBasis':
			return 'flex-basis';
		case 'FlexGrow':
			return 'flex-grow';
		case 'FlexShrink':
			return 'flex-shrink';
		case 'Font':
			return 'font';
		case 'FontSize':
			return 'font-size';
		case 'FontSizeAdjust':
			return 'font-size-adjust';
		case 'FontStretch':
			return 'font-stretch';
		case 'FontVariationSettings':
			return 'font-variation-settings';
		case 'FontWeight':
			return 'font-weight';
		case 'GridColumnGap':
			return 'grid-column-gap';
		case 'GridGap':
			return 'grid-gap';
		case 'GridRowGap':
			return 'grid-row-gap';
		case 'Height':
			return 'height';
		case 'Left':
			return 'left';
		case 'LetterSpacing':
			return 'letter-spacing';
		case 'LineHeight':
			return 'line-height';
		case 'Margin':
			return 'margin';
		case 'MarginBottom':
			return 'margin-bottom';
		case 'MarginLeft':
			return 'margin-left';
		case 'MarginRight':
			return 'margin-right';
		case 'MarginTop':
			return 'margin-top';
		case 'Mask':
			return 'mask';
		case 'MaskPosition':
			return 'mask-position';
		case 'MaskSize':
			return 'mask-size';
		case 'MaxHeight':
			return 'max-height';
		case 'MaxWidth':
			return 'max-width';
		case 'MinHeight':
			return 'min-height';
		case 'MinWidth':
			return 'min-width';
		case 'ObjectPosition':
			return 'object-position';
		case 'Offset':
			return 'offset';
		case 'OffsetAnchor':
			return 'offset-anchor';
		case 'OffsetDistance':
			return 'offset-distance';
		case 'OffsetPath':
			return 'offset-path';
		case 'OffsetRotate':
			return 'offset-rotate';
		case 'Opacity':
			return 'opacity';
		case 'Order':
			return 'order';
		case 'Outline':
			return 'outline';
		case 'OutlineColor':
			return 'outline-color';
		case 'OutlineOffset':
			return 'outline-offset';
		case 'OutlineWidth':
			return 'outline-width';
		case 'Padding':
			return 'padding';
		case 'PaddingBottom':
			return 'padding-bottom';
		case 'PaddingLeft':
			return 'padding-left';
		case 'PaddingRight':
			return 'padding-right';
		case 'PaddingTop':
			return 'padding-top';
		case 'Right':
			return 'right';
		case 'TabSize':
			return 'tab-size';
		case 'TextIndent':
			return 'text-indent';
		case 'TextShadow':
			return 'text-shadow';
		case 'Top':
			return 'top';
		case 'Transform':
			return 'transform';
		case 'TransformOrigin':
			return 'transform-origin';
		case 'VerticalAlign':
			return 'vertical-align';
		case 'Visibility':
			return 'visibility';
		case 'Width':
			return 'width';
		case 'WordSpacing':
			return 'word-spacing';
		default:
			return 'z-index';
	}
};
var $rtfeldman$elm_css$Css$Transitions$timeToString = function (time) {
	return $elm$core$String$fromFloat(time) + 'ms';
};
var $rtfeldman$elm_css$Css$Transitions$timingFunctionToString = function (tf) {
	switch (tf.$) {
		case 'Ease':
			return 'ease';
		case 'Linear':
			return 'linear';
		case 'EaseIn':
			return 'ease-in';
		case 'EaseOut':
			return 'ease-out';
		case 'EaseInOut':
			return 'ease-in-out';
		case 'StepStart':
			return 'step-start';
		case 'StepEnd':
			return 'step-end';
		default:
			var _float = tf.a;
			var float2 = tf.b;
			var float3 = tf.c;
			var float4 = tf.d;
			return 'cubic-bezier(' + ($elm$core$String$fromFloat(_float) + (' , ' + ($elm$core$String$fromFloat(float2) + (' , ' + ($elm$core$String$fromFloat(float3) + (' , ' + ($elm$core$String$fromFloat(float4) + ')')))))));
	}
};
var $rtfeldman$elm_css$Css$Transitions$transition = function (options) {
	var v = A3(
		$elm$core$String$slice,
		0,
		-1,
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, s) {
					var animation = _v0.a.animation;
					var duration = _v0.a.duration;
					var delay = _v0.a.delay;
					var timing = _v0.a.timing;
					return s + (A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$propToString(animation),
								$rtfeldman$elm_css$Css$Transitions$timeToString(duration),
								A2(
								$elm$core$Maybe$withDefault,
								'',
								A2($elm$core$Maybe$map, $rtfeldman$elm_css$Css$Transitions$timeToString, delay)),
								A2(
								$elm$core$Maybe$withDefault,
								'',
								A2($elm$core$Maybe$map, $rtfeldman$elm_css$Css$Transitions$timingFunctionToString, timing))
							])) + ',');
				}),
			'',
			options));
	return A2($rtfeldman$elm_css$Css$property, 'transition', v);
};
var $rtfeldman$elm_css$Css$translateX = function (_v0) {
	var value = _v0.value;
	return {
		transform: $rtfeldman$elm_css$Css$Structure$Compatible,
		value: A2(
			$rtfeldman$elm_css$Css$cssFunction,
			'translateX',
			_List_fromArray(
				[value]))
	};
};
var $author$project$ListenPage$completeAlert = function (isOpen) {
	var translateXVal = isOpen ? 0 : 100;
	var opacityVal = isOpen ? 1 : 0;
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#3fa2f1')),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(61)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$color(
						$rtfeldman$elm_css$Css$hex('#fff')),
						$rtfeldman$elm_css$Css$fontSize(
						$rtfeldman$elm_css$Css$px(20)),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
						$rtfeldman$elm_css$Css$transforms(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$translateX(
								$rtfeldman$elm_css$Css$pct(translateXVal))
							])),
						$rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(opacityVal)),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$transform(700),
								$rtfeldman$elm_css$Css$Transitions$opacity(700)
							])),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(999))
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text('들어보기를 완료했습니다!')
			]));
};
var $author$project$ListenPage$GoLeft = {$: 'GoLeft'};
var $author$project$ListenPage$GoRight = {$: 'GoRight'};
var $author$project$ListenPage$TapContent = {$: 'TapContent'};
var $author$project$ListenPage$WordBtnClick = F3(
	function (a, b, c) {
		return {$: 'WordBtnClick', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$borderRadius4 = $rtfeldman$elm_css$Css$prop4('border-radius');
var $rtfeldman$elm_css$Css$Transitions$BoxShadow = {$: 'BoxShadow'};
var $rtfeldman$elm_css$Css$Transitions$boxShadow = $rtfeldman$elm_css$Css$Transitions$durationTransition($rtfeldman$elm_css$Css$Transitions$BoxShadow);
var $rtfeldman$elm_css$Css$breakWord = {overflowWrap: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'break-word'};
var $rtfeldman$elm_css$Html$Styled$Attributes$class = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('className');
var $author$project$ListenPage$classHangulPron = $author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Html$Styled$Attributes$class('hangul-pron') : $rtfeldman$elm_css$Html$Styled$Attributes$class('');
var $rtfeldman$elm_css$Css$inlineFlex = {display: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'inline-flex'};
var $rtfeldman$elm_css$Html$Styled$fromUnstyled = $rtfeldman$elm_css$VirtualDom$Styled$unstyledNode;
var $hecrj$html_parser$Html$Parser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $hecrj$html_parser$Html$Parser$chompOneOrMore = function (fn) {
	return A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$chompIf(fn),
		$elm$parser$Parser$chompWhile(fn));
};
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $hecrj$html_parser$Html$Parser$isSpaceCharacter = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr(' ')) || (_Utils_eq(
		c,
		_Utils_chr('\t')) || (_Utils_eq(
		c,
		_Utils_chr('\n')) || (_Utils_eq(
		c,
		_Utils_chr('\u000D')) || (_Utils_eq(
		c,
		_Utils_chr('\u000C')) || _Utils_eq(
		c,
		_Utils_chr('\u00A0'))))));
};
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $hecrj$html_parser$Html$Parser$closingTag = function (name) {
	var chompName = A2(
		$elm$parser$Parser$andThen,
		function (closingName) {
			return _Utils_eq(
				$elm$core$String$toLower(closingName),
				name) ? $elm$parser$Parser$succeed(_Utils_Tuple0) : $elm$parser$Parser$problem('closing tag does not match opening tag: ' + name);
		},
		$elm$parser$Parser$getChompedString(
			$hecrj$html_parser$Html$Parser$chompOneOrMore(
				function (c) {
					return (!$hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && (!_Utils_eq(
						c,
						_Utils_chr('>')));
				})));
	return A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('<'))),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('/')))),
				chompName),
			$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter)),
		$elm$parser$Parser$chompIf(
			$elm$core$Basics$eq(
				_Utils_chr('>'))));
};
var $hecrj$html_parser$Html$Parser$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$chompUntil = function (str) {
	return $elm$parser$Parser$Advanced$chompUntil(
		$elm$parser$Parser$toToken(str));
};
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$token = function (str) {
	return $elm$parser$Parser$Advanced$token(
		$elm$parser$Parser$toToken(str));
};
var $hecrj$html_parser$Html$Parser$commentString = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$token('<!')),
		$elm$parser$Parser$token('--')),
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$getChompedString(
			$elm$parser$Parser$chompUntil('-->')),
		$elm$parser$Parser$token('-->')));
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $hecrj$html_parser$Html$Parser$comment = A2($elm$parser$Parser$map, $hecrj$html_parser$Html$Parser$Comment, $hecrj$html_parser$Html$Parser$commentString);
var $hecrj$html_parser$Html$Parser$voidElements = _List_fromArray(
	['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr']);
var $hecrj$html_parser$Html$Parser$isVoidElement = function (name) {
	return A2($elm$core$List$member, name, $hecrj$html_parser$Html$Parser$voidElements);
};
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $hecrj$html_parser$Html$Parser$many = function (parser_) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		function (list) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$map,
						function (_new) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, _new, list));
						},
						parser_),
						$elm$parser$Parser$succeed(
						$elm$parser$Parser$Done(
							$elm$core$List$reverse(list)))
					]));
		});
};
var $hecrj$html_parser$Html$Parser$isTagAttributeCharacter = function (c) {
	return (!$hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && ((!_Utils_eq(
		c,
		_Utils_chr('\"'))) && ((!_Utils_eq(
		c,
		_Utils_chr('\''))) && ((!_Utils_eq(
		c,
		_Utils_chr('>'))) && ((!_Utils_eq(
		c,
		_Utils_chr('/'))) && (!_Utils_eq(
		c,
		_Utils_chr('=')))))));
};
var $hecrj$html_parser$Html$Parser$tagAttributeName = A2(
	$elm$parser$Parser$map,
	$elm$core$String$toLower,
	$elm$parser$Parser$getChompedString(
		$hecrj$html_parser$Html$Parser$chompOneOrMore($hecrj$html_parser$Html$Parser$isTagAttributeCharacter)));
var $hecrj$html_parser$Html$Parser$chompSemicolon = $elm$parser$Parser$chompIf(
	$elm$core$Basics$eq(
		_Utils_chr(';')));
var $hecrj$html_parser$Html$Parser$NamedCharacterReferences$dict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('Aacute', 'Á'),
			_Utils_Tuple2('aacute', 'á'),
			_Utils_Tuple2('Abreve', 'Ă'),
			_Utils_Tuple2('abreve', 'ă'),
			_Utils_Tuple2('ac', '∾'),
			_Utils_Tuple2('acd', '∿'),
			_Utils_Tuple2('acE', '∾̳'),
			_Utils_Tuple2('Acirc', 'Â'),
			_Utils_Tuple2('acirc', 'â'),
			_Utils_Tuple2('acute', '´'),
			_Utils_Tuple2('Acy', 'А'),
			_Utils_Tuple2('acy', 'а'),
			_Utils_Tuple2('AElig', 'Æ'),
			_Utils_Tuple2('aelig', 'æ'),
			_Utils_Tuple2('af', '\u2061'),
			_Utils_Tuple2('Afr', '\uD835\uDD04'),
			_Utils_Tuple2('afr', '\uD835\uDD1E'),
			_Utils_Tuple2('Agrave', 'À'),
			_Utils_Tuple2('agrave', 'à'),
			_Utils_Tuple2('alefsym', 'ℵ'),
			_Utils_Tuple2('aleph', 'ℵ'),
			_Utils_Tuple2('Alpha', 'Α'),
			_Utils_Tuple2('alpha', 'α'),
			_Utils_Tuple2('Amacr', 'Ā'),
			_Utils_Tuple2('amacr', 'ā'),
			_Utils_Tuple2('amalg', '⨿'),
			_Utils_Tuple2('amp', '&'),
			_Utils_Tuple2('AMP', '&'),
			_Utils_Tuple2('andand', '⩕'),
			_Utils_Tuple2('And', '⩓'),
			_Utils_Tuple2('and', '∧'),
			_Utils_Tuple2('andd', '⩜'),
			_Utils_Tuple2('andslope', '⩘'),
			_Utils_Tuple2('andv', '⩚'),
			_Utils_Tuple2('ang', '∠'),
			_Utils_Tuple2('ange', '⦤'),
			_Utils_Tuple2('angle', '∠'),
			_Utils_Tuple2('angmsdaa', '⦨'),
			_Utils_Tuple2('angmsdab', '⦩'),
			_Utils_Tuple2('angmsdac', '⦪'),
			_Utils_Tuple2('angmsdad', '⦫'),
			_Utils_Tuple2('angmsdae', '⦬'),
			_Utils_Tuple2('angmsdaf', '⦭'),
			_Utils_Tuple2('angmsdag', '⦮'),
			_Utils_Tuple2('angmsdah', '⦯'),
			_Utils_Tuple2('angmsd', '∡'),
			_Utils_Tuple2('angrt', '∟'),
			_Utils_Tuple2('angrtvb', '⊾'),
			_Utils_Tuple2('angrtvbd', '⦝'),
			_Utils_Tuple2('angsph', '∢'),
			_Utils_Tuple2('angst', 'Å'),
			_Utils_Tuple2('angzarr', '⍼'),
			_Utils_Tuple2('Aogon', 'Ą'),
			_Utils_Tuple2('aogon', 'ą'),
			_Utils_Tuple2('Aopf', '\uD835\uDD38'),
			_Utils_Tuple2('aopf', '\uD835\uDD52'),
			_Utils_Tuple2('apacir', '⩯'),
			_Utils_Tuple2('ap', '≈'),
			_Utils_Tuple2('apE', '⩰'),
			_Utils_Tuple2('ape', '≊'),
			_Utils_Tuple2('apid', '≋'),
			_Utils_Tuple2('apos', '\''),
			_Utils_Tuple2('ApplyFunction', '\u2061'),
			_Utils_Tuple2('approx', '≈'),
			_Utils_Tuple2('approxeq', '≊'),
			_Utils_Tuple2('Aring', 'Å'),
			_Utils_Tuple2('aring', 'å'),
			_Utils_Tuple2('Ascr', '\uD835\uDC9C'),
			_Utils_Tuple2('ascr', '\uD835\uDCB6'),
			_Utils_Tuple2('Assign', '≔'),
			_Utils_Tuple2('ast', '*'),
			_Utils_Tuple2('asymp', '≈'),
			_Utils_Tuple2('asympeq', '≍'),
			_Utils_Tuple2('Atilde', 'Ã'),
			_Utils_Tuple2('atilde', 'ã'),
			_Utils_Tuple2('Auml', 'Ä'),
			_Utils_Tuple2('auml', 'ä'),
			_Utils_Tuple2('awconint', '∳'),
			_Utils_Tuple2('awint', '⨑'),
			_Utils_Tuple2('backcong', '≌'),
			_Utils_Tuple2('backepsilon', '϶'),
			_Utils_Tuple2('backprime', '‵'),
			_Utils_Tuple2('backsim', '∽'),
			_Utils_Tuple2('backsimeq', '⋍'),
			_Utils_Tuple2('Backslash', '∖'),
			_Utils_Tuple2('Barv', '⫧'),
			_Utils_Tuple2('barvee', '⊽'),
			_Utils_Tuple2('barwed', '⌅'),
			_Utils_Tuple2('Barwed', '⌆'),
			_Utils_Tuple2('barwedge', '⌅'),
			_Utils_Tuple2('bbrk', '⎵'),
			_Utils_Tuple2('bbrktbrk', '⎶'),
			_Utils_Tuple2('bcong', '≌'),
			_Utils_Tuple2('Bcy', 'Б'),
			_Utils_Tuple2('bcy', 'б'),
			_Utils_Tuple2('bdquo', '„'),
			_Utils_Tuple2('becaus', '∵'),
			_Utils_Tuple2('because', '∵'),
			_Utils_Tuple2('Because', '∵'),
			_Utils_Tuple2('bemptyv', '⦰'),
			_Utils_Tuple2('bepsi', '϶'),
			_Utils_Tuple2('bernou', 'ℬ'),
			_Utils_Tuple2('Bernoullis', 'ℬ'),
			_Utils_Tuple2('Beta', 'Β'),
			_Utils_Tuple2('beta', 'β'),
			_Utils_Tuple2('beth', 'ℶ'),
			_Utils_Tuple2('between', '≬'),
			_Utils_Tuple2('Bfr', '\uD835\uDD05'),
			_Utils_Tuple2('bfr', '\uD835\uDD1F'),
			_Utils_Tuple2('bigcap', '⋂'),
			_Utils_Tuple2('bigcirc', '◯'),
			_Utils_Tuple2('bigcup', '⋃'),
			_Utils_Tuple2('bigodot', '⨀'),
			_Utils_Tuple2('bigoplus', '⨁'),
			_Utils_Tuple2('bigotimes', '⨂'),
			_Utils_Tuple2('bigsqcup', '⨆'),
			_Utils_Tuple2('bigstar', '★'),
			_Utils_Tuple2('bigtriangledown', '▽'),
			_Utils_Tuple2('bigtriangleup', '△'),
			_Utils_Tuple2('biguplus', '⨄'),
			_Utils_Tuple2('bigvee', '⋁'),
			_Utils_Tuple2('bigwedge', '⋀'),
			_Utils_Tuple2('bkarow', '⤍'),
			_Utils_Tuple2('blacklozenge', '⧫'),
			_Utils_Tuple2('blacksquare', '▪'),
			_Utils_Tuple2('blacktriangle', '▴'),
			_Utils_Tuple2('blacktriangledown', '▾'),
			_Utils_Tuple2('blacktriangleleft', '◂'),
			_Utils_Tuple2('blacktriangleright', '▸'),
			_Utils_Tuple2('blank', '␣'),
			_Utils_Tuple2('blk12', '▒'),
			_Utils_Tuple2('blk14', '░'),
			_Utils_Tuple2('blk34', '▓'),
			_Utils_Tuple2('block', '█'),
			_Utils_Tuple2('bne', '=⃥'),
			_Utils_Tuple2('bnequiv', '≡⃥'),
			_Utils_Tuple2('bNot', '⫭'),
			_Utils_Tuple2('bnot', '⌐'),
			_Utils_Tuple2('Bopf', '\uD835\uDD39'),
			_Utils_Tuple2('bopf', '\uD835\uDD53'),
			_Utils_Tuple2('bot', '⊥'),
			_Utils_Tuple2('bottom', '⊥'),
			_Utils_Tuple2('bowtie', '⋈'),
			_Utils_Tuple2('boxbox', '⧉'),
			_Utils_Tuple2('boxdl', '┐'),
			_Utils_Tuple2('boxdL', '╕'),
			_Utils_Tuple2('boxDl', '╖'),
			_Utils_Tuple2('boxDL', '╗'),
			_Utils_Tuple2('boxdr', '┌'),
			_Utils_Tuple2('boxdR', '╒'),
			_Utils_Tuple2('boxDr', '╓'),
			_Utils_Tuple2('boxDR', '╔'),
			_Utils_Tuple2('boxh', '─'),
			_Utils_Tuple2('boxH', '═'),
			_Utils_Tuple2('boxhd', '┬'),
			_Utils_Tuple2('boxHd', '╤'),
			_Utils_Tuple2('boxhD', '╥'),
			_Utils_Tuple2('boxHD', '╦'),
			_Utils_Tuple2('boxhu', '┴'),
			_Utils_Tuple2('boxHu', '╧'),
			_Utils_Tuple2('boxhU', '╨'),
			_Utils_Tuple2('boxHU', '╩'),
			_Utils_Tuple2('boxminus', '⊟'),
			_Utils_Tuple2('boxplus', '⊞'),
			_Utils_Tuple2('boxtimes', '⊠'),
			_Utils_Tuple2('boxul', '┘'),
			_Utils_Tuple2('boxuL', '╛'),
			_Utils_Tuple2('boxUl', '╜'),
			_Utils_Tuple2('boxUL', '╝'),
			_Utils_Tuple2('boxur', '└'),
			_Utils_Tuple2('boxuR', '╘'),
			_Utils_Tuple2('boxUr', '╙'),
			_Utils_Tuple2('boxUR', '╚'),
			_Utils_Tuple2('boxv', '│'),
			_Utils_Tuple2('boxV', '║'),
			_Utils_Tuple2('boxvh', '┼'),
			_Utils_Tuple2('boxvH', '╪'),
			_Utils_Tuple2('boxVh', '╫'),
			_Utils_Tuple2('boxVH', '╬'),
			_Utils_Tuple2('boxvl', '┤'),
			_Utils_Tuple2('boxvL', '╡'),
			_Utils_Tuple2('boxVl', '╢'),
			_Utils_Tuple2('boxVL', '╣'),
			_Utils_Tuple2('boxvr', '├'),
			_Utils_Tuple2('boxvR', '╞'),
			_Utils_Tuple2('boxVr', '╟'),
			_Utils_Tuple2('boxVR', '╠'),
			_Utils_Tuple2('bprime', '‵'),
			_Utils_Tuple2('breve', '˘'),
			_Utils_Tuple2('Breve', '˘'),
			_Utils_Tuple2('brvbar', '¦'),
			_Utils_Tuple2('bscr', '\uD835\uDCB7'),
			_Utils_Tuple2('Bscr', 'ℬ'),
			_Utils_Tuple2('bsemi', '⁏'),
			_Utils_Tuple2('bsim', '∽'),
			_Utils_Tuple2('bsime', '⋍'),
			_Utils_Tuple2('bsolb', '⧅'),
			_Utils_Tuple2('bsol', '\\'),
			_Utils_Tuple2('bsolhsub', '⟈'),
			_Utils_Tuple2('bull', '•'),
			_Utils_Tuple2('bullet', '•'),
			_Utils_Tuple2('bump', '≎'),
			_Utils_Tuple2('bumpE', '⪮'),
			_Utils_Tuple2('bumpe', '≏'),
			_Utils_Tuple2('Bumpeq', '≎'),
			_Utils_Tuple2('bumpeq', '≏'),
			_Utils_Tuple2('Cacute', 'Ć'),
			_Utils_Tuple2('cacute', 'ć'),
			_Utils_Tuple2('capand', '⩄'),
			_Utils_Tuple2('capbrcup', '⩉'),
			_Utils_Tuple2('capcap', '⩋'),
			_Utils_Tuple2('cap', '∩'),
			_Utils_Tuple2('Cap', '⋒'),
			_Utils_Tuple2('capcup', '⩇'),
			_Utils_Tuple2('capdot', '⩀'),
			_Utils_Tuple2('CapitalDifferentialD', 'ⅅ'),
			_Utils_Tuple2('caps', '∩︀'),
			_Utils_Tuple2('caret', '⁁'),
			_Utils_Tuple2('caron', 'ˇ'),
			_Utils_Tuple2('Cayleys', 'ℭ'),
			_Utils_Tuple2('ccaps', '⩍'),
			_Utils_Tuple2('Ccaron', 'Č'),
			_Utils_Tuple2('ccaron', 'č'),
			_Utils_Tuple2('Ccedil', 'Ç'),
			_Utils_Tuple2('ccedil', 'ç'),
			_Utils_Tuple2('Ccirc', 'Ĉ'),
			_Utils_Tuple2('ccirc', 'ĉ'),
			_Utils_Tuple2('Cconint', '∰'),
			_Utils_Tuple2('ccups', '⩌'),
			_Utils_Tuple2('ccupssm', '⩐'),
			_Utils_Tuple2('Cdot', 'Ċ'),
			_Utils_Tuple2('cdot', 'ċ'),
			_Utils_Tuple2('cedil', '¸'),
			_Utils_Tuple2('Cedilla', '¸'),
			_Utils_Tuple2('cemptyv', '⦲'),
			_Utils_Tuple2('cent', '¢'),
			_Utils_Tuple2('centerdot', '·'),
			_Utils_Tuple2('CenterDot', '·'),
			_Utils_Tuple2('cfr', '\uD835\uDD20'),
			_Utils_Tuple2('Cfr', 'ℭ'),
			_Utils_Tuple2('CHcy', 'Ч'),
			_Utils_Tuple2('chcy', 'ч'),
			_Utils_Tuple2('check', '✓'),
			_Utils_Tuple2('checkmark', '✓'),
			_Utils_Tuple2('Chi', 'Χ'),
			_Utils_Tuple2('chi', 'χ'),
			_Utils_Tuple2('circ', 'ˆ'),
			_Utils_Tuple2('circeq', '≗'),
			_Utils_Tuple2('circlearrowleft', '↺'),
			_Utils_Tuple2('circlearrowright', '↻'),
			_Utils_Tuple2('circledast', '⊛'),
			_Utils_Tuple2('circledcirc', '⊚'),
			_Utils_Tuple2('circleddash', '⊝'),
			_Utils_Tuple2('CircleDot', '⊙'),
			_Utils_Tuple2('circledR', '®'),
			_Utils_Tuple2('circledS', 'Ⓢ'),
			_Utils_Tuple2('CircleMinus', '⊖'),
			_Utils_Tuple2('CirclePlus', '⊕'),
			_Utils_Tuple2('CircleTimes', '⊗'),
			_Utils_Tuple2('cir', '○'),
			_Utils_Tuple2('cirE', '⧃'),
			_Utils_Tuple2('cire', '≗'),
			_Utils_Tuple2('cirfnint', '⨐'),
			_Utils_Tuple2('cirmid', '⫯'),
			_Utils_Tuple2('cirscir', '⧂'),
			_Utils_Tuple2('ClockwiseContourIntegral', '∲'),
			_Utils_Tuple2('CloseCurlyDoubleQuote', '”'),
			_Utils_Tuple2('CloseCurlyQuote', '’'),
			_Utils_Tuple2('clubs', '♣'),
			_Utils_Tuple2('clubsuit', '♣'),
			_Utils_Tuple2('colon', ':'),
			_Utils_Tuple2('Colon', '∷'),
			_Utils_Tuple2('Colone', '⩴'),
			_Utils_Tuple2('colone', '≔'),
			_Utils_Tuple2('coloneq', '≔'),
			_Utils_Tuple2('comma', ','),
			_Utils_Tuple2('commat', '@'),
			_Utils_Tuple2('comp', '∁'),
			_Utils_Tuple2('compfn', '∘'),
			_Utils_Tuple2('complement', '∁'),
			_Utils_Tuple2('complexes', 'ℂ'),
			_Utils_Tuple2('cong', '≅'),
			_Utils_Tuple2('congdot', '⩭'),
			_Utils_Tuple2('Congruent', '≡'),
			_Utils_Tuple2('conint', '∮'),
			_Utils_Tuple2('Conint', '∯'),
			_Utils_Tuple2('ContourIntegral', '∮'),
			_Utils_Tuple2('copf', '\uD835\uDD54'),
			_Utils_Tuple2('Copf', 'ℂ'),
			_Utils_Tuple2('coprod', '∐'),
			_Utils_Tuple2('Coproduct', '∐'),
			_Utils_Tuple2('copy', '©'),
			_Utils_Tuple2('COPY', '©'),
			_Utils_Tuple2('copysr', '℗'),
			_Utils_Tuple2('CounterClockwiseContourIntegral', '∳'),
			_Utils_Tuple2('crarr', '↵'),
			_Utils_Tuple2('cross', '✗'),
			_Utils_Tuple2('Cross', '⨯'),
			_Utils_Tuple2('Cscr', '\uD835\uDC9E'),
			_Utils_Tuple2('cscr', '\uD835\uDCB8'),
			_Utils_Tuple2('csub', '⫏'),
			_Utils_Tuple2('csube', '⫑'),
			_Utils_Tuple2('csup', '⫐'),
			_Utils_Tuple2('csupe', '⫒'),
			_Utils_Tuple2('ctdot', '⋯'),
			_Utils_Tuple2('cudarrl', '⤸'),
			_Utils_Tuple2('cudarrr', '⤵'),
			_Utils_Tuple2('cuepr', '⋞'),
			_Utils_Tuple2('cuesc', '⋟'),
			_Utils_Tuple2('cularr', '↶'),
			_Utils_Tuple2('cularrp', '⤽'),
			_Utils_Tuple2('cupbrcap', '⩈'),
			_Utils_Tuple2('cupcap', '⩆'),
			_Utils_Tuple2('CupCap', '≍'),
			_Utils_Tuple2('cup', '∪'),
			_Utils_Tuple2('Cup', '⋓'),
			_Utils_Tuple2('cupcup', '⩊'),
			_Utils_Tuple2('cupdot', '⊍'),
			_Utils_Tuple2('cupor', '⩅'),
			_Utils_Tuple2('cups', '∪︀'),
			_Utils_Tuple2('curarr', '↷'),
			_Utils_Tuple2('curarrm', '⤼'),
			_Utils_Tuple2('curlyeqprec', '⋞'),
			_Utils_Tuple2('curlyeqsucc', '⋟'),
			_Utils_Tuple2('curlyvee', '⋎'),
			_Utils_Tuple2('curlywedge', '⋏'),
			_Utils_Tuple2('curren', '¤'),
			_Utils_Tuple2('curvearrowleft', '↶'),
			_Utils_Tuple2('curvearrowright', '↷'),
			_Utils_Tuple2('cuvee', '⋎'),
			_Utils_Tuple2('cuwed', '⋏'),
			_Utils_Tuple2('cwconint', '∲'),
			_Utils_Tuple2('cwint', '∱'),
			_Utils_Tuple2('cylcty', '⌭'),
			_Utils_Tuple2('dagger', '†'),
			_Utils_Tuple2('Dagger', '‡'),
			_Utils_Tuple2('daleth', 'ℸ'),
			_Utils_Tuple2('darr', '↓'),
			_Utils_Tuple2('Darr', '↡'),
			_Utils_Tuple2('dArr', '⇓'),
			_Utils_Tuple2('dash', '‐'),
			_Utils_Tuple2('Dashv', '⫤'),
			_Utils_Tuple2('dashv', '⊣'),
			_Utils_Tuple2('dbkarow', '⤏'),
			_Utils_Tuple2('dblac', '˝'),
			_Utils_Tuple2('Dcaron', 'Ď'),
			_Utils_Tuple2('dcaron', 'ď'),
			_Utils_Tuple2('Dcy', 'Д'),
			_Utils_Tuple2('dcy', 'д'),
			_Utils_Tuple2('ddagger', '‡'),
			_Utils_Tuple2('ddarr', '⇊'),
			_Utils_Tuple2('DD', 'ⅅ'),
			_Utils_Tuple2('dd', 'ⅆ'),
			_Utils_Tuple2('DDotrahd', '⤑'),
			_Utils_Tuple2('ddotseq', '⩷'),
			_Utils_Tuple2('deg', '°'),
			_Utils_Tuple2('Del', '∇'),
			_Utils_Tuple2('Delta', 'Δ'),
			_Utils_Tuple2('delta', 'δ'),
			_Utils_Tuple2('demptyv', '⦱'),
			_Utils_Tuple2('dfisht', '⥿'),
			_Utils_Tuple2('Dfr', '\uD835\uDD07'),
			_Utils_Tuple2('dfr', '\uD835\uDD21'),
			_Utils_Tuple2('dHar', '⥥'),
			_Utils_Tuple2('dharl', '⇃'),
			_Utils_Tuple2('dharr', '⇂'),
			_Utils_Tuple2('DiacriticalAcute', '´'),
			_Utils_Tuple2('DiacriticalDot', '˙'),
			_Utils_Tuple2('DiacriticalDoubleAcute', '˝'),
			_Utils_Tuple2('DiacriticalGrave', '`'),
			_Utils_Tuple2('DiacriticalTilde', '˜'),
			_Utils_Tuple2('diam', '⋄'),
			_Utils_Tuple2('diamond', '⋄'),
			_Utils_Tuple2('Diamond', '⋄'),
			_Utils_Tuple2('diamondsuit', '♦'),
			_Utils_Tuple2('diams', '♦'),
			_Utils_Tuple2('die', '¨'),
			_Utils_Tuple2('DifferentialD', 'ⅆ'),
			_Utils_Tuple2('digamma', 'ϝ'),
			_Utils_Tuple2('disin', '⋲'),
			_Utils_Tuple2('div', '÷'),
			_Utils_Tuple2('divide', '÷'),
			_Utils_Tuple2('divideontimes', '⋇'),
			_Utils_Tuple2('divonx', '⋇'),
			_Utils_Tuple2('DJcy', 'Ђ'),
			_Utils_Tuple2('djcy', 'ђ'),
			_Utils_Tuple2('dlcorn', '⌞'),
			_Utils_Tuple2('dlcrop', '⌍'),
			_Utils_Tuple2('dollar', '$'),
			_Utils_Tuple2('Dopf', '\uD835\uDD3B'),
			_Utils_Tuple2('dopf', '\uD835\uDD55'),
			_Utils_Tuple2('Dot', '¨'),
			_Utils_Tuple2('dot', '˙'),
			_Utils_Tuple2('DotDot', '⃜'),
			_Utils_Tuple2('doteq', '≐'),
			_Utils_Tuple2('doteqdot', '≑'),
			_Utils_Tuple2('DotEqual', '≐'),
			_Utils_Tuple2('dotminus', '∸'),
			_Utils_Tuple2('dotplus', '∔'),
			_Utils_Tuple2('dotsquare', '⊡'),
			_Utils_Tuple2('doublebarwedge', '⌆'),
			_Utils_Tuple2('DoubleContourIntegral', '∯'),
			_Utils_Tuple2('DoubleDot', '¨'),
			_Utils_Tuple2('DoubleDownArrow', '⇓'),
			_Utils_Tuple2('DoubleLeftArrow', '⇐'),
			_Utils_Tuple2('DoubleLeftRightArrow', '⇔'),
			_Utils_Tuple2('DoubleLeftTee', '⫤'),
			_Utils_Tuple2('DoubleLongLeftArrow', '⟸'),
			_Utils_Tuple2('DoubleLongLeftRightArrow', '⟺'),
			_Utils_Tuple2('DoubleLongRightArrow', '⟹'),
			_Utils_Tuple2('DoubleRightArrow', '⇒'),
			_Utils_Tuple2('DoubleRightTee', '⊨'),
			_Utils_Tuple2('DoubleUpArrow', '⇑'),
			_Utils_Tuple2('DoubleUpDownArrow', '⇕'),
			_Utils_Tuple2('DoubleVerticalBar', '∥'),
			_Utils_Tuple2('DownArrowBar', '⤓'),
			_Utils_Tuple2('downarrow', '↓'),
			_Utils_Tuple2('DownArrow', '↓'),
			_Utils_Tuple2('Downarrow', '⇓'),
			_Utils_Tuple2('DownArrowUpArrow', '⇵'),
			_Utils_Tuple2('DownBreve', '̑'),
			_Utils_Tuple2('downdownarrows', '⇊'),
			_Utils_Tuple2('downharpoonleft', '⇃'),
			_Utils_Tuple2('downharpoonright', '⇂'),
			_Utils_Tuple2('DownLeftRightVector', '⥐'),
			_Utils_Tuple2('DownLeftTeeVector', '⥞'),
			_Utils_Tuple2('DownLeftVectorBar', '⥖'),
			_Utils_Tuple2('DownLeftVector', '↽'),
			_Utils_Tuple2('DownRightTeeVector', '⥟'),
			_Utils_Tuple2('DownRightVectorBar', '⥗'),
			_Utils_Tuple2('DownRightVector', '⇁'),
			_Utils_Tuple2('DownTeeArrow', '↧'),
			_Utils_Tuple2('DownTee', '⊤'),
			_Utils_Tuple2('drbkarow', '⤐'),
			_Utils_Tuple2('drcorn', '⌟'),
			_Utils_Tuple2('drcrop', '⌌'),
			_Utils_Tuple2('Dscr', '\uD835\uDC9F'),
			_Utils_Tuple2('dscr', '\uD835\uDCB9'),
			_Utils_Tuple2('DScy', 'Ѕ'),
			_Utils_Tuple2('dscy', 'ѕ'),
			_Utils_Tuple2('dsol', '⧶'),
			_Utils_Tuple2('Dstrok', 'Đ'),
			_Utils_Tuple2('dstrok', 'đ'),
			_Utils_Tuple2('dtdot', '⋱'),
			_Utils_Tuple2('dtri', '▿'),
			_Utils_Tuple2('dtrif', '▾'),
			_Utils_Tuple2('duarr', '⇵'),
			_Utils_Tuple2('duhar', '⥯'),
			_Utils_Tuple2('dwangle', '⦦'),
			_Utils_Tuple2('DZcy', 'Џ'),
			_Utils_Tuple2('dzcy', 'џ'),
			_Utils_Tuple2('dzigrarr', '⟿'),
			_Utils_Tuple2('Eacute', 'É'),
			_Utils_Tuple2('eacute', 'é'),
			_Utils_Tuple2('easter', '⩮'),
			_Utils_Tuple2('Ecaron', 'Ě'),
			_Utils_Tuple2('ecaron', 'ě'),
			_Utils_Tuple2('Ecirc', 'Ê'),
			_Utils_Tuple2('ecirc', 'ê'),
			_Utils_Tuple2('ecir', '≖'),
			_Utils_Tuple2('ecolon', '≕'),
			_Utils_Tuple2('Ecy', 'Э'),
			_Utils_Tuple2('ecy', 'э'),
			_Utils_Tuple2('eDDot', '⩷'),
			_Utils_Tuple2('Edot', 'Ė'),
			_Utils_Tuple2('edot', 'ė'),
			_Utils_Tuple2('eDot', '≑'),
			_Utils_Tuple2('ee', 'ⅇ'),
			_Utils_Tuple2('efDot', '≒'),
			_Utils_Tuple2('Efr', '\uD835\uDD08'),
			_Utils_Tuple2('efr', '\uD835\uDD22'),
			_Utils_Tuple2('eg', '⪚'),
			_Utils_Tuple2('Egrave', 'È'),
			_Utils_Tuple2('egrave', 'è'),
			_Utils_Tuple2('egs', '⪖'),
			_Utils_Tuple2('egsdot', '⪘'),
			_Utils_Tuple2('el', '⪙'),
			_Utils_Tuple2('Element', '∈'),
			_Utils_Tuple2('elinters', '⏧'),
			_Utils_Tuple2('ell', 'ℓ'),
			_Utils_Tuple2('els', '⪕'),
			_Utils_Tuple2('elsdot', '⪗'),
			_Utils_Tuple2('Emacr', 'Ē'),
			_Utils_Tuple2('emacr', 'ē'),
			_Utils_Tuple2('empty', '∅'),
			_Utils_Tuple2('emptyset', '∅'),
			_Utils_Tuple2('EmptySmallSquare', '◻'),
			_Utils_Tuple2('emptyv', '∅'),
			_Utils_Tuple2('EmptyVerySmallSquare', '▫'),
			_Utils_Tuple2('emsp13', '\u2004'),
			_Utils_Tuple2('emsp14', '\u2005'),
			_Utils_Tuple2('emsp', '\u2003'),
			_Utils_Tuple2('ENG', 'Ŋ'),
			_Utils_Tuple2('eng', 'ŋ'),
			_Utils_Tuple2('ensp', '\u2002'),
			_Utils_Tuple2('Eogon', 'Ę'),
			_Utils_Tuple2('eogon', 'ę'),
			_Utils_Tuple2('Eopf', '\uD835\uDD3C'),
			_Utils_Tuple2('eopf', '\uD835\uDD56'),
			_Utils_Tuple2('epar', '⋕'),
			_Utils_Tuple2('eparsl', '⧣'),
			_Utils_Tuple2('eplus', '⩱'),
			_Utils_Tuple2('epsi', 'ε'),
			_Utils_Tuple2('Epsilon', 'Ε'),
			_Utils_Tuple2('epsilon', 'ε'),
			_Utils_Tuple2('epsiv', 'ϵ'),
			_Utils_Tuple2('eqcirc', '≖'),
			_Utils_Tuple2('eqcolon', '≕'),
			_Utils_Tuple2('eqsim', '≂'),
			_Utils_Tuple2('eqslantgtr', '⪖'),
			_Utils_Tuple2('eqslantless', '⪕'),
			_Utils_Tuple2('Equal', '⩵'),
			_Utils_Tuple2('equals', '='),
			_Utils_Tuple2('EqualTilde', '≂'),
			_Utils_Tuple2('equest', '≟'),
			_Utils_Tuple2('Equilibrium', '⇌'),
			_Utils_Tuple2('equiv', '≡'),
			_Utils_Tuple2('equivDD', '⩸'),
			_Utils_Tuple2('eqvparsl', '⧥'),
			_Utils_Tuple2('erarr', '⥱'),
			_Utils_Tuple2('erDot', '≓'),
			_Utils_Tuple2('escr', 'ℯ'),
			_Utils_Tuple2('Escr', 'ℰ'),
			_Utils_Tuple2('esdot', '≐'),
			_Utils_Tuple2('Esim', '⩳'),
			_Utils_Tuple2('esim', '≂'),
			_Utils_Tuple2('Eta', 'Η'),
			_Utils_Tuple2('eta', 'η'),
			_Utils_Tuple2('ETH', 'Ð'),
			_Utils_Tuple2('eth', 'ð'),
			_Utils_Tuple2('Euml', 'Ë'),
			_Utils_Tuple2('euml', 'ë'),
			_Utils_Tuple2('euro', '€'),
			_Utils_Tuple2('excl', '!'),
			_Utils_Tuple2('exist', '∃'),
			_Utils_Tuple2('Exists', '∃'),
			_Utils_Tuple2('expectation', 'ℰ'),
			_Utils_Tuple2('exponentiale', 'ⅇ'),
			_Utils_Tuple2('ExponentialE', 'ⅇ'),
			_Utils_Tuple2('fallingdotseq', '≒'),
			_Utils_Tuple2('Fcy', 'Ф'),
			_Utils_Tuple2('fcy', 'ф'),
			_Utils_Tuple2('female', '♀'),
			_Utils_Tuple2('ffilig', 'ﬃ'),
			_Utils_Tuple2('fflig', 'ﬀ'),
			_Utils_Tuple2('ffllig', 'ﬄ'),
			_Utils_Tuple2('Ffr', '\uD835\uDD09'),
			_Utils_Tuple2('ffr', '\uD835\uDD23'),
			_Utils_Tuple2('filig', 'ﬁ'),
			_Utils_Tuple2('FilledSmallSquare', '◼'),
			_Utils_Tuple2('FilledVerySmallSquare', '▪'),
			_Utils_Tuple2('fjlig', 'fj'),
			_Utils_Tuple2('flat', '♭'),
			_Utils_Tuple2('fllig', 'ﬂ'),
			_Utils_Tuple2('fltns', '▱'),
			_Utils_Tuple2('fnof', 'ƒ'),
			_Utils_Tuple2('Fopf', '\uD835\uDD3D'),
			_Utils_Tuple2('fopf', '\uD835\uDD57'),
			_Utils_Tuple2('forall', '∀'),
			_Utils_Tuple2('ForAll', '∀'),
			_Utils_Tuple2('fork', '⋔'),
			_Utils_Tuple2('forkv', '⫙'),
			_Utils_Tuple2('Fouriertrf', 'ℱ'),
			_Utils_Tuple2('fpartint', '⨍'),
			_Utils_Tuple2('frac12', '½'),
			_Utils_Tuple2('frac13', '⅓'),
			_Utils_Tuple2('frac14', '¼'),
			_Utils_Tuple2('frac15', '⅕'),
			_Utils_Tuple2('frac16', '⅙'),
			_Utils_Tuple2('frac18', '⅛'),
			_Utils_Tuple2('frac23', '⅔'),
			_Utils_Tuple2('frac25', '⅖'),
			_Utils_Tuple2('frac34', '¾'),
			_Utils_Tuple2('frac35', '⅗'),
			_Utils_Tuple2('frac38', '⅜'),
			_Utils_Tuple2('frac45', '⅘'),
			_Utils_Tuple2('frac56', '⅚'),
			_Utils_Tuple2('frac58', '⅝'),
			_Utils_Tuple2('frac78', '⅞'),
			_Utils_Tuple2('frasl', '⁄'),
			_Utils_Tuple2('frown', '⌢'),
			_Utils_Tuple2('fscr', '\uD835\uDCBB'),
			_Utils_Tuple2('Fscr', 'ℱ'),
			_Utils_Tuple2('gacute', 'ǵ'),
			_Utils_Tuple2('Gamma', 'Γ'),
			_Utils_Tuple2('gamma', 'γ'),
			_Utils_Tuple2('Gammad', 'Ϝ'),
			_Utils_Tuple2('gammad', 'ϝ'),
			_Utils_Tuple2('gap', '⪆'),
			_Utils_Tuple2('Gbreve', 'Ğ'),
			_Utils_Tuple2('gbreve', 'ğ'),
			_Utils_Tuple2('Gcedil', 'Ģ'),
			_Utils_Tuple2('Gcirc', 'Ĝ'),
			_Utils_Tuple2('gcirc', 'ĝ'),
			_Utils_Tuple2('Gcy', 'Г'),
			_Utils_Tuple2('gcy', 'г'),
			_Utils_Tuple2('Gdot', 'Ġ'),
			_Utils_Tuple2('gdot', 'ġ'),
			_Utils_Tuple2('ge', '≥'),
			_Utils_Tuple2('gE', '≧'),
			_Utils_Tuple2('gEl', '⪌'),
			_Utils_Tuple2('gel', '⋛'),
			_Utils_Tuple2('geq', '≥'),
			_Utils_Tuple2('geqq', '≧'),
			_Utils_Tuple2('geqslant', '⩾'),
			_Utils_Tuple2('gescc', '⪩'),
			_Utils_Tuple2('ges', '⩾'),
			_Utils_Tuple2('gesdot', '⪀'),
			_Utils_Tuple2('gesdoto', '⪂'),
			_Utils_Tuple2('gesdotol', '⪄'),
			_Utils_Tuple2('gesl', '⋛︀'),
			_Utils_Tuple2('gesles', '⪔'),
			_Utils_Tuple2('Gfr', '\uD835\uDD0A'),
			_Utils_Tuple2('gfr', '\uD835\uDD24'),
			_Utils_Tuple2('gg', '≫'),
			_Utils_Tuple2('Gg', '⋙'),
			_Utils_Tuple2('ggg', '⋙'),
			_Utils_Tuple2('gimel', 'ℷ'),
			_Utils_Tuple2('GJcy', 'Ѓ'),
			_Utils_Tuple2('gjcy', 'ѓ'),
			_Utils_Tuple2('gla', '⪥'),
			_Utils_Tuple2('gl', '≷'),
			_Utils_Tuple2('glE', '⪒'),
			_Utils_Tuple2('glj', '⪤'),
			_Utils_Tuple2('gnap', '⪊'),
			_Utils_Tuple2('gnapprox', '⪊'),
			_Utils_Tuple2('gne', '⪈'),
			_Utils_Tuple2('gnE', '≩'),
			_Utils_Tuple2('gneq', '⪈'),
			_Utils_Tuple2('gneqq', '≩'),
			_Utils_Tuple2('gnsim', '⋧'),
			_Utils_Tuple2('Gopf', '\uD835\uDD3E'),
			_Utils_Tuple2('gopf', '\uD835\uDD58'),
			_Utils_Tuple2('grave', '`'),
			_Utils_Tuple2('GreaterEqual', '≥'),
			_Utils_Tuple2('GreaterEqualLess', '⋛'),
			_Utils_Tuple2('GreaterFullEqual', '≧'),
			_Utils_Tuple2('GreaterGreater', '⪢'),
			_Utils_Tuple2('GreaterLess', '≷'),
			_Utils_Tuple2('GreaterSlantEqual', '⩾'),
			_Utils_Tuple2('GreaterTilde', '≳'),
			_Utils_Tuple2('Gscr', '\uD835\uDCA2'),
			_Utils_Tuple2('gscr', 'ℊ'),
			_Utils_Tuple2('gsim', '≳'),
			_Utils_Tuple2('gsime', '⪎'),
			_Utils_Tuple2('gsiml', '⪐'),
			_Utils_Tuple2('gtcc', '⪧'),
			_Utils_Tuple2('gtcir', '⩺'),
			_Utils_Tuple2('gt', '>'),
			_Utils_Tuple2('GT', '>'),
			_Utils_Tuple2('Gt', '≫'),
			_Utils_Tuple2('gtdot', '⋗'),
			_Utils_Tuple2('gtlPar', '⦕'),
			_Utils_Tuple2('gtquest', '⩼'),
			_Utils_Tuple2('gtrapprox', '⪆'),
			_Utils_Tuple2('gtrarr', '⥸'),
			_Utils_Tuple2('gtrdot', '⋗'),
			_Utils_Tuple2('gtreqless', '⋛'),
			_Utils_Tuple2('gtreqqless', '⪌'),
			_Utils_Tuple2('gtrless', '≷'),
			_Utils_Tuple2('gtrsim', '≳'),
			_Utils_Tuple2('gvertneqq', '≩︀'),
			_Utils_Tuple2('gvnE', '≩︀'),
			_Utils_Tuple2('Hacek', 'ˇ'),
			_Utils_Tuple2('hairsp', '\u200A'),
			_Utils_Tuple2('half', '½'),
			_Utils_Tuple2('hamilt', 'ℋ'),
			_Utils_Tuple2('HARDcy', 'Ъ'),
			_Utils_Tuple2('hardcy', 'ъ'),
			_Utils_Tuple2('harrcir', '⥈'),
			_Utils_Tuple2('harr', '↔'),
			_Utils_Tuple2('hArr', '⇔'),
			_Utils_Tuple2('harrw', '↭'),
			_Utils_Tuple2('Hat', '^'),
			_Utils_Tuple2('hbar', 'ℏ'),
			_Utils_Tuple2('Hcirc', 'Ĥ'),
			_Utils_Tuple2('hcirc', 'ĥ'),
			_Utils_Tuple2('hearts', '♥'),
			_Utils_Tuple2('heartsuit', '♥'),
			_Utils_Tuple2('hellip', '…'),
			_Utils_Tuple2('hercon', '⊹'),
			_Utils_Tuple2('hfr', '\uD835\uDD25'),
			_Utils_Tuple2('Hfr', 'ℌ'),
			_Utils_Tuple2('HilbertSpace', 'ℋ'),
			_Utils_Tuple2('hksearow', '⤥'),
			_Utils_Tuple2('hkswarow', '⤦'),
			_Utils_Tuple2('hoarr', '⇿'),
			_Utils_Tuple2('homtht', '∻'),
			_Utils_Tuple2('hookleftarrow', '↩'),
			_Utils_Tuple2('hookrightarrow', '↪'),
			_Utils_Tuple2('hopf', '\uD835\uDD59'),
			_Utils_Tuple2('Hopf', 'ℍ'),
			_Utils_Tuple2('horbar', '―'),
			_Utils_Tuple2('HorizontalLine', '─'),
			_Utils_Tuple2('hscr', '\uD835\uDCBD'),
			_Utils_Tuple2('Hscr', 'ℋ'),
			_Utils_Tuple2('hslash', 'ℏ'),
			_Utils_Tuple2('Hstrok', 'Ħ'),
			_Utils_Tuple2('hstrok', 'ħ'),
			_Utils_Tuple2('HumpDownHump', '≎'),
			_Utils_Tuple2('HumpEqual', '≏'),
			_Utils_Tuple2('hybull', '⁃'),
			_Utils_Tuple2('hyphen', '‐'),
			_Utils_Tuple2('Iacute', 'Í'),
			_Utils_Tuple2('iacute', 'í'),
			_Utils_Tuple2('ic', '\u2063'),
			_Utils_Tuple2('Icirc', 'Î'),
			_Utils_Tuple2('icirc', 'î'),
			_Utils_Tuple2('Icy', 'И'),
			_Utils_Tuple2('icy', 'и'),
			_Utils_Tuple2('Idot', 'İ'),
			_Utils_Tuple2('IEcy', 'Е'),
			_Utils_Tuple2('iecy', 'е'),
			_Utils_Tuple2('iexcl', '¡'),
			_Utils_Tuple2('iff', '⇔'),
			_Utils_Tuple2('ifr', '\uD835\uDD26'),
			_Utils_Tuple2('Ifr', 'ℑ'),
			_Utils_Tuple2('Igrave', 'Ì'),
			_Utils_Tuple2('igrave', 'ì'),
			_Utils_Tuple2('ii', 'ⅈ'),
			_Utils_Tuple2('iiiint', '⨌'),
			_Utils_Tuple2('iiint', '∭'),
			_Utils_Tuple2('iinfin', '⧜'),
			_Utils_Tuple2('iiota', '℩'),
			_Utils_Tuple2('IJlig', 'Ĳ'),
			_Utils_Tuple2('ijlig', 'ĳ'),
			_Utils_Tuple2('Imacr', 'Ī'),
			_Utils_Tuple2('imacr', 'ī'),
			_Utils_Tuple2('image', 'ℑ'),
			_Utils_Tuple2('ImaginaryI', 'ⅈ'),
			_Utils_Tuple2('imagline', 'ℐ'),
			_Utils_Tuple2('imagpart', 'ℑ'),
			_Utils_Tuple2('imath', 'ı'),
			_Utils_Tuple2('Im', 'ℑ'),
			_Utils_Tuple2('imof', '⊷'),
			_Utils_Tuple2('imped', 'Ƶ'),
			_Utils_Tuple2('Implies', '⇒'),
			_Utils_Tuple2('incare', '℅'),
			_Utils_Tuple2('in', '∈'),
			_Utils_Tuple2('infin', '∞'),
			_Utils_Tuple2('infintie', '⧝'),
			_Utils_Tuple2('inodot', 'ı'),
			_Utils_Tuple2('intcal', '⊺'),
			_Utils_Tuple2('int', '∫'),
			_Utils_Tuple2('Int', '∬'),
			_Utils_Tuple2('integers', 'ℤ'),
			_Utils_Tuple2('Integral', '∫'),
			_Utils_Tuple2('intercal', '⊺'),
			_Utils_Tuple2('Intersection', '⋂'),
			_Utils_Tuple2('intlarhk', '⨗'),
			_Utils_Tuple2('intprod', '⨼'),
			_Utils_Tuple2('InvisibleComma', '\u2063'),
			_Utils_Tuple2('InvisibleTimes', '\u2062'),
			_Utils_Tuple2('IOcy', 'Ё'),
			_Utils_Tuple2('iocy', 'ё'),
			_Utils_Tuple2('Iogon', 'Į'),
			_Utils_Tuple2('iogon', 'į'),
			_Utils_Tuple2('Iopf', '\uD835\uDD40'),
			_Utils_Tuple2('iopf', '\uD835\uDD5A'),
			_Utils_Tuple2('Iota', 'Ι'),
			_Utils_Tuple2('iota', 'ι'),
			_Utils_Tuple2('iprod', '⨼'),
			_Utils_Tuple2('iquest', '¿'),
			_Utils_Tuple2('iscr', '\uD835\uDCBE'),
			_Utils_Tuple2('Iscr', 'ℐ'),
			_Utils_Tuple2('isin', '∈'),
			_Utils_Tuple2('isindot', '⋵'),
			_Utils_Tuple2('isinE', '⋹'),
			_Utils_Tuple2('isins', '⋴'),
			_Utils_Tuple2('isinsv', '⋳'),
			_Utils_Tuple2('isinv', '∈'),
			_Utils_Tuple2('it', '\u2062'),
			_Utils_Tuple2('Itilde', 'Ĩ'),
			_Utils_Tuple2('itilde', 'ĩ'),
			_Utils_Tuple2('Iukcy', 'І'),
			_Utils_Tuple2('iukcy', 'і'),
			_Utils_Tuple2('Iuml', 'Ï'),
			_Utils_Tuple2('iuml', 'ï'),
			_Utils_Tuple2('Jcirc', 'Ĵ'),
			_Utils_Tuple2('jcirc', 'ĵ'),
			_Utils_Tuple2('Jcy', 'Й'),
			_Utils_Tuple2('jcy', 'й'),
			_Utils_Tuple2('Jfr', '\uD835\uDD0D'),
			_Utils_Tuple2('jfr', '\uD835\uDD27'),
			_Utils_Tuple2('jmath', 'ȷ'),
			_Utils_Tuple2('Jopf', '\uD835\uDD41'),
			_Utils_Tuple2('jopf', '\uD835\uDD5B'),
			_Utils_Tuple2('Jscr', '\uD835\uDCA5'),
			_Utils_Tuple2('jscr', '\uD835\uDCBF'),
			_Utils_Tuple2('Jsercy', 'Ј'),
			_Utils_Tuple2('jsercy', 'ј'),
			_Utils_Tuple2('Jukcy', 'Є'),
			_Utils_Tuple2('jukcy', 'є'),
			_Utils_Tuple2('Kappa', 'Κ'),
			_Utils_Tuple2('kappa', 'κ'),
			_Utils_Tuple2('kappav', 'ϰ'),
			_Utils_Tuple2('Kcedil', 'Ķ'),
			_Utils_Tuple2('kcedil', 'ķ'),
			_Utils_Tuple2('Kcy', 'К'),
			_Utils_Tuple2('kcy', 'к'),
			_Utils_Tuple2('Kfr', '\uD835\uDD0E'),
			_Utils_Tuple2('kfr', '\uD835\uDD28'),
			_Utils_Tuple2('kgreen', 'ĸ'),
			_Utils_Tuple2('KHcy', 'Х'),
			_Utils_Tuple2('khcy', 'х'),
			_Utils_Tuple2('KJcy', 'Ќ'),
			_Utils_Tuple2('kjcy', 'ќ'),
			_Utils_Tuple2('Kopf', '\uD835\uDD42'),
			_Utils_Tuple2('kopf', '\uD835\uDD5C'),
			_Utils_Tuple2('Kscr', '\uD835\uDCA6'),
			_Utils_Tuple2('kscr', '\uD835\uDCC0'),
			_Utils_Tuple2('lAarr', '⇚'),
			_Utils_Tuple2('Lacute', 'Ĺ'),
			_Utils_Tuple2('lacute', 'ĺ'),
			_Utils_Tuple2('laemptyv', '⦴'),
			_Utils_Tuple2('lagran', 'ℒ'),
			_Utils_Tuple2('Lambda', 'Λ'),
			_Utils_Tuple2('lambda', 'λ'),
			_Utils_Tuple2('lang', '⟨'),
			_Utils_Tuple2('Lang', '⟪'),
			_Utils_Tuple2('langd', '⦑'),
			_Utils_Tuple2('langle', '⟨'),
			_Utils_Tuple2('lap', '⪅'),
			_Utils_Tuple2('Laplacetrf', 'ℒ'),
			_Utils_Tuple2('laquo', '«'),
			_Utils_Tuple2('larrb', '⇤'),
			_Utils_Tuple2('larrbfs', '⤟'),
			_Utils_Tuple2('larr', '←'),
			_Utils_Tuple2('Larr', '↞'),
			_Utils_Tuple2('lArr', '⇐'),
			_Utils_Tuple2('larrfs', '⤝'),
			_Utils_Tuple2('larrhk', '↩'),
			_Utils_Tuple2('larrlp', '↫'),
			_Utils_Tuple2('larrpl', '⤹'),
			_Utils_Tuple2('larrsim', '⥳'),
			_Utils_Tuple2('larrtl', '↢'),
			_Utils_Tuple2('latail', '⤙'),
			_Utils_Tuple2('lAtail', '⤛'),
			_Utils_Tuple2('lat', '⪫'),
			_Utils_Tuple2('late', '⪭'),
			_Utils_Tuple2('lates', '⪭︀'),
			_Utils_Tuple2('lbarr', '⤌'),
			_Utils_Tuple2('lBarr', '⤎'),
			_Utils_Tuple2('lbbrk', '❲'),
			_Utils_Tuple2('lbrace', '{'),
			_Utils_Tuple2('lbrack', '['),
			_Utils_Tuple2('lbrke', '⦋'),
			_Utils_Tuple2('lbrksld', '⦏'),
			_Utils_Tuple2('lbrkslu', '⦍'),
			_Utils_Tuple2('Lcaron', 'Ľ'),
			_Utils_Tuple2('lcaron', 'ľ'),
			_Utils_Tuple2('Lcedil', 'Ļ'),
			_Utils_Tuple2('lcedil', 'ļ'),
			_Utils_Tuple2('lceil', '⌈'),
			_Utils_Tuple2('lcub', '{'),
			_Utils_Tuple2('Lcy', 'Л'),
			_Utils_Tuple2('lcy', 'л'),
			_Utils_Tuple2('ldca', '⤶'),
			_Utils_Tuple2('ldquo', '“'),
			_Utils_Tuple2('ldquor', '„'),
			_Utils_Tuple2('ldrdhar', '⥧'),
			_Utils_Tuple2('ldrushar', '⥋'),
			_Utils_Tuple2('ldsh', '↲'),
			_Utils_Tuple2('le', '≤'),
			_Utils_Tuple2('lE', '≦'),
			_Utils_Tuple2('LeftAngleBracket', '⟨'),
			_Utils_Tuple2('LeftArrowBar', '⇤'),
			_Utils_Tuple2('leftarrow', '←'),
			_Utils_Tuple2('LeftArrow', '←'),
			_Utils_Tuple2('Leftarrow', '⇐'),
			_Utils_Tuple2('LeftArrowRightArrow', '⇆'),
			_Utils_Tuple2('leftarrowtail', '↢'),
			_Utils_Tuple2('LeftCeiling', '⌈'),
			_Utils_Tuple2('LeftDoubleBracket', '⟦'),
			_Utils_Tuple2('LeftDownTeeVector', '⥡'),
			_Utils_Tuple2('LeftDownVectorBar', '⥙'),
			_Utils_Tuple2('LeftDownVector', '⇃'),
			_Utils_Tuple2('LeftFloor', '⌊'),
			_Utils_Tuple2('leftharpoondown', '↽'),
			_Utils_Tuple2('leftharpoonup', '↼'),
			_Utils_Tuple2('leftleftarrows', '⇇'),
			_Utils_Tuple2('leftrightarrow', '↔'),
			_Utils_Tuple2('LeftRightArrow', '↔'),
			_Utils_Tuple2('Leftrightarrow', '⇔'),
			_Utils_Tuple2('leftrightarrows', '⇆'),
			_Utils_Tuple2('leftrightharpoons', '⇋'),
			_Utils_Tuple2('leftrightsquigarrow', '↭'),
			_Utils_Tuple2('LeftRightVector', '⥎'),
			_Utils_Tuple2('LeftTeeArrow', '↤'),
			_Utils_Tuple2('LeftTee', '⊣'),
			_Utils_Tuple2('LeftTeeVector', '⥚'),
			_Utils_Tuple2('leftthreetimes', '⋋'),
			_Utils_Tuple2('LeftTriangleBar', '⧏'),
			_Utils_Tuple2('LeftTriangle', '⊲'),
			_Utils_Tuple2('LeftTriangleEqual', '⊴'),
			_Utils_Tuple2('LeftUpDownVector', '⥑'),
			_Utils_Tuple2('LeftUpTeeVector', '⥠'),
			_Utils_Tuple2('LeftUpVectorBar', '⥘'),
			_Utils_Tuple2('LeftUpVector', '↿'),
			_Utils_Tuple2('LeftVectorBar', '⥒'),
			_Utils_Tuple2('LeftVector', '↼'),
			_Utils_Tuple2('lEg', '⪋'),
			_Utils_Tuple2('leg', '⋚'),
			_Utils_Tuple2('leq', '≤'),
			_Utils_Tuple2('leqq', '≦'),
			_Utils_Tuple2('leqslant', '⩽'),
			_Utils_Tuple2('lescc', '⪨'),
			_Utils_Tuple2('les', '⩽'),
			_Utils_Tuple2('lesdot', '⩿'),
			_Utils_Tuple2('lesdoto', '⪁'),
			_Utils_Tuple2('lesdotor', '⪃'),
			_Utils_Tuple2('lesg', '⋚︀'),
			_Utils_Tuple2('lesges', '⪓'),
			_Utils_Tuple2('lessapprox', '⪅'),
			_Utils_Tuple2('lessdot', '⋖'),
			_Utils_Tuple2('lesseqgtr', '⋚'),
			_Utils_Tuple2('lesseqqgtr', '⪋'),
			_Utils_Tuple2('LessEqualGreater', '⋚'),
			_Utils_Tuple2('LessFullEqual', '≦'),
			_Utils_Tuple2('LessGreater', '≶'),
			_Utils_Tuple2('lessgtr', '≶'),
			_Utils_Tuple2('LessLess', '⪡'),
			_Utils_Tuple2('lesssim', '≲'),
			_Utils_Tuple2('LessSlantEqual', '⩽'),
			_Utils_Tuple2('LessTilde', '≲'),
			_Utils_Tuple2('lfisht', '⥼'),
			_Utils_Tuple2('lfloor', '⌊'),
			_Utils_Tuple2('Lfr', '\uD835\uDD0F'),
			_Utils_Tuple2('lfr', '\uD835\uDD29'),
			_Utils_Tuple2('lg', '≶'),
			_Utils_Tuple2('lgE', '⪑'),
			_Utils_Tuple2('lHar', '⥢'),
			_Utils_Tuple2('lhard', '↽'),
			_Utils_Tuple2('lharu', '↼'),
			_Utils_Tuple2('lharul', '⥪'),
			_Utils_Tuple2('lhblk', '▄'),
			_Utils_Tuple2('LJcy', 'Љ'),
			_Utils_Tuple2('ljcy', 'љ'),
			_Utils_Tuple2('llarr', '⇇'),
			_Utils_Tuple2('ll', '≪'),
			_Utils_Tuple2('Ll', '⋘'),
			_Utils_Tuple2('llcorner', '⌞'),
			_Utils_Tuple2('Lleftarrow', '⇚'),
			_Utils_Tuple2('llhard', '⥫'),
			_Utils_Tuple2('lltri', '◺'),
			_Utils_Tuple2('Lmidot', 'Ŀ'),
			_Utils_Tuple2('lmidot', 'ŀ'),
			_Utils_Tuple2('lmoustache', '⎰'),
			_Utils_Tuple2('lmoust', '⎰'),
			_Utils_Tuple2('lnap', '⪉'),
			_Utils_Tuple2('lnapprox', '⪉'),
			_Utils_Tuple2('lne', '⪇'),
			_Utils_Tuple2('lnE', '≨'),
			_Utils_Tuple2('lneq', '⪇'),
			_Utils_Tuple2('lneqq', '≨'),
			_Utils_Tuple2('lnsim', '⋦'),
			_Utils_Tuple2('loang', '⟬'),
			_Utils_Tuple2('loarr', '⇽'),
			_Utils_Tuple2('lobrk', '⟦'),
			_Utils_Tuple2('longleftarrow', '⟵'),
			_Utils_Tuple2('LongLeftArrow', '⟵'),
			_Utils_Tuple2('Longleftarrow', '⟸'),
			_Utils_Tuple2('longleftrightarrow', '⟷'),
			_Utils_Tuple2('LongLeftRightArrow', '⟷'),
			_Utils_Tuple2('Longleftrightarrow', '⟺'),
			_Utils_Tuple2('longmapsto', '⟼'),
			_Utils_Tuple2('longrightarrow', '⟶'),
			_Utils_Tuple2('LongRightArrow', '⟶'),
			_Utils_Tuple2('Longrightarrow', '⟹'),
			_Utils_Tuple2('looparrowleft', '↫'),
			_Utils_Tuple2('looparrowright', '↬'),
			_Utils_Tuple2('lopar', '⦅'),
			_Utils_Tuple2('Lopf', '\uD835\uDD43'),
			_Utils_Tuple2('lopf', '\uD835\uDD5D'),
			_Utils_Tuple2('loplus', '⨭'),
			_Utils_Tuple2('lotimes', '⨴'),
			_Utils_Tuple2('lowast', '∗'),
			_Utils_Tuple2('lowbar', '_'),
			_Utils_Tuple2('LowerLeftArrow', '↙'),
			_Utils_Tuple2('LowerRightArrow', '↘'),
			_Utils_Tuple2('loz', '◊'),
			_Utils_Tuple2('lozenge', '◊'),
			_Utils_Tuple2('lozf', '⧫'),
			_Utils_Tuple2('lpar', '('),
			_Utils_Tuple2('lparlt', '⦓'),
			_Utils_Tuple2('lrarr', '⇆'),
			_Utils_Tuple2('lrcorner', '⌟'),
			_Utils_Tuple2('lrhar', '⇋'),
			_Utils_Tuple2('lrhard', '⥭'),
			_Utils_Tuple2('lrm', '\u200E'),
			_Utils_Tuple2('lrtri', '⊿'),
			_Utils_Tuple2('lsaquo', '‹'),
			_Utils_Tuple2('lscr', '\uD835\uDCC1'),
			_Utils_Tuple2('Lscr', 'ℒ'),
			_Utils_Tuple2('lsh', '↰'),
			_Utils_Tuple2('Lsh', '↰'),
			_Utils_Tuple2('lsim', '≲'),
			_Utils_Tuple2('lsime', '⪍'),
			_Utils_Tuple2('lsimg', '⪏'),
			_Utils_Tuple2('lsqb', '['),
			_Utils_Tuple2('lsquo', '‘'),
			_Utils_Tuple2('lsquor', '‚'),
			_Utils_Tuple2('Lstrok', 'Ł'),
			_Utils_Tuple2('lstrok', 'ł'),
			_Utils_Tuple2('ltcc', '⪦'),
			_Utils_Tuple2('ltcir', '⩹'),
			_Utils_Tuple2('lt', '<'),
			_Utils_Tuple2('LT', '<'),
			_Utils_Tuple2('Lt', '≪'),
			_Utils_Tuple2('ltdot', '⋖'),
			_Utils_Tuple2('lthree', '⋋'),
			_Utils_Tuple2('ltimes', '⋉'),
			_Utils_Tuple2('ltlarr', '⥶'),
			_Utils_Tuple2('ltquest', '⩻'),
			_Utils_Tuple2('ltri', '◃'),
			_Utils_Tuple2('ltrie', '⊴'),
			_Utils_Tuple2('ltrif', '◂'),
			_Utils_Tuple2('ltrPar', '⦖'),
			_Utils_Tuple2('lurdshar', '⥊'),
			_Utils_Tuple2('luruhar', '⥦'),
			_Utils_Tuple2('lvertneqq', '≨︀'),
			_Utils_Tuple2('lvnE', '≨︀'),
			_Utils_Tuple2('macr', '¯'),
			_Utils_Tuple2('male', '♂'),
			_Utils_Tuple2('malt', '✠'),
			_Utils_Tuple2('maltese', '✠'),
			_Utils_Tuple2('Map', '⤅'),
			_Utils_Tuple2('map', '↦'),
			_Utils_Tuple2('mapsto', '↦'),
			_Utils_Tuple2('mapstodown', '↧'),
			_Utils_Tuple2('mapstoleft', '↤'),
			_Utils_Tuple2('mapstoup', '↥'),
			_Utils_Tuple2('marker', '▮'),
			_Utils_Tuple2('mcomma', '⨩'),
			_Utils_Tuple2('Mcy', 'М'),
			_Utils_Tuple2('mcy', 'м'),
			_Utils_Tuple2('mdash', '—'),
			_Utils_Tuple2('mDDot', '∺'),
			_Utils_Tuple2('measuredangle', '∡'),
			_Utils_Tuple2('MediumSpace', '\u205F'),
			_Utils_Tuple2('Mellintrf', 'ℳ'),
			_Utils_Tuple2('Mfr', '\uD835\uDD10'),
			_Utils_Tuple2('mfr', '\uD835\uDD2A'),
			_Utils_Tuple2('mho', '℧'),
			_Utils_Tuple2('micro', 'µ'),
			_Utils_Tuple2('midast', '*'),
			_Utils_Tuple2('midcir', '⫰'),
			_Utils_Tuple2('mid', '∣'),
			_Utils_Tuple2('middot', '·'),
			_Utils_Tuple2('minusb', '⊟'),
			_Utils_Tuple2('minus', '−'),
			_Utils_Tuple2('minusd', '∸'),
			_Utils_Tuple2('minusdu', '⨪'),
			_Utils_Tuple2('MinusPlus', '∓'),
			_Utils_Tuple2('mlcp', '⫛'),
			_Utils_Tuple2('mldr', '…'),
			_Utils_Tuple2('mnplus', '∓'),
			_Utils_Tuple2('models', '⊧'),
			_Utils_Tuple2('Mopf', '\uD835\uDD44'),
			_Utils_Tuple2('mopf', '\uD835\uDD5E'),
			_Utils_Tuple2('mp', '∓'),
			_Utils_Tuple2('mscr', '\uD835\uDCC2'),
			_Utils_Tuple2('Mscr', 'ℳ'),
			_Utils_Tuple2('mstpos', '∾'),
			_Utils_Tuple2('Mu', 'Μ'),
			_Utils_Tuple2('mu', 'μ'),
			_Utils_Tuple2('multimap', '⊸'),
			_Utils_Tuple2('mumap', '⊸'),
			_Utils_Tuple2('nabla', '∇'),
			_Utils_Tuple2('Nacute', 'Ń'),
			_Utils_Tuple2('nacute', 'ń'),
			_Utils_Tuple2('nang', '∠⃒'),
			_Utils_Tuple2('nap', '≉'),
			_Utils_Tuple2('napE', '⩰̸'),
			_Utils_Tuple2('napid', '≋̸'),
			_Utils_Tuple2('napos', 'ŉ'),
			_Utils_Tuple2('napprox', '≉'),
			_Utils_Tuple2('natural', '♮'),
			_Utils_Tuple2('naturals', 'ℕ'),
			_Utils_Tuple2('natur', '♮'),
			_Utils_Tuple2('nbsp', '\u00A0'),
			_Utils_Tuple2('nbump', '≎̸'),
			_Utils_Tuple2('nbumpe', '≏̸'),
			_Utils_Tuple2('ncap', '⩃'),
			_Utils_Tuple2('Ncaron', 'Ň'),
			_Utils_Tuple2('ncaron', 'ň'),
			_Utils_Tuple2('Ncedil', 'Ņ'),
			_Utils_Tuple2('ncedil', 'ņ'),
			_Utils_Tuple2('ncong', '≇'),
			_Utils_Tuple2('ncongdot', '⩭̸'),
			_Utils_Tuple2('ncup', '⩂'),
			_Utils_Tuple2('Ncy', 'Н'),
			_Utils_Tuple2('ncy', 'н'),
			_Utils_Tuple2('ndash', '–'),
			_Utils_Tuple2('nearhk', '⤤'),
			_Utils_Tuple2('nearr', '↗'),
			_Utils_Tuple2('neArr', '⇗'),
			_Utils_Tuple2('nearrow', '↗'),
			_Utils_Tuple2('ne', '≠'),
			_Utils_Tuple2('nedot', '≐̸'),
			_Utils_Tuple2('NegativeMediumSpace', '\u200B'),
			_Utils_Tuple2('NegativeThickSpace', '\u200B'),
			_Utils_Tuple2('NegativeThinSpace', '\u200B'),
			_Utils_Tuple2('NegativeVeryThinSpace', '\u200B'),
			_Utils_Tuple2('nequiv', '≢'),
			_Utils_Tuple2('nesear', '⤨'),
			_Utils_Tuple2('nesim', '≂̸'),
			_Utils_Tuple2('NestedGreaterGreater', '≫'),
			_Utils_Tuple2('NestedLessLess', '≪'),
			_Utils_Tuple2('NewLine', '\n'),
			_Utils_Tuple2('nexist', '∄'),
			_Utils_Tuple2('nexists', '∄'),
			_Utils_Tuple2('Nfr', '\uD835\uDD11'),
			_Utils_Tuple2('nfr', '\uD835\uDD2B'),
			_Utils_Tuple2('ngE', '≧̸'),
			_Utils_Tuple2('nge', '≱'),
			_Utils_Tuple2('ngeq', '≱'),
			_Utils_Tuple2('ngeqq', '≧̸'),
			_Utils_Tuple2('ngeqslant', '⩾̸'),
			_Utils_Tuple2('nges', '⩾̸'),
			_Utils_Tuple2('nGg', '⋙̸'),
			_Utils_Tuple2('ngsim', '≵'),
			_Utils_Tuple2('nGt', '≫⃒'),
			_Utils_Tuple2('ngt', '≯'),
			_Utils_Tuple2('ngtr', '≯'),
			_Utils_Tuple2('nGtv', '≫̸'),
			_Utils_Tuple2('nharr', '↮'),
			_Utils_Tuple2('nhArr', '⇎'),
			_Utils_Tuple2('nhpar', '⫲'),
			_Utils_Tuple2('ni', '∋'),
			_Utils_Tuple2('nis', '⋼'),
			_Utils_Tuple2('nisd', '⋺'),
			_Utils_Tuple2('niv', '∋'),
			_Utils_Tuple2('NJcy', 'Њ'),
			_Utils_Tuple2('njcy', 'њ'),
			_Utils_Tuple2('nlarr', '↚'),
			_Utils_Tuple2('nlArr', '⇍'),
			_Utils_Tuple2('nldr', '‥'),
			_Utils_Tuple2('nlE', '≦̸'),
			_Utils_Tuple2('nle', '≰'),
			_Utils_Tuple2('nleftarrow', '↚'),
			_Utils_Tuple2('nLeftarrow', '⇍'),
			_Utils_Tuple2('nleftrightarrow', '↮'),
			_Utils_Tuple2('nLeftrightarrow', '⇎'),
			_Utils_Tuple2('nleq', '≰'),
			_Utils_Tuple2('nleqq', '≦̸'),
			_Utils_Tuple2('nleqslant', '⩽̸'),
			_Utils_Tuple2('nles', '⩽̸'),
			_Utils_Tuple2('nless', '≮'),
			_Utils_Tuple2('nLl', '⋘̸'),
			_Utils_Tuple2('nlsim', '≴'),
			_Utils_Tuple2('nLt', '≪⃒'),
			_Utils_Tuple2('nlt', '≮'),
			_Utils_Tuple2('nltri', '⋪'),
			_Utils_Tuple2('nltrie', '⋬'),
			_Utils_Tuple2('nLtv', '≪̸'),
			_Utils_Tuple2('nmid', '∤'),
			_Utils_Tuple2('NoBreak', '\u2060'),
			_Utils_Tuple2('NonBreakingSpace', '\u00A0'),
			_Utils_Tuple2('nopf', '\uD835\uDD5F'),
			_Utils_Tuple2('Nopf', 'ℕ'),
			_Utils_Tuple2('Not', '⫬'),
			_Utils_Tuple2('not', '¬'),
			_Utils_Tuple2('NotCongruent', '≢'),
			_Utils_Tuple2('NotCupCap', '≭'),
			_Utils_Tuple2('NotDoubleVerticalBar', '∦'),
			_Utils_Tuple2('NotElement', '∉'),
			_Utils_Tuple2('NotEqual', '≠'),
			_Utils_Tuple2('NotEqualTilde', '≂̸'),
			_Utils_Tuple2('NotExists', '∄'),
			_Utils_Tuple2('NotGreater', '≯'),
			_Utils_Tuple2('NotGreaterEqual', '≱'),
			_Utils_Tuple2('NotGreaterFullEqual', '≧̸'),
			_Utils_Tuple2('NotGreaterGreater', '≫̸'),
			_Utils_Tuple2('NotGreaterLess', '≹'),
			_Utils_Tuple2('NotGreaterSlantEqual', '⩾̸'),
			_Utils_Tuple2('NotGreaterTilde', '≵'),
			_Utils_Tuple2('NotHumpDownHump', '≎̸'),
			_Utils_Tuple2('NotHumpEqual', '≏̸'),
			_Utils_Tuple2('notin', '∉'),
			_Utils_Tuple2('notindot', '⋵̸'),
			_Utils_Tuple2('notinE', '⋹̸'),
			_Utils_Tuple2('notinva', '∉'),
			_Utils_Tuple2('notinvb', '⋷'),
			_Utils_Tuple2('notinvc', '⋶'),
			_Utils_Tuple2('NotLeftTriangleBar', '⧏̸'),
			_Utils_Tuple2('NotLeftTriangle', '⋪'),
			_Utils_Tuple2('NotLeftTriangleEqual', '⋬'),
			_Utils_Tuple2('NotLess', '≮'),
			_Utils_Tuple2('NotLessEqual', '≰'),
			_Utils_Tuple2('NotLessGreater', '≸'),
			_Utils_Tuple2('NotLessLess', '≪̸'),
			_Utils_Tuple2('NotLessSlantEqual', '⩽̸'),
			_Utils_Tuple2('NotLessTilde', '≴'),
			_Utils_Tuple2('NotNestedGreaterGreater', '⪢̸'),
			_Utils_Tuple2('NotNestedLessLess', '⪡̸'),
			_Utils_Tuple2('notni', '∌'),
			_Utils_Tuple2('notniva', '∌'),
			_Utils_Tuple2('notnivb', '⋾'),
			_Utils_Tuple2('notnivc', '⋽'),
			_Utils_Tuple2('NotPrecedes', '⊀'),
			_Utils_Tuple2('NotPrecedesEqual', '⪯̸'),
			_Utils_Tuple2('NotPrecedesSlantEqual', '⋠'),
			_Utils_Tuple2('NotReverseElement', '∌'),
			_Utils_Tuple2('NotRightTriangleBar', '⧐̸'),
			_Utils_Tuple2('NotRightTriangle', '⋫'),
			_Utils_Tuple2('NotRightTriangleEqual', '⋭'),
			_Utils_Tuple2('NotSquareSubset', '⊏̸'),
			_Utils_Tuple2('NotSquareSubsetEqual', '⋢'),
			_Utils_Tuple2('NotSquareSuperset', '⊐̸'),
			_Utils_Tuple2('NotSquareSupersetEqual', '⋣'),
			_Utils_Tuple2('NotSubset', '⊂⃒'),
			_Utils_Tuple2('NotSubsetEqual', '⊈'),
			_Utils_Tuple2('NotSucceeds', '⊁'),
			_Utils_Tuple2('NotSucceedsEqual', '⪰̸'),
			_Utils_Tuple2('NotSucceedsSlantEqual', '⋡'),
			_Utils_Tuple2('NotSucceedsTilde', '≿̸'),
			_Utils_Tuple2('NotSuperset', '⊃⃒'),
			_Utils_Tuple2('NotSupersetEqual', '⊉'),
			_Utils_Tuple2('NotTilde', '≁'),
			_Utils_Tuple2('NotTildeEqual', '≄'),
			_Utils_Tuple2('NotTildeFullEqual', '≇'),
			_Utils_Tuple2('NotTildeTilde', '≉'),
			_Utils_Tuple2('NotVerticalBar', '∤'),
			_Utils_Tuple2('nparallel', '∦'),
			_Utils_Tuple2('npar', '∦'),
			_Utils_Tuple2('nparsl', '⫽⃥'),
			_Utils_Tuple2('npart', '∂̸'),
			_Utils_Tuple2('npolint', '⨔'),
			_Utils_Tuple2('npr', '⊀'),
			_Utils_Tuple2('nprcue', '⋠'),
			_Utils_Tuple2('nprec', '⊀'),
			_Utils_Tuple2('npreceq', '⪯̸'),
			_Utils_Tuple2('npre', '⪯̸'),
			_Utils_Tuple2('nrarrc', '⤳̸'),
			_Utils_Tuple2('nrarr', '↛'),
			_Utils_Tuple2('nrArr', '⇏'),
			_Utils_Tuple2('nrarrw', '↝̸'),
			_Utils_Tuple2('nrightarrow', '↛'),
			_Utils_Tuple2('nRightarrow', '⇏'),
			_Utils_Tuple2('nrtri', '⋫'),
			_Utils_Tuple2('nrtrie', '⋭'),
			_Utils_Tuple2('nsc', '⊁'),
			_Utils_Tuple2('nsccue', '⋡'),
			_Utils_Tuple2('nsce', '⪰̸'),
			_Utils_Tuple2('Nscr', '\uD835\uDCA9'),
			_Utils_Tuple2('nscr', '\uD835\uDCC3'),
			_Utils_Tuple2('nshortmid', '∤'),
			_Utils_Tuple2('nshortparallel', '∦'),
			_Utils_Tuple2('nsim', '≁'),
			_Utils_Tuple2('nsime', '≄'),
			_Utils_Tuple2('nsimeq', '≄'),
			_Utils_Tuple2('nsmid', '∤'),
			_Utils_Tuple2('nspar', '∦'),
			_Utils_Tuple2('nsqsube', '⋢'),
			_Utils_Tuple2('nsqsupe', '⋣'),
			_Utils_Tuple2('nsub', '⊄'),
			_Utils_Tuple2('nsubE', '⫅̸'),
			_Utils_Tuple2('nsube', '⊈'),
			_Utils_Tuple2('nsubset', '⊂⃒'),
			_Utils_Tuple2('nsubseteq', '⊈'),
			_Utils_Tuple2('nsubseteqq', '⫅̸'),
			_Utils_Tuple2('nsucc', '⊁'),
			_Utils_Tuple2('nsucceq', '⪰̸'),
			_Utils_Tuple2('nsup', '⊅'),
			_Utils_Tuple2('nsupE', '⫆̸'),
			_Utils_Tuple2('nsupe', '⊉'),
			_Utils_Tuple2('nsupset', '⊃⃒'),
			_Utils_Tuple2('nsupseteq', '⊉'),
			_Utils_Tuple2('nsupseteqq', '⫆̸'),
			_Utils_Tuple2('ntgl', '≹'),
			_Utils_Tuple2('Ntilde', 'Ñ'),
			_Utils_Tuple2('ntilde', 'ñ'),
			_Utils_Tuple2('ntlg', '≸'),
			_Utils_Tuple2('ntriangleleft', '⋪'),
			_Utils_Tuple2('ntrianglelefteq', '⋬'),
			_Utils_Tuple2('ntriangleright', '⋫'),
			_Utils_Tuple2('ntrianglerighteq', '⋭'),
			_Utils_Tuple2('Nu', 'Ν'),
			_Utils_Tuple2('nu', 'ν'),
			_Utils_Tuple2('num', '#'),
			_Utils_Tuple2('numero', '№'),
			_Utils_Tuple2('numsp', '\u2007'),
			_Utils_Tuple2('nvap', '≍⃒'),
			_Utils_Tuple2('nvdash', '⊬'),
			_Utils_Tuple2('nvDash', '⊭'),
			_Utils_Tuple2('nVdash', '⊮'),
			_Utils_Tuple2('nVDash', '⊯'),
			_Utils_Tuple2('nvge', '≥⃒'),
			_Utils_Tuple2('nvgt', '>⃒'),
			_Utils_Tuple2('nvHarr', '⤄'),
			_Utils_Tuple2('nvinfin', '⧞'),
			_Utils_Tuple2('nvlArr', '⤂'),
			_Utils_Tuple2('nvle', '≤⃒'),
			_Utils_Tuple2('nvlt', '<⃒'),
			_Utils_Tuple2('nvltrie', '⊴⃒'),
			_Utils_Tuple2('nvrArr', '⤃'),
			_Utils_Tuple2('nvrtrie', '⊵⃒'),
			_Utils_Tuple2('nvsim', '∼⃒'),
			_Utils_Tuple2('nwarhk', '⤣'),
			_Utils_Tuple2('nwarr', '↖'),
			_Utils_Tuple2('nwArr', '⇖'),
			_Utils_Tuple2('nwarrow', '↖'),
			_Utils_Tuple2('nwnear', '⤧'),
			_Utils_Tuple2('Oacute', 'Ó'),
			_Utils_Tuple2('oacute', 'ó'),
			_Utils_Tuple2('oast', '⊛'),
			_Utils_Tuple2('Ocirc', 'Ô'),
			_Utils_Tuple2('ocirc', 'ô'),
			_Utils_Tuple2('ocir', '⊚'),
			_Utils_Tuple2('Ocy', 'О'),
			_Utils_Tuple2('ocy', 'о'),
			_Utils_Tuple2('odash', '⊝'),
			_Utils_Tuple2('Odblac', 'Ő'),
			_Utils_Tuple2('odblac', 'ő'),
			_Utils_Tuple2('odiv', '⨸'),
			_Utils_Tuple2('odot', '⊙'),
			_Utils_Tuple2('odsold', '⦼'),
			_Utils_Tuple2('OElig', 'Œ'),
			_Utils_Tuple2('oelig', 'œ'),
			_Utils_Tuple2('ofcir', '⦿'),
			_Utils_Tuple2('Ofr', '\uD835\uDD12'),
			_Utils_Tuple2('ofr', '\uD835\uDD2C'),
			_Utils_Tuple2('ogon', '˛'),
			_Utils_Tuple2('Ograve', 'Ò'),
			_Utils_Tuple2('ograve', 'ò'),
			_Utils_Tuple2('ogt', '⧁'),
			_Utils_Tuple2('ohbar', '⦵'),
			_Utils_Tuple2('ohm', 'Ω'),
			_Utils_Tuple2('oint', '∮'),
			_Utils_Tuple2('olarr', '↺'),
			_Utils_Tuple2('olcir', '⦾'),
			_Utils_Tuple2('olcross', '⦻'),
			_Utils_Tuple2('oline', '‾'),
			_Utils_Tuple2('olt', '⧀'),
			_Utils_Tuple2('Omacr', 'Ō'),
			_Utils_Tuple2('omacr', 'ō'),
			_Utils_Tuple2('Omega', 'Ω'),
			_Utils_Tuple2('omega', 'ω'),
			_Utils_Tuple2('Omicron', 'Ο'),
			_Utils_Tuple2('omicron', 'ο'),
			_Utils_Tuple2('omid', '⦶'),
			_Utils_Tuple2('ominus', '⊖'),
			_Utils_Tuple2('Oopf', '\uD835\uDD46'),
			_Utils_Tuple2('oopf', '\uD835\uDD60'),
			_Utils_Tuple2('opar', '⦷'),
			_Utils_Tuple2('OpenCurlyDoubleQuote', '“'),
			_Utils_Tuple2('OpenCurlyQuote', '‘'),
			_Utils_Tuple2('operp', '⦹'),
			_Utils_Tuple2('oplus', '⊕'),
			_Utils_Tuple2('orarr', '↻'),
			_Utils_Tuple2('Or', '⩔'),
			_Utils_Tuple2('or', '∨'),
			_Utils_Tuple2('ord', '⩝'),
			_Utils_Tuple2('order', 'ℴ'),
			_Utils_Tuple2('orderof', 'ℴ'),
			_Utils_Tuple2('ordf', 'ª'),
			_Utils_Tuple2('ordm', 'º'),
			_Utils_Tuple2('origof', '⊶'),
			_Utils_Tuple2('oror', '⩖'),
			_Utils_Tuple2('orslope', '⩗'),
			_Utils_Tuple2('orv', '⩛'),
			_Utils_Tuple2('oS', 'Ⓢ'),
			_Utils_Tuple2('Oscr', '\uD835\uDCAA'),
			_Utils_Tuple2('oscr', 'ℴ'),
			_Utils_Tuple2('Oslash', 'Ø'),
			_Utils_Tuple2('oslash', 'ø'),
			_Utils_Tuple2('osol', '⊘'),
			_Utils_Tuple2('Otilde', 'Õ'),
			_Utils_Tuple2('otilde', 'õ'),
			_Utils_Tuple2('otimesas', '⨶'),
			_Utils_Tuple2('Otimes', '⨷'),
			_Utils_Tuple2('otimes', '⊗'),
			_Utils_Tuple2('Ouml', 'Ö'),
			_Utils_Tuple2('ouml', 'ö'),
			_Utils_Tuple2('ovbar', '⌽'),
			_Utils_Tuple2('OverBar', '‾'),
			_Utils_Tuple2('OverBrace', '⏞'),
			_Utils_Tuple2('OverBracket', '⎴'),
			_Utils_Tuple2('OverParenthesis', '⏜'),
			_Utils_Tuple2('para', '¶'),
			_Utils_Tuple2('parallel', '∥'),
			_Utils_Tuple2('par', '∥'),
			_Utils_Tuple2('parsim', '⫳'),
			_Utils_Tuple2('parsl', '⫽'),
			_Utils_Tuple2('part', '∂'),
			_Utils_Tuple2('PartialD', '∂'),
			_Utils_Tuple2('Pcy', 'П'),
			_Utils_Tuple2('pcy', 'п'),
			_Utils_Tuple2('percnt', '%'),
			_Utils_Tuple2('period', '.'),
			_Utils_Tuple2('permil', '‰'),
			_Utils_Tuple2('perp', '⊥'),
			_Utils_Tuple2('pertenk', '‱'),
			_Utils_Tuple2('Pfr', '\uD835\uDD13'),
			_Utils_Tuple2('pfr', '\uD835\uDD2D'),
			_Utils_Tuple2('Phi', 'Φ'),
			_Utils_Tuple2('phi', 'φ'),
			_Utils_Tuple2('phiv', 'ϕ'),
			_Utils_Tuple2('phmmat', 'ℳ'),
			_Utils_Tuple2('phone', '☎'),
			_Utils_Tuple2('Pi', 'Π'),
			_Utils_Tuple2('pi', 'π'),
			_Utils_Tuple2('pitchfork', '⋔'),
			_Utils_Tuple2('piv', 'ϖ'),
			_Utils_Tuple2('planck', 'ℏ'),
			_Utils_Tuple2('planckh', 'ℎ'),
			_Utils_Tuple2('plankv', 'ℏ'),
			_Utils_Tuple2('plusacir', '⨣'),
			_Utils_Tuple2('plusb', '⊞'),
			_Utils_Tuple2('pluscir', '⨢'),
			_Utils_Tuple2('plus', '+'),
			_Utils_Tuple2('plusdo', '∔'),
			_Utils_Tuple2('plusdu', '⨥'),
			_Utils_Tuple2('pluse', '⩲'),
			_Utils_Tuple2('PlusMinus', '±'),
			_Utils_Tuple2('plusmn', '±'),
			_Utils_Tuple2('plussim', '⨦'),
			_Utils_Tuple2('plustwo', '⨧'),
			_Utils_Tuple2('pm', '±'),
			_Utils_Tuple2('Poincareplane', 'ℌ'),
			_Utils_Tuple2('pointint', '⨕'),
			_Utils_Tuple2('popf', '\uD835\uDD61'),
			_Utils_Tuple2('Popf', 'ℙ'),
			_Utils_Tuple2('pound', '£'),
			_Utils_Tuple2('prap', '⪷'),
			_Utils_Tuple2('Pr', '⪻'),
			_Utils_Tuple2('pr', '≺'),
			_Utils_Tuple2('prcue', '≼'),
			_Utils_Tuple2('precapprox', '⪷'),
			_Utils_Tuple2('prec', '≺'),
			_Utils_Tuple2('preccurlyeq', '≼'),
			_Utils_Tuple2('Precedes', '≺'),
			_Utils_Tuple2('PrecedesEqual', '⪯'),
			_Utils_Tuple2('PrecedesSlantEqual', '≼'),
			_Utils_Tuple2('PrecedesTilde', '≾'),
			_Utils_Tuple2('preceq', '⪯'),
			_Utils_Tuple2('precnapprox', '⪹'),
			_Utils_Tuple2('precneqq', '⪵'),
			_Utils_Tuple2('precnsim', '⋨'),
			_Utils_Tuple2('pre', '⪯'),
			_Utils_Tuple2('prE', '⪳'),
			_Utils_Tuple2('precsim', '≾'),
			_Utils_Tuple2('prime', '′'),
			_Utils_Tuple2('Prime', '″'),
			_Utils_Tuple2('primes', 'ℙ'),
			_Utils_Tuple2('prnap', '⪹'),
			_Utils_Tuple2('prnE', '⪵'),
			_Utils_Tuple2('prnsim', '⋨'),
			_Utils_Tuple2('prod', '∏'),
			_Utils_Tuple2('Product', '∏'),
			_Utils_Tuple2('profalar', '⌮'),
			_Utils_Tuple2('profline', '⌒'),
			_Utils_Tuple2('profsurf', '⌓'),
			_Utils_Tuple2('prop', '∝'),
			_Utils_Tuple2('Proportional', '∝'),
			_Utils_Tuple2('Proportion', '∷'),
			_Utils_Tuple2('propto', '∝'),
			_Utils_Tuple2('prsim', '≾'),
			_Utils_Tuple2('prurel', '⊰'),
			_Utils_Tuple2('Pscr', '\uD835\uDCAB'),
			_Utils_Tuple2('pscr', '\uD835\uDCC5'),
			_Utils_Tuple2('Psi', 'Ψ'),
			_Utils_Tuple2('psi', 'ψ'),
			_Utils_Tuple2('puncsp', '\u2008'),
			_Utils_Tuple2('Qfr', '\uD835\uDD14'),
			_Utils_Tuple2('qfr', '\uD835\uDD2E'),
			_Utils_Tuple2('qint', '⨌'),
			_Utils_Tuple2('qopf', '\uD835\uDD62'),
			_Utils_Tuple2('Qopf', 'ℚ'),
			_Utils_Tuple2('qprime', '⁗'),
			_Utils_Tuple2('Qscr', '\uD835\uDCAC'),
			_Utils_Tuple2('qscr', '\uD835\uDCC6'),
			_Utils_Tuple2('quaternions', 'ℍ'),
			_Utils_Tuple2('quatint', '⨖'),
			_Utils_Tuple2('quest', '?'),
			_Utils_Tuple2('questeq', '≟'),
			_Utils_Tuple2('quot', '\"'),
			_Utils_Tuple2('QUOT', '\"'),
			_Utils_Tuple2('rAarr', '⇛'),
			_Utils_Tuple2('race', '∽̱'),
			_Utils_Tuple2('Racute', 'Ŕ'),
			_Utils_Tuple2('racute', 'ŕ'),
			_Utils_Tuple2('radic', '√'),
			_Utils_Tuple2('raemptyv', '⦳'),
			_Utils_Tuple2('rang', '⟩'),
			_Utils_Tuple2('Rang', '⟫'),
			_Utils_Tuple2('rangd', '⦒'),
			_Utils_Tuple2('range', '⦥'),
			_Utils_Tuple2('rangle', '⟩'),
			_Utils_Tuple2('raquo', '»'),
			_Utils_Tuple2('rarrap', '⥵'),
			_Utils_Tuple2('rarrb', '⇥'),
			_Utils_Tuple2('rarrbfs', '⤠'),
			_Utils_Tuple2('rarrc', '⤳'),
			_Utils_Tuple2('rarr', '→'),
			_Utils_Tuple2('Rarr', '↠'),
			_Utils_Tuple2('rArr', '⇒'),
			_Utils_Tuple2('rarrfs', '⤞'),
			_Utils_Tuple2('rarrhk', '↪'),
			_Utils_Tuple2('rarrlp', '↬'),
			_Utils_Tuple2('rarrpl', '⥅'),
			_Utils_Tuple2('rarrsim', '⥴'),
			_Utils_Tuple2('Rarrtl', '⤖'),
			_Utils_Tuple2('rarrtl', '↣'),
			_Utils_Tuple2('rarrw', '↝'),
			_Utils_Tuple2('ratail', '⤚'),
			_Utils_Tuple2('rAtail', '⤜'),
			_Utils_Tuple2('ratio', '∶'),
			_Utils_Tuple2('rationals', 'ℚ'),
			_Utils_Tuple2('rbarr', '⤍'),
			_Utils_Tuple2('rBarr', '⤏'),
			_Utils_Tuple2('RBarr', '⤐'),
			_Utils_Tuple2('rbbrk', '❳'),
			_Utils_Tuple2('rbrace', '}'),
			_Utils_Tuple2('rbrack', ']'),
			_Utils_Tuple2('rbrke', '⦌'),
			_Utils_Tuple2('rbrksld', '⦎'),
			_Utils_Tuple2('rbrkslu', '⦐'),
			_Utils_Tuple2('Rcaron', 'Ř'),
			_Utils_Tuple2('rcaron', 'ř'),
			_Utils_Tuple2('Rcedil', 'Ŗ'),
			_Utils_Tuple2('rcedil', 'ŗ'),
			_Utils_Tuple2('rceil', '⌉'),
			_Utils_Tuple2('rcub', '}'),
			_Utils_Tuple2('Rcy', 'Р'),
			_Utils_Tuple2('rcy', 'р'),
			_Utils_Tuple2('rdca', '⤷'),
			_Utils_Tuple2('rdldhar', '⥩'),
			_Utils_Tuple2('rdquo', '”'),
			_Utils_Tuple2('rdquor', '”'),
			_Utils_Tuple2('rdsh', '↳'),
			_Utils_Tuple2('real', 'ℜ'),
			_Utils_Tuple2('realine', 'ℛ'),
			_Utils_Tuple2('realpart', 'ℜ'),
			_Utils_Tuple2('reals', 'ℝ'),
			_Utils_Tuple2('Re', 'ℜ'),
			_Utils_Tuple2('rect', '▭'),
			_Utils_Tuple2('reg', '®'),
			_Utils_Tuple2('REG', '®'),
			_Utils_Tuple2('ReverseElement', '∋'),
			_Utils_Tuple2('ReverseEquilibrium', '⇋'),
			_Utils_Tuple2('ReverseUpEquilibrium', '⥯'),
			_Utils_Tuple2('rfisht', '⥽'),
			_Utils_Tuple2('rfloor', '⌋'),
			_Utils_Tuple2('rfr', '\uD835\uDD2F'),
			_Utils_Tuple2('Rfr', 'ℜ'),
			_Utils_Tuple2('rHar', '⥤'),
			_Utils_Tuple2('rhard', '⇁'),
			_Utils_Tuple2('rharu', '⇀'),
			_Utils_Tuple2('rharul', '⥬'),
			_Utils_Tuple2('Rho', 'Ρ'),
			_Utils_Tuple2('rho', 'ρ'),
			_Utils_Tuple2('rhov', 'ϱ'),
			_Utils_Tuple2('RightAngleBracket', '⟩'),
			_Utils_Tuple2('RightArrowBar', '⇥'),
			_Utils_Tuple2('rightarrow', '→'),
			_Utils_Tuple2('RightArrow', '→'),
			_Utils_Tuple2('Rightarrow', '⇒'),
			_Utils_Tuple2('RightArrowLeftArrow', '⇄'),
			_Utils_Tuple2('rightarrowtail', '↣'),
			_Utils_Tuple2('RightCeiling', '⌉'),
			_Utils_Tuple2('RightDoubleBracket', '⟧'),
			_Utils_Tuple2('RightDownTeeVector', '⥝'),
			_Utils_Tuple2('RightDownVectorBar', '⥕'),
			_Utils_Tuple2('RightDownVector', '⇂'),
			_Utils_Tuple2('RightFloor', '⌋'),
			_Utils_Tuple2('rightharpoondown', '⇁'),
			_Utils_Tuple2('rightharpoonup', '⇀'),
			_Utils_Tuple2('rightleftarrows', '⇄'),
			_Utils_Tuple2('rightleftharpoons', '⇌'),
			_Utils_Tuple2('rightrightarrows', '⇉'),
			_Utils_Tuple2('rightsquigarrow', '↝'),
			_Utils_Tuple2('RightTeeArrow', '↦'),
			_Utils_Tuple2('RightTee', '⊢'),
			_Utils_Tuple2('RightTeeVector', '⥛'),
			_Utils_Tuple2('rightthreetimes', '⋌'),
			_Utils_Tuple2('RightTriangleBar', '⧐'),
			_Utils_Tuple2('RightTriangle', '⊳'),
			_Utils_Tuple2('RightTriangleEqual', '⊵'),
			_Utils_Tuple2('RightUpDownVector', '⥏'),
			_Utils_Tuple2('RightUpTeeVector', '⥜'),
			_Utils_Tuple2('RightUpVectorBar', '⥔'),
			_Utils_Tuple2('RightUpVector', '↾'),
			_Utils_Tuple2('RightVectorBar', '⥓'),
			_Utils_Tuple2('RightVector', '⇀'),
			_Utils_Tuple2('ring', '˚'),
			_Utils_Tuple2('risingdotseq', '≓'),
			_Utils_Tuple2('rlarr', '⇄'),
			_Utils_Tuple2('rlhar', '⇌'),
			_Utils_Tuple2('rlm', '\u200F'),
			_Utils_Tuple2('rmoustache', '⎱'),
			_Utils_Tuple2('rmoust', '⎱'),
			_Utils_Tuple2('rnmid', '⫮'),
			_Utils_Tuple2('roang', '⟭'),
			_Utils_Tuple2('roarr', '⇾'),
			_Utils_Tuple2('robrk', '⟧'),
			_Utils_Tuple2('ropar', '⦆'),
			_Utils_Tuple2('ropf', '\uD835\uDD63'),
			_Utils_Tuple2('Ropf', 'ℝ'),
			_Utils_Tuple2('roplus', '⨮'),
			_Utils_Tuple2('rotimes', '⨵'),
			_Utils_Tuple2('RoundImplies', '⥰'),
			_Utils_Tuple2('rpar', ')'),
			_Utils_Tuple2('rpargt', '⦔'),
			_Utils_Tuple2('rppolint', '⨒'),
			_Utils_Tuple2('rrarr', '⇉'),
			_Utils_Tuple2('Rrightarrow', '⇛'),
			_Utils_Tuple2('rsaquo', '›'),
			_Utils_Tuple2('rscr', '\uD835\uDCC7'),
			_Utils_Tuple2('Rscr', 'ℛ'),
			_Utils_Tuple2('rsh', '↱'),
			_Utils_Tuple2('Rsh', '↱'),
			_Utils_Tuple2('rsqb', ']'),
			_Utils_Tuple2('rsquo', '’'),
			_Utils_Tuple2('rsquor', '’'),
			_Utils_Tuple2('rthree', '⋌'),
			_Utils_Tuple2('rtimes', '⋊'),
			_Utils_Tuple2('rtri', '▹'),
			_Utils_Tuple2('rtrie', '⊵'),
			_Utils_Tuple2('rtrif', '▸'),
			_Utils_Tuple2('rtriltri', '⧎'),
			_Utils_Tuple2('RuleDelayed', '⧴'),
			_Utils_Tuple2('ruluhar', '⥨'),
			_Utils_Tuple2('rx', '℞'),
			_Utils_Tuple2('Sacute', 'Ś'),
			_Utils_Tuple2('sacute', 'ś'),
			_Utils_Tuple2('sbquo', '‚'),
			_Utils_Tuple2('scap', '⪸'),
			_Utils_Tuple2('Scaron', 'Š'),
			_Utils_Tuple2('scaron', 'š'),
			_Utils_Tuple2('Sc', '⪼'),
			_Utils_Tuple2('sc', '≻'),
			_Utils_Tuple2('sccue', '≽'),
			_Utils_Tuple2('sce', '⪰'),
			_Utils_Tuple2('scE', '⪴'),
			_Utils_Tuple2('Scedil', 'Ş'),
			_Utils_Tuple2('scedil', 'ş'),
			_Utils_Tuple2('Scirc', 'Ŝ'),
			_Utils_Tuple2('scirc', 'ŝ'),
			_Utils_Tuple2('scnap', '⪺'),
			_Utils_Tuple2('scnE', '⪶'),
			_Utils_Tuple2('scnsim', '⋩'),
			_Utils_Tuple2('scpolint', '⨓'),
			_Utils_Tuple2('scsim', '≿'),
			_Utils_Tuple2('Scy', 'С'),
			_Utils_Tuple2('scy', 'с'),
			_Utils_Tuple2('sdotb', '⊡'),
			_Utils_Tuple2('sdot', '⋅'),
			_Utils_Tuple2('sdote', '⩦'),
			_Utils_Tuple2('searhk', '⤥'),
			_Utils_Tuple2('searr', '↘'),
			_Utils_Tuple2('seArr', '⇘'),
			_Utils_Tuple2('searrow', '↘'),
			_Utils_Tuple2('sect', '§'),
			_Utils_Tuple2('semi', ';'),
			_Utils_Tuple2('seswar', '⤩'),
			_Utils_Tuple2('setminus', '∖'),
			_Utils_Tuple2('setmn', '∖'),
			_Utils_Tuple2('sext', '✶'),
			_Utils_Tuple2('Sfr', '\uD835\uDD16'),
			_Utils_Tuple2('sfr', '\uD835\uDD30'),
			_Utils_Tuple2('sfrown', '⌢'),
			_Utils_Tuple2('sharp', '♯'),
			_Utils_Tuple2('SHCHcy', 'Щ'),
			_Utils_Tuple2('shchcy', 'щ'),
			_Utils_Tuple2('SHcy', 'Ш'),
			_Utils_Tuple2('shcy', 'ш'),
			_Utils_Tuple2('ShortDownArrow', '↓'),
			_Utils_Tuple2('ShortLeftArrow', '←'),
			_Utils_Tuple2('shortmid', '∣'),
			_Utils_Tuple2('shortparallel', '∥'),
			_Utils_Tuple2('ShortRightArrow', '→'),
			_Utils_Tuple2('ShortUpArrow', '↑'),
			_Utils_Tuple2('shy', '\u00AD'),
			_Utils_Tuple2('Sigma', 'Σ'),
			_Utils_Tuple2('sigma', 'σ'),
			_Utils_Tuple2('sigmaf', 'ς'),
			_Utils_Tuple2('sigmav', 'ς'),
			_Utils_Tuple2('sim', '∼'),
			_Utils_Tuple2('simdot', '⩪'),
			_Utils_Tuple2('sime', '≃'),
			_Utils_Tuple2('simeq', '≃'),
			_Utils_Tuple2('simg', '⪞'),
			_Utils_Tuple2('simgE', '⪠'),
			_Utils_Tuple2('siml', '⪝'),
			_Utils_Tuple2('simlE', '⪟'),
			_Utils_Tuple2('simne', '≆'),
			_Utils_Tuple2('simplus', '⨤'),
			_Utils_Tuple2('simrarr', '⥲'),
			_Utils_Tuple2('slarr', '←'),
			_Utils_Tuple2('SmallCircle', '∘'),
			_Utils_Tuple2('smallsetminus', '∖'),
			_Utils_Tuple2('smashp', '⨳'),
			_Utils_Tuple2('smeparsl', '⧤'),
			_Utils_Tuple2('smid', '∣'),
			_Utils_Tuple2('smile', '⌣'),
			_Utils_Tuple2('smt', '⪪'),
			_Utils_Tuple2('smte', '⪬'),
			_Utils_Tuple2('smtes', '⪬︀'),
			_Utils_Tuple2('SOFTcy', 'Ь'),
			_Utils_Tuple2('softcy', 'ь'),
			_Utils_Tuple2('solbar', '⌿'),
			_Utils_Tuple2('solb', '⧄'),
			_Utils_Tuple2('sol', '/'),
			_Utils_Tuple2('Sopf', '\uD835\uDD4A'),
			_Utils_Tuple2('sopf', '\uD835\uDD64'),
			_Utils_Tuple2('spades', '♠'),
			_Utils_Tuple2('spadesuit', '♠'),
			_Utils_Tuple2('spar', '∥'),
			_Utils_Tuple2('sqcap', '⊓'),
			_Utils_Tuple2('sqcaps', '⊓︀'),
			_Utils_Tuple2('sqcup', '⊔'),
			_Utils_Tuple2('sqcups', '⊔︀'),
			_Utils_Tuple2('Sqrt', '√'),
			_Utils_Tuple2('sqsub', '⊏'),
			_Utils_Tuple2('sqsube', '⊑'),
			_Utils_Tuple2('sqsubset', '⊏'),
			_Utils_Tuple2('sqsubseteq', '⊑'),
			_Utils_Tuple2('sqsup', '⊐'),
			_Utils_Tuple2('sqsupe', '⊒'),
			_Utils_Tuple2('sqsupset', '⊐'),
			_Utils_Tuple2('sqsupseteq', '⊒'),
			_Utils_Tuple2('square', '□'),
			_Utils_Tuple2('Square', '□'),
			_Utils_Tuple2('SquareIntersection', '⊓'),
			_Utils_Tuple2('SquareSubset', '⊏'),
			_Utils_Tuple2('SquareSubsetEqual', '⊑'),
			_Utils_Tuple2('SquareSuperset', '⊐'),
			_Utils_Tuple2('SquareSupersetEqual', '⊒'),
			_Utils_Tuple2('SquareUnion', '⊔'),
			_Utils_Tuple2('squarf', '▪'),
			_Utils_Tuple2('squ', '□'),
			_Utils_Tuple2('squf', '▪'),
			_Utils_Tuple2('srarr', '→'),
			_Utils_Tuple2('Sscr', '\uD835\uDCAE'),
			_Utils_Tuple2('sscr', '\uD835\uDCC8'),
			_Utils_Tuple2('ssetmn', '∖'),
			_Utils_Tuple2('ssmile', '⌣'),
			_Utils_Tuple2('sstarf', '⋆'),
			_Utils_Tuple2('Star', '⋆'),
			_Utils_Tuple2('star', '☆'),
			_Utils_Tuple2('starf', '★'),
			_Utils_Tuple2('straightepsilon', 'ϵ'),
			_Utils_Tuple2('straightphi', 'ϕ'),
			_Utils_Tuple2('strns', '¯'),
			_Utils_Tuple2('sub', '⊂'),
			_Utils_Tuple2('Sub', '⋐'),
			_Utils_Tuple2('subdot', '⪽'),
			_Utils_Tuple2('subE', '⫅'),
			_Utils_Tuple2('sube', '⊆'),
			_Utils_Tuple2('subedot', '⫃'),
			_Utils_Tuple2('submult', '⫁'),
			_Utils_Tuple2('subnE', '⫋'),
			_Utils_Tuple2('subne', '⊊'),
			_Utils_Tuple2('subplus', '⪿'),
			_Utils_Tuple2('subrarr', '⥹'),
			_Utils_Tuple2('subset', '⊂'),
			_Utils_Tuple2('Subset', '⋐'),
			_Utils_Tuple2('subseteq', '⊆'),
			_Utils_Tuple2('subseteqq', '⫅'),
			_Utils_Tuple2('SubsetEqual', '⊆'),
			_Utils_Tuple2('subsetneq', '⊊'),
			_Utils_Tuple2('subsetneqq', '⫋'),
			_Utils_Tuple2('subsim', '⫇'),
			_Utils_Tuple2('subsub', '⫕'),
			_Utils_Tuple2('subsup', '⫓'),
			_Utils_Tuple2('succapprox', '⪸'),
			_Utils_Tuple2('succ', '≻'),
			_Utils_Tuple2('succcurlyeq', '≽'),
			_Utils_Tuple2('Succeeds', '≻'),
			_Utils_Tuple2('SucceedsEqual', '⪰'),
			_Utils_Tuple2('SucceedsSlantEqual', '≽'),
			_Utils_Tuple2('SucceedsTilde', '≿'),
			_Utils_Tuple2('succeq', '⪰'),
			_Utils_Tuple2('succnapprox', '⪺'),
			_Utils_Tuple2('succneqq', '⪶'),
			_Utils_Tuple2('succnsim', '⋩'),
			_Utils_Tuple2('succsim', '≿'),
			_Utils_Tuple2('SuchThat', '∋'),
			_Utils_Tuple2('sum', '∑'),
			_Utils_Tuple2('Sum', '∑'),
			_Utils_Tuple2('sung', '♪'),
			_Utils_Tuple2('sup1', '¹'),
			_Utils_Tuple2('sup2', '²'),
			_Utils_Tuple2('sup3', '³'),
			_Utils_Tuple2('sup', '⊃'),
			_Utils_Tuple2('Sup', '⋑'),
			_Utils_Tuple2('supdot', '⪾'),
			_Utils_Tuple2('supdsub', '⫘'),
			_Utils_Tuple2('supE', '⫆'),
			_Utils_Tuple2('supe', '⊇'),
			_Utils_Tuple2('supedot', '⫄'),
			_Utils_Tuple2('Superset', '⊃'),
			_Utils_Tuple2('SupersetEqual', '⊇'),
			_Utils_Tuple2('suphsol', '⟉'),
			_Utils_Tuple2('suphsub', '⫗'),
			_Utils_Tuple2('suplarr', '⥻'),
			_Utils_Tuple2('supmult', '⫂'),
			_Utils_Tuple2('supnE', '⫌'),
			_Utils_Tuple2('supne', '⊋'),
			_Utils_Tuple2('supplus', '⫀'),
			_Utils_Tuple2('supset', '⊃'),
			_Utils_Tuple2('Supset', '⋑'),
			_Utils_Tuple2('supseteq', '⊇'),
			_Utils_Tuple2('supseteqq', '⫆'),
			_Utils_Tuple2('supsetneq', '⊋'),
			_Utils_Tuple2('supsetneqq', '⫌'),
			_Utils_Tuple2('supsim', '⫈'),
			_Utils_Tuple2('supsub', '⫔'),
			_Utils_Tuple2('supsup', '⫖'),
			_Utils_Tuple2('swarhk', '⤦'),
			_Utils_Tuple2('swarr', '↙'),
			_Utils_Tuple2('swArr', '⇙'),
			_Utils_Tuple2('swarrow', '↙'),
			_Utils_Tuple2('swnwar', '⤪'),
			_Utils_Tuple2('szlig', 'ß'),
			_Utils_Tuple2('Tab', '\t'),
			_Utils_Tuple2('target', '⌖'),
			_Utils_Tuple2('Tau', 'Τ'),
			_Utils_Tuple2('tau', 'τ'),
			_Utils_Tuple2('tbrk', '⎴'),
			_Utils_Tuple2('Tcaron', 'Ť'),
			_Utils_Tuple2('tcaron', 'ť'),
			_Utils_Tuple2('Tcedil', 'Ţ'),
			_Utils_Tuple2('tcedil', 'ţ'),
			_Utils_Tuple2('Tcy', 'Т'),
			_Utils_Tuple2('tcy', 'т'),
			_Utils_Tuple2('tdot', '⃛'),
			_Utils_Tuple2('telrec', '⌕'),
			_Utils_Tuple2('Tfr', '\uD835\uDD17'),
			_Utils_Tuple2('tfr', '\uD835\uDD31'),
			_Utils_Tuple2('there4', '∴'),
			_Utils_Tuple2('therefore', '∴'),
			_Utils_Tuple2('Therefore', '∴'),
			_Utils_Tuple2('Theta', 'Θ'),
			_Utils_Tuple2('theta', 'θ'),
			_Utils_Tuple2('thetasym', 'ϑ'),
			_Utils_Tuple2('thetav', 'ϑ'),
			_Utils_Tuple2('thickapprox', '≈'),
			_Utils_Tuple2('thicksim', '∼'),
			_Utils_Tuple2('ThickSpace', '\u205F\u200A'),
			_Utils_Tuple2('ThinSpace', '\u2009'),
			_Utils_Tuple2('thinsp', '\u2009'),
			_Utils_Tuple2('thkap', '≈'),
			_Utils_Tuple2('thksim', '∼'),
			_Utils_Tuple2('THORN', 'Þ'),
			_Utils_Tuple2('thorn', 'þ'),
			_Utils_Tuple2('tilde', '˜'),
			_Utils_Tuple2('Tilde', '∼'),
			_Utils_Tuple2('TildeEqual', '≃'),
			_Utils_Tuple2('TildeFullEqual', '≅'),
			_Utils_Tuple2('TildeTilde', '≈'),
			_Utils_Tuple2('timesbar', '⨱'),
			_Utils_Tuple2('timesb', '⊠'),
			_Utils_Tuple2('times', '×'),
			_Utils_Tuple2('timesd', '⨰'),
			_Utils_Tuple2('tint', '∭'),
			_Utils_Tuple2('toea', '⤨'),
			_Utils_Tuple2('topbot', '⌶'),
			_Utils_Tuple2('topcir', '⫱'),
			_Utils_Tuple2('top', '⊤'),
			_Utils_Tuple2('Topf', '\uD835\uDD4B'),
			_Utils_Tuple2('topf', '\uD835\uDD65'),
			_Utils_Tuple2('topfork', '⫚'),
			_Utils_Tuple2('tosa', '⤩'),
			_Utils_Tuple2('tprime', '‴'),
			_Utils_Tuple2('trade', '™'),
			_Utils_Tuple2('TRADE', '™'),
			_Utils_Tuple2('triangle', '▵'),
			_Utils_Tuple2('triangledown', '▿'),
			_Utils_Tuple2('triangleleft', '◃'),
			_Utils_Tuple2('trianglelefteq', '⊴'),
			_Utils_Tuple2('triangleq', '≜'),
			_Utils_Tuple2('triangleright', '▹'),
			_Utils_Tuple2('trianglerighteq', '⊵'),
			_Utils_Tuple2('tridot', '◬'),
			_Utils_Tuple2('trie', '≜'),
			_Utils_Tuple2('triminus', '⨺'),
			_Utils_Tuple2('TripleDot', '⃛'),
			_Utils_Tuple2('triplus', '⨹'),
			_Utils_Tuple2('trisb', '⧍'),
			_Utils_Tuple2('tritime', '⨻'),
			_Utils_Tuple2('trpezium', '⏢'),
			_Utils_Tuple2('Tscr', '\uD835\uDCAF'),
			_Utils_Tuple2('tscr', '\uD835\uDCC9'),
			_Utils_Tuple2('TScy', 'Ц'),
			_Utils_Tuple2('tscy', 'ц'),
			_Utils_Tuple2('TSHcy', 'Ћ'),
			_Utils_Tuple2('tshcy', 'ћ'),
			_Utils_Tuple2('Tstrok', 'Ŧ'),
			_Utils_Tuple2('tstrok', 'ŧ'),
			_Utils_Tuple2('twixt', '≬'),
			_Utils_Tuple2('twoheadleftarrow', '↞'),
			_Utils_Tuple2('twoheadrightarrow', '↠'),
			_Utils_Tuple2('Uacute', 'Ú'),
			_Utils_Tuple2('uacute', 'ú'),
			_Utils_Tuple2('uarr', '↑'),
			_Utils_Tuple2('Uarr', '↟'),
			_Utils_Tuple2('uArr', '⇑'),
			_Utils_Tuple2('Uarrocir', '⥉'),
			_Utils_Tuple2('Ubrcy', 'Ў'),
			_Utils_Tuple2('ubrcy', 'ў'),
			_Utils_Tuple2('Ubreve', 'Ŭ'),
			_Utils_Tuple2('ubreve', 'ŭ'),
			_Utils_Tuple2('Ucirc', 'Û'),
			_Utils_Tuple2('ucirc', 'û'),
			_Utils_Tuple2('Ucy', 'У'),
			_Utils_Tuple2('ucy', 'у'),
			_Utils_Tuple2('udarr', '⇅'),
			_Utils_Tuple2('Udblac', 'Ű'),
			_Utils_Tuple2('udblac', 'ű'),
			_Utils_Tuple2('udhar', '⥮'),
			_Utils_Tuple2('ufisht', '⥾'),
			_Utils_Tuple2('Ufr', '\uD835\uDD18'),
			_Utils_Tuple2('ufr', '\uD835\uDD32'),
			_Utils_Tuple2('Ugrave', 'Ù'),
			_Utils_Tuple2('ugrave', 'ù'),
			_Utils_Tuple2('uHar', '⥣'),
			_Utils_Tuple2('uharl', '↿'),
			_Utils_Tuple2('uharr', '↾'),
			_Utils_Tuple2('uhblk', '▀'),
			_Utils_Tuple2('ulcorn', '⌜'),
			_Utils_Tuple2('ulcorner', '⌜'),
			_Utils_Tuple2('ulcrop', '⌏'),
			_Utils_Tuple2('ultri', '◸'),
			_Utils_Tuple2('Umacr', 'Ū'),
			_Utils_Tuple2('umacr', 'ū'),
			_Utils_Tuple2('uml', '¨'),
			_Utils_Tuple2('UnderBar', '_'),
			_Utils_Tuple2('UnderBrace', '⏟'),
			_Utils_Tuple2('UnderBracket', '⎵'),
			_Utils_Tuple2('UnderParenthesis', '⏝'),
			_Utils_Tuple2('Union', '⋃'),
			_Utils_Tuple2('UnionPlus', '⊎'),
			_Utils_Tuple2('Uogon', 'Ų'),
			_Utils_Tuple2('uogon', 'ų'),
			_Utils_Tuple2('Uopf', '\uD835\uDD4C'),
			_Utils_Tuple2('uopf', '\uD835\uDD66'),
			_Utils_Tuple2('UpArrowBar', '⤒'),
			_Utils_Tuple2('uparrow', '↑'),
			_Utils_Tuple2('UpArrow', '↑'),
			_Utils_Tuple2('Uparrow', '⇑'),
			_Utils_Tuple2('UpArrowDownArrow', '⇅'),
			_Utils_Tuple2('updownarrow', '↕'),
			_Utils_Tuple2('UpDownArrow', '↕'),
			_Utils_Tuple2('Updownarrow', '⇕'),
			_Utils_Tuple2('UpEquilibrium', '⥮'),
			_Utils_Tuple2('upharpoonleft', '↿'),
			_Utils_Tuple2('upharpoonright', '↾'),
			_Utils_Tuple2('uplus', '⊎'),
			_Utils_Tuple2('UpperLeftArrow', '↖'),
			_Utils_Tuple2('UpperRightArrow', '↗'),
			_Utils_Tuple2('upsi', 'υ'),
			_Utils_Tuple2('Upsi', 'ϒ'),
			_Utils_Tuple2('upsih', 'ϒ'),
			_Utils_Tuple2('Upsilon', 'Υ'),
			_Utils_Tuple2('upsilon', 'υ'),
			_Utils_Tuple2('UpTeeArrow', '↥'),
			_Utils_Tuple2('UpTee', '⊥'),
			_Utils_Tuple2('upuparrows', '⇈'),
			_Utils_Tuple2('urcorn', '⌝'),
			_Utils_Tuple2('urcorner', '⌝'),
			_Utils_Tuple2('urcrop', '⌎'),
			_Utils_Tuple2('Uring', 'Ů'),
			_Utils_Tuple2('uring', 'ů'),
			_Utils_Tuple2('urtri', '◹'),
			_Utils_Tuple2('Uscr', '\uD835\uDCB0'),
			_Utils_Tuple2('uscr', '\uD835\uDCCA'),
			_Utils_Tuple2('utdot', '⋰'),
			_Utils_Tuple2('Utilde', 'Ũ'),
			_Utils_Tuple2('utilde', 'ũ'),
			_Utils_Tuple2('utri', '▵'),
			_Utils_Tuple2('utrif', '▴'),
			_Utils_Tuple2('uuarr', '⇈'),
			_Utils_Tuple2('Uuml', 'Ü'),
			_Utils_Tuple2('uuml', 'ü'),
			_Utils_Tuple2('uwangle', '⦧'),
			_Utils_Tuple2('vangrt', '⦜'),
			_Utils_Tuple2('varepsilon', 'ϵ'),
			_Utils_Tuple2('varkappa', 'ϰ'),
			_Utils_Tuple2('varnothing', '∅'),
			_Utils_Tuple2('varphi', 'ϕ'),
			_Utils_Tuple2('varpi', 'ϖ'),
			_Utils_Tuple2('varpropto', '∝'),
			_Utils_Tuple2('varr', '↕'),
			_Utils_Tuple2('vArr', '⇕'),
			_Utils_Tuple2('varrho', 'ϱ'),
			_Utils_Tuple2('varsigma', 'ς'),
			_Utils_Tuple2('varsubsetneq', '⊊︀'),
			_Utils_Tuple2('varsubsetneqq', '⫋︀'),
			_Utils_Tuple2('varsupsetneq', '⊋︀'),
			_Utils_Tuple2('varsupsetneqq', '⫌︀'),
			_Utils_Tuple2('vartheta', 'ϑ'),
			_Utils_Tuple2('vartriangleleft', '⊲'),
			_Utils_Tuple2('vartriangleright', '⊳'),
			_Utils_Tuple2('vBar', '⫨'),
			_Utils_Tuple2('Vbar', '⫫'),
			_Utils_Tuple2('vBarv', '⫩'),
			_Utils_Tuple2('Vcy', 'В'),
			_Utils_Tuple2('vcy', 'в'),
			_Utils_Tuple2('vdash', '⊢'),
			_Utils_Tuple2('vDash', '⊨'),
			_Utils_Tuple2('Vdash', '⊩'),
			_Utils_Tuple2('VDash', '⊫'),
			_Utils_Tuple2('Vdashl', '⫦'),
			_Utils_Tuple2('veebar', '⊻'),
			_Utils_Tuple2('vee', '∨'),
			_Utils_Tuple2('Vee', '⋁'),
			_Utils_Tuple2('veeeq', '≚'),
			_Utils_Tuple2('vellip', '⋮'),
			_Utils_Tuple2('verbar', '|'),
			_Utils_Tuple2('Verbar', '‖'),
			_Utils_Tuple2('vert', '|'),
			_Utils_Tuple2('Vert', '‖'),
			_Utils_Tuple2('VerticalBar', '∣'),
			_Utils_Tuple2('VerticalLine', '|'),
			_Utils_Tuple2('VerticalSeparator', '❘'),
			_Utils_Tuple2('VerticalTilde', '≀'),
			_Utils_Tuple2('VeryThinSpace', '\u200A'),
			_Utils_Tuple2('Vfr', '\uD835\uDD19'),
			_Utils_Tuple2('vfr', '\uD835\uDD33'),
			_Utils_Tuple2('vltri', '⊲'),
			_Utils_Tuple2('vnsub', '⊂⃒'),
			_Utils_Tuple2('vnsup', '⊃⃒'),
			_Utils_Tuple2('Vopf', '\uD835\uDD4D'),
			_Utils_Tuple2('vopf', '\uD835\uDD67'),
			_Utils_Tuple2('vprop', '∝'),
			_Utils_Tuple2('vrtri', '⊳'),
			_Utils_Tuple2('Vscr', '\uD835\uDCB1'),
			_Utils_Tuple2('vscr', '\uD835\uDCCB'),
			_Utils_Tuple2('vsubnE', '⫋︀'),
			_Utils_Tuple2('vsubne', '⊊︀'),
			_Utils_Tuple2('vsupnE', '⫌︀'),
			_Utils_Tuple2('vsupne', '⊋︀'),
			_Utils_Tuple2('Vvdash', '⊪'),
			_Utils_Tuple2('vzigzag', '⦚'),
			_Utils_Tuple2('Wcirc', 'Ŵ'),
			_Utils_Tuple2('wcirc', 'ŵ'),
			_Utils_Tuple2('wedbar', '⩟'),
			_Utils_Tuple2('wedge', '∧'),
			_Utils_Tuple2('Wedge', '⋀'),
			_Utils_Tuple2('wedgeq', '≙'),
			_Utils_Tuple2('weierp', '℘'),
			_Utils_Tuple2('Wfr', '\uD835\uDD1A'),
			_Utils_Tuple2('wfr', '\uD835\uDD34'),
			_Utils_Tuple2('Wopf', '\uD835\uDD4E'),
			_Utils_Tuple2('wopf', '\uD835\uDD68'),
			_Utils_Tuple2('wp', '℘'),
			_Utils_Tuple2('wr', '≀'),
			_Utils_Tuple2('wreath', '≀'),
			_Utils_Tuple2('Wscr', '\uD835\uDCB2'),
			_Utils_Tuple2('wscr', '\uD835\uDCCC'),
			_Utils_Tuple2('xcap', '⋂'),
			_Utils_Tuple2('xcirc', '◯'),
			_Utils_Tuple2('xcup', '⋃'),
			_Utils_Tuple2('xdtri', '▽'),
			_Utils_Tuple2('Xfr', '\uD835\uDD1B'),
			_Utils_Tuple2('xfr', '\uD835\uDD35'),
			_Utils_Tuple2('xharr', '⟷'),
			_Utils_Tuple2('xhArr', '⟺'),
			_Utils_Tuple2('Xi', 'Ξ'),
			_Utils_Tuple2('xi', 'ξ'),
			_Utils_Tuple2('xlarr', '⟵'),
			_Utils_Tuple2('xlArr', '⟸'),
			_Utils_Tuple2('xmap', '⟼'),
			_Utils_Tuple2('xnis', '⋻'),
			_Utils_Tuple2('xodot', '⨀'),
			_Utils_Tuple2('Xopf', '\uD835\uDD4F'),
			_Utils_Tuple2('xopf', '\uD835\uDD69'),
			_Utils_Tuple2('xoplus', '⨁'),
			_Utils_Tuple2('xotime', '⨂'),
			_Utils_Tuple2('xrarr', '⟶'),
			_Utils_Tuple2('xrArr', '⟹'),
			_Utils_Tuple2('Xscr', '\uD835\uDCB3'),
			_Utils_Tuple2('xscr', '\uD835\uDCCD'),
			_Utils_Tuple2('xsqcup', '⨆'),
			_Utils_Tuple2('xuplus', '⨄'),
			_Utils_Tuple2('xutri', '△'),
			_Utils_Tuple2('xvee', '⋁'),
			_Utils_Tuple2('xwedge', '⋀'),
			_Utils_Tuple2('Yacute', 'Ý'),
			_Utils_Tuple2('yacute', 'ý'),
			_Utils_Tuple2('YAcy', 'Я'),
			_Utils_Tuple2('yacy', 'я'),
			_Utils_Tuple2('Ycirc', 'Ŷ'),
			_Utils_Tuple2('ycirc', 'ŷ'),
			_Utils_Tuple2('Ycy', 'Ы'),
			_Utils_Tuple2('ycy', 'ы'),
			_Utils_Tuple2('yen', '¥'),
			_Utils_Tuple2('Yfr', '\uD835\uDD1C'),
			_Utils_Tuple2('yfr', '\uD835\uDD36'),
			_Utils_Tuple2('YIcy', 'Ї'),
			_Utils_Tuple2('yicy', 'ї'),
			_Utils_Tuple2('Yopf', '\uD835\uDD50'),
			_Utils_Tuple2('yopf', '\uD835\uDD6A'),
			_Utils_Tuple2('Yscr', '\uD835\uDCB4'),
			_Utils_Tuple2('yscr', '\uD835\uDCCE'),
			_Utils_Tuple2('YUcy', 'Ю'),
			_Utils_Tuple2('yucy', 'ю'),
			_Utils_Tuple2('yuml', 'ÿ'),
			_Utils_Tuple2('Yuml', 'Ÿ'),
			_Utils_Tuple2('Zacute', 'Ź'),
			_Utils_Tuple2('zacute', 'ź'),
			_Utils_Tuple2('Zcaron', 'Ž'),
			_Utils_Tuple2('zcaron', 'ž'),
			_Utils_Tuple2('Zcy', 'З'),
			_Utils_Tuple2('zcy', 'з'),
			_Utils_Tuple2('Zdot', 'Ż'),
			_Utils_Tuple2('zdot', 'ż'),
			_Utils_Tuple2('zeetrf', 'ℨ'),
			_Utils_Tuple2('ZeroWidthSpace', '\u200B'),
			_Utils_Tuple2('Zeta', 'Ζ'),
			_Utils_Tuple2('zeta', 'ζ'),
			_Utils_Tuple2('zfr', '\uD835\uDD37'),
			_Utils_Tuple2('Zfr', 'ℨ'),
			_Utils_Tuple2('ZHcy', 'Ж'),
			_Utils_Tuple2('zhcy', 'ж'),
			_Utils_Tuple2('zigrarr', '⇝'),
			_Utils_Tuple2('zopf', '\uD835\uDD6B'),
			_Utils_Tuple2('Zopf', 'ℤ'),
			_Utils_Tuple2('Zscr', '\uD835\uDCB5'),
			_Utils_Tuple2('zscr', '\uD835\uDCCF'),
			_Utils_Tuple2('zwj', '\u200D'),
			_Utils_Tuple2('zwnj', '\u200C')
		]));
var $hecrj$html_parser$Html$Parser$namedCharacterReference = A2(
	$elm$parser$Parser$map,
	function (reference) {
		return A2(
			$elm$core$Maybe$withDefault,
			'&' + (reference + ';'),
			A2($elm$core$Dict$get, reference, $hecrj$html_parser$Html$Parser$NamedCharacterReferences$dict));
	},
	$elm$parser$Parser$getChompedString(
		$hecrj$html_parser$Html$Parser$chompOneOrMore($elm$core$Char$isAlpha)));
var $elm$core$Char$isHexDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $hecrj$html_parser$Html$Parser$hexadecimal = A2(
	$elm$parser$Parser$andThen,
	function (hex) {
		var _v0 = $rtfeldman$elm_hex$Hex$fromString(
			$elm$core$String$toLower(hex));
		if (_v0.$ === 'Ok') {
			var value = _v0.a;
			return $elm$parser$Parser$succeed(value);
		} else {
			var error = _v0.a;
			return $elm$parser$Parser$problem(error);
		}
	},
	$elm$parser$Parser$getChompedString(
		$hecrj$html_parser$Html$Parser$chompOneOrMore($elm$core$Char$isHexDigit)));
var $elm$parser$Parser$ExpectingInt = {$: 'ExpectingInt'};
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {col: s.col + (newOffset - s.offset), context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 'Err') {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.offset, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.src);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.row, s.col - (floatOffset + s.offset), invalid, s.context));
		} else {
			if (_Utils_eq(s.offset, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.offset, intPair, s);
				} else {
					if (floatSettings.$ === 'Err') {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.offset, floatOffset, s.src));
						if (_v1.$ === 'Nothing') {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.offset, s.src)) {
				var zeroOffset = s.offset + 1;
				var baseOffset = zeroOffset + 1;
				return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.hex,
					baseOffset,
					A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.octal,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.binary,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.src),
					s) : A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					_Utils_Tuple2(zeroOffset, 0),
					s)));
			} else {
				return A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					A3($elm$parser$Parser$Advanced$consumeBase, 10, s.offset, s.src),
					s);
			}
		});
};
var $elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				binary: $elm$core$Result$Err(invalid),
				expecting: expecting,
				_float: $elm$core$Result$Err(invalid),
				hex: $elm$core$Result$Err(invalid),
				_int: $elm$core$Result$Ok($elm$core$Basics$identity),
				invalid: invalid,
				octal: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$int = A2($elm$parser$Parser$Advanced$int, $elm$parser$Parser$ExpectingInt, $elm$parser$Parser$ExpectingInt);
var $hecrj$html_parser$Html$Parser$numericCharacterReference = function () {
	var codepoint = $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompIf(
						function (c) {
							return _Utils_eq(
								c,
								_Utils_chr('x')) || _Utils_eq(
								c,
								_Utils_chr('X'));
						})),
				$hecrj$html_parser$Html$Parser$hexadecimal),
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompWhile(
						$elm$core$Basics$eq(
							_Utils_chr('0')))),
				$elm$parser$Parser$int)
			]));
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(
					_Utils_chr('#')))),
		A2(
			$elm$parser$Parser$map,
			A2($elm$core$Basics$composeR, $elm$core$Char$fromCode, $elm$core$String$fromChar),
			codepoint));
}();
var $hecrj$html_parser$Html$Parser$characterReference = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$chompIf(
			$elm$core$Basics$eq(
				_Utils_chr('&')))),
	$elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$backtrackable($hecrj$html_parser$Html$Parser$namedCharacterReference),
				$hecrj$html_parser$Html$Parser$chompSemicolon),
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$backtrackable($hecrj$html_parser$Html$Parser$numericCharacterReference),
				$hecrj$html_parser$Html$Parser$chompSemicolon),
				$elm$parser$Parser$succeed('&')
			])));
var $hecrj$html_parser$Html$Parser$tagAttributeQuotedValue = function (quote) {
	var isQuotedValueChar = function (c) {
		return (!_Utils_eq(c, quote)) && (!_Utils_eq(
			c,
			_Utils_chr('&')));
	};
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(quote))),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$map,
				$elm$core$String$join(''),
				$hecrj$html_parser$Html$Parser$many(
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$getChompedString(
								$hecrj$html_parser$Html$Parser$chompOneOrMore(isQuotedValueChar)),
								$hecrj$html_parser$Html$Parser$characterReference
							])))),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(quote))));
};
var $hecrj$html_parser$Html$Parser$oneOrMore = F2(
	function (type_, parser_) {
		return A2(
			$elm$parser$Parser$loop,
			_List_Nil,
			function (list) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (_new) {
								return $elm$parser$Parser$Loop(
									A2($elm$core$List$cons, _new, list));
							},
							parser_),
							$elm$core$List$isEmpty(list) ? $elm$parser$Parser$problem('expecting at least one ' + type_) : $elm$parser$Parser$succeed(
							$elm$parser$Parser$Done(
								$elm$core$List$reverse(list)))
						]));
			});
	});
var $hecrj$html_parser$Html$Parser$tagAttributeUnquotedValue = function () {
	var isUnquotedValueChar = function (c) {
		return (!$hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && ((!_Utils_eq(
			c,
			_Utils_chr('\"'))) && ((!_Utils_eq(
			c,
			_Utils_chr('\''))) && ((!_Utils_eq(
			c,
			_Utils_chr('='))) && ((!_Utils_eq(
			c,
			_Utils_chr('<'))) && ((!_Utils_eq(
			c,
			_Utils_chr('>'))) && ((!_Utils_eq(
			c,
			_Utils_chr('`'))) && (!_Utils_eq(
			c,
			_Utils_chr('&')))))))));
	};
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$join(''),
		A2(
			$hecrj$html_parser$Html$Parser$oneOrMore,
			'attribute value',
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$getChompedString(
						$hecrj$html_parser$Html$Parser$chompOneOrMore(isUnquotedValueChar)),
						$hecrj$html_parser$Html$Parser$characterReference
					]))));
}();
var $hecrj$html_parser$Html$Parser$tagAttributeValue = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('=')))),
				$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$hecrj$html_parser$Html$Parser$tagAttributeUnquotedValue,
						$hecrj$html_parser$Html$Parser$tagAttributeQuotedValue(
						_Utils_chr('\"')),
						$hecrj$html_parser$Html$Parser$tagAttributeQuotedValue(
						_Utils_chr('\''))
					]))),
			$elm$parser$Parser$succeed('')
		]));
var $hecrj$html_parser$Html$Parser$tagAttribute = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Tuple$pair),
		A2(
			$elm$parser$Parser$ignorer,
			$hecrj$html_parser$Html$Parser$tagAttributeName,
			$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter))),
	A2(
		$elm$parser$Parser$ignorer,
		$hecrj$html_parser$Html$Parser$tagAttributeValue,
		$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter)));
var $hecrj$html_parser$Html$Parser$tagAttributes = $hecrj$html_parser$Html$Parser$many($hecrj$html_parser$Html$Parser$tagAttribute);
var $hecrj$html_parser$Html$Parser$tagName = A2(
	$elm$parser$Parser$map,
	$elm$core$String$toLower,
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$chompIf($elm$core$Char$isAlphaNum),
			$elm$parser$Parser$chompWhile(
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('-'));
				}))));
var $hecrj$html_parser$Html$Parser$Text = function (a) {
	return {$: 'Text', a: a};
};
var $hecrj$html_parser$Html$Parser$text = A2(
	$elm$parser$Parser$map,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$String$join(''),
		$hecrj$html_parser$Html$Parser$Text),
	A2(
		$hecrj$html_parser$Html$Parser$oneOrMore,
		'text element',
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$getChompedString(
					$hecrj$html_parser$Html$Parser$chompOneOrMore(
						function (c) {
							return (!_Utils_eq(
								c,
								_Utils_chr('<'))) && (!_Utils_eq(
								c,
								_Utils_chr('&')));
						})),
					$hecrj$html_parser$Html$Parser$characterReference
				]))));
function $hecrj$html_parser$Html$Parser$cyclic$node() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$hecrj$html_parser$Html$Parser$text,
				$hecrj$html_parser$Html$Parser$comment,
				$hecrj$html_parser$Html$Parser$cyclic$element()
			]));
}
function $hecrj$html_parser$Html$Parser$cyclic$element() {
	return A2(
		$elm$parser$Parser$andThen,
		function (_v0) {
			var name = _v0.a;
			var attributes = _v0.b;
			return $hecrj$html_parser$Html$Parser$isVoidElement(name) ? A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A3($hecrj$html_parser$Html$Parser$Element, name, attributes, _List_Nil)),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$chompIf(
								$elm$core$Basics$eq(
									_Utils_chr('/'))),
								$elm$parser$Parser$succeed(_Utils_Tuple0)
							]))),
				$elm$parser$Parser$chompIf(
					$elm$core$Basics$eq(
						_Utils_chr('>')))) : A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2($hecrj$html_parser$Html$Parser$Element, name, attributes)),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('>')))),
				A2(
					$elm$parser$Parser$ignorer,
					$hecrj$html_parser$Html$Parser$many(
						$elm$parser$Parser$backtrackable(
							$hecrj$html_parser$Html$Parser$cyclic$node())),
					$hecrj$html_parser$Html$Parser$closingTag(name)));
		},
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Tuple$pair),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('<')))),
				A2(
					$elm$parser$Parser$ignorer,
					$hecrj$html_parser$Html$Parser$tagName,
					$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter))),
			$hecrj$html_parser$Html$Parser$tagAttributes));
}
try {
	var $hecrj$html_parser$Html$Parser$node = $hecrj$html_parser$Html$Parser$cyclic$node();
	$hecrj$html_parser$Html$Parser$cyclic$node = function () {
		return $hecrj$html_parser$Html$Parser$node;
	};
	var $hecrj$html_parser$Html$Parser$element = $hecrj$html_parser$Html$Parser$cyclic$element();
	$hecrj$html_parser$Html$Parser$cyclic$element = function () {
		return $hecrj$html_parser$Html$Parser$element;
	};
} catch ($) {
	throw 'Some top-level definitions from `Html.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    node\n  │     ↓\n  │    element\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $hecrj$html_parser$Html$Parser$run = function (str) {
	return $elm$core$String$isEmpty(str) ? $elm$core$Result$Ok(_List_Nil) : A2(
		$elm$parser$Parser$run,
		A2($hecrj$html_parser$Html$Parser$oneOrMore, 'node', $hecrj$html_parser$Html$Parser$node),
		str);
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $hecrj$html_parser$Html$Parser$Util$toAttribute = function (_v0) {
	var name = _v0.a;
	var value = _v0.b;
	return A2($elm$html$Html$Attributes$attribute, name, value);
};
var $hecrj$html_parser$Html$Parser$Util$toVirtualDom = function (nodes) {
	return A2($elm$core$List$map, $hecrj$html_parser$Html$Parser$Util$toVirtualDomEach, nodes);
};
var $hecrj$html_parser$Html$Parser$Util$toVirtualDomEach = function (node) {
	switch (node.$) {
		case 'Element':
			var name = node.a;
			var attrs = node.b;
			var children = node.c;
			return A3(
				$elm$html$Html$node,
				name,
				A2($elm$core$List$map, $hecrj$html_parser$Html$Parser$Util$toAttribute, attrs),
				$hecrj$html_parser$Html$Parser$Util$toVirtualDom(children));
		case 'Text':
			var s = node.a;
			return $elm$html$Html$text(s);
		default:
			return $elm$html$Html$text('');
	}
};
var $author$project$ListenPage$innerHtml = function (raw) {
	var str = $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function (ch) {
				switch (ch) {
					case '<':
						return '<ruby>';
					case '>':
						return '</ruby>';
					case '{':
						return '<rt>';
					case '}':
						return '</rt>';
					default:
						return ch;
				}
			},
			A2(
				$elm$core$List$map,
				$elm$core$String$fromChar,
				$elm$core$String$toList(raw))));
	var _v0 = $hecrj$html_parser$Html$Parser$run(str);
	if (_v0.$ === 'Ok') {
		var nodes = _v0.a;
		return A2(
			$elm$core$List$map,
			$rtfeldman$elm_css$Html$Styled$fromUnstyled,
			$hecrj$html_parser$Html$Parser$Util$toVirtualDom(nodes));
	} else {
		return _List_Nil;
	}
};
var $author$project$ListenPage$isBlog = false;
var $author$project$ListenPage$isProhibited = function (model) {
	return $author$project$Utility$isApple && (!model.data.isPV);
};
var $rtfeldman$elm_css$Css$margin = $rtfeldman$elm_css$Css$prop1('margin');
var $rtfeldman$elm_css$Css$marginBottom = $rtfeldman$elm_css$Css$prop1('margin-bottom');
var $rtfeldman$elm_css$Css$minHeight = $rtfeldman$elm_css$Css$prop1('min-height');
var $elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 'Custom', a: a};
};
var $rtfeldman$elm_css$Html$Styled$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $rtfeldman$elm_css$Svg$Styled$Events$custom = $rtfeldman$elm_css$Html$Styled$Events$custom;
var $author$project$HtmlElement$onPointerDown = function (msg) {
	return A2(
		$rtfeldman$elm_css$Svg$Styled$Events$custom,
		'pointerdown',
		$elm$json$Json$Decode$succeed(
			{message: msg, preventDefault: true, stopPropagation: true}));
};
var $rtfeldman$elm_css$Css$overflowWrap = $rtfeldman$elm_css$Css$prop1('overflow-wrap');
var $rtfeldman$elm_css$Css$paddingTop = $rtfeldman$elm_css$Css$prop1('padding-top');
var $rtfeldman$elm_css$Css$pre = {value: 'pre', whiteSpace: $rtfeldman$elm_css$Css$Structure$Compatible};
var $rtfeldman$elm_css$Css$flexEnd = $rtfeldman$elm_css$Css$prop1('flex-end');
var $author$project$ListenPage$rubyView = function (vocaRuby) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$marginRight(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$marginLeft(
						$rtfeldman$elm_css$Css$px(0))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$lineHeight(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(16)),
								$rtfeldman$elm_css$Css$minHeight(
								$rtfeldman$elm_css$Css$px(16))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(vocaRuby.r)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(23)),
								$rtfeldman$elm_css$Css$lineHeight(
								$rtfeldman$elm_css$Css$num(1.2))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(vocaRuby.w)
					]))
			]));
};
var $rtfeldman$elm_css$Css$textAlign = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'textAlign',
		'text-align',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Css$verticalAlign = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'verticalAlign',
		'vertical-align',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Css$VhUnits = {$: 'VhUnits'};
var $rtfeldman$elm_css$Css$vh = A2($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$VhUnits, 'vh');
var $author$project$ListenPage$cardView = F2(
	function (model, card) {
		var subIdx = model.subIdx;
		var pronMode = model.pronMode;
		var wordInfoDivBlog = function (strList) {
			var wordBoxStyle = $rtfeldman$elm_css$Css$batch(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$fontSize(
						$rtfeldman$elm_css$Css$px(18)),
						$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$pre),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#fff')),
						$rtfeldman$elm_css$Css$color(
						A3($rtfeldman$elm_css$Css$rgb, 0, 0, 0)),
						$rtfeldman$elm_css$Css$padding(
						$rtfeldman$elm_css$Css$px(10)),
						A4(
						$rtfeldman$elm_css$Css$boxShadow4,
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(5),
						$rtfeldman$elm_css$Css$hex('#00000022')),
						$rtfeldman$elm_css$Css$borderRadius(
						$rtfeldman$elm_css$Css$px(10)),
						$rtfeldman$elm_css$Css$margin(
						$rtfeldman$elm_css$Css$px(5))
					]));
			var thirdLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(
					A2($elm$core$List$drop, 2, strList)));
			var strKey = $elm$core$String$concat(
				A2($elm$core$List$take, 2, strList));
			var secondLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(
					A2($elm$core$List$drop, 1, strList)));
			var numKey = $elm$core$String$fromInt(model.subIdx);
			var key = _Utils_ap(numKey, strKey);
			var isSelected = A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					function (_v2) {
						var x = _v2.a;
						var b = _v2.b;
						return b;
					},
					$elm$core$List$head(
						A2(
							$elm$core$List$filter,
							function (_v1) {
								var x = _v1.a;
								var b = _v1.b;
								return _Utils_eq(x, key);
							},
							model.keyList))));
			var fourthLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(
					A2($elm$core$List$drop, 3, strList)));
			var found = A2(
				$elm$core$List$map,
				$author$project$ListenPage$rubyView,
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$head(
						A2(
							$elm$core$List$map,
							function ($) {
								return $.rubyList;
							},
							A2(
								$elm$core$List$filter,
								function (c) {
									return _Utils_eq(c.word, secondLine);
								},
								A2($author$project$DataManage$getVocaData, model.data.videoId, model.appData).cardList)))));
			var firstLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(strList));
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
						'click',
						$elm$json$Json$Decode$succeed(
							_Utils_Tuple2($author$project$ListenPage$NoOp, true))),
						$author$project$HtmlElement$onPointerDown(
						A3($author$project$ListenPage$WordBtnClick, firstLine, secondLine, key)),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineFlex),
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$verticalAlign($rtfeldman$elm_css$Css$top)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										wordBoxStyle,
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
										$rtfeldman$elm_css$Css$active(
										_List_fromArray(
											[
												A4(
												$rtfeldman$elm_css$Css$boxShadow4,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$hex('#00000011'))
											])),
										$rtfeldman$elm_css$Css$Transitions$transition(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$Transitions$boxShadow(100)
											]))
									]))
							]),
						$elm$core$List$concat(
							_List_fromArray(
								[
									_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														isSelected ? ($author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(0)) : $rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(1))) : $rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(0)),
														$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
														$rtfeldman$elm_css$Css$left(
														$rtfeldman$elm_css$Css$px(0)),
														$rtfeldman$elm_css$Css$top(
														$rtfeldman$elm_css$Css$px(0)),
														$rtfeldman$elm_css$Css$width(
														$rtfeldman$elm_css$Css$pct(100)),
														$rtfeldman$elm_css$Css$height(
														$rtfeldman$elm_css$Css$px(8)),
														A4(
														$rtfeldman$elm_css$Css$borderRadius4,
														$rtfeldman$elm_css$Css$px(10),
														$rtfeldman$elm_css$Css$px(10),
														$rtfeldman$elm_css$Css$px(0),
														$rtfeldman$elm_css$Css$px(0)),
														$rtfeldman$elm_css$Css$backgroundColor(
														$rtfeldman$elm_css$Css$hex('#42a5f5'))
													]))
											]),
										_List_Nil)
									]),
									$elm$core$List$concat(
									_List_fromArray(
										[
											_Utils_eq(pronMode, $author$project$ListenPage$HanMode) ? _List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(14)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.1)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(1))
															])),
														$author$project$ListenPage$classHangulPron
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(firstLine)
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(23)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.2))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(secondLine)
													]))
											]) : ($elm$core$List$isEmpty(found) ? _List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(23)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.2)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(1))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(secondLine)
													]))
											]) : _List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$displayFlex,
																$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(1))
															]))
													]),
												found)
											])),
											_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(14)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.1))
															])),
														$author$project$ListenPage$classHangulPron
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(thirdLine)
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(14)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.1)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(4)),
																$rtfeldman$elm_css$Css$color(
																$rtfeldman$elm_css$Css$hex('#000'))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(fourthLine)
													]))
											])
										]))
								])))
					]));
		};
		var isTimeBetween = F2(
			function (_v0, time) {
				var startTime = _v0.startTime;
				var endTime = _v0.endTime;
				return (_Utils_cmp(startTime, time) < 1) && (_Utils_cmp(time, endTime) < 0);
			});
		var currentTime = model.currentTime;
		var subColor = A2(
			isTimeBetween,
			card,
			$elm$core$Basics$round(currentTime)) ? $rtfeldman$elm_css$Css$color(
			A3($rtfeldman$elm_css$Css$rgb, 0, 0, 0)) : $rtfeldman$elm_css$Css$color(
			A3($rtfeldman$elm_css$Css$rgb, 100, 100, 100));
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(25)),
							$rtfeldman$elm_css$Css$minHeight(
							$rtfeldman$elm_css$Css$vh(40)),
							$author$project$ListenPage$isBlog ? $rtfeldman$elm_css$Css$minHeight(
							$rtfeldman$elm_css$Css$vh(0)) : $rtfeldman$elm_css$Css$minHeight(
							$rtfeldman$elm_css$Css$vh(40)),
							$author$project$ListenPage$isBlog ? $rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(50)) : $rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(25))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									subColor,
									$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									($author$project$ListenPage$isProhibited(model) && ((!subIdx) && (_Utils_cmp(
									$elm$core$Basics$round(currentTime),
									card.startTime) < 0))) ? A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(13))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text('App Store 정책을 준수하기 위해 가사를 제공하지 않습니다.')
										])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$author$project$ListenPage$isProhibited(model) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block),
											$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$color(
											$rtfeldman$elm_css$Css$hex('#000')) : A2($rtfeldman$elm_css$Css$property, '', '')
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(17))
												])),
											$author$project$ListenPage$classHangulPron
										]),
									_List_fromArray(
										[
											_Utils_eq(pronMode, $author$project$ListenPage$HanMode) ? $rtfeldman$elm_css$Html$Styled$text(card.pron) : $rtfeldman$elm_css$Html$Styled$text('')
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$marginTop(
													$rtfeldman$elm_css$Css$px(1)),
													$rtfeldman$elm_css$Css$marginBottom(
													$rtfeldman$elm_css$Css$px(1)),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(21)),
													A2($rtfeldman$elm_css$Css$property, 'word-break', 'keep-all'),
													$rtfeldman$elm_css$Css$overflowWrap($rtfeldman$elm_css$Css$breakWord),
													$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(21)) : $rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(19))
												]))
										]),
									($elm$core$String$isEmpty(card.rubiedText) || _Utils_eq(pronMode, $author$project$ListenPage$HanMode)) ? _List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(card.text)
										]) : $author$project$ListenPage$innerHtml(card.rubiedText)),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(17))
												])),
											$author$project$ListenPage$classHangulPron
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(card.kor)
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(12)),
													$rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(2)),
													$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$preLine)
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(card.comment)
										]))
								])),
							($author$project$ListenPage$isProhibited(model) && $elm$core$String$isEmpty(
							$elm$core$String$trim(card.words))) ? A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text('단어가 없습니다.')
								])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
							$elm$core$String$isEmpty(
							$elm$core$String$trim(card.words)) ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											($author$project$ListenPage$isVideoMode && (!$elm$core$String$isEmpty(
											$elm$core$String$trim(card.comment)))) ? $rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(5)) : $rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(10))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil) : $rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(5)),
													$rtfeldman$elm_css$Css$paddingBottom(
													$rtfeldman$elm_css$Css$px(15)),
													$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(0)) : $rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(0))
												]))
										]),
									A2(
										$elm$core$List$map,
										wordInfoDivBlog,
										$author$project$ListenPage$words2list(card.words)))
								]))
						]))
				]));
	});
var $author$project$ListenPage$gestureDiv = $rtfeldman$elm_css$Html$Styled$node('gesture-div');
var $author$project$ListenPage$contentDiv = function (model) {
	return A2(
		$author$project$ListenPage$gestureDiv,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$TapContent),
				A2(
				$rtfeldman$elm_css$Html$Styled$Events$on,
				'leftScroll',
				$elm$json$Json$Decode$succeed($author$project$ListenPage$GoRight)),
				A2(
				$rtfeldman$elm_css$Html$Styled$Events$on,
				'rightScroll',
				$elm$json$Json$Decode$succeed($author$project$ListenPage$GoLeft)),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$padding(
						$rtfeldman$elm_css$Css$px(10)),
						$rtfeldman$elm_css$Css$paddingTop(
						$rtfeldman$elm_css$Css$px(18)),
						$rtfeldman$elm_css$Css$backgroundColor(
						A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
						$rtfeldman$elm_css$Css$flexGrow(
						$rtfeldman$elm_css$Css$int(1)),
						$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(1)) : A2($rtfeldman$elm_css$Css$property, '', ''),
						$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#ffffff')) : $rtfeldman$elm_css$Css$backgroundColor(
						A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
						$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$paddingTop(
						$rtfeldman$elm_css$Css$px(14)) : $rtfeldman$elm_css$Css$paddingTop(
						$rtfeldman$elm_css$Css$px(18))
					]))
			]),
		_List_fromArray(
			[
				function () {
				var _v0 = $author$project$ListenPage$currentSub(model);
				if (_v0.$ === 'Just') {
					var card = _v0.a;
					return A2($author$project$ListenPage$cardView, model, card);
				} else {
					return A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil);
				}
			}()
			]));
};
var $author$project$ListenPage$fontStr = '\r\n@import url(\'https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@700&display=swap\');\r\n.hangul-pron {\r\n    font-family: \'Nanum Gothic\', sans-serif;\r\n    font-weight: 700;\r\n}\r\n';
var $rtfeldman$elm_css$Css$Media$feature = F2(
	function (key, _v0) {
		var value = _v0.value;
		return {
			feature: key,
			value: $elm$core$Maybe$Just(value)
		};
	});
var $rtfeldman$elm_css$Css$Media$maxHeight = function (value) {
	return A2($rtfeldman$elm_css$Css$Media$feature, 'max-height', value);
};
var $rtfeldman$elm_css$Css$Structure$OnlyQuery = F2(
	function (a, b) {
		return {$: 'OnlyQuery', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Media$only = $rtfeldman$elm_css$Css$Structure$OnlyQuery;
var $rtfeldman$elm_css$Css$Structure$Screen = {$: 'Screen'};
var $rtfeldman$elm_css$Css$Media$screen = $rtfeldman$elm_css$Css$Structure$Screen;
var $rtfeldman$elm_css$Css$Preprocess$WithMedia = F2(
	function (a, b) {
		return {$: 'WithMedia', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Media$withMedia = $rtfeldman$elm_css$Css$Preprocess$WithMedia;
var $author$project$HtmlElement$baseHeaderView = F4(
	function (isCollapse, name, msg, rightEle) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#42A5F5')),
							A4(
							$rtfeldman$elm_css$Css$boxShadow4,
							$rtfeldman$elm_css$Css$px(1),
							$rtfeldman$elm_css$Css$px(1),
							$rtfeldman$elm_css$Css$px(5),
							$rtfeldman$elm_css$Css$hex('#00000020')),
							isCollapse ? A2(
							$rtfeldman$elm_css$Css$Media$withMedia,
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Css$Media$only,
									$rtfeldman$elm_css$Css$Media$screen,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$Media$maxHeight(
											$rtfeldman$elm_css$Css$px(600))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
								])) : A2($rtfeldman$elm_css$Css$Media$withMedia, _List_Nil, _List_Nil),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(1))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Events$onClick(msg),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$active(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$opacity(
											$rtfeldman$elm_css$Css$num(0.7))
										])),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(50)),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$left),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$img,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$src('images/material-close.webp'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(20)),
											$rtfeldman$elm_css$Css$marginLeft(
											$rtfeldman$elm_css$Css$px(15))
										]))
								]),
							_List_Nil),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$color(
											$rtfeldman$elm_css$Css$hex('#fff')),
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(19)),
											$rtfeldman$elm_css$Css$marginLeft(
											$rtfeldman$elm_css$Css$px(8)),
											$rtfeldman$elm_css$Css$paddingRight(
											$rtfeldman$elm_css$Css$px(10))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(name)
								]))
						])),
					rightEle
				]));
	});
var $author$project$HtmlElement$headerView = F3(
	function (name, msg, rightEle) {
		return A4($author$project$HtmlElement$baseHeaderView, false, name, msg, rightEle);
	});
var $rtfeldman$elm_css$Css$hidden = {borderStyle: $rtfeldman$elm_css$Css$Structure$Compatible, overflow: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'hidden', visibility: $rtfeldman$elm_css$Css$Structure$Compatible};
var $rtfeldman$elm_css$Css$flexShrink = $rtfeldman$elm_css$Css$prop1('flex-shrink');
var $author$project$ListenPage$moveBtnStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$paddingTop(
			$rtfeldman$elm_css$Css$px(12)),
			$rtfeldman$elm_css$Css$paddingBottom(
			$rtfeldman$elm_css$Css$px(15)),
			$rtfeldman$elm_css$Css$flexGrow(
			$rtfeldman$elm_css$Css$int(1)),
			$rtfeldman$elm_css$Css$displayFlex,
			$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
			$rtfeldman$elm_css$Css$active(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$opacity(
					$rtfeldman$elm_css$Css$num(0.85))
				]))
		]));
var $author$project$ListenPage$moveBtnGroup = A2(
	$rtfeldman$elm_css$Html$Styled$div,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$displayFlex,
					A2($rtfeldman$elm_css$Css$property, 'user-select', 'none'),
					$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
					$rtfeldman$elm_css$Css$backgroundColor(
					$rtfeldman$elm_css$Css$hex('#eee')),
					A4(
					$rtfeldman$elm_css$Css$boxShadow4,
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(10),
					$rtfeldman$elm_css$Css$hex('#00000020')),
					$rtfeldman$elm_css$Css$zIndex(
					$rtfeldman$elm_css$Css$int(1)),
					$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$displayFlex
				]))
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$GoLeft),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[$author$project$ListenPage$moveBtnStyle]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('images/leftBtn.webp'),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(34))
								]))
						]),
					_List_Nil)
				])),
			A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$GoRight),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[$author$project$ListenPage$moveBtnStyle]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('images/rightBtn.webp'),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(34))
								]))
						]),
					_List_Nil)
				]))
		]));
var $author$project$ListenPage$LoopChangeBtnClicked = {$: 'LoopChangeBtnClicked'};
var $author$project$ListenPage$ModeChangeBtnClicked = {$: 'ModeChangeBtnClicked'};
var $rtfeldman$elm_css$Css$prop3 = F4(
	function (key, argA, argB, argC) {
		return A2(
			$rtfeldman$elm_css$Css$property,
			key,
			A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					[argA.value, argB.value, argC.value])));
	});
var $rtfeldman$elm_css$Css$borderBottom3 = $rtfeldman$elm_css$Css$prop3('border-bottom');
var $rtfeldman$elm_css$Css$solid = {borderStyle: $rtfeldman$elm_css$Css$Structure$Compatible, textDecorationStyle: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'solid'};
var $rtfeldman$elm_css$Css$textShadow4 = $rtfeldman$elm_css$Css$prop4('text-shadow');
var $author$project$ListenPage$preBoxDiv = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#42A5F5')),
						A4(
						$rtfeldman$elm_css$Css$boxShadow4,
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(10),
						$rtfeldman$elm_css$Css$hex('#00000020')),
						$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(65)),
								$rtfeldman$elm_css$Css$paddingLeft(
								$rtfeldman$elm_css$Css$px(17)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$color(
										A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('진도')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text(
										$elm$core$String$fromInt(model.subIdx + 1) + (' / ' + $elm$core$String$fromInt(
											$elm$core$Array$length(model.subArray))))
									]))
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$LoopChangeBtnClicked),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(62)),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$px(72)),
										$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineFlex),
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
										A4(
										$rtfeldman$elm_css$Css$textShadow4,
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(4),
										$rtfeldman$elm_css$Css$hex('#00000033'))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(16)),
												A3(
												$rtfeldman$elm_css$Css$borderBottom3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff')),
												model.isLoopMode ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('구간 반복')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(16)),
												A3(
												$rtfeldman$elm_css$Css$borderBottom3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff')),
												(!model.isLoopMode) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('반복 꺼짐')
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$ModeChangeBtnClicked),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(62)),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$px(72)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$px(7)),
										$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineFlex),
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
										A4(
										$rtfeldman$elm_css$Css$textShadow4,
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(4),
										$rtfeldman$elm_css$Css$hex('#00000033'))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(16)),
												A3(
												$rtfeldman$elm_css$Css$borderBottom3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff')),
												_Utils_eq(model.pronMode, $author$project$ListenPage$HiraMode) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('히라가나')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(16)),
												A3(
												$rtfeldman$elm_css$Css$borderBottom3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff')),
												_Utils_eq(model.pronMode, $author$project$ListenPage$HanMode) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('한글 발음')
									]))
							]))
					]))
			]));
};
var $author$project$ListenPage$replaceVideoId = '';
var $rtfeldman$elm_css$Css$Media$maxWidth = function (value) {
	return A2($rtfeldman$elm_css$Css$Media$feature, 'max-width', value);
};
var $author$project$HtmlElement$smallMedia = $rtfeldman$elm_css$Css$Media$withMedia(
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Css$Media$only,
			$rtfeldman$elm_css$Css$Media$screen,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Media$maxWidth(
					$rtfeldman$elm_css$Css$px(400))
				]))
		]));
var $rtfeldman$elm_css$Html$Styled$Attributes$attribute = $rtfeldman$elm_css$VirtualDom$Styled$attribute;
var $author$project$HtmlElement$yotubeLoopWrapper = function (videoId) {
	return A3(
		$rtfeldman$elm_css$Html$Styled$node,
		'youtube-loop-wrapper',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'vid', videoId),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(230)),
						$rtfeldman$elm_css$Css$minHeight(
						$rtfeldman$elm_css$Css$px(230)),
						$author$project$HtmlElement$smallMedia(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(210)),
								$rtfeldman$elm_css$Css$minHeight(
								$rtfeldman$elm_css$Css$px(210))
							]))
					]))
			]),
		_List_Nil);
};
var $author$project$HtmlElement$yotubeLoopWrapperRecord = function (videoId) {
	return A3(
		$rtfeldman$elm_css$Html$Styled$node,
		'youtube-loop-wrapper-record',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'vid', videoId),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'filter', 'blur(30px) contrast(0.1) saturate(100) contrast(0.5) brightness(2) blur(100px)'),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(230)),
						$rtfeldman$elm_css$Css$minHeight(
						$rtfeldman$elm_css$Css$px(230)),
						$author$project$HtmlElement$smallMedia(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(210)),
								$rtfeldman$elm_css$Css$minHeight(
								$rtfeldman$elm_css$Css$px(210))
							]))
					]))
			]),
		_List_Nil);
};
var $author$project$HtmlElement$yotubeLoopWrapperRecordShort = function (videoId) {
	return A3(
		$rtfeldman$elm_css$Html$Styled$node,
		'youtube-loop-wrapper-record',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'vid', videoId),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(230)),
						$rtfeldman$elm_css$Css$minHeight(
						$rtfeldman$elm_css$Css$px(230)),
						$author$project$HtmlElement$smallMedia(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(210)),
								$rtfeldman$elm_css$Css$minHeight(
								$rtfeldman$elm_css$Css$px(210))
							]))
					]))
			]),
		_List_Nil);
};
var $rtfeldman$elm_css$Html$Styled$Attributes$classList = function (classes) {
	return $rtfeldman$elm_css$Html$Styled$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $author$project$HtmlElement$youtubeLoading = function (isLoadSuccess) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#000')),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(1000)),
						isLoadSuccess ? $rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(0)) : $rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(1)),
						$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$opacity(200)
							])),
						$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2('pulse-node', true)
							])),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$paddingLeft(
								$rtfeldman$elm_css$Css$px(16)),
								$rtfeldman$elm_css$Css$paddingTop(
								$rtfeldman$elm_css$Css$px(19)),
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(16))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text('영상을 로딩중입니다')
					]))
			]));
};
var $author$project$SvgElement$pauseIconSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('40'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 320 512')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('#fff'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M48 64C21.5 64 0 85.5 0 112V400c0 26.5 21.5 48 48 48H80c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H48zm192 0c-26.5 0-48 21.5-48 48V400c0 26.5 21.5 48 48 48h32c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H240z')
				]),
			_List_Nil)
		]));
var $author$project$HtmlElement$youtubePauseView = F3(
	function (playerState, playVideo, noOp) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
							(playerState === 'onPaused') ? $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto) : $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
							$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
							$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(999)),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#00000033')),
							(playerState === 'onPaused') ? $rtfeldman$elm_css$Css$opacity(
							$rtfeldman$elm_css$Css$num(1)) : $rtfeldman$elm_css$Css$opacity(
							$rtfeldman$elm_css$Css$num(0)),
							$rtfeldman$elm_css$Css$Transitions$transition(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$Transitions$opacity(100)
								]))
						])),
					(playerState === 'onPaused') ? $rtfeldman$elm_css$Html$Styled$Events$onClick(playVideo) : $rtfeldman$elm_css$Html$Styled$Events$onClick(noOp)
				]),
			_List_fromArray(
				[$author$project$SvgElement$pauseIconSvg]));
	});
var $author$project$ListenPage$appView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$author$project$ListenPage$absoluteFullStyle,
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
					]))
			]),
		_List_fromArray(
			[
				$author$project$ListenPage$isVideoMode ? A3(
				$rtfeldman$elm_css$Html$Styled$node,
				'style',
				_List_Nil,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text($author$project$ListenPage$fontStr)
					])) : A3(
				$rtfeldman$elm_css$Html$Styled$node,
				'style',
				_List_Nil,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text('')
					])),
				$author$project$ListenPage$isVideoMode ? A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
								$rtfeldman$elm_css$Css$top(
								$rtfeldman$elm_css$Css$px(-1000)),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0)),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$px(0)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(0)),
								$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(
						$elm$core$String$concat(
							A2(
								$elm$core$List$map,
								function (c) {
									return _Utils_ap(
										c.pron,
										_Utils_ap(
											c.text,
											_Utils_ap(
												c.kor,
												_Utils_ap(c.comment, c.words))));
								},
								model.data.cardList)))
					])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
				$author$project$ListenPage$alterAlbumCover(model),
				$author$project$ListenPage$isVideoMode ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : A3(
				$author$project$HtmlElement$headerView,
				'들어보기',
				$author$project$ListenPage$ToRoadMapPage,
				A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil)),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
								$author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden) : $rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(230)),
										$rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(230)),
										$author$project$HtmlElement$smallMedia(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(210)),
												$rtfeldman$elm_css$Css$minHeight(
												$rtfeldman$elm_css$Css$px(210))
											])),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$pct(100)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#000')),
										$author$project$ListenPage$isShortForm ? $rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(270)) : ($author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(200)) : $rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(230))),
										$author$project$ListenPage$isShortForm ? $rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(270)) : ($author$project$ListenPage$isVideoMode ? $rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(200)) : $rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(230)))
									]))
							]),
						_List_fromArray(
							[
								$author$project$ListenPage$isVideoMode ? ($author$project$ListenPage$isShortForm ? $author$project$HtmlElement$yotubeLoopWrapperRecordShort(
								($elm$core$String$length($author$project$ListenPage$replaceVideoId) === 11) ? $author$project$ListenPage$replaceVideoId : model.data.videoId) : $author$project$HtmlElement$yotubeLoopWrapperRecord(
								($elm$core$String$length($author$project$ListenPage$replaceVideoId) === 11) ? $author$project$ListenPage$replaceVideoId : model.data.videoId)) : $author$project$HtmlElement$yotubeLoopWrapper(
								$author$project$Utility$isApple ? model.data.videoId : model.data.videoId),
								$author$project$HtmlElement$youtubeLoading(model.isLoadSuccess),
								$author$project$ListenPage$isVideoMode ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : A3($author$project$HtmlElement$youtubePauseView, model.playerState, $author$project$ListenPage$PlayVideo, $author$project$ListenPage$NoOp)
							])),
						$author$project$ListenPage$preBoxDiv(model),
						$author$project$ListenPage$contentDiv(model)
					])),
				$author$project$ListenPage$moveBtnGroup,
				A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$ListenPage$completeAlert, model.isCompleteAlertOpen)
			]));
};
var $author$project$ListenPage$view = function (model) {
	return $author$project$ListenPage$appView(model);
};
var $author$project$ListenPage$editView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$right(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
								$rtfeldman$elm_css$Css$minWidth(
								$rtfeldman$elm_css$Css$px(400)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						$author$project$ListenPage$view(model)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(100)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ccc'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
										$rtfeldman$elm_css$Css$top(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('ccc'))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$SaveClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('저장하기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$JpFileRequested)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('일본어 불러오기')
											])),
										$rtfeldman$elm_css$Html$Styled$text(model.jpFileName)
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$KorFileRequested)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('한국어 불러오기')
											])),
										$rtfeldman$elm_css$Html$Styled$text(model.korFileName)
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$MergeClicked)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('합치기')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$ApplyJpClicked)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('일본어 적용')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$ApplyKorClicked)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('한국어 적용')
											]))
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$RubyBtnClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('루비')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$AutoKanjiClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('한자 자동 추가')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$AutoKanjiOverwriteClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('한자 자동 덮어쓰기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$TimeShiftClicked)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('TimeShift')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$input,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$value(
												$elm$core$String$fromInt(model.timeShift)),
												$rtfeldman$elm_css$Html$Styled$Events$onInput($author$project$ListenPage$UpdateTimeShiftInput)
											]),
										_List_Nil)
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												A2($rtfeldman$elm_css$Css$property, 'user-select', 'all')
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text(
										$elm$core$String$fromFloat(model.currentTime))
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$SpeakPron)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('Speak Pron')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$KanjiValidate)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('Kanji Validate')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$ListenPage$TimeValidate)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('TimeValidate')
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(150)),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(30))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$ListenPage$SetEditableValue,
								$author$project$EditableValue$editableView(model.editableValue))
							]))
					]))
			]));
};
var $author$project$MainPage$LeftClicked = {$: 'LeftClicked'};
var $author$project$MainPage$RightClicked = {$: 'RightClicked'};
var $author$project$MainPage$SaveClicked = {$: 'SaveClicked'};
var $author$project$MainPage$SetEditableValue = function (a) {
	return {$: 'SetEditableValue', a: a};
};
var $author$project$MainPage$HomeBtnClicked = {$: 'HomeBtnClicked'};
var $author$project$MainPage$QuestionBtnClicked = {$: 'QuestionBtnClicked'};
var $author$project$MainPage$RecentToggle = {$: 'RecentToggle'};
var $author$project$MainPage$ToAwardPage = {$: 'ToAwardPage'};
var $author$project$MainPage$ToMarketPage = {$: 'ToMarketPage'};
var $author$project$MainPage$ToRoadMapPage = F2(
	function (a, b) {
		return {$: 'ToRoadMapPage', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$borderBox = {backgroundClip: $rtfeldman$elm_css$Css$Structure$Compatible, boxSizing: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'border-box'};
var $rtfeldman$elm_css$Css$boxSizing = $rtfeldman$elm_css$Css$prop1('box-sizing');
var $author$project$MainPage$bigVideoInfoInner = function (rawData) {
	if ($elm$core$String$isEmpty(rawData.videoId)) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$opacity(
							$rtfeldman$elm_css$Css$num(0.2)),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#666666')),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$borderRadius(
							$rtfeldman$elm_css$Css$px(10))
						]))
				]),
			_List_Nil);
	} else {
		var data = rawData;
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$zIndex(
									$rtfeldman$elm_css$Css$int(1)),
									$rtfeldman$elm_css$Css$color(
									A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$pct(100))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(20)),
											$rtfeldman$elm_css$Css$marginLeft(
											$rtfeldman$elm_css$Css$px(16)),
											$rtfeldman$elm_css$Css$marginRight(
											$rtfeldman$elm_css$Css$px(9)),
											$rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(30))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(data.name)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(14)),
											$rtfeldman$elm_css$Css$marginLeft(
											$rtfeldman$elm_css$Css$px(16)),
											$rtfeldman$elm_css$Css$marginRight(
											$rtfeldman$elm_css$Css$px(9)),
											$rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(0))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(data.tags)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$bottom(
											$rtfeldman$elm_css$Css$px(17)),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													(data.difficulty === '쉬움') ? $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#64F542')) : ((data.difficulty === '보통') ? $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#42B8F5')) : ((data.difficulty === '어려움') ? $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#F54242')) : $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#64F542')))),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(7)),
													$rtfeldman$elm_css$Css$paddingLeft(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$paddingRight(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$borderRadius(
													$rtfeldman$elm_css$Css$px(30)),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(13))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(data.difficulty)
										]))
								]))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$backgroundImage(
									$rtfeldman$elm_css$Css$url('videoImages/' + (data.imageSrc + '.webp'))),
									$rtfeldman$elm_css$Css$backgroundSize($rtfeldman$elm_css$Css$cover),
									$rtfeldman$elm_css$Css$backgroundPosition($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(180)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(180)),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(10))
								]))
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox),
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#666666')),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(180)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(180)),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(10)),
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0.2))
								]))
						]),
					_List_Nil)
				]));
	}
};
var $author$project$MainPage$bigVideoThumbnail = function (data) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Events$onClick(
				A2($author$project$MainPage$ToRoadMapPage, data.name, data.videoId)),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$active(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0.7))
							])),
						$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$px(180)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(180)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
						$rtfeldman$elm_css$Css$margin(
						$rtfeldman$elm_css$Css$px(10)),
						$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
					]))
			]),
		_List_fromArray(
			[
				$author$project$MainPage$bigVideoInfoInner(data)
			]));
};
var $rtfeldman$elm_css$Html$Styled$Attributes$id = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('id');
var $rtfeldman$elm_css$VirtualDom$Styled$keyedNode = $rtfeldman$elm_css$VirtualDom$Styled$KeyedNode;
var $rtfeldman$elm_css$Html$Styled$Keyed$node = $rtfeldman$elm_css$VirtualDom$Styled$keyedNode;
var $rtfeldman$elm_css$Css$overflowX = $rtfeldman$elm_css$Css$prop1('overflow-x');
var $author$project$MainPage$bigVideoGroup = F3(
	function (scrollId, name, rawVideoList) {
		var videoList = $elm$core$List$isEmpty(rawVideoList) ? _List_fromArray(
			[$author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData]) : rawVideoList;
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(30)),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(23)),
									$rtfeldman$elm_css$Css$color(
									$rtfeldman$elm_css$Css$hex('#fff')),
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
									$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$bottom(
											$rtfeldman$elm_css$Css$px(0)),
											$rtfeldman$elm_css$Css$left(
											$rtfeldman$elm_css$Css$px(25)),
											$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$pre)
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(name)
								]))
						])),
					A3(
					$rtfeldman$elm_css$Html$Styled$Keyed$node,
					'div',
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$id('video-scroll' + scrollId),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$marginBottom(
									$rtfeldman$elm_css$Css$px(15)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$overflowX($rtfeldman$elm_css$Css$auto),
									$rtfeldman$elm_css$Css$padding(
									$rtfeldman$elm_css$Css$px(10)),
									$rtfeldman$elm_css$Css$paddingLeft(
									$rtfeldman$elm_css$Css$px(15)),
									$rtfeldman$elm_css$Css$paddingRight(
									$rtfeldman$elm_css$Css$px(15)),
									$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox)
								]))
						]),
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(
								x.videoId,
								A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$MainPage$bigVideoThumbnail, x));
						},
						videoList))
				]));
	});
var $rtfeldman$elm_css$Css$prop5 = F6(
	function (key, argA, argB, argC, argD, argE) {
		return A2(
			$rtfeldman$elm_css$Css$property,
			key,
			A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					[argA.value, argB.value, argC.value, argD.value, argE.value])));
	});
var $rtfeldman$elm_css$Css$boxShadow5 = $rtfeldman$elm_css$Css$prop5('box-shadow');
var $author$project$SvgElement$homeIconSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 576 512'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('26')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('rgb(69 157 246)'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c0 2.7-.2 5.4-.5 8.1V472c0 22.1-17.9 40-40 40H456c-1.1 0-2.2 0-3.3-.1c-1.4 .1-2.8 .1-4.2 .1H416 392c-22.1 0-40-17.9-40-40V448 384c0-17.7-14.3-32-32-32H256c-17.7 0-32 14.3-32 32v64 24c0 22.1-17.9 40-40 40H160 128.1c-1.5 0-3-.1-4.5-.2c-1.2 .1-2.4 .2-3.6 .2H104c-22.1 0-40-17.9-40-40V360c0-.9 0-1.9 .1-2.8V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L564.8 231.5c8 7 12 15 11 24z')
				]),
			_List_Nil)
		]));
var $author$project$MainPage$newList = _List_fromArray(
	['Kirari', '푸르름이 사는 곳', 'more than words', '일도', '회회기담', 'Bling-Bang-Bang-Born', 'Stay With Me', 'I LOVE...', '사랑을 하고 있는 것 같아', '개다(맑은 날)']);
var $rtfeldman$elm_css$Svg$Styled$Attributes$class = $rtfeldman$elm_css$VirtualDom$Styled$attribute('class');
var $rtfeldman$elm_css$Svg$Styled$g = $rtfeldman$elm_css$Svg$Styled$node('g');
var $rtfeldman$elm_css$Svg$Styled$Attributes$transform = $rtfeldman$elm_css$VirtualDom$Styled$attribute('transform');
var $author$project$SvgElement$questionSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('33'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 572 572')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$g,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$transform('translate(30 30)')
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Svg$Styled$path,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Svg$Styled$Attributes$fill('#fff'),
							$rtfeldman$elm_css$Svg$Styled$Attributes$class('shadow'),
							$rtfeldman$elm_css$Svg$Styled$Attributes$d('M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM169.8 165.3c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z')
						]),
					_List_Nil)
				]))
		]));
var $author$project$SvgElement$searchIconSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('26'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 512 512')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('rgb(69 157 246)'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z')
				]),
			_List_Nil)
		]));
var $author$project$SvgElement$shopIconSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('32'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 636 572')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$g,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$transform('translate(30 30)')
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Svg$Styled$path,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Svg$Styled$Attributes$fill('#fff'),
							$rtfeldman$elm_css$Svg$Styled$Attributes$class('shadow'),
							$rtfeldman$elm_css$Svg$Styled$Attributes$d('M253.3 35.1c6.1-11.8 1.5-26.3-10.2-32.4s-26.3-1.5-32.4 10.2L117.6 192H32c-17.7 0-32 14.3-32 32s14.3 32 32 32L83.9 463.5C91 492 116.6 512 146 512H430c29.4 0 55-20 62.1-48.5L544 256c17.7 0 32-14.3 32-32s-14.3-32-32-32H458.4L365.3 12.9C359.2 1.2 344.7-3.4 332.9 2.7s-16.3 20.6-10.2 32.4L404.3 192H171.7L253.3 35.1zM192 304v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V304c0-8.8 7.2-16 16-16s16 7.2 16 16zm96-16c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V304c0-8.8 7.2-16 16-16zm128 16v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V304c0-8.8 7.2-16 16-16s16 7.2 16 16z')
						]),
					_List_Nil)
				]))
		]));
var $author$project$MainPage$TagBtnClick = function (a) {
	return {$: 'TagBtnClick', a: a};
};
var $author$project$MainPage$tagBtn = function (str) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Events$onClick(
				$author$project$MainPage$TagBtnClick(str)),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$active(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0.7))
							])),
						$rtfeldman$elm_css$Css$padding(
						$rtfeldman$elm_css$Css$px(5)),
						$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#fff')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(10)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#42B8F5')),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(100))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(str)
					]))
			]));
};
var $author$project$MainPage$tagGroupA = A2(
	$rtfeldman$elm_css$Html$Styled$div,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$width(
					$rtfeldman$elm_css$Css$pct(100))
				]))
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$px(30)),
							$rtfeldman$elm_css$Css$fontSize(
							$rtfeldman$elm_css$Css$px(22)),
							$rtfeldman$elm_css$Css$color(
							$rtfeldman$elm_css$Css$hex('#fff')),
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
							$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(0)),
									$rtfeldman$elm_css$Css$left(
									$rtfeldman$elm_css$Css$px(25)),
									$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$pre)
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text('아티스트')
						]))
				])),
			A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$paddingTop(
							$rtfeldman$elm_css$Css$px(10)),
							$rtfeldman$elm_css$Css$paddingLeft(
							$rtfeldman$elm_css$Css$px(15)),
							$rtfeldman$elm_css$Css$paddingRight(
							$rtfeldman$elm_css$Css$px(15)),
							$rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(25)),
							$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox)
						]))
				]),
			_List_fromArray(
				[
					$author$project$MainPage$tagBtn('요네즈 켄시'),
					$author$project$MainPage$tagBtn('요아소비'),
					$author$project$MainPage$tagBtn('요루시카'),
					$author$project$MainPage$tagBtn('King gnu'),
					$author$project$MainPage$tagBtn('히게단'),
					$author$project$MainPage$tagBtn('유우리'),
					$author$project$MainPage$tagBtn('Aimyon'),
					$author$project$MainPage$tagBtn('Aimer'),
					$author$project$MainPage$tagBtn('RADWIMPS'),
					$author$project$MainPage$tagBtn('유이카')
				]))
		]));
var $author$project$MainPage$tagGroupB = A2(
	$rtfeldman$elm_css$Html$Styled$div,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$width(
					$rtfeldman$elm_css$Css$pct(100))
				]))
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$px(30)),
							$rtfeldman$elm_css$Css$fontSize(
							$rtfeldman$elm_css$Css$px(22)),
							$rtfeldman$elm_css$Css$color(
							$rtfeldman$elm_css$Css$hex('#fff')),
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
							$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(0)),
									$rtfeldman$elm_css$Css$left(
									$rtfeldman$elm_css$Css$px(25)),
									$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$pre)
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text('키워드')
						]))
				])),
			A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$paddingTop(
							$rtfeldman$elm_css$Css$px(10)),
							$rtfeldman$elm_css$Css$paddingLeft(
							$rtfeldman$elm_css$Css$px(15)),
							$rtfeldman$elm_css$Css$paddingRight(
							$rtfeldman$elm_css$Css$px(15)),
							$rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(25)),
							$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox)
						]))
				]),
			_List_fromArray(
				[
					$author$project$MainPage$tagBtn('쉬움'),
					$author$project$MainPage$tagBtn('보통'),
					$author$project$MainPage$tagBtn('어려움'),
					$author$project$MainPage$tagBtn('주술회전'),
					$author$project$MainPage$tagBtn('신카이 마코토'),
					$author$project$MainPage$tagBtn('시티팝'),
					$author$project$MainPage$tagBtn('B급'),
					$author$project$MainPage$tagBtn('PV'),
					$author$project$MainPage$tagBtn('KPOP')
				]))
		]));
var $author$project$SvgElement$userIconSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('26'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 448 512')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('rgb(69 157 246)'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304H178.3z')
				]),
			_List_Nil)
		]));
var $author$project$MainPage$videoInfoInner = function (rawData) {
	if ($elm$core$String$isEmpty(rawData.videoId)) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$opacity(
							$rtfeldman$elm_css$Css$num(0.2)),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#666666')),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$borderRadius(
							$rtfeldman$elm_css$Css$px(10))
						]))
				]),
			_List_Nil);
	} else {
		var data = rawData;
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$zIndex(
									$rtfeldman$elm_css$Css$int(1)),
									$rtfeldman$elm_css$Css$color(
									A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$pct(100))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(17)),
											$rtfeldman$elm_css$Css$marginLeft(
											$rtfeldman$elm_css$Css$px(16)),
											$rtfeldman$elm_css$Css$marginRight(
											$rtfeldman$elm_css$Css$px(9)),
											$rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(30))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(data.name)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(12)),
											$rtfeldman$elm_css$Css$marginLeft(
											$rtfeldman$elm_css$Css$px(16)),
											$rtfeldman$elm_css$Css$marginRight(
											$rtfeldman$elm_css$Css$px(9)),
											$rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(0))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(data.tags)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$bottom(
											$rtfeldman$elm_css$Css$px(17)),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													(data.difficulty === '쉬움') ? $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#64F542')) : ((data.difficulty === '보통') ? $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#42B8F5')) : ((data.difficulty === '어려움') ? $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#F54242')) : $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#64F542')))),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(7)),
													$rtfeldman$elm_css$Css$paddingLeft(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$paddingRight(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$borderRadius(
													$rtfeldman$elm_css$Css$px(30)),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(12))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(data.difficulty)
										]))
								]))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$backgroundImage(
									$rtfeldman$elm_css$Css$url('videoImages/' + (data.imageSrc + '.webp'))),
									$rtfeldman$elm_css$Css$backgroundSize($rtfeldman$elm_css$Css$cover),
									$rtfeldman$elm_css$Css$backgroundPosition($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(150)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(150)),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(10))
								]))
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox),
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#666666')),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(150)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(150)),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(10)),
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0.2))
								]))
						]),
					_List_Nil)
				]));
	}
};
var $author$project$MainPage$videoThumbnail = function (data) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Events$onClick(
				A2($author$project$MainPage$ToRoadMapPage, data.name, data.videoId)),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$active(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0.7))
							])),
						$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$px(150)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(150)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
						$rtfeldman$elm_css$Css$margin(
						$rtfeldman$elm_css$Css$px(9)),
						$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
					]))
			]),
		_List_fromArray(
			[
				$author$project$MainPage$videoInfoInner(data)
			]));
};
var $author$project$MainPage$videoGroup = F3(
	function (scrollId, name, rawVideoList) {
		var videoList = $elm$core$List$isEmpty(rawVideoList) ? _List_fromArray(
			[$author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData, $author$project$DataManage$emptyVideoData]) : rawVideoList;
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(30)),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(22)),
									$rtfeldman$elm_css$Css$color(
									$rtfeldman$elm_css$Css$hex('#fff')),
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
									$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$bottom(
											$rtfeldman$elm_css$Css$px(0)),
											$rtfeldman$elm_css$Css$left(
											$rtfeldman$elm_css$Css$px(25)),
											$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$pre)
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(name)
								]))
						])),
					A3(
					$rtfeldman$elm_css$Html$Styled$Keyed$node,
					'div',
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$id('video-scroll' + scrollId),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$marginBottom(
									$rtfeldman$elm_css$Css$px(15)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$overflowX($rtfeldman$elm_css$Css$auto),
									$rtfeldman$elm_css$Css$padding(
									$rtfeldman$elm_css$Css$px(10)),
									$rtfeldman$elm_css$Css$paddingLeft(
									$rtfeldman$elm_css$Css$px(15)),
									$rtfeldman$elm_css$Css$paddingRight(
									$rtfeldman$elm_css$Css$px(15)),
									$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox)
								]))
						]),
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(
								x.videoId,
								A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$MainPage$videoThumbnail, x));
						},
						videoList))
				]));
	});
var $author$project$MainPage$view = function (model) {
	var difficultySorted = A2(
		$elm$core$List$sortBy,
		function (x) {
			return (x.difficulty === '쉬움') ? 1 : ((x.difficulty === '보통') ? 2 : ((x.difficulty === '어려움') ? 3 : 0));
		},
		model.data);
	var data = model.isRecentMode ? A2(
		$elm$core$List$sortBy,
		function (x) {
			var history = A2($elm$core$Maybe$withDefault, _List_Nil, model.visitHistory);
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$core$List$length(history),
				A2(
					$elm$core$Maybe$map,
					$elm$core$Tuple$first,
					$elm$core$List$head(
						A2(
							$elm$core$List$filter,
							function (_v0) {
								var i = _v0.a;
								var v = _v0.b;
								return _Utils_eq(v, x.videoId);
							},
							A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, history)))));
		},
		difficultySorted) : difficultySorted;
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundImage(
						$rtfeldman$elm_css$Css$url('images/bg.webp')),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#547ef5')),
						A2(
						$rtfeldman$elm_css$Css$backgroundSize2,
						$rtfeldman$elm_css$Css$pct(100),
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$Utility$isApple ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$top(
								$rtfeldman$elm_css$Css$px(0)),
								$rtfeldman$elm_css$Css$left(
								$rtfeldman$elm_css$Css$px(0)),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(20)),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.7))
									]))
							])),
						$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MainPage$ToMarketPage)
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('shake-node', !model.isSubUser)
									]))
							]),
						_List_fromArray(
							[$author$project$SvgElement$shopIconSvg]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.7))
									])),
								$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$top(
								$rtfeldman$elm_css$Css$px(0)),
								$rtfeldman$elm_css$Css$right(
								$rtfeldman$elm_css$Css$px(0)),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(20))
							])),
						$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MainPage$QuestionBtnClicked)
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$paddingTop(
										$rtfeldman$elm_css$Css$px(1))
									]))
							]),
						_List_fromArray(
							[$author$project$SvgElement$questionSvg]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none),
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$top(
								$rtfeldman$elm_css$Css$px(49)),
								$rtfeldman$elm_css$Css$right(
								$rtfeldman$elm_css$Css$px(0)),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(17))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MainPage$RecentToggle),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$active(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0.7))
											])),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(5)),
										$rtfeldman$elm_css$Css$color(
										$rtfeldman$elm_css$Css$hex('#fff')),
										A3(
										$rtfeldman$elm_css$Css$borderBottom3,
										$rtfeldman$elm_css$Css$px(3),
										$rtfeldman$elm_css$Css$solid,
										$rtfeldman$elm_css$Css$hex('#fff')),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(17)),
										A4(
										$rtfeldman$elm_css$Css$textShadow4,
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(4),
										$rtfeldman$elm_css$Css$hex('#00000033'))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(
								model.isRecentMode ? '최근 방문순' : '난이도순')
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(100)),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
								$elm$core$List$isEmpty(model.data) ? $rtfeldman$elm_css$Css$displayFlex : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$class('loader')
							]),
						_List_Nil)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$id('group-list'),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(80)),
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$flexShrink(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox),
								$rtfeldman$elm_css$Css$paddingTop(
								$rtfeldman$elm_css$Css$px(25)),
								$rtfeldman$elm_css$Css$paddingBottom(
								$rtfeldman$elm_css$Css$px(50))
							]))
					]),
				_List_fromArray(
					[
						A3(
						$author$project$MainPage$bigVideoGroup,
						'0',
						'새로 추가된 콘텐츠',
						A2(
							$elm$core$List$filterMap,
							function (x) {
								return $elm$core$List$head(
									A2(
										$elm$core$List$filter,
										function (y) {
											return _Utils_eq(x, y.name);
										},
										data));
							},
							$elm$core$List$reverse($author$project$MainPage$newList))),
						A3(
						$author$project$MainPage$videoGroup,
						'1',
						'트렌드',
						A2(
							$elm$core$List$filter,
							function (x) {
								return '트렌드' === x.category;
							},
							data)),
						A3(
						$author$project$MainPage$videoGroup,
						'2',
						'애니메이션 OST',
						A2(
							$elm$core$List$filter,
							function (x) {
								return '애니메이션' === x.category;
							},
							data)),
						$author$project$MainPage$tagGroupA,
						A3(
						$author$project$MainPage$videoGroup,
						'3',
						'영화/드라마 OST',
						A2(
							$elm$core$List$filter,
							function (x) {
								return ('영화' === x.category) || ('드라마' === x.category);
							},
							data)),
						A3(
						$author$project$MainPage$videoGroup,
						'4',
						'올드 콘텐츠',
						A2(
							$elm$core$List$filter,
							function (x) {
								return '올드' === x.category;
							},
							data)),
						$author$project$MainPage$tagGroupB,
						A3(
						$author$project$MainPage$videoGroup,
						'5',
						'기타 콘텐츠',
						A2(
							$elm$core$List$filter,
							function (x) {
								return ('KPOP' === x.category) || (('PV' === x.category) || $elm$core$String$isEmpty(
									$elm$core$String$trim(x.category)));
							},
							data))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$px(260)),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(17))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(35)),
										$rtfeldman$elm_css$Css$paddingTop(
										$rtfeldman$elm_css$Css$px(0))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(200)),
												A5(
												$rtfeldman$elm_css$Css$boxShadow5,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$hex('#eee'))
											])),
										$author$project$HtmlElement$onPointerDown($author$project$MainPage$ToSearchPage)
									]),
								_List_fromArray(
									[$author$project$SvgElement$searchIconSvg])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0.85)),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(200)),
												A5(
												$rtfeldman$elm_css$Css$boxShadow5,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$hex('#eee'))
											])),
										$author$project$HtmlElement$onPointerDown($author$project$MainPage$HomeBtnClicked)
									]),
								_List_fromArray(
									[$author$project$SvgElement$homeIconSvg])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(200)),
												A5(
												$rtfeldman$elm_css$Css$boxShadow5,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$hex('#eee'))
											])),
										$author$project$HtmlElement$onPointerDown($author$project$MainPage$ToAwardPage)
									]),
								_List_fromArray(
									[$author$project$SvgElement$userIconSvg]))
							]))
					]))
			]));
};
var $author$project$MainPage$editView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$right(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
								$rtfeldman$elm_css$Css$minWidth(
								$rtfeldman$elm_css$Css$px(400)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						$author$project$MainPage$view(model)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(100)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ccc'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
										$rtfeldman$elm_css$Css$top(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(10))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MainPage$SaveClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('저장하기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MainPage$LeftClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('LEFT')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MainPage$RightClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('RIGHT')
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(50)),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(30))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$MainPage$SetEditableValue,
								$author$project$EditableValue$editableView(model.editableValue))
							]))
					]))
			]));
};
var $author$project$PronPage$GetRubyBtnClicked = {$: 'GetRubyBtnClicked'};
var $author$project$PronPage$NextClicked = {$: 'NextClicked'};
var $author$project$PronPage$PrevClicked = {$: 'PrevClicked'};
var $author$project$PronPage$SaveClicked = {$: 'SaveClicked'};
var $author$project$PronPage$SetEditableValue = function (a) {
	return {$: 'SetEditableValue', a: a};
};
var $author$project$PronPage$absoluteFullStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
			$rtfeldman$elm_css$Css$left(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$right(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$top(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$bottom(
			$rtfeldman$elm_css$Css$px(0))
		]));
var $author$project$PronPage$AnswerCheckBtnClicked = {$: 'AnswerCheckBtnClicked'};
var $author$project$PronPage$SkipBtnClicked = {$: 'SkipBtnClicked'};
var $rtfeldman$elm_css$Css$Transitions$BackgroundColor = {$: 'BackgroundColor'};
var $rtfeldman$elm_css$Css$Transitions$backgroundColor = $rtfeldman$elm_css$Css$Transitions$durationTransition($rtfeldman$elm_css$Css$Transitions$BackgroundColor);
var $rtfeldman$elm_css$Css$Transitions$Color = {$: 'Color'};
var $rtfeldman$elm_css$Css$Transitions$color = $rtfeldman$elm_css$Css$Transitions$durationTransition($rtfeldman$elm_css$Css$Transitions$Color);
var $author$project$PronPage$answerCheckBtn = F2(
	function (canSkip, isAnswerFilled) {
		var skipStyle = $rtfeldman$elm_css$Css$batch(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$backgroundColor(
					$rtfeldman$elm_css$Css$hex('#666')),
					$rtfeldman$elm_css$Css$color(
					$rtfeldman$elm_css$Css$hex('#fff')),
					$rtfeldman$elm_css$Css$fontSize(
					$rtfeldman$elm_css$Css$px(20))
				]));
		var disabledStyle = $rtfeldman$elm_css$Css$batch(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$backgroundColor(
					$rtfeldman$elm_css$Css$hex('#eee')),
					$rtfeldman$elm_css$Css$fontSize(
					$rtfeldman$elm_css$Css$px(20)),
					$rtfeldman$elm_css$Css$color(
					$rtfeldman$elm_css$Css$hex('#666')),
					$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
				]));
		var baseStyle = $rtfeldman$elm_css$Css$batch(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$height(
					$rtfeldman$elm_css$Css$px(55)),
					$rtfeldman$elm_css$Css$width(
					$rtfeldman$elm_css$Css$pct(100)),
					$rtfeldman$elm_css$Css$flexShrink(
					$rtfeldman$elm_css$Css$num(0)),
					$rtfeldman$elm_css$Css$displayFlex,
					$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
					$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
					$rtfeldman$elm_css$Css$Transitions$transition(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$Transitions$backgroundColor(300),
							$rtfeldman$elm_css$Css$Transitions$color(300)
						]))
				]));
		var activeStyle = $rtfeldman$elm_css$Css$batch(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$backgroundColor(
					$rtfeldman$elm_css$Css$hex('#7144f5')),
					$rtfeldman$elm_css$Css$fontSize(
					$rtfeldman$elm_css$Css$px(20)),
					$rtfeldman$elm_css$Css$color(
					$rtfeldman$elm_css$Css$hex('#fff')),
					A4(
					$rtfeldman$elm_css$Css$boxShadow4,
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(5),
					$rtfeldman$elm_css$Css$hex('#00000040')),
					$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
				]));
		return isAnswerFilled ? A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PronPage$AnswerCheckBtnClicked),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[baseStyle, activeStyle]))
				]),
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$text('정답 확인')
				])) : (canSkip ? A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$class('skip-pulse-node'),
					$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PronPage$SkipBtnClicked),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[baseStyle, skipStyle]))
				]),
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$text('스킵하기')
				])) : A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PronPage$AnswerCheckBtnClicked),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[baseStyle, disabledStyle]))
				]),
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$text('정답 확인')
				])));
	});
var $author$project$HtmlElement$collapseHeaderView = F3(
	function (name, msg, rightEle) {
		return A4($author$project$HtmlElement$baseHeaderView, true, name, msg, rightEle);
	});
var $rtfeldman$elm_css$Css$flexBasis = $rtfeldman$elm_css$Css$prop1('flex-basis');
var $elm$virtual_dom$VirtualDom$lazy4 = _VirtualDom_lazy4;
var $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp3 = F4(
	function (fn, arg1, arg2, arg3) {
		return $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled(
			A3(fn, arg1, arg2, arg3));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$lazy3 = F4(
	function (fn, arg1, arg2, arg3) {
		return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
			A5($elm$virtual_dom$VirtualDom$lazy4, $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp3, fn, arg1, arg2, arg3));
	});
var $rtfeldman$elm_css$Html$Styled$Lazy$lazy3 = $rtfeldman$elm_css$VirtualDom$Styled$lazy3;
var $author$project$PronPage$floatDiv = $rtfeldman$elm_css$Html$Styled$node('float-div');
var $author$project$PronPage$pronFloatStyle = function (isQuizPlay) {
	return $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$backgroundColor(
				$rtfeldman$elm_css$Css$hex('#42A5F5')),
				$rtfeldman$elm_css$Css$color(
				$rtfeldman$elm_css$Css$hex('#fff')),
				isQuizPlay ? A4(
				$rtfeldman$elm_css$Css$boxShadow4,
				$rtfeldman$elm_css$Css$px(1),
				$rtfeldman$elm_css$Css$px(1),
				$rtfeldman$elm_css$Css$px(5),
				$rtfeldman$elm_css$Css$hex('#00000030')) : A4(
				$rtfeldman$elm_css$Css$boxShadow4,
				$rtfeldman$elm_css$Css$px(1),
				$rtfeldman$elm_css$Css$px(1),
				$rtfeldman$elm_css$Css$px(5),
				$rtfeldman$elm_css$Css$hex('#00000000')),
				$rtfeldman$elm_css$Css$Transitions$transition(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$Transitions$boxShadow(500)
					]))
			]));
};
var $rtfeldman$elm_css$Html$Styled$Attributes$property = $rtfeldman$elm_css$VirtualDom$Styled$property;
var $author$project$PronPage$pronBtnMove = F3(
	function (isQuizPlay, cardIdx, _v0) {
		var str = _v0.str;
		var boxPos = _v0.boxPos;
		var btnPos = _v0.btnPos;
		var isRemoved = _v0.isRemoved;
		var _v1 = _Utils_Tuple2(boxPos, btnPos);
		if (_v1.a.$ === 'Just') {
			var pos = _v1.a.a;
			return A2(
				$author$project$PronPage$floatDiv,
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$Attributes$property,
						'targetId',
						$elm$json$Json$Encode$string(
							'pronBox' + ($elm$core$String$fromInt(cardIdx) + ('-' + $elm$core$String$fromInt(pos))))),
						A2(
						$rtfeldman$elm_css$Html$Styled$Attributes$property,
						'isDestroyState',
						$elm$json$Json$Encode$bool(isRemoved)),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$PronPage$pronFloatStyle(isQuizPlay)
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(str)
					]));
		} else {
			if (_v1.b.$ === 'Just') {
				var pos = _v1.b.a;
				return A2(
					$author$project$PronPage$floatDiv,
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$Attributes$property,
							'targetId',
							$elm$json$Json$Encode$string(
								'pronBtn' + ($elm$core$String$fromInt(cardIdx) + ('-' + $elm$core$String$fromInt(pos))))),
							A2(
							$rtfeldman$elm_css$Html$Styled$Attributes$property,
							'isDestroyState',
							$elm$json$Json$Encode$bool(isRemoved)),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$author$project$PronPage$pronFloatStyle(isQuizPlay)
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(str)
						]));
			} else {
				return A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil);
			}
		}
	});
var $author$project$PronPage$floatWordListView = F2(
	function (quizState, model) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_Nil,
			$elm$core$List$concat(
				_List_fromArray(
					[
						A2(
						$elm$core$List$map,
						A3(
							$rtfeldman$elm_css$Html$Styled$Lazy$lazy3,
							$author$project$PronPage$pronBtnMove,
							_Utils_eq(quizState, $author$project$PronPage$QuizPlay),
							model.cardIdx),
						_Utils_ap(
							model.prevBtnList,
							_Utils_ap(model.currentBtnList, model.wrongBtnList)))
					])));
	});
var $author$project$PronPage$NextBtnClicked = {$: 'NextBtnClicked'};
var $author$project$PronPage$nextBtn = A2(
	$rtfeldman$elm_css$Html$Styled$div,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PronPage$NextBtnClicked),
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$height(
					$rtfeldman$elm_css$Css$px(55)),
					$rtfeldman$elm_css$Css$width(
					$rtfeldman$elm_css$Css$pct(100)),
					$rtfeldman$elm_css$Css$displayFlex,
					$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
					$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
					$rtfeldman$elm_css$Css$flexShrink(
					$rtfeldman$elm_css$Css$num(0)),
					$rtfeldman$elm_css$Css$batch(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#42A5F5')),
							$rtfeldman$elm_css$Css$fontSize(
							$rtfeldman$elm_css$Css$px(20)),
							$rtfeldman$elm_css$Css$color(
							$rtfeldman$elm_css$Css$hex('#fff')),
							A4(
							$rtfeldman$elm_css$Css$boxShadow4,
							$rtfeldman$elm_css$Css$px(1),
							$rtfeldman$elm_css$Css$px(1),
							$rtfeldman$elm_css$Css$px(5),
							$rtfeldman$elm_css$Css$hex('#00000040'))
						])),
					$rtfeldman$elm_css$Css$Transitions$transition(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$Transitions$backgroundColor(300),
							$rtfeldman$elm_css$Css$Transitions$color(300)
						]))
				]))
		]),
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$text('다음으로')
		]));
var $author$project$PronPage$PronBtnClicked = function (a) {
	return {$: 'PronBtnClicked', a: a};
};
var $author$project$PronPage$pronBtn = F3(
	function (cardIdx, idx, model) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$author$project$HtmlElement$onPointerDown(
					$author$project$PronPage$PronBtnClicked(idx)),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$padding(
							$rtfeldman$elm_css$Css$px(10))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$id(
							'pronBtn' + ($elm$core$String$fromInt(cardIdx) + ('-' + $elm$core$String$fromInt(idx)))),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(100)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(100)),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(20)),
									$rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#ECECEC')),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(30)),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$color(
									$rtfeldman$elm_css$Css$hex('#ccc'))
								]))
						]),
					_List_fromArray(
						[
							_Utils_eq(model.quizState, $author$project$PronPage$QuizWait) ? $rtfeldman$elm_css$Html$Styled$text('') : $rtfeldman$elm_css$Html$Styled$text(
							A2(
								$elm$core$Maybe$withDefault,
								'',
								$elm$core$List$head(
									A2(
										$elm$core$List$map,
										function (x) {
											return x.str;
										},
										A2(
											$elm$core$List$filter,
											function (x) {
												return _Utils_eq(
													A2($elm$core$Maybe$withDefault, 0, x.btnPos),
													idx);
											},
											$elm$core$List$concat(
												_List_fromArray(
													[model.currentBtnList, model.wrongBtnList])))))))
						]))
				]));
	});
var $rtfeldman$elm_css$Css$stretch = $rtfeldman$elm_css$Css$prop1('stretch');
var $rtfeldman$elm_css$Css$borderTopLeftRadius = $rtfeldman$elm_css$Css$prop1('border-top-left-radius');
var $rtfeldman$elm_css$Css$borderTopRightRadius = $rtfeldman$elm_css$Css$prop1('border-top-right-radius');
var $rtfeldman$elm_css$Css$angleConverter = F2(
	function (suffix, angleVal) {
		return {
			angle: $rtfeldman$elm_css$Css$Structure$Compatible,
			angleOrDirection: $rtfeldman$elm_css$Css$Structure$Compatible,
			value: _Utils_ap(
				$elm$core$String$fromFloat(angleVal),
				suffix)
		};
	});
var $rtfeldman$elm_css$Css$deg = $rtfeldman$elm_css$Css$angleConverter('deg');
var $rtfeldman$elm_css$Css$ellipsis = {textOverflow: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'ellipsis'};
var $rtfeldman$elm_css$Css$collectStops = $elm$core$List$map(
	function (_v0) {
		var c = _v0.a;
		var len = _v0.b;
		return A2(
			$elm$core$String$append,
			c.value,
			A2(
				$elm$core$Maybe$withDefault,
				'',
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeL,
						$elm$core$String$cons(
							_Utils_chr(' ')),
						function ($) {
							return $.value;
						}),
					len)));
	});
var $rtfeldman$elm_css$Css$linearGradient2 = F4(
	function (direction, firstStop, secondStop, otherStops) {
		return {
			backgroundImage: $rtfeldman$elm_css$Css$Structure$Compatible,
			listStyleTypeOrPositionOrImage: $rtfeldman$elm_css$Css$Structure$Compatible,
			value: A2(
				$rtfeldman$elm_css$Css$cssFunction,
				'linear-gradient',
				A2(
					$elm$core$List$cons,
					direction.value,
					$rtfeldman$elm_css$Css$collectStops(
						_Utils_ap(
							_List_fromArray(
								[firstStop, secondStop]),
							otherStops))))
		};
	});
var $rtfeldman$elm_css$Css$noWrap = {flexDirectionOrWrap: $rtfeldman$elm_css$Css$Structure$Compatible, flexWrap: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'nowrap', whiteSpace: $rtfeldman$elm_css$Css$Structure$Compatible};
var $rtfeldman$elm_css$Css$stop = function (c) {
	return _Utils_Tuple2(c, $elm$core$Maybe$Nothing);
};
var $rtfeldman$elm_css$Css$textOverflow = $rtfeldman$elm_css$Css$prop1('text-overflow');
var $author$project$PronPage$PronBoxClicked = function (a) {
	return {$: 'PronBoxClicked', a: a};
};
var $rtfeldman$elm_css$Css$border3 = $rtfeldman$elm_css$Css$prop3('border');
var $author$project$PronPage$pronBox = F3(
	function (canSkip, cardIdx, _v0) {
		var idx = _v0.a;
		var str = _v0.b;
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$author$project$HtmlElement$onPointerDown(
					$author$project$PronPage$PronBoxClicked(idx)),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$id(
							'pronBox' + ($elm$core$String$fromInt(cardIdx) + ('-' + $elm$core$String$fromInt(idx)))),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineFlex),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$margin(
									$rtfeldman$elm_css$Css$px(2)),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(16)),
									$rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#fff')),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(5)),
									A3(
									$rtfeldman$elm_css$Css$border3,
									$rtfeldman$elm_css$Css$px(1),
									$rtfeldman$elm_css$Css$solid,
									$rtfeldman$elm_css$Css$hex('#aaa')),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(25)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(25)),
									canSkip ? $rtfeldman$elm_css$Css$color(
									$rtfeldman$elm_css$Css$hex('#999')) : $rtfeldman$elm_css$Css$color(
									$rtfeldman$elm_css$Css$hex('#fff'))
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(str)
						]))
				]));
	});
var $author$project$PronPage$kanjiDisplay = F3(
	function (canSkip, cardIdx, kanjiWord) {
		var desStyle = $rtfeldman$elm_css$Css$batch(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$fontSize(
					$rtfeldman$elm_css$Css$px(14)),
					$rtfeldman$elm_css$Css$height(
					$rtfeldman$elm_css$Css$px(15)),
					$rtfeldman$elm_css$Css$marginTop(
					$rtfeldman$elm_css$Css$px(3)),
					$rtfeldman$elm_css$Css$paddingLeft(
					$rtfeldman$elm_css$Css$px(3)),
					$rtfeldman$elm_css$Css$paddingRight(
					$rtfeldman$elm_css$Css$px(3))
				]));
		switch (kanjiWord.$) {
			case 'IsNoneKanjiWord':
				var word = kanjiWord.a.word;
				return A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$marginRight(
									$rtfeldman$elm_css$Css$px(0)),
									$rtfeldman$elm_css$Css$marginLeft(
									$rtfeldman$elm_css$Css$px(0))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(40)),
											$rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(1))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(word)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[desStyle]))
								]),
							_List_Nil)
						]));
			case 'IsOneKanjiWord':
				var pron = kanjiWord.a.pron;
				var word = kanjiWord.a.word;
				var des = kanjiWord.a.des;
				return A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$marginRight(
									$rtfeldman$elm_css$Css$px(0)),
									$rtfeldman$elm_css$Css$marginLeft(
									$rtfeldman$elm_css$Css$px(0))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							A2(
								$elm$core$List$map,
								A2($author$project$PronPage$pronBox, canSkip, cardIdx),
								pron)),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(40)),
											$rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(1))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(word)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[desStyle]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(des)
								]))
						]));
			default:
				var wordDesList = kanjiWord.a.wordDesList;
				var pron = kanjiWord.a.pron;
				return A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$marginRight(
									$rtfeldman$elm_css$Css$px(0)),
									$rtfeldman$elm_css$Css$marginLeft(
									$rtfeldman$elm_css$Css$px(0))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							A2(
								$elm$core$List$map,
								A2($author$project$PronPage$pronBox, canSkip, cardIdx),
								pron)),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							A2(
								$elm$core$List$map,
								function (_v1) {
									var word = _v1.a;
									var des = _v1.b;
									return A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
													]))
											]),
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(40)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(1)),
																$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(word)
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																desStyle,
																$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(des)
													]))
											]));
								},
								wordDesList))
						]));
		}
	});
var $author$project$PronPage$wordRender = F3(
	function (canSkip, cardIdx, kanjiWords) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$lineHeight(
							$rtfeldman$elm_css$Css$num(1)),
							$rtfeldman$elm_css$Css$marginTop(
							$rtfeldman$elm_css$Css$px(8))
						]))
				]),
			A2(
				$elm$core$List$map,
				A2($author$project$PronPage$kanjiDisplay, canSkip, cardIdx),
				kanjiWords));
	});
var $author$project$PronPage$wordCard = F4(
	function (canSkip, cardIdx, cardLen, card) {
		var smallMedia = $rtfeldman$elm_css$Css$Media$withMedia(
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Css$Media$only,
					$rtfeldman$elm_css$Css$Media$screen,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$Media$maxWidth(
							$rtfeldman$elm_css$Css$px(360))
						]))
				]));
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$padding(
							$rtfeldman$elm_css$Css$px(10)),
							$rtfeldman$elm_css$Css$paddingTop(
							$rtfeldman$elm_css$Css$px(20)),
							$rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(30)),
							$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
							smallMedia(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$padding($rtfeldman$elm_css$Css$zero)
								]))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$backgroundColor(
									A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
									$rtfeldman$elm_css$Css$paddingBottom(
									$rtfeldman$elm_css$Css$px(25)),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(20)),
									A4(
									$rtfeldman$elm_css$Css$boxShadow4,
									$rtfeldman$elm_css$Css$px(1),
									$rtfeldman$elm_css$Css$px(1),
									$rtfeldman$elm_css$Css$px(5),
									$rtfeldman$elm_css$Css$hex('#00000040')),
									smallMedia(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$borderRadius($rtfeldman$elm_css$Css$zero)
										]))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(42)),
											$rtfeldman$elm_css$Css$backgroundImage(
											A4(
												$rtfeldman$elm_css$Css$linearGradient2,
												$rtfeldman$elm_css$Css$deg(90),
												$rtfeldman$elm_css$Css$stop(
													$rtfeldman$elm_css$Css$hex('#42A5F5')),
												$rtfeldman$elm_css$Css$stop(
													$rtfeldman$elm_css$Css$hex('#7142F5')),
												_List_Nil)),
											$rtfeldman$elm_css$Css$color(
											$rtfeldman$elm_css$Css$hex('fff')),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
											$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(17)),
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
											$rtfeldman$elm_css$Css$borderTopLeftRadius(
											$rtfeldman$elm_css$Css$px(20)),
											$rtfeldman$elm_css$Css$borderTopRightRadius(
											$rtfeldman$elm_css$Css$px(20)),
											smallMedia(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$borderRadius($rtfeldman$elm_css$Css$zero)
												]))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$paddingLeft(
													$rtfeldman$elm_css$Css$px(15)),
													$rtfeldman$elm_css$Css$paddingRight(
													$rtfeldman$elm_css$Css$px(5)),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(17)),
													$rtfeldman$elm_css$Css$opacity(
													$rtfeldman$elm_css$Css$num(1))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(
											$elm$core$String$fromInt(cardIdx + 1))
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden),
													$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
													$rtfeldman$elm_css$Css$textOverflow($rtfeldman$elm_css$Css$ellipsis)
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(card.wordHead)
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$paddingLeft(
													$rtfeldman$elm_css$Css$px(5)),
													$rtfeldman$elm_css$Css$paddingRight(
													$rtfeldman$elm_css$Css$px(15)),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(17)),
													$rtfeldman$elm_css$Css$opacity(
													$rtfeldman$elm_css$Css$num(1))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(
											$elm$core$String$fromInt(cardLen))
										]))
								])),
							A3($author$project$PronPage$wordRender, canSkip, cardIdx, card.kanjiWords)
						]))
				]));
	});
var $author$project$PronPage$contentView = F2(
	function (len, model) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$id('float-origin'),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$author$project$PronPage$absoluteFullStyle,
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$stretch),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$translateX(
											$rtfeldman$elm_css$Css$pct(0))
										])),
									$rtfeldman$elm_css$Css$Transitions$transition(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$Transitions$transform(300),
											$rtfeldman$elm_css$Css$Transitions$opacity(300)
										]))
								]))
						]),
					_List_fromArray(
						[
							A3(
							$author$project$HtmlElement$collapseHeaderView,
							_Utils_ap(
								$author$project$GlobalPort$pronName,
								$elm$core$String$fromInt(model.level)),
							$author$project$PronPage$ToRoadMapPage,
							A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil)),
							A4(
							$author$project$PronPage$wordCard,
							_Utils_eq(model.quizState, $author$project$PronPage$QuizWait) || model.canSkip,
							model.cardIdx,
							len,
							model.card),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$backgroundColor(
											A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
											$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
											A4(
											$rtfeldman$elm_css$Css$boxShadow4,
											$rtfeldman$elm_css$Css$px(1),
											$rtfeldman$elm_css$Css$px(1),
											$rtfeldman$elm_css$Css$px(10),
											$rtfeldman$elm_css$Css$hex('#00000020'))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$flexBasis(
													$rtfeldman$elm_css$Css$px(280)),
													$rtfeldman$elm_css$Css$displayFlex,
													$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
													$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
												]))
										]),
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$paddingTop(
															$rtfeldman$elm_css$Css$px(10))
														]))
												]),
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$displayFlex,
																	$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
																]))
														]),
													_List_fromArray(
														[
															A3($author$project$PronPage$pronBtn, model.cardIdx, 0, model),
															A3($author$project$PronPage$pronBtn, model.cardIdx, 1, model)
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$displayFlex,
																	$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
																]))
														]),
													_List_fromArray(
														[
															A3($author$project$PronPage$pronBtn, model.cardIdx, 2, model),
															A3($author$project$PronPage$pronBtn, model.cardIdx, 3, model)
														]))
												]))
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_Nil,
									A2(
										$elm$core$List$map,
										function (i) {
											return _Utils_eq(i, model.cardIdx) ? A2($author$project$PronPage$floatWordListView, model.quizState, model) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil);
										},
										A2($elm$core$List$range, 0, len - 1))),
									function () {
									var _v0 = model.quizState;
									if (_v0.$ === 'QuizPlay') {
										return A2($author$project$PronPage$answerCheckBtn, model.canSkip, model.isAnswerFilled);
									} else {
										return $author$project$PronPage$nextBtn;
									}
								}()
								]))
						]))
				]));
	});
var $author$project$PronPage$Speak = function (a) {
	return {$: 'Speak', a: a};
};
var $rtfeldman$elm_css$Css$contentBox = {backgroundClip: $rtfeldman$elm_css$Css$Structure$Compatible, boxSizing: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'content-box'};
var $rtfeldman$elm_css$Css$alignSelf = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'alignSelf',
		'align-self',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Css$spaceAround = $rtfeldman$elm_css$Css$prop1('space-around');
var $author$project$HtmlElement$endOkBtn = function (msg) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceAround),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$flexEnd),
						$rtfeldman$elm_css$Css$alignSelf($rtfeldman$elm_css$Css$stretch),
						A5(
						$rtfeldman$elm_css$Css$boxShadow5,
						$rtfeldman$elm_css$Css$px(0),
						$rtfeldman$elm_css$Css$px(-1),
						$rtfeldman$elm_css$Css$px(10),
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$hex('#00000011'))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick(msg),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(45)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#42A5F5')),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(50)),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(20)),
								$rtfeldman$elm_css$Css$marginBottom(
								$rtfeldman$elm_css$Css$px(30)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#fff')),
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(18)),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(90)),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.7))
									])),
								$rtfeldman$elm_css$Css$Transitions$transition(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$Transitions$opacity(100)
									]))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text('확인')
					]))
			]));
};
var $rtfeldman$elm_css$Css$maxWidth = $rtfeldman$elm_css$Css$prop1('max-width');
var $author$project$PronPage$modalView = F4(
	function (isModalOpen, videoName, level, _v0) {
		var quizResult = _v0.quizResult;
		var renderResultWord = function (w) {
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick(
						$author$project$PronPage$Speak(
							$author$project$Utility$getSpeakString(
								{pron: w.pron, word: w.word}))),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff55')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(14)),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(11)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(5)),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.85))
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(24))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.word)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.meaning)
							]))
					]));
		};
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
							$rtfeldman$elm_css$Css$Transitions$transition(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$Transitions$opacity(300)
								])),
							isModalOpen ? $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(1)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
								])) : $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
								])),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$backgroundImage(
							$rtfeldman$elm_css$Css$url('images/bg.webp')),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#547ef5')),
							A2(
							$rtfeldman$elm_css$Css$backgroundSize2,
							$rtfeldman$elm_css$Css$pct(100),
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(2000))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$flexGrow(
											$rtfeldman$elm_css$Css$num(1)),
											$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$maxWidth(
													$rtfeldman$elm_css$Css$px(500)),
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#fff')),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$contentBox)
												]))
										]),
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$fontSize(
															$rtfeldman$elm_css$Css$px(24)),
															$rtfeldman$elm_css$Css$marginTop(
															$rtfeldman$elm_css$Css$px(25))
														]))
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text(videoName)
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$fontSize(
															$rtfeldman$elm_css$Css$px(20))
														]))
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text(
													_Utils_ap(
														$author$project$GlobalPort$pronName,
														$elm$core$String$fromInt(level)))
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$width(
															$rtfeldman$elm_css$Css$pct(100)),
															A3(
															$rtfeldman$elm_css$Css$borderBottom3,
															$rtfeldman$elm_css$Css$px(4),
															$rtfeldman$elm_css$Css$solid,
															$rtfeldman$elm_css$Css$hex('#fff')),
															$rtfeldman$elm_css$Css$marginTop(
															$rtfeldman$elm_css$Css$px(7))
														]))
												]),
											_List_Nil),
											A2(
											$elm$core$List$any,
											function (q) {
												return !q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('틀린 단어'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				A2(
																					$elm$core$Basics$composeL,
																					$elm$core$Basics$not,
																					function ($) {
																						return $.isRight;
																					}),
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(5))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultWord,
														A2(
															$elm$core$List$filter,
															A2(
																$elm$core$Basics$composeL,
																$elm$core$Basics$not,
																function ($) {
																	return $.isRight;
																}),
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$elm$core$List$any,
											function (q) {
												return q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('맞은 단어'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				function ($) {
																					return $.isRight;
																				},
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(4))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultWord,
														A2(
															$elm$core$List$filter,
															function ($) {
																return $.isRight;
															},
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$paddingTop(
															$rtfeldman$elm_css$Css$px(40))
														]))
												]),
											_List_Nil)
										]))
								])),
							$author$project$HtmlElement$endOkBtn($author$project$PronPage$EndBtnClicked)
						]))
				]));
	});
var $author$project$PronPage$rightAlert = function (isOpen) {
	var translateXVal = isOpen ? 0 : 100;
	var opacityVal = isOpen ? 1 : 0;
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#3fa2f1')),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(45)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(335)),
						$rtfeldman$elm_css$Css$color(
						$rtfeldman$elm_css$Css$hex('#fff')),
						$rtfeldman$elm_css$Css$fontSize(
						$rtfeldman$elm_css$Css$px(20)),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
						$rtfeldman$elm_css$Css$transforms(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$translateX(
								$rtfeldman$elm_css$Css$pct(translateXVal))
							])),
						$rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(opacityVal)),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$transform(500),
								$rtfeldman$elm_css$Css$Transitions$opacity(500)
							])),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(3))
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text('정답입니다')
			]));
};
var $author$project$PronPage$wrongAlert = function (isOpen) {
	var translateXVal = isOpen ? 0 : 100;
	var opacityVal = isOpen ? 1 : 0;
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#f55151')),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(45)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(335)),
						$rtfeldman$elm_css$Css$color(
						$rtfeldman$elm_css$Css$hex('#fff')),
						$rtfeldman$elm_css$Css$fontSize(
						$rtfeldman$elm_css$Css$px(20)),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
						$rtfeldman$elm_css$Css$transforms(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$translateX(
								$rtfeldman$elm_css$Css$pct(translateXVal))
							])),
						$rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(opacityVal)),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$transform(500),
								$rtfeldman$elm_css$Css$Transitions$opacity(500)
							])),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(3))
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text('틀렸습니다')
			]));
};
var $author$project$PronPage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$PronPage$absoluteFullStyle,
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(-1)),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url('images/bg.webp')),
								A2(
								$rtfeldman$elm_css$Css$backgroundSize2,
								$rtfeldman$elm_css$Css$pct(100),
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_Nil),
				A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$PronPage$wrongAlert, model.isWrongAlertOpen),
				A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$PronPage$rightAlert, model.isRightAlertOpen),
				A4($author$project$PronPage$modalView, model.isModalOpen, model.data.name, model.level, model.resultData),
				A2(
				$author$project$PronPage$contentView,
				$elm$core$Array$length(model.info.cardArray),
				model)
			]));
};
var $author$project$PronPage$editView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$right(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
								$rtfeldman$elm_css$Css$minWidth(
								$rtfeldman$elm_css$Css$px(400)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						$author$project$PronPage$view(model)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(100)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ccc'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
										$rtfeldman$elm_css$Css$top(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(10))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PronPage$SaveClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('저장하기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PronPage$PrevClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('이전으로')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PronPage$NextClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('다음으로')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PronPage$GetRubyBtnClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('getRuby')
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(50)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(5)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(30))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$PronPage$SetEditableValue,
								$author$project$EditableValue$editableView(model.editableValue))
							]))
					]))
			]));
};
var $author$project$SentencePage$ApplyTransData = {$: 'ApplyTransData'};
var $author$project$SentencePage$GetFromListenClicked = {$: 'GetFromListenClicked'};
var $author$project$SentencePage$GetFromListenClickedGerman = {$: 'GetFromListenClickedGerman'};
var $author$project$SentencePage$GotRubyFromListen = {$: 'GotRubyFromListen'};
var $author$project$SentencePage$NextClicked = {$: 'NextClicked'};
var $author$project$SentencePage$PreTranslateText = {$: 'PreTranslateText'};
var $author$project$SentencePage$PrevClicked = {$: 'PrevClicked'};
var $author$project$SentencePage$SaveClicked = {$: 'SaveClicked'};
var $author$project$SentencePage$SetEditableValue = function (a) {
	return {$: 'SetEditableValue', a: a};
};
var $author$project$SentencePage$TimeShiftClicked = {$: 'TimeShiftClicked'};
var $author$project$SentencePage$UpdateTimeShiftInput = function (a) {
	return {$: 'UpdateTimeShiftInput', a: a};
};
var $author$project$SentencePage$UpdateTransData = function (a) {
	return {$: 'UpdateTransData', a: a};
};
var $author$project$SentencePage$JumpAndPlay = function (a) {
	return {$: 'JumpAndPlay', a: a};
};
var $author$project$SentencePage$PlayVideo = {$: 'PlayVideo'};
var $author$project$SentencePage$absoluteFullStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
			$rtfeldman$elm_css$Css$left(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$right(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$top(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$bottom(
			$rtfeldman$elm_css$Css$px(0))
		]));
var $rtfeldman$elm_css$Css$Transitions$BorderBottom = {$: 'BorderBottom'};
var $rtfeldman$elm_css$Css$Transitions$borderBottom = $rtfeldman$elm_css$Css$Transitions$durationTransition($rtfeldman$elm_css$Css$Transitions$BorderBottom);
var $author$project$SentencePage$BtnUpClicked = function (a) {
	return {$: 'BtnUpClicked', a: a};
};
var $author$project$SentencePage$btnBackStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$paddingLeft(
			$rtfeldman$elm_css$Css$px(10)),
			$rtfeldman$elm_css$Css$paddingRight(
			$rtfeldman$elm_css$Css$px(10)),
			$rtfeldman$elm_css$Css$height(
			$rtfeldman$elm_css$Css$px(35)),
			$rtfeldman$elm_css$Css$lineHeight(
			$rtfeldman$elm_css$Css$px(35)),
			$rtfeldman$elm_css$Css$marginTop(
			$rtfeldman$elm_css$Css$px(5)),
			$rtfeldman$elm_css$Css$marginLeft(
			$rtfeldman$elm_css$Css$px(3)),
			$rtfeldman$elm_css$Css$marginRight(
			$rtfeldman$elm_css$Css$px(3)),
			$rtfeldman$elm_css$Css$borderRadius(
			$rtfeldman$elm_css$Css$px(18)),
			$rtfeldman$elm_css$Css$fontSize(
			$rtfeldman$elm_css$Css$px(18)),
			$rtfeldman$elm_css$Css$backgroundColor(
			$rtfeldman$elm_css$Css$hex('#EFEFEF')),
			$rtfeldman$elm_css$Css$color(
			$rtfeldman$elm_css$Css$hex('#EFEFEF')),
			$rtfeldman$elm_css$Css$Transitions$transition(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Transitions$backgroundColor(300)
				])),
			$rtfeldman$elm_css$Css$borderRadius(
			$rtfeldman$elm_css$Css$px(10))
		]));
var $author$project$SentencePage$btnUpView = F2(
	function (quizState, w) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$author$project$HtmlElement$onPointerDown(
					$author$project$SentencePage$BtnUpClicked(w.id)),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$SentencePage$isInputStateBase(quizState) ? $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto) : $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
							$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$id(
							'btnViewBack-B' + $elm$core$String$fromInt(w.id)),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$author$project$SentencePage$btnBackStyle,
									$rtfeldman$elm_css$Css$marginTop(
									$rtfeldman$elm_css$Css$px(2)),
									$rtfeldman$elm_css$Css$marginBottom(
									$rtfeldman$elm_css$Css$px(5))
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(
							$author$project$SentencePage$getOriginalWord(w.word))
						]))
				]));
	});
var $author$project$SentencePage$BtnClicked = function (a) {
	return {$: 'BtnClicked', a: a};
};
var $author$project$SentencePage$getReplaceWord = function (w) {
	return A2(
		$elm$core$Maybe$withDefault,
		$author$project$SentencePage$getOriginalWord(w),
		$elm$core$List$head(
			A2(
				$elm$core$List$drop,
				1,
				A2($elm$core$String$split, '\n', w))));
};
var $author$project$SentencePage$hasReplaceWord = function (w) {
	return function (x) {
		return !_Utils_eq(x, $elm$core$Maybe$Nothing);
	}(
		$elm$core$List$head(
			A2(
				$elm$core$List$drop,
				1,
				A2($elm$core$String$split, '\n', w))));
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $author$project$SentencePage$getRubyList = function (w) {
	var aux = F2(
		function (res, list) {
			aux:
			while (true) {
				_v0$3:
				while (true) {
					if (list.b) {
						switch (list.a.a) {
							case 'g':
								if (list.b.b && (list.b.a.a === 'r')) {
									var _v1 = list.a;
									var b = _v1.b;
									var _v2 = list.b;
									var _v3 = _v2.a;
									var y = _v3.b;
									var li = _v2.b;
									var $temp$res = A2(
										$elm$core$List$cons,
										_Utils_Tuple2(b, y),
										res),
										$temp$list = li;
									res = $temp$res;
									list = $temp$list;
									continue aux;
								} else {
									break _v0$3;
								}
							case 's':
								if (list.b.b && (list.b.a.a === 'r')) {
									var _v4 = list.a;
									var b = _v4.b;
									var _v5 = list.b;
									var _v6 = _v5.a;
									var y = _v6.b;
									var li = _v5.b;
									if ($elm$core$String$length(b) === 1) {
										var $temp$res = A2(
											$elm$core$List$cons,
											_Utils_Tuple2(b, y),
											res),
											$temp$list = li;
										res = $temp$res;
										list = $temp$list;
										continue aux;
									} else {
										var $temp$res = A2(
											$elm$core$List$cons,
											_Utils_Tuple2(
												A2($elm$core$String$dropRight, 1, b),
												''),
											A2(
												$elm$core$List$cons,
												_Utils_Tuple2(
													A2($elm$core$String$right, 1, b),
													y),
												res)),
											$temp$list = li;
										res = $temp$res;
										list = $temp$list;
										continue aux;
									}
								} else {
									var _v7 = list.a;
									var y = _v7.b;
									var li = list.b;
									var $temp$res = A2(
										$elm$core$List$cons,
										_Utils_Tuple2(y, ''),
										res),
										$temp$list = li;
									res = $temp$res;
									list = $temp$list;
									continue aux;
								}
							default:
								break _v0$3;
						}
					} else {
						return $elm$core$List$reverse(res);
					}
				}
				var li = list.b;
				var $temp$res = res,
					$temp$list = li;
				res = $temp$res;
				list = $temp$list;
				continue aux;
			}
		});
	return A2(
		aux,
		_List_Nil,
		A2(
			$elm$core$List$filter,
			function (_v14) {
				var x = _v14.a;
				var y = _v14.b;
				return !((x === 's') && (y === ''));
			},
			A2(
				$elm$core$List$concatMap,
				function (_v11) {
					var x = _v11.a;
					var y = _v11.b;
					return (x === 's') ? A2(
						$elm$core$List$concatMap,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$split('{'),
							function (s) {
								_v12$2:
								while (true) {
									if (s.b) {
										if (s.b.b) {
											if (!s.b.b.b) {
												var a = s.a;
												var _v13 = s.b;
												var b = _v13.a;
												return _List_fromArray(
													[
														_Utils_Tuple2('s', a),
														_Utils_Tuple2('r', b)
													]);
											} else {
												break _v12$2;
											}
										} else {
											var a = s.a;
											return _List_fromArray(
												[
													_Utils_Tuple2('s', a)
												]);
										}
									} else {
										break _v12$2;
									}
								}
								return _List_Nil;
							}),
						A2($elm$core$String$split, '}', y)) : _List_fromArray(
						[
							_Utils_Tuple2(x, y)
						]);
				},
				A2(
					$elm$core$List$filter,
					function (_v10) {
						var x = _v10.a;
						var y = _v10.b;
						return !((x === 's') && (y === ''));
					},
					A2(
						$elm$core$List$concatMap,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$split('<'),
							function (x) {
								_v8$2:
								while (true) {
									if (x.b) {
										if (x.b.b) {
											if (!x.b.b.b) {
												var a = x.a;
												var _v9 = x.b;
												var b = _v9.a;
												return _List_fromArray(
													[
														_Utils_Tuple2('s', a),
														_Utils_Tuple2('g', b)
													]);
											} else {
												break _v8$2;
											}
										} else {
											var a = x.a;
											return _List_fromArray(
												[
													_Utils_Tuple2('s', a)
												]);
										}
									} else {
										break _v8$2;
									}
								}
								return _List_Nil;
							}),
						A2($elm$core$String$split, '>', w))))));
};
var $author$project$SentencePage$getOriginalRuby = function (w) {
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function (_v0) {
				var a = _v0.a;
				var b = _v0.b;
				return (b === '') ? a : $elm$core$String$concat(
					_List_fromArray(
						['<ruby>', a, '<rt>', b, '</rt>', '</ruby>']));
			},
			$author$project$SentencePage$getRubyList(
				A2(
					$elm$core$Maybe$withDefault,
					w,
					$elm$core$List$head(
						A2($elm$core$String$split, '\n', w))))));
};
var $author$project$SentencePage$renderRubyWord = function (str) {
	var _v0 = $hecrj$html_parser$Html$Parser$run(
		$author$project$SentencePage$getOriginalRuby(str));
	if (_v0.$ === 'Ok') {
		var nodes = _v0.a;
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$transforms(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$translateY(
									$rtfeldman$elm_css$Css$px(3))
								]))
						]))
				]),
			A2(
				$elm$core$List$map,
				$rtfeldman$elm_css$Html$Styled$fromUnstyled,
				$hecrj$html_parser$Html$Parser$Util$toVirtualDom(nodes)));
	} else {
		return A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil);
	}
};
var $author$project$SentencePage$btnView = F4(
	function (isLastSelected, isCurrent, quizState, w) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$author$project$HtmlElement$onPointerDown(
					$author$project$SentencePage$BtnClicked(w.id)),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$SentencePage$isInputStateBase(quizState) ? $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto) : $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
							$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$id(
							'btnViewBack-A' + $elm$core$String$fromInt(w.id)),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$author$project$SentencePage$btnBackStyle,
									isLastSelected ? $rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#aaa')) : $rtfeldman$elm_css$Css$batch(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$color(
											$rtfeldman$elm_css$Css$hex('#888'))
										])),
									A2($elm$core$String$contains, '}', w.word) ? $rtfeldman$elm_css$Css$batch(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(40)),
											$rtfeldman$elm_css$Css$lineHeight(
											$rtfeldman$elm_css$Css$px(40)),
											$rtfeldman$elm_css$Css$paddingLeft(
											$rtfeldman$elm_css$Css$px(10)),
											$rtfeldman$elm_css$Css$paddingRight(
											$rtfeldman$elm_css$Css$px(10)),
											$rtfeldman$elm_css$Css$borderRadius(
											$rtfeldman$elm_css$Css$px(10))
										])) : $rtfeldman$elm_css$Css$batch(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$borderRadius(
											$rtfeldman$elm_css$Css$px(10))
										]))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$height(
															$rtfeldman$elm_css$Css$px(0)),
															$rtfeldman$elm_css$Css$opacity(
															$rtfeldman$elm_css$Css$num(0))
														]))
												]),
											_List_fromArray(
												[
													A2($elm$core$String$contains, '}', w.word) ? $author$project$SentencePage$renderRubyWord(w.word) : $rtfeldman$elm_css$Html$Styled$text(
													$author$project$SentencePage$getOriginalWord(w.word))
												]))
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_Nil,
									_List_fromArray(
										[
											$author$project$SentencePage$hasReplaceWord(w.word) ? $rtfeldman$elm_css$Html$Styled$text(
											$author$project$SentencePage$getReplaceWord(w.word)) : (A2($elm$core$String$contains, '}', w.word) ? $author$project$SentencePage$renderRubyWord(w.word) : $rtfeldman$elm_css$Html$Styled$text(w.word))
										]))
								]))
						]))
				]));
	});
var $author$project$SentencePage$getSecondDescription = function (str) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$drop,
			1,
			A2($elm$core$String$split, '\n', str)));
};
var $author$project$SentencePage$isCorrectAnswer = function (model) {
	var isFullInput = _Utils_eq(
		$elm$core$List$length(model.btnList),
		$elm$core$List$length(model.selectedBtnIds));
	if (isFullInput) {
		var selectedWords = A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.word;
				},
				A2($elm$core$Basics$composeR, $author$project$SentencePage$getOriginalWord, $elm$core$String$trim)),
			A2(
				$elm$core$List$filterMap,
				$author$project$SentencePage$idToWordBtn(model.btnList),
				model.selectedBtnIds));
		var isCorrect = _Utils_eq(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.word;
					},
					A2($elm$core$Basics$composeR, $author$project$SentencePage$getOriginalWord, $elm$core$String$trim)),
				model.btnList),
			selectedWords);
		return isCorrect;
	} else {
		return false;
	}
};
var $author$project$SentencePage$contentView = F2(
	function (isCurrent, content) {
		var isExplainState = (!_Utils_eq(
			$elm$core$Maybe$Nothing,
			$author$project$SentencePage$getSecondDescription(content.korTranslation))) && A2(
			$elm$core$List$all,
			function (b) {
				return !b.isMoved;
			},
			content.btnList);
		var isBadState = (_Utils_eq(content.quizState, $author$project$SentencePage$WrongInputBetween) || _Utils_eq(content.quizState, $author$project$SentencePage$WrongInputAgain)) && (!$author$project$SentencePage$isCorrectAnswer(content));
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$paddingLeft(
							$rtfeldman$elm_css$Css$px(10)),
							$rtfeldman$elm_css$Css$paddingRight(
							$rtfeldman$elm_css$Css$px(10)),
							$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$marginTop(
									$rtfeldman$elm_css$Css$px(10)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(168)),
									$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden),
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$bottom(
											$rtfeldman$elm_css$Css$px(0)),
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
													$rtfeldman$elm_css$Css$bottom(
													$rtfeldman$elm_css$Css$px(43)),
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$height(
													$rtfeldman$elm_css$Css$px(40)),
													A3(
													$rtfeldman$elm_css$Css$borderBottom3,
													$rtfeldman$elm_css$Css$px(2),
													$rtfeldman$elm_css$Css$solid,
													A3($rtfeldman$elm_css$Css$rgb, 200, 200, 200))
												]))
										]),
									_List_Nil),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
													$rtfeldman$elm_css$Css$bottom(
													$rtfeldman$elm_css$Css$px(85)),
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$height(
													$rtfeldman$elm_css$Css$px(40)),
													A3(
													$rtfeldman$elm_css$Css$borderBottom3,
													$rtfeldman$elm_css$Css$px(2),
													$rtfeldman$elm_css$Css$solid,
													A3($rtfeldman$elm_css$Css$rgb, 200, 200, 200))
												]))
										]),
									_List_Nil),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
													$rtfeldman$elm_css$Css$bottom(
													$rtfeldman$elm_css$Css$px(127)),
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$height(
													$rtfeldman$elm_css$Css$px(40)),
													A3(
													$rtfeldman$elm_css$Css$borderBottom3,
													$rtfeldman$elm_css$Css$px(2),
													$rtfeldman$elm_css$Css$solid,
													A3($rtfeldman$elm_css$Css$rgb, 200, 200, 200))
												]))
										]),
									_List_Nil),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
													$rtfeldman$elm_css$Css$bottom(
													$rtfeldman$elm_css$Css$px(169)),
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$height(
													$rtfeldman$elm_css$Css$px(40)),
													A3(
													$rtfeldman$elm_css$Css$borderBottom3,
													$rtfeldman$elm_css$Css$px(2),
													$rtfeldman$elm_css$Css$solid,
													A3($rtfeldman$elm_css$Css$rgb, 200, 200, 200))
												]))
										]),
									_List_Nil),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$minHeight(
													$rtfeldman$elm_css$Css$px(168)),
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$bottom(
													$rtfeldman$elm_css$Css$px(0)),
													$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
													$rtfeldman$elm_css$Css$zIndex(
													$rtfeldman$elm_css$Css$int(3))
												]))
										]),
									A2(
										$elm$core$List$map,
										$author$project$SentencePage$btnUpView(content.quizState),
										A2(
											$elm$core$List$filterMap,
											$author$project$SentencePage$idToWordBtn(content.btnList),
											content.selectedBtnIds)))
								]))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$paddingBottom(
									$rtfeldman$elm_css$Css$px(10)),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(18)),
									$rtfeldman$elm_css$Css$color(
									A3($rtfeldman$elm_css$Css$rgb, 100, 100, 100))
								]))
						]),
					_List_fromArray(
						[
							function () {
							if (isBadState) {
								return $rtfeldman$elm_css$Html$Styled$text(
									A2(
										$elm$core$String$join,
										' ',
										A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												function ($) {
													return $.word;
												},
												A2($elm$core$Basics$composeR, $elm$core$String$trim, $author$project$SentencePage$getOriginalWord)),
											content.btnList)));
							} else {
								var _v0 = A2($elm$core$String$split, '\n', content.korTranslation);
								if (_v0.b) {
									if (_v0.b.b) {
										var aDes = _v0.a;
										var _v1 = _v0.b;
										var bDes = _v1.a;
										return isExplainState ? $rtfeldman$elm_css$Html$Styled$text(bDes) : $rtfeldman$elm_css$Html$Styled$text(aDes);
									} else {
										var aDes = _v0.a;
										return $rtfeldman$elm_css$Html$Styled$text(aDes);
									}
								} else {
									return $rtfeldman$elm_css$Html$Styled$text('');
								}
							}
						}()
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											A3(
											$rtfeldman$elm_css$Css$borderBottom3,
											$rtfeldman$elm_css$Css$px(2),
											$rtfeldman$elm_css$Css$solid,
											$rtfeldman$elm_css$Css$hex(
												isBadState ? '#f55151' : (isExplainState ? '#8c45f6' : '#00A8FF'))),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$px(80)),
											$rtfeldman$elm_css$Css$Transitions$transition(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$Transitions$borderBottom(300)
												]))
										]))
								]),
							_List_Nil)
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$marginTop(
									$rtfeldman$elm_css$Css$px(15))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							function () {
								var lastSelectedId = A2(
									$elm$core$Maybe$withDefault,
									-1,
									$elm$core$List$head(
										$elm$core$List$reverse(content.selectedBtnIds)));
								var bList = A2(
									$elm$core$List$filter,
									function (x) {
										return !A2($elm$core$String$startsWith, '*', x.word);
									},
									content.btnList);
								var aList = A2(
									$elm$core$List$filter,
									function (x) {
										return A2($elm$core$String$startsWith, '*', x.word);
									},
									content.btnList);
								var _v2 = A2(
									$elm$random$Random$step,
									$author$project$Utility$shuffle(bList),
									content.randomSeed);
								var shuffled = _v2.a;
								var btnViewList = A2(
									$elm$core$List$map,
									function (b) {
										return A4(
											$author$project$SentencePage$btnView,
											$author$project$SentencePage$isInputStateBase(content.quizState) && _Utils_eq(b.id, lastSelectedId),
											isCurrent,
											content.quizState,
											b);
									},
									_Utils_ap(aList, shuffled));
								return btnViewList;
							}())
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$paddingTop(
									$rtfeldman$elm_css$Css$px(40))
								]))
						]),
					_List_Nil)
				]));
	});
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp2 = F3(
	function (fn, arg1, arg2) {
		return $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled(
			A2(fn, arg1, arg2));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$lazy2 = F3(
	function (fn, arg1, arg2) {
		return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
			A4($elm$virtual_dom$VirtualDom$lazy3, $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp2, fn, arg1, arg2));
	});
var $rtfeldman$elm_css$Html$Styled$Lazy$lazy2 = $rtfeldman$elm_css$VirtualDom$Styled$lazy2;
var $author$project$SentencePage$currentView = function (content) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$author$project$SentencePage$absoluteFullStyle,
						$rtfeldman$elm_css$Css$transforms(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$translateX(
								$rtfeldman$elm_css$Css$pct(0))
							])),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$transform(300),
								$rtfeldman$elm_css$Css$Transitions$opacity(300)
							]))
					]))
			]),
		_List_fromArray(
			[
				A3($rtfeldman$elm_css$Html$Styled$Lazy$lazy2, $author$project$SentencePage$contentView, true, content)
			]));
};
var $author$project$SentencePage$floatDiv = $rtfeldman$elm_css$Html$Styled$node('float-div');
var $author$project$SentencePage$floatWordView = F5(
	function (isActive, quizState, isInputWaiting, orderIdx, w) {
		var targetId = w.isMoved ? ('btnViewBack-B' + $elm$core$String$fromInt(w.id)) : ('btnViewBack-A' + $elm$core$String$fromInt(w.id));
		var btnStyle = $rtfeldman$elm_css$Css$batch(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$lineHeight(
					$rtfeldman$elm_css$Css$px(35)),
					$rtfeldman$elm_css$Css$color(
					$rtfeldman$elm_css$Css$hex('#fff')),
					isInputWaiting ? A4(
					$rtfeldman$elm_css$Css$boxShadow4,
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(5),
					$rtfeldman$elm_css$Css$hex('#00000030')) : A4(
					$rtfeldman$elm_css$Css$boxShadow4,
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(5),
					$rtfeldman$elm_css$Css$hex('#00000000')),
					$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
					$rtfeldman$elm_css$Css$Transitions$transition(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$Transitions$boxShadow(500)
						])),
					$rtfeldman$elm_css$Css$opacity(
					$rtfeldman$elm_css$Css$num(
						isActive ? 1 : 0))
				]));
		return A2(
			$author$project$SentencePage$floatDiv,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$Attributes$property,
					'targetId',
					$elm$json$Json$Encode$string(targetId)),
					A2(
					$rtfeldman$elm_css$Html$Styled$Attributes$property,
					'isDestroyState',
					$elm$json$Json$Encode$bool(
						_Utils_eq(quizState, $author$project$SentencePage$RightStart))),
					A2(
					$rtfeldman$elm_css$Html$Styled$Attributes$property,
					'isShortDestroy',
					$elm$json$Json$Encode$bool(true)),
					A2(
					$rtfeldman$elm_css$Html$Styled$Attributes$property,
					'orderIdx',
					$elm$json$Json$Encode$int(orderIdx)),
					$rtfeldman$elm_css$Html$Styled$Attributes$id(
					'float' + ('-btn' + $elm$core$String$fromInt(w.id))),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							btnStyle,
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
							A2($elm$core$String$startsWith, '*', w.word) ? $rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#8c45f6')) : $rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#00A8FF'))
						]))
				]),
			_List_fromArray(
				[
					((!w.isMoved) && A2($elm$core$String$contains, '}', w.word)) ? $author$project$SentencePage$renderRubyWord(w.word) : $rtfeldman$elm_css$Html$Styled$text(
					$author$project$SentencePage$getOriginalWord(w.word))
				]));
	});
var $author$project$SentencePage$getMatchIdx = F2(
	function (isMatch, list) {
		var aux = F2(
			function (idx, li) {
				aux:
				while (true) {
					if (li.b) {
						var hd = li.a;
						var tl = li.b;
						if (isMatch(hd)) {
							return idx;
						} else {
							var $temp$idx = idx + 1,
								$temp$li = tl;
							idx = $temp$idx;
							li = $temp$li;
							continue aux;
						}
					} else {
						return -1;
					}
				}
			});
		return A2(aux, 0, list);
	});
var $author$project$SentencePage$floatWordListView = function (model) {
	var sids = model.selectedBtnIds;
	var isInput = $author$project$SentencePage$isInputState(model);
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
			]),
		A2(
			$elm$core$List$map,
			function (b) {
				return A5(
					$author$project$SentencePage$floatWordView,
					true,
					model.quizState,
					isInput,
					A2(
						$author$project$SentencePage$getMatchIdx,
						function (sid) {
							return _Utils_eq(sid, b.id);
						},
						sids),
					b);
			},
			model.btnList));
};
var $author$project$SentencePage$Speak = function (a) {
	return {$: 'Speak', a: a};
};
var $author$project$SentencePage$modalView = F3(
	function (isModalOpen, videoName, _v0) {
		var quizResult = _v0.quizResult;
		var renderResultSentence = function (s) {
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick(
						$author$project$SentencePage$Speak(
							$author$project$Utility$getSpeakString(
								{pron: s.pron, word: s.sentence}))),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff55')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(14)),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(11)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(5)),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.85))
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(18))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(s.sentence)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(s.kor)
							]))
					]));
		};
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
							$rtfeldman$elm_css$Css$Transitions$transition(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$Transitions$opacity(300)
								])),
							isModalOpen ? $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(1)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
								])) : $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
								])),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$backgroundImage(
							$rtfeldman$elm_css$Css$url('images/bg.webp')),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#547ef5')),
							A2(
							$rtfeldman$elm_css$Css$backgroundSize2,
							$rtfeldman$elm_css$Css$pct(100),
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(2000))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$flexGrow(
											$rtfeldman$elm_css$Css$num(1)),
											$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$maxWidth(
													$rtfeldman$elm_css$Css$px(500)),
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#fff')),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$contentBox)
												]))
										]),
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$fontSize(
															$rtfeldman$elm_css$Css$px(24)),
															$rtfeldman$elm_css$Css$marginTop(
															$rtfeldman$elm_css$Css$px(25))
														]))
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text(videoName)
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$fontSize(
															$rtfeldman$elm_css$Css$px(20))
														]))
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text(
													A3($elm$core$String$replace, '문장 조합하기', '문장 만들기', $author$project$GlobalPort$sentenceName))
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$width(
															$rtfeldman$elm_css$Css$pct(100)),
															A3(
															$rtfeldman$elm_css$Css$borderBottom3,
															$rtfeldman$elm_css$Css$px(4),
															$rtfeldman$elm_css$Css$solid,
															$rtfeldman$elm_css$Css$hex('#fff')),
															$rtfeldman$elm_css$Css$marginTop(
															$rtfeldman$elm_css$Css$px(7))
														]))
												]),
											_List_Nil),
											A2(
											$elm$core$List$any,
											function (q) {
												return !q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('틀린 문장'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				A2(
																					$elm$core$Basics$composeL,
																					$elm$core$Basics$not,
																					function ($) {
																						return $.isRight;
																					}),
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(5))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultSentence,
														A2(
															$elm$core$List$filter,
															A2(
																$elm$core$Basics$composeL,
																$elm$core$Basics$not,
																function ($) {
																	return $.isRight;
																}),
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$elm$core$List$any,
											function (q) {
												return q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('맞은 문장'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				function ($) {
																					return $.isRight;
																				},
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(4))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultSentence,
														A2(
															$elm$core$List$filter,
															function ($) {
																return $.isRight;
															},
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$paddingTop(
															$rtfeldman$elm_css$Css$px(40))
														]))
												]),
											_List_Nil)
										]))
								])),
							$author$project$HtmlElement$endOkBtn($author$project$SentencePage$EndBtnClicked)
						]))
				]));
	});
var $author$project$SvgElement$replayIconSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('40'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 576 512')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('#fff'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M209.4 39.5c-9.1-9.6-24.3-10-33.9-.9L33.8 173.2c-19.9 18.9-19.9 50.7 0 69.6L175.5 377.4c9.6 9.1 24.8 8.7 33.9-.9s8.7-24.8-.9-33.9L66.8 208 208.5 73.4c9.6-9.1 10-24.3 .9-33.9zM352 64c0-12.6-7.4-24.1-19-29.2s-25-3-34.4 5.4l-160 144c-6.7 6.1-10.6 14.7-10.6 23.8s3.9 17.7 10.6 23.8l160 144c9.4 8.5 22.9 10.6 34.4 5.4s19-16.6 19-29.2V288h32c53 0 96 43 96 96c0 30.4-12.8 47.9-22.2 56.7c-5.5 5.1-9.8 12-9.8 19.5c0 10.9 8.8 19.7 19.7 19.7c2.8 0 5.6-.6 8.1-1.9C494.5 467.9 576 417.3 576 304c0-97.2-78.8-176-176-176H352V64z')
				]),
			_List_Nil)
		]));
var $author$project$SentencePage$rightAlert = function (isOpen) {
	var translateXVal = isOpen ? 0 : 100;
	var opacityVal = isOpen ? 1 : 0;
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#3fa2f1')),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(40)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$color(
						$rtfeldman$elm_css$Css$hex('#fff')),
						$rtfeldman$elm_css$Css$fontSize(
						$rtfeldman$elm_css$Css$px(20)),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						A4(
						$rtfeldman$elm_css$Css$boxShadow4,
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(5),
						$rtfeldman$elm_css$Css$hex('#00000040')),
						$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
						$rtfeldman$elm_css$Css$transforms(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$translateX(
								$rtfeldman$elm_css$Css$pct(translateXVal))
							])),
						$rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(opacityVal)),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$transform(500),
								$rtfeldman$elm_css$Css$Transitions$opacity(500)
							])),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(1001))
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text('정답입니다')
			]));
};
var $author$project$SentencePage$sentenceHeader = function (model) {
	var makeBorderBtn = function (str) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('wave-node', true)
						])),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							A3(
							$rtfeldman$elm_css$Css$borderBottom3,
							$rtfeldman$elm_css$Css$px(3),
							$rtfeldman$elm_css$Css$solid,
							$rtfeldman$elm_css$Css$hex('#fff')),
							$rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(1))
						]))
				]),
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$text(str)
				]));
	};
	var btnStyle = $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
				$rtfeldman$elm_css$Css$top(
				$rtfeldman$elm_css$Css$px(0)),
				$rtfeldman$elm_css$Css$height(
				$rtfeldman$elm_css$Css$pct(100)),
				$rtfeldman$elm_css$Css$fontSize(
				$rtfeldman$elm_css$Css$px(17)),
				$rtfeldman$elm_css$Css$color(
				$rtfeldman$elm_css$Css$hex('#fff')),
				$rtfeldman$elm_css$Css$displayFlex,
				$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
				$rtfeldman$elm_css$Css$paddingLeft(
				$rtfeldman$elm_css$Css$px(15)),
				$rtfeldman$elm_css$Css$paddingRight(
				$rtfeldman$elm_css$Css$px(15)),
				A4(
				$rtfeldman$elm_css$Css$textShadow4,
				$rtfeldman$elm_css$Css$px(2),
				$rtfeldman$elm_css$Css$px(2),
				$rtfeldman$elm_css$Css$px(4),
				$rtfeldman$elm_css$Css$hex('#00000033')),
				$rtfeldman$elm_css$Css$Transitions$transition(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$Transitions$opacity(300)
					]))
			]));
	var hideBtnStyle = $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				btnStyle,
				$rtfeldman$elm_css$Css$opacity(
				$rtfeldman$elm_css$Css$int(0)),
				$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
			]));
	return A3(
		$author$project$HtmlElement$headerView,
		A3($elm$core$String$replace, '문장 조합하기', '문장 만들기', $author$project$GlobalPort$sentenceName),
		$author$project$SentencePage$ToRoadMapPage,
		A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$px(110)),
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd)
						]))
				]),
			_List_fromArray(
				[
					($author$project$SentencePage$isInputState(model) && ((!model.isPlaying) && (model.playerState === 'onPaused'))) ? A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									btnStyle,
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$int(1))
								])),
							function () {
							var _v0 = $author$project$SentencePage$getCurrentCard(model);
							if (_v0.$ === 'Just') {
								var c = _v0.a;
								return $rtfeldman$elm_css$Html$Styled$Events$onClick(
									$author$project$SentencePage$JumpAndPlay(c.startTime));
							} else {
								return $rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$NoOp);
							}
						}()
						]),
					_List_fromArray(
						[
							makeBorderBtn('다시 듣기')
						])) : A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[hideBtnStyle]))
						]),
					_List_fromArray(
						[
							makeBorderBtn('다시 듣기')
						])),
					function () {
					var _v1 = _Utils_Tuple2(
						$author$project$SentencePage$getPreviousCard(model),
						$author$project$SentencePage$getCurrentCard(model));
					_v1$2:
					while (true) {
						if (_v1.a.$ === 'Nothing') {
							if (_v1.b.$ === 'Just') {
								var _v2 = _v1.a;
								var c = _v1.b.a;
								var targetTime = c.startTime - 1000;
								return (_Utils_cmp(
									$elm$core$Basics$round(model.currentTime),
									targetTime) < 0) ? A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Events$onClick(
											$author$project$SentencePage$JumpAndPlay(targetTime)),
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													btnStyle,
													$rtfeldman$elm_css$Css$opacity(
													$rtfeldman$elm_css$Css$int(0))
												]))
										]),
									_List_fromArray(
										[
											makeBorderBtn('전주 점프')
										])) : A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[hideBtnStyle]))
										]),
									_List_fromArray(
										[
											makeBorderBtn('전주 점프')
										]));
							} else {
								break _v1$2;
							}
						} else {
							if (_v1.b.$ === 'Just') {
								var c1 = _v1.a.a;
								var c2 = _v1.b.a;
								var targetTime = c2.startTime - 1000;
								return (((c2.startTime - c1.endTime) > 7000) && (_Utils_cmp(
									$elm$core$Basics$round(model.currentTime),
									targetTime) < 0)) ? A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Events$onClick(
											$author$project$SentencePage$JumpAndPlay(targetTime)),
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													btnStyle,
													$rtfeldman$elm_css$Css$opacity(
													$rtfeldman$elm_css$Css$int(1))
												]))
										]),
									_List_fromArray(
										[
											makeBorderBtn('간주 점프')
										])) : A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[hideBtnStyle]))
										]),
									_List_fromArray(
										[
											makeBorderBtn('간주 점프')
										]));
							} else {
								break _v1$2;
							}
						}
					}
					return A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil);
				}()
				])));
};
var $author$project$SentencePage$wrongAlert = function (isOpen) {
	var translateXVal = isOpen ? 0 : 100;
	var opacityVal = isOpen ? 1 : 0;
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#f55151')),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(40)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$color(
						$rtfeldman$elm_css$Css$hex('#fff')),
						$rtfeldman$elm_css$Css$fontSize(
						$rtfeldman$elm_css$Css$px(20)),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						A4(
						$rtfeldman$elm_css$Css$boxShadow4,
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(5),
						$rtfeldman$elm_css$Css$hex('#00000040')),
						$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
						$rtfeldman$elm_css$Css$transforms(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$translateX(
								$rtfeldman$elm_css$Css$pct(translateXVal))
							])),
						$rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(opacityVal)),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$transform(500),
								$rtfeldman$elm_css$Css$Transitions$opacity(500)
							])),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(1000))
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text('틀렸습니다')
			]));
};
var $author$project$HtmlElement$yotubeWrapper = function (videoId) {
	return A3(
		$rtfeldman$elm_css$Html$Styled$node,
		'youtube-wrapper',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'vid', videoId),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(230)),
						$rtfeldman$elm_css$Css$minHeight(
						$rtfeldman$elm_css$Css$px(230)),
						$author$project$HtmlElement$smallMedia(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(210)),
								$rtfeldman$elm_css$Css$minHeight(
								$rtfeldman$elm_css$Css$px(210))
							]))
					]))
			]),
		_List_Nil);
};
var $author$project$SentencePage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$overflowX($rtfeldman$elm_css$Css$hidden)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$id('scroll-wrapper'),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$SentencePage$absoluteFullStyle,
								$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$overflowX($rtfeldman$elm_css$Css$hidden),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#fff'))
							]))
					]),
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$SentencePage$wrongAlert, model.isWrongAlertOpen),
						A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$SentencePage$rightAlert, model.isRightAlertOpen),
						$author$project$SentencePage$sentenceHeader(model),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$zIndex(
										$rtfeldman$elm_css$Css$int(2)),
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(230)),
										$rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(230)),
										$author$project$HtmlElement$smallMedia(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(210)),
												$rtfeldman$elm_css$Css$minHeight(
												$rtfeldman$elm_css$Css$px(210))
											])),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$pct(100)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#000'))
									]))
							]),
						_List_fromArray(
							[
								$author$project$HtmlElement$yotubeWrapper(model.data.videoId),
								$author$project$HtmlElement$youtubeLoading(model.isLoadSuccess),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$pct(100)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$pct(100)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
												$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
												$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
												$rtfeldman$elm_css$Css$zIndex(
												$rtfeldman$elm_css$Css$int(999)),
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#00000033')),
												(model.playerState === 'onPaused') ? $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto) : $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
												(model.playerState === 'onPaused') ? $rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(1)) : $rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0)),
												$rtfeldman$elm_css$Css$Transitions$transition(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$Transitions$opacity(100)
													]))
											])),
										function () {
										if ($author$project$SentencePage$isInputState(model) && ((!model.isPlaying) && (model.playerState === 'onPaused'))) {
											var _v0 = $author$project$SentencePage$getCurrentCard(model);
											if (_v0.$ === 'Just') {
												var c = _v0.a;
												return $rtfeldman$elm_css$Html$Styled$Events$onClick(
													$author$project$SentencePage$JumpAndPlay(c.startTime));
											} else {
												return $rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$NoOp);
											}
										} else {
											if (model.playerState === 'onPaused') {
												return $rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$PlayVideo);
											} else {
												return $rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$NoOp);
											}
										}
									}()
									]),
								_List_fromArray(
									[
										($author$project$SentencePage$isInputState(model) && ((!model.isPlaying) && (model.playerState === 'onPaused'))) ? $author$project$SvgElement$replayIconSvg : ((model.playerState === 'onPlaying') ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : ((model.playerState === 'onPaused') ? $author$project$SvgElement$pauseIconSvg : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil)))
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
										$rtfeldman$elm_css$Css$zIndex(
										$rtfeldman$elm_css$Css$int(0))
									]))
							]),
						_List_fromArray(
							[
								$author$project$SentencePage$currentView(model)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$id('float-origin'),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
										$rtfeldman$elm_css$Css$top(
										$rtfeldman$elm_css$Css$px(0)),
										$rtfeldman$elm_css$Css$left(
										$rtfeldman$elm_css$Css$px(0)),
										$rtfeldman$elm_css$Css$zIndex(
										$rtfeldman$elm_css$Css$int(1))
									]))
							]),
						_List_fromArray(
							[
								$author$project$SentencePage$floatWordListView(model)
							]))
					])),
				A3($author$project$SentencePage$modalView, model.isModalOpen, model.data.name, model.resultData)
			]));
};
var $author$project$SentencePage$editView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$right(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
								$rtfeldman$elm_css$Css$minWidth(
								$rtfeldman$elm_css$Css$px(400)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						$author$project$SentencePage$view(model)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(100)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ccc'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#ddd'))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$SaveClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('저장하기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$PrevClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('이전으로')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$NextClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('다음으로')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$GetFromListenClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('가져오기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$GetFromListenClickedGerman)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('가져오기2')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$GotRubyFromListen)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('가져오기3')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$PreTranslateText)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('번역 전 텍스트')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$TimeShiftClicked)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('TimeShift')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$input,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$value(
												$elm$core$String$fromInt(model.timeShift)),
												$rtfeldman$elm_css$Html$Styled$Events$onInput($author$project$SentencePage$UpdateTimeShiftInput)
											]),
										_List_Nil)
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$SentencePage$ApplyTransData)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('반영')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$textarea,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onInput($author$project$SentencePage$UpdateTransData)
											]),
										_List_Nil)
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(200)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(5)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(30))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$SentencePage$SetEditableValue,
								$author$project$EditableValue$editableView(model.editableValue))
							]))
					]))
			]));
};
var $author$project$TapGamePage$CreateFromListenClicked = {$: 'CreateFromListenClicked'};
var $author$project$TapGamePage$LeftClicked = {$: 'LeftClicked'};
var $author$project$TapGamePage$RightClicked = {$: 'RightClicked'};
var $author$project$TapGamePage$SaveClicked = {$: 'SaveClicked'};
var $author$project$TapGamePage$SetEditableValue = function (a) {
	return {$: 'SetEditableValue', a: a};
};
var $author$project$TapGamePage$TimeShiftClicked = {$: 'TimeShiftClicked'};
var $author$project$TapGamePage$UpdateFromListenClicked = {$: 'UpdateFromListenClicked'};
var $author$project$TapGamePage$UpdateTimeShiftInput = function (a) {
	return {$: 'UpdateTimeShiftInput', a: a};
};
var $author$project$TapGamePage$RestoreClicked = {$: 'RestoreClicked'};
var $author$project$TapGamePage$ToEditMode = {$: 'ToEditMode'};
var $author$project$TapGamePage$ToGameMode = {$: 'ToGameMode'};
var $rtfeldman$elm_css$Css$padding4 = $rtfeldman$elm_css$Css$prop4('padding');
var $author$project$TapGamePage$editBtnGroup = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						A4(
						$rtfeldman$elm_css$Css$padding4,
						$rtfeldman$elm_css$Css$px(15),
						$rtfeldman$elm_css$Css$px(20),
						$rtfeldman$elm_css$Css$px(10),
						$rtfeldman$elm_css$Css$px(20))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$button,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TapGamePage$ToGameMode)
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text('플레이')
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$button,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TapGamePage$ToEditMode)
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text('에디트')
					])),
				_Utils_eq(model.playMode, $author$project$TapGamePage$EditMode) ? A2(
				$rtfeldman$elm_css$Html$Styled$button,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TapGamePage$RestoreClicked)
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text('되돌리기')
					])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil)
			]));
};
var $author$project$TapGamePage$PlayVideo = {$: 'PlayVideo'};
var $author$project$TapGamePage$absoluteFullStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
			$rtfeldman$elm_css$Css$left(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$right(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$top(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$bottom(
			$rtfeldman$elm_css$Css$px(0))
		]));
var $author$project$TapGamePage$isVideoMode = false;
var $author$project$TapGamePage$alterAlbumCover = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(18 + 57)),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(1000)),
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		$author$project$TapGamePage$isVideoMode ? _List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url(
									'videoImages/' + (A2($author$project$DataManage$getVideoData, model.data.videoId, model.appData).imageSrc + '.webp'))),
								$rtfeldman$elm_css$Css$backgroundSize($rtfeldman$elm_css$Css$cover),
								$rtfeldman$elm_css$Css$backgroundPosition($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$px(180)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(180)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(10)),
								A4(
								$rtfeldman$elm_css$Css$boxShadow4,
								$rtfeldman$elm_css$Css$px(1),
								$rtfeldman$elm_css$Css$px(1),
								$rtfeldman$elm_css$Css$px(10),
								$rtfeldman$elm_css$Css$hex('#00000030'))
							]))
					]),
				_List_Nil)
			]) : _List_Nil);
};
var $author$project$TapGamePage$ContentTap = function (a) {
	return {$: 'ContentTap', a: a};
};
var $rtfeldman$elm_css$VirtualDom$Styled$unstyledAttribute = function (prop) {
	return A3($rtfeldman$elm_css$VirtualDom$Styled$Attribute, prop, _List_Nil, '');
};
var $rtfeldman$elm_css$Html$Styled$Attributes$fromUnstyled = $rtfeldman$elm_css$VirtualDom$Styled$unstyledAttribute;
var $author$project$TapGamePage$getAnimVal = F2(
	function (animList, name) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function (a) {
					return (!a.remainTime) ? a.endVal : a.startVal;
				},
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (a) {
							return _Utils_eq(a.name, name);
						},
						animList))));
	});
var $author$project$TapGamePage$getCoordinates = function (event) {
	return event.pointer.clientPos;
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions = {preventDefault: true, stopPropagation: false};
var $elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$Event = F5(
	function (pointerType, pointer, pointerId, isPrimary, contactDetails) {
		return {contactDetails: contactDetails, isPrimary: isPrimary, pointer: pointer, pointerId: pointerId, pointerType: pointerType};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$ContactDetails = F5(
	function (width, height, pressure, tiltX, tiltY) {
		return {height: height, pressure: pressure, tiltX: tiltX, tiltY: tiltY, width: width};
	});
var $elm$json$Json$Decode$map5 = _Json_map5;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$contactDetailsDecoder = A6(
	$elm$json$Json$Decode$map5,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$ContactDetails,
	A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pressure', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'tiltX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'tiltY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event = F6(
	function (keys, button, clientPos, offsetPos, pagePos, screenPos) {
		return {button: button, clientPos: clientPos, keys: keys, offsetPos: offsetPos, pagePos: pagePos, screenPos: screenPos};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$BackButton = {$: 'BackButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ErrorButton = {$: 'ErrorButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ForwardButton = {$: 'ForwardButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MainButton = {$: 'MainButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MiddleButton = {$: 'MiddleButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton = {$: 'SecondButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId = function (id) {
	switch (id) {
		case 0:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MainButton;
		case 1:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MiddleButton;
		case 2:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton;
		case 3:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$BackButton;
		case 4:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ForwardButton;
		default:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ErrorButton;
	}
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder = A2(
	$elm$json$Json$Decode$map,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId,
	A2($elm$json$Json$Decode$field, 'button', $elm$json$Json$Decode$int));
var $mpizenberg$elm_pointer_events$Internal$Decode$clientPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'clientX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'clientY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$Keys = F3(
	function (alt, ctrl, shift) {
		return {alt: alt, ctrl: ctrl, shift: shift};
	});
var $elm$json$Json$Decode$map3 = _Json_map3;
var $mpizenberg$elm_pointer_events$Internal$Decode$keys = A4(
	$elm$json$Json$Decode$map3,
	$mpizenberg$elm_pointer_events$Internal$Decode$Keys,
	A2($elm$json$Json$Decode$field, 'altKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'ctrlKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'shiftKey', $elm$json$Json$Decode$bool));
var $elm$json$Json$Decode$map6 = _Json_map6;
var $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'offsetX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'offsetY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$pagePos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$screenPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'screenX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'screenY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder = A7($elm$json$Json$Decode$map6, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event, $mpizenberg$elm_pointer_events$Internal$Decode$keys, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder, $mpizenberg$elm_pointer_events$Internal$Decode$clientPos, $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos, $mpizenberg$elm_pointer_events$Internal$Decode$pagePos, $mpizenberg$elm_pointer_events$Internal$Decode$screenPos);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$MouseType = {$: 'MouseType'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$PenType = {$: 'PenType'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$TouchType = {$: 'TouchType'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$stringToPointerType = function (str) {
	switch (str) {
		case 'pen':
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$PenType;
		case 'touch':
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$TouchType;
		default:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$MouseType;
	}
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$pointerTypeDecoder = A2($elm$json$Json$Decode$map, $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$stringToPointerType, $elm$json$Json$Decode$string);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$eventDecoder = A6(
	$elm$json$Json$Decode$map5,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$Event,
	A2($elm$json$Json$Decode$field, 'pointerType', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$pointerTypeDecoder),
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder,
	A2($elm$json$Json$Decode$field, 'pointerId', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'isPrimary', $elm$json$Json$Decode$bool),
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$contactDetailsDecoder);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions = F3(
	function (event, options, tag) {
		return A2(
			$elm$html$Html$Events$custom,
			event,
			A2(
				$elm$json$Json$Decode$map,
				function (ev) {
					return {
						message: tag(ev),
						preventDefault: options.preventDefault,
						stopPropagation: options.stopPropagation
					};
				},
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$eventDecoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onDown = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions, 'pointerdown', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions);
var $author$project$TapGamePage$onPlayingStr = 'onPlaying';
var $author$project$TapGamePage$bannerBaseStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
			$rtfeldman$elm_css$Css$bottom(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$left(
			$rtfeldman$elm_css$Css$px(0)),
			$rtfeldman$elm_css$Css$width(
			$rtfeldman$elm_css$Css$pct(100)),
			$rtfeldman$elm_css$Css$paddingTop(
			$rtfeldman$elm_css$Css$px(15)),
			$rtfeldman$elm_css$Css$paddingBottom(
			$rtfeldman$elm_css$Css$px(15)),
			$rtfeldman$elm_css$Css$color(
			A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
			$rtfeldman$elm_css$Css$fontSize(
			$rtfeldman$elm_css$Css$px(18)),
			$rtfeldman$elm_css$Css$displayFlex,
			$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
			$rtfeldman$elm_css$Css$zIndex(
			$rtfeldman$elm_css$Css$int(2))
		]));
var $author$project$TapGamePage$oopsEarlyDiv = function (opacityVal) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$author$project$TapGamePage$bannerBaseStyle,
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#FF7777')),
						$rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(opacityVal)),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$opacity($author$project$TapGamePage$bannerOpacityTime / 1.5)
							]))
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text('너무 일찍 눌렀어요!')
			]));
};
var $author$project$TapGamePage$oopsLateDiv = function (opacityVal) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$author$project$TapGamePage$bannerBaseStyle,
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#FF7777')),
						$rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(opacityVal)),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$opacity($author$project$TapGamePage$bannerOpacityTime / 1.5)
							]))
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text('이미 지나갔어요!')
			]));
};
var $author$project$TapGamePage$perfectDiv = function (opacityVal) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$author$project$TapGamePage$bannerBaseStyle,
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#77C2FF')),
						$rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(opacityVal)),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$opacity($author$project$TapGamePage$bannerOpacityTime / 1.5)
							]))
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text('완벽해요!')
			]));
};
var $rtfeldman$elm_css$Css$rgba = F4(
	function (r, g, b, alpha) {
		return {
			alpha: alpha,
			blue: b,
			color: $rtfeldman$elm_css$Css$Structure$Compatible,
			green: g,
			red: r,
			value: A2(
				$rtfeldman$elm_css$Css$cssFunction,
				'rgba',
				_Utils_ap(
					A2(
						$elm$core$List$map,
						$elm$core$String$fromInt,
						_List_fromArray(
							[r, g, b])),
					_List_fromArray(
						[
							$elm$core$String$fromFloat(alpha)
						])))
		};
	});
var $rtfeldman$elm_css$Html$Styled$span = $rtfeldman$elm_css$Html$Styled$node('span');
var $rtfeldman$elm_css$Css$scale = function (x) {
	return {
		transform: $rtfeldman$elm_css$Css$Structure$Compatible,
		value: A2(
			$rtfeldman$elm_css$Css$cssFunction,
			'scale',
			_List_fromArray(
				[
					$elm$core$String$fromFloat(x)
				]))
	};
};
var $author$project$TapGamePage$wordInfoCss = F5(
	function (colorVal, x, y, scaleNum, opacityVal) {
		return $rtfeldman$elm_css$Css$batch(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
					$rtfeldman$elm_css$Css$top(
					$rtfeldman$elm_css$Css$pct(50)),
					$rtfeldman$elm_css$Css$left(
					$rtfeldman$elm_css$Css$pct(50)),
					$rtfeldman$elm_css$Css$color(colorVal),
					$rtfeldman$elm_css$Css$transforms(
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Css$translate2,
							$rtfeldman$elm_css$Css$pct((-50) + x),
							$rtfeldman$elm_css$Css$pct((-50) + y)),
							$rtfeldman$elm_css$Css$scale(scaleNum)
						])),
					$rtfeldman$elm_css$Css$opacity(
					$rtfeldman$elm_css$Css$num(opacityVal)),
					$rtfeldman$elm_css$Css$Transitions$transition(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$Transitions$color(500),
							$rtfeldman$elm_css$Css$Transitions$transform(500),
							$rtfeldman$elm_css$Css$Transitions$opacity(500)
						]))
				]));
	});
var $author$project$TapGamePage$threeDiv = F3(
	function (results, wordList, idx) {
		var cssChosen = function (i) {
			return _Utils_eq(i, idx - 2) ? A5(
				$author$project$TapGamePage$wordInfoCss,
				A4($rtfeldman$elm_css$Css$rgba, 100, 100, 100, 0),
				0,
				-200,
				0,
				0) : (_Utils_eq(i, idx - 1) ? A5(
				$author$project$TapGamePage$wordInfoCss,
				A4($rtfeldman$elm_css$Css$rgba, 100, 100, 100, 1),
				0,
				-100,
				0.7,
				0.7) : (_Utils_eq(i, idx) ? A5(
				$author$project$TapGamePage$wordInfoCss,
				A4($rtfeldman$elm_css$Css$rgba, 0, 0, 0, 1),
				0,
				0,
				1,
				1) : (_Utils_eq(i, idx + 1) ? A5(
				$author$project$TapGamePage$wordInfoCss,
				A4($rtfeldman$elm_css$Css$rgba, 100, 100, 100, 1),
				0,
				100,
				0.7,
				0.7) : (_Utils_eq(i, idx + 2) ? A5(
				$author$project$TapGamePage$wordInfoCss,
				A4($rtfeldman$elm_css$Css$rgba, 100, 100, 100, 0),
				0,
				200,
				0,
				0) : $rtfeldman$elm_css$Css$batch(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
					]))))));
		};
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
							$rtfeldman$elm_css$Css$left(
							$rtfeldman$elm_css$Css$px(0)),
							$rtfeldman$elm_css$Css$top(
							$rtfeldman$elm_css$Css$px(0)),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100))
						]))
				]),
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, _v0) {
						var r = _v0.a;
						var w = _v0.b;
						return A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											cssChosen(i),
											$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
											$rtfeldman$elm_css$Css$lineHeight(
											$rtfeldman$elm_css$Css$num(1.1)),
											$rtfeldman$elm_css$Css$padding(
											$rtfeldman$elm_css$Css$px(15)),
											$rtfeldman$elm_css$Css$paddingTop(
											$rtfeldman$elm_css$Css$px(18)),
											$rtfeldman$elm_css$Css$borderRadius(
											$rtfeldman$elm_css$Css$px(10)),
											A4(
											$rtfeldman$elm_css$Css$boxShadow4,
											$rtfeldman$elm_css$Css$px(1),
											$rtfeldman$elm_css$Css$px(1),
											$rtfeldman$elm_css$Css$px(10),
											$rtfeldman$elm_css$Css$hex('#00000015'))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$minHeight(
													$rtfeldman$elm_css$Css$px(20))
												]))
										]),
									_List_fromArray(
										[
											function () {
											var statusColorVal = (_Utils_cmp(idx, i) < 0) ? A3($rtfeldman$elm_css$Css$rgb, 100, 100, 100) : (((_Utils_cmp(i, idx) < 0) && r.isRight) ? $rtfeldman$elm_css$Css$hex('#77C2FF') : ((!r.isRight) ? $rtfeldman$elm_css$Css$hex('#FF7777') : A3($rtfeldman$elm_css$Css$rgb, 0, 0, 0)));
											var pulseClassList = $rtfeldman$elm_css$Html$Styled$Attributes$classList(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'tap-pulse-node',
														_Utils_eq(idx, i) && r.isRight),
														_Utils_Tuple2(
														'wrong-tap-pulse-node',
														_Utils_eq(idx, i) && (!r.isRight))
													]));
											var _v1 = $elm$core$List$reverse(
												$elm$core$String$toList(
													$elm$core$String$trim(w.pron)));
											if (_v1.b) {
												if (_v1.b.b) {
													var x = _v1.a;
													var _v2 = _v1.b;
													var y = _v2.a;
													var tl = _v2.b;
													var rest = _Utils_eq(
														x,
														_Utils_chr('-')) ? $elm$core$String$fromList(
														$elm$core$List$reverse(tl)) : $elm$core$String$fromList(
														$elm$core$List$reverse(
															A2($elm$core$List$cons, y, tl)));
													var last = _Utils_eq(
														x,
														_Utils_chr('-')) ? $elm$core$String$fromList(
														_List_fromArray(
															[y, x])) : $elm$core$String$fromChar(x);
													return A2(
														$rtfeldman$elm_css$Html$Styled$span,
														_List_Nil,
														_List_fromArray(
															[
																A2(
																$rtfeldman$elm_css$Html$Styled$span,
																_List_fromArray(
																	[
																		$rtfeldman$elm_css$Html$Styled$Attributes$css(
																		_List_fromArray(
																			[
																				$rtfeldman$elm_css$Css$fontSize(
																				$rtfeldman$elm_css$Css$px(18))
																			]))
																	]),
																_List_fromArray(
																	[
																		$rtfeldman$elm_css$Html$Styled$text(rest)
																	])),
																A2(
																$rtfeldman$elm_css$Html$Styled$span,
																_List_fromArray(
																	[
																		pulseClassList,
																		$rtfeldman$elm_css$Html$Styled$Attributes$css(
																		_List_fromArray(
																			[
																				$rtfeldman$elm_css$Css$fontSize(
																				$rtfeldman$elm_css$Css$px(18)),
																				$rtfeldman$elm_css$Css$color(statusColorVal),
																				$rtfeldman$elm_css$Css$Transitions$transition(
																				_List_fromArray(
																					[
																						$rtfeldman$elm_css$Css$Transitions$color(300)
																					])),
																				$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
																			]))
																	]),
																_List_fromArray(
																	[
																		A2(
																		$rtfeldman$elm_css$Html$Styled$span,
																		_List_Nil,
																		_List_fromArray(
																			[
																				$rtfeldman$elm_css$Html$Styled$text(last)
																			]))
																	]))
															]));
												} else {
													var x = _v1.a;
													return A2(
														$rtfeldman$elm_css$Html$Styled$span,
														_List_Nil,
														_List_fromArray(
															[
																A2(
																$rtfeldman$elm_css$Html$Styled$span,
																_List_fromArray(
																	[
																		pulseClassList,
																		$rtfeldman$elm_css$Html$Styled$Attributes$css(
																		_List_fromArray(
																			[
																				$rtfeldman$elm_css$Css$fontSize(
																				$rtfeldman$elm_css$Css$px(18)),
																				$rtfeldman$elm_css$Css$color(statusColorVal),
																				$rtfeldman$elm_css$Css$Transitions$transition(
																				_List_fromArray(
																					[
																						$rtfeldman$elm_css$Css$Transitions$color(300)
																					])),
																				$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
																			]))
																	]),
																_List_fromArray(
																	[
																		A2(
																		$rtfeldman$elm_css$Html$Styled$span,
																		_List_Nil,
																		_List_fromArray(
																			[
																				$rtfeldman$elm_css$Html$Styled$text(
																				$elm$core$String$fromChar(x))
																			]))
																	]))
															]));
												}
											} else {
												return A2($rtfeldman$elm_css$Html$Styled$span, _List_Nil, _List_Nil);
											}
										}()
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(28))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(w.word)
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(20))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(w.desc)
										]))
								]));
					}),
				A3($elm$core$List$map2, $elm$core$Tuple$pair, results, wordList)));
	});
var $author$project$TapGamePage$touchCircleView = function (touchCircle) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(touchCircle.x)),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(touchCircle.y)),
						(_Utils_cmp(touchCircle.remainTime, $author$project$TapGamePage$touchCircleTime / 2) < 0) ? $rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(0)) : $rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(0.5)),
						$rtfeldman$elm_css$Css$transforms(
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Css$translate2,
								$rtfeldman$elm_css$Css$pct(-50),
								$rtfeldman$elm_css$Css$pct(-50)),
								(_Utils_cmp(touchCircle.remainTime, $author$project$TapGamePage$touchCircleTime / 2) < 0) ? $rtfeldman$elm_css$Css$scale(0) : $rtfeldman$elm_css$Css$scale(0.5)
							])),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$transform($author$project$TapGamePage$touchCircleTime / 2),
								$rtfeldman$elm_css$Css$Transitions$opacity($author$project$TapGamePage$touchCircleTime / 2)
							]))
					]))
			]),
		_List_fromArray(
			[
				touchCircle.isRight ? A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(300)),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$px(300)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#77C2FF')),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(1000))
							]))
					]),
				_List_Nil) : A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(300)),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$px(300)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#FF7777')),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(1000))
							]))
					]),
				_List_Nil)
			]));
};
var $author$project$TapGamePage$contentDiv = function (model) {
	var contentBoxStyle = $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$padding(
				$rtfeldman$elm_css$Css$px(25)),
				$rtfeldman$elm_css$Css$backgroundColor(
				A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
				$rtfeldman$elm_css$Css$flexGrow(
				$rtfeldman$elm_css$Css$int(1)),
				$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden),
				$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
				$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
				A2($rtfeldman$elm_css$Css$property, 'user-select', 'none')
			]));
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				_Utils_eq(model.playerState, $author$project$TapGamePage$onPlayingStr) ? $rtfeldman$elm_css$Html$Styled$Attributes$fromUnstyled(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onDown(
					function (e) {
						return $author$project$TapGamePage$ContentTap(
							$author$project$TapGamePage$getCoordinates(e));
					})) : $rtfeldman$elm_css$Html$Styled$Attributes$classList(_List_Nil),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[contentBoxStyle]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(5)),
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
								$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
								$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
								$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#333')),
								_Utils_eq(model.playerState, $author$project$TapGamePage$onPlayingStr) ? $rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0)) : $rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0.4)),
								$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
								$rtfeldman$elm_css$Css$Transitions$transition(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$Transitions$opacity(200)
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$class('pulse-node'),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(15)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$color(
										$rtfeldman$elm_css$Css$hex('#fff')),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('계속하려면 동영상을 실행하세요')
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_Nil,
				A2($elm$core$List$map, $author$project$TapGamePage$touchCircleView, model.touchCircleList)),
				A4($rtfeldman$elm_css$Html$Styled$Lazy$lazy3, $author$project$TapGamePage$threeDiv, model.quizResult, model.data.cardList, model.wordIdx),
				$author$project$TapGamePage$perfectDiv(
				_Utils_eq(model.bannerState, $author$project$TapGamePage$BannerPerfect) ? A2($author$project$TapGamePage$getAnimVal, model.animList, 'bannerOpacity') : 0),
				$author$project$TapGamePage$oopsEarlyDiv(
				_Utils_eq(model.bannerState, $author$project$TapGamePage$BannerOopsEarly) ? A2($author$project$TapGamePage$getAnimVal, model.animList, 'bannerOpacity') : 0),
				$author$project$TapGamePage$oopsLateDiv(
				_Utils_eq(model.bannerState, $author$project$TapGamePage$BannerOopsLate) ? A2($author$project$TapGamePage$getAnimVal, model.animList, 'bannerOpacity') : 0)
			]));
};
var $author$project$TapGamePage$Speak = function (a) {
	return {$: 'Speak', a: a};
};
var $author$project$TapGamePage$modalView = F4(
	function (isModalOpen, videoName, level, _v0) {
		var bestScore = _v0.bestScore;
		var currentScore = _v0.currentScore;
		var quizResult = _v0.quizResult;
		var renderResultWord = function (w) {
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick(
						$author$project$TapGamePage$Speak(
							$author$project$Utility$getSpeakString(w))),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff55')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(10)),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(10)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(5)),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.85))
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.pron)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(24))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.word)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.meaning)
							]))
					]));
		};
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
							$rtfeldman$elm_css$Css$Transitions$transition(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$Transitions$opacity(300)
								])),
							isModalOpen ? $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(1)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
								])) : $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
								])),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$backgroundImage(
							$rtfeldman$elm_css$Css$url('images/bg.webp')),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#547ef5')),
							A2(
							$rtfeldman$elm_css$Css$backgroundSize2,
							$rtfeldman$elm_css$Css$pct(100),
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(2000))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$flexGrow(
											$rtfeldman$elm_css$Css$num(1)),
											$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$maxWidth(
													$rtfeldman$elm_css$Css$px(500)),
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#fff')),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$contentBox)
												]))
										]),
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$fontSize(
															$rtfeldman$elm_css$Css$px(24)),
															$rtfeldman$elm_css$Css$marginTop(
															$rtfeldman$elm_css$Css$px(25))
														]))
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text(videoName)
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$fontSize(
															$rtfeldman$elm_css$Css$px(20))
														]))
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text(
													_Utils_ap(
														A3($elm$core$String$replace, '제때 누르기', '듣고 누르기', $author$project$GlobalPort$tapGameName),
														$elm$core$String$fromInt(level)))
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(22)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(25))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('플레이 결과')
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(11)),
																	$rtfeldman$elm_css$Css$marginLeft(
																	$rtfeldman$elm_css$Css$px(4))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text(
															'최고 점수 : ' + $elm$core$String$fromInt(bestScore))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(3)),
																	$rtfeldman$elm_css$Css$marginLeft(
																	$rtfeldman$elm_css$Css$px(4))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text(
															'이번 점수 : ' + $elm$core$String$fromInt(currentScore))
														]))
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$width(
															$rtfeldman$elm_css$Css$pct(100)),
															A3(
															$rtfeldman$elm_css$Css$borderBottom3,
															$rtfeldman$elm_css$Css$px(4),
															$rtfeldman$elm_css$Css$solid,
															$rtfeldman$elm_css$Css$hex('#fff')),
															$rtfeldman$elm_css$Css$marginTop(
															$rtfeldman$elm_css$Css$px(7))
														]))
												]),
											_List_Nil),
											A2(
											$elm$core$List$any,
											function (q) {
												return !q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('틀린 단어'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				A2(
																					$elm$core$Basics$composeL,
																					$elm$core$Basics$not,
																					function ($) {
																						return $.isRight;
																					}),
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(5))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultWord,
														A2(
															$elm$core$List$filter,
															A2(
																$elm$core$Basics$composeL,
																$elm$core$Basics$not,
																function ($) {
																	return $.isRight;
																}),
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$elm$core$List$any,
											function (q) {
												return q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('맞은 단어'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				function ($) {
																					return $.isRight;
																				},
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(4))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultWord,
														A2(
															$elm$core$List$filter,
															function ($) {
																return $.isRight;
															},
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$paddingTop(
															$rtfeldman$elm_css$Css$px(40))
														]))
												]),
											_List_Nil)
										]))
								])),
							$author$project$HtmlElement$endOkBtn($author$project$TapGamePage$EndBtnClicked)
						]))
				]));
	});
var $author$project$TapGamePage$preBoxDiv = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$color(
						A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
						$rtfeldman$elm_css$Css$fontSize(
						$rtfeldman$elm_css$Css$px(18)),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#42A5F5')),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(2)),
						A4(
						$rtfeldman$elm_css$Css$boxShadow4,
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(10),
						$rtfeldman$elm_css$Css$hex('#00000020'))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(14))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$left),
										$rtfeldman$elm_css$Css$transforms(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$scale(
												A2($author$project$TapGamePage$getAnimVal, model.animList, 'scoreSize'))
											])),
										$rtfeldman$elm_css$Css$Transitions$transition(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$Transitions$transform(300)
											]))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('점수')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text(
										$elm$core$String$fromInt(model.score))
									]))
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(15))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$transforms(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$scale(
												A2($author$project$TapGamePage$getAnimVal, model.animList, 'progressSize'))
											])),
										$rtfeldman$elm_css$Css$Transitions$transition(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$Transitions$transform(300)
											])),
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$right)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('진도')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text(
										$elm$core$String$fromInt(model.wordIdx) + (' / ' + $elm$core$String$fromInt(
											$elm$core$List$length(model.data.cardList))))
									]))
							]))
					]))
			]));
};
var $author$project$TapGamePage$JumpAndPlay = function (a) {
	return {$: 'JumpAndPlay', a: a};
};
var $author$project$TapGamePage$sentenceHeader = function (model) {
	var t = $elm$core$Basics$round(model.currentTime);
	var makeBorderBtn = function (str) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('wave-node', true)
						])),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							A3(
							$rtfeldman$elm_css$Css$borderBottom3,
							$rtfeldman$elm_css$Css$px(3),
							$rtfeldman$elm_css$Css$solid,
							$rtfeldman$elm_css$Css$hex('#fff')),
							$rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(1))
						]))
				]),
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$text(str)
				]));
	};
	var cardArr = $elm$core$Array$fromList(
		A2(
			$elm$core$List$filter,
			function (x) {
				return !$elm$core$String$isEmpty(
					$elm$core$String$trim(x.kor));
			},
			A2($author$project$DataManage$getListenData, model.data.videoId, model.appData).cardList));
	var cardIdx = $elm$core$Array$length(
		A2(
			$elm$core$Array$filter,
			function (x) {
				return _Utils_cmp(x.endTime, t) < 0;
			},
			cardArr));
	var btnStyle = $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
				$rtfeldman$elm_css$Css$top(
				$rtfeldman$elm_css$Css$px(0)),
				$rtfeldman$elm_css$Css$height(
				$rtfeldman$elm_css$Css$pct(100)),
				$rtfeldman$elm_css$Css$fontSize(
				$rtfeldman$elm_css$Css$px(17)),
				$rtfeldman$elm_css$Css$color(
				$rtfeldman$elm_css$Css$hex('#fff')),
				$rtfeldman$elm_css$Css$displayFlex,
				$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
				$rtfeldman$elm_css$Css$paddingLeft(
				$rtfeldman$elm_css$Css$px(15)),
				$rtfeldman$elm_css$Css$paddingRight(
				$rtfeldman$elm_css$Css$px(15)),
				A4(
				$rtfeldman$elm_css$Css$textShadow4,
				$rtfeldman$elm_css$Css$px(2),
				$rtfeldman$elm_css$Css$px(2),
				$rtfeldman$elm_css$Css$px(4),
				$rtfeldman$elm_css$Css$hex('#00000033')),
				$rtfeldman$elm_css$Css$Transitions$transition(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$Transitions$opacity(300)
					]))
			]));
	var hideBtnStyle = $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				btnStyle,
				$rtfeldman$elm_css$Css$opacity(
				$rtfeldman$elm_css$Css$int(0)),
				$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
			]));
	return A3(
		$author$project$HtmlElement$headerView,
		_Utils_ap(
			A3($elm$core$String$replace, '제때 누르기', '듣고 누르기', $author$project$GlobalPort$tapGameName),
			$elm$core$String$fromInt(model.level)),
		$author$project$TapGamePage$ToRoadMapPage,
		A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$px(110)),
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd)
						]))
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = _Utils_Tuple2(
						A2($elm$core$Array$get, cardIdx - 1, cardArr),
						A2($elm$core$Array$get, cardIdx, cardArr));
					_v0$2:
					while (true) {
						if (_v0.a.$ === 'Nothing') {
							if (_v0.b.$ === 'Just') {
								var _v1 = _v0.a;
								var c = _v0.b.a;
								var targetTime = c.startTime - 1000;
								return (_Utils_cmp(
									$elm$core$Basics$round(model.currentTime),
									targetTime) < 0) ? A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Events$onClick(
											$author$project$TapGamePage$JumpAndPlay(targetTime)),
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													btnStyle,
													$rtfeldman$elm_css$Css$opacity(
													$rtfeldman$elm_css$Css$int(0))
												]))
										]),
									_List_fromArray(
										[
											makeBorderBtn('전주 점프')
										])) : A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[hideBtnStyle]))
										]),
									_List_fromArray(
										[
											makeBorderBtn('전주 점프')
										]));
							} else {
								break _v0$2;
							}
						} else {
							if (_v0.b.$ === 'Just') {
								var c1 = _v0.a.a;
								var c2 = _v0.b.a;
								var targetTime = c2.startTime - 1000;
								return (((c2.startTime - c1.endTime) > 5000) && (_Utils_cmp(
									$elm$core$Basics$round(model.currentTime),
									targetTime) < 0)) ? A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Events$onClick(
											$author$project$TapGamePage$JumpAndPlay(targetTime)),
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													btnStyle,
													$rtfeldman$elm_css$Css$opacity(
													$rtfeldman$elm_css$Css$int(1))
												]))
										]),
									_List_fromArray(
										[
											makeBorderBtn('간주 점프')
										])) : A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[hideBtnStyle]))
										]),
									_List_fromArray(
										[
											makeBorderBtn('간주 점프')
										]));
							} else {
								break _v0$2;
							}
						}
					}
					return A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil);
				}()
				])));
};
var $author$project$TapGamePage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[$author$project$TapGamePage$absoluteFullStyle]))
			]),
		_List_fromArray(
			[
				$author$project$TapGamePage$alterAlbumCover(model),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$TapGamePage$absoluteFullStyle,
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(-1)),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url('./images/bg.webp'))
							]))
					]),
				_List_Nil),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$TapGamePage$absoluteFullStyle,
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
							]))
					]),
				_List_fromArray(
					[
						$author$project$TapGamePage$sentenceHeader(model),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(230)),
										$rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(230)),
										$author$project$HtmlElement$smallMedia(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(210)),
												$rtfeldman$elm_css$Css$minHeight(
												$rtfeldman$elm_css$Css$px(210))
											])),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$pct(100)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#000'))
									]))
							]),
						_List_fromArray(
							[
								$author$project$TapGamePage$isVideoMode ? $author$project$HtmlElement$yotubeLoopWrapperRecord(model.data.videoId) : $author$project$HtmlElement$yotubeWrapper(model.data.videoId),
								$author$project$HtmlElement$youtubeLoading(model.isLoadSuccess),
								A3($author$project$HtmlElement$youtubePauseView, model.playerState, $author$project$TapGamePage$PlayVideo, $author$project$TapGamePage$NoOp)
							])),
						$author$project$TapGamePage$preBoxDiv(model),
						$author$project$TapGamePage$contentDiv(model)
					])),
				A4($author$project$TapGamePage$modalView, model.isModalOpen, model.data.name, model.level, model.resultData)
			]));
};
var $author$project$TapGamePage$editView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$right(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
								$rtfeldman$elm_css$Css$minWidth(
								$rtfeldman$elm_css$Css$px(400)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						$author$project$TapGamePage$view(model)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(100)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ccc'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
										$rtfeldman$elm_css$Css$top(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#ccc'))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TapGamePage$SaveClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('저장하기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TapGamePage$LeftClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('Left')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TapGamePage$RightClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('Right')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TapGamePage$CreateFromListenClicked)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('Create from Listen')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TapGamePage$UpdateFromListenClicked)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('Update from Listen')
											]))
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$button,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TapGamePage$TimeShiftClicked)
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('TimeShift')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$input,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$value(
												$elm$core$String$fromInt(model.timeShift)),
												$rtfeldman$elm_css$Html$Styled$Events$onInput($author$project$TapGamePage$UpdateTimeShiftInput)
											]),
										_List_Nil)
									])),
								$author$project$TapGamePage$editBtnGroup(model)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(150)),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(30))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$TapGamePage$SetEditableValue,
								$author$project$EditableValue$editableView(model.editableValue))
							]))
					]))
			]));
};
var $author$project$VocaPage$GetFromListenClicked = {$: 'GetFromListenClicked'};
var $author$project$VocaPage$GetRubyClicked = {$: 'GetRubyClicked'};
var $author$project$VocaPage$LevelInputted = function (a) {
	return {$: 'LevelInputted', a: a};
};
var $author$project$VocaPage$SaveClicked = {$: 'SaveClicked'};
var $author$project$VocaPage$SetEditableValue = function (a) {
	return {$: 'SetEditableValue', a: a};
};
var $author$project$VocaPage$CardDragEnd = {$: 'CardDragEnd'};
var $author$project$VocaPage$CloseBtnClicked = {$: 'CloseBtnClicked'};
var $author$project$VocaPage$GotCardDragVal = function (a) {
	return {$: 'GotCardDragVal', a: a};
};
var $author$project$VocaPage$HiraBtnClicked = {$: 'HiraBtnClicked'};
var $author$project$VocaPage$SeekBarMoved = function (a) {
	return {$: 'SeekBarMoved', a: a};
};
var $author$project$VocaPage$ShuffleBtnClicked = {$: 'ShuffleBtnClicked'};
var $author$project$VocaPage$absoluteFullStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
			$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
			$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
			$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
			$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero)
		]));
var $author$project$VocaPage$BookmarkBtnClicked = {$: 'BookmarkBtnClicked'};
var $author$project$VocaPage$boolDisplay = function (isDisplay) {
	return isDisplay ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none);
};
var $rtfeldman$elm_css$Css$end = $rtfeldman$elm_css$Css$prop1('end');
var $author$project$VocaPage$bookmarkBtn = F3(
	function (bookmarkCnt, isBookmarkMode, isZeroAlertOpen) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$BookmarkBtnClicked),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$px(60)),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$px(50)),
							$rtfeldman$elm_css$Css$paddingRight(
							$rtfeldman$elm_css$Css$px(5)),
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									(bookmarkCnt > 0) ? $rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(1)) : $rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0.5)),
									$rtfeldman$elm_css$Css$Transitions$transition(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$Transitions$opacity(300)
										]))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$img,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$src('images/white-bookmark.webp'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(26)),
											$author$project$VocaPage$boolDisplay(!isBookmarkMode)
										]))
								]),
							_List_Nil),
							A2(
							$rtfeldman$elm_css$Html$Styled$img,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$src('images/white-bookmark-filled.webp'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(26)),
											$author$project$VocaPage$boolDisplay(isBookmarkMode)
										]))
								]),
							_List_Nil)
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(1)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(200)),
									$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$end),
									$rtfeldman$elm_css$Css$top(
									$rtfeldman$elm_css$Css$px(52)),
									$rtfeldman$elm_css$Css$right(
									$rtfeldman$elm_css$Css$px(20)),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(14)),
									$rtfeldman$elm_css$Css$color(
									$rtfeldman$elm_css$Css$hex('#fff')),
									A2($rtfeldman$elm_css$Css$property, 'transform-origin', 'right'),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$scale(
											isZeroAlertOpen ? 1.15 : 1)
										])),
									$rtfeldman$elm_css$Css$Transitions$transition(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$Transitions$transform(200)
										]))
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(
							'북마크 단어 ' + ($elm$core$String$fromInt(bookmarkCnt) + '개'))
						]))
				]));
	});
var $author$project$VocaPage$cardBaseStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$displayFlex,
			$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
			$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
			$rtfeldman$elm_css$Css$backgroundColor(
			A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
			A3(
			$rtfeldman$elm_css$Css$border3,
			$rtfeldman$elm_css$Css$px(1),
			$rtfeldman$elm_css$Css$solid,
			$rtfeldman$elm_css$Css$hex('#eee')),
			$rtfeldman$elm_css$Css$borderRadius(
			$rtfeldman$elm_css$Css$px(10)),
			$rtfeldman$elm_css$Css$width(
			$rtfeldman$elm_css$Css$pct(100)),
			$rtfeldman$elm_css$Css$height(
			$rtfeldman$elm_css$Css$pct(100)),
			$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
			$rtfeldman$elm_css$Css$Transitions$transition(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Transitions$transform(300),
					$rtfeldman$elm_css$Css$Transitions$opacity(300)
				]))
		]));
var $author$project$VocaPage$OpenCharView = F2(
	function (a, b) {
		return {$: 'OpenCharView', a: a, b: b};
	});
var $author$project$VocaPage$rubyListView = F3(
	function (vocaCard, isDisplay, vocaRubyList) {
		var rubyView = F2(
			function (idxA, vocaRuby) {
				return A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineFlex),
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$marginRight(
									$rtfeldman$elm_css$Css$px(0)),
									$rtfeldman$elm_css$Css$marginLeft(
									$rtfeldman$elm_css$Css$px(0))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$lineHeight(
											$rtfeldman$elm_css$Css$num(1)),
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(18)),
											$rtfeldman$elm_css$Css$minHeight(
											$rtfeldman$elm_css$Css$px(18)),
											$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
											isDisplay ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(vocaRuby.r)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(34)),
											$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_Nil,
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (idxB, x) {
												return A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
																])),
															A2(
															$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
															'click',
															$elm$json$Json$Decode$succeed(
																_Utils_Tuple2(
																	A2($author$project$VocaPage$OpenCharView, idxA, idxB),
																	true)))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text(x)
														]));
											}),
										A2(
											$elm$core$List$map,
											$elm$core$String$fromChar,
											$elm$core$String$toList(vocaRuby.w))))
								]))
						]));
			});
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$flexWrap($rtfeldman$elm_css$Css$wrap)
						]))
				]),
			A2($elm$core$List$indexedMap, rubyView, vocaRubyList));
	});
var $author$project$VocaPage$normalCardInner = F3(
	function (model, isSimpleMode, card) {
		var opacityStyle = $rtfeldman$elm_css$Css$batch(
			_List_fromArray(
				[
					isSimpleMode ? $rtfeldman$elm_css$Css$opacity(
					$rtfeldman$elm_css$Css$num(0)) : $rtfeldman$elm_css$Css$opacity(
					$rtfeldman$elm_css$Css$num(1))
				]));
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$flexGrow(
							$rtfeldman$elm_css$Css$num(1)),
							$rtfeldman$elm_css$Css$alignSelf($rtfeldman$elm_css$Css$stretch),
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$paddingLeft(
							$rtfeldman$elm_css$Css$px(15)),
							$rtfeldman$elm_css$Css$paddingRight(
							$rtfeldman$elm_css$Css$px(15)),
							$rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(20))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$lineHeight(
									$rtfeldman$elm_css$Css$num(1.1))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									model.isRubyMode ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#444')),
													opacityStyle
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(card.pron)
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(34)),
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#42A5F5')),
													(model.isRubyMode && model.isSimpleMode) ? $rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(18)) : $rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(0)),
													$rtfeldman$elm_css$Css$paddingBottom(
													$rtfeldman$elm_css$Css$px(5))
												]))
										]),
									_List_fromArray(
										[
											A3($author$project$VocaPage$rubyListView, card, model.isRubyMode && (!model.isSimpleMode), card.rubyList)
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[opacityStyle]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(card.kor)
										]))
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(10)),
											opacityStyle
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(card.kanjiInfo)
								]))
						]))
				]));
	});
var $author$project$VocaPage$cardInner = F4(
	function (isCurrent, model, isSimpleMode, card) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$flexGrow(
							$rtfeldman$elm_css$Css$num(1)),
							$rtfeldman$elm_css$Css$alignSelf($rtfeldman$elm_css$Css$stretch),
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
						]))
				]),
			_List_fromArray(
				[
					A3($author$project$VocaPage$normalCardInner, model, isSimpleMode, card)
				]));
	});
var $author$project$VocaPage$CharLeft = {$: 'CharLeft'};
var $author$project$VocaPage$CharRight = {$: 'CharRight'};
var $author$project$VocaPage$ClearCharView = {$: 'ClearCharView'};
var $author$project$VocaPage$CloseCharView = {$: 'CloseCharView'};
var $author$project$VocaPage$ToggleCharView = {$: 'ToggleCharView'};
var $author$project$SvgElement$closeSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 512 512'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('27')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('#666'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z')
				]),
			_List_Nil)
		]));
var $rtfeldman$elm_css$Css$flexStart = $rtfeldman$elm_css$Css$prop1('flex-start');
var $rtfeldman$elm_css$Css$stringsToValue = function (list) {
	return $elm$core$List$isEmpty(list) ? {value: 'none'} : {
		value: A2(
			$elm$core$String$join,
			', ',
			A2(
				$elm$core$List$map,
				function (s) {
					return s;
				},
				list))
	};
};
var $rtfeldman$elm_css$Css$fontFamilies = A2(
	$elm$core$Basics$composeL,
	$rtfeldman$elm_css$Css$prop1('font-family'),
	$rtfeldman$elm_css$Css$stringsToValue);
var $author$project$VocaPage$getChar = F3(
	function (idxA, idxB, model) {
		var bookCardList = $author$project$VocaPage$getBookmarkedCardList(model);
		var vocaCard = A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyVocaCard,
			A2(
				$elm$core$Array$get,
				model.cardIdx,
				$elm$core$Array$fromList(bookCardList)));
		var vocaRuby = A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyVocaRuby,
			A2(
				$elm$core$Array$get,
				idxA,
				$elm$core$Array$fromList(vocaCard.rubyList)));
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Array$get,
				idxB,
				$elm$core$Array$fromList(
					A2(
						$elm$core$List$map,
						$elm$core$String$fromChar,
						$elm$core$String$toList(vocaRuby.w)))));
	});
var $author$project$VocaPage$getRuby = F2(
	function (idxA, model) {
		var bookCardList = $author$project$VocaPage$getBookmarkedCardList(model);
		var vocaCard = A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyVocaCard,
			A2(
				$elm$core$Array$get,
				model.cardIdx,
				$elm$core$Array$fromList(bookCardList)));
		var vocaRuby = A2(
			$elm$core$Maybe$withDefault,
			$author$project$DataManage$emptyVocaRuby,
			A2(
				$elm$core$Array$get,
				idxA,
				$elm$core$Array$fromList(vocaCard.rubyList)));
		return vocaRuby;
	});
var $author$project$Hangul$smallKataganaTable = 'ァィゥェォッャュョヮヵヶ';
var $author$project$Hangul$isKataChar = function (_char) {
	return A2($elm$core$String$contains, _char, $author$project$Hangul$katakanaTable) || A2($elm$core$String$contains, _char, $author$project$Hangul$smallKataganaTable);
};
var $author$project$SvgElement$leftSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 256 512'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('50')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('#42A5F5'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M9.4 278.6c-12.5-12.5-12.5-32.8 0-45.3l128-128c9.2-9.2 22.9-11.9 34.9-6.9s19.8 16.6 19.8 29.6l0 256c0 12.9-7.8 24.6-19.8 29.6s-25.7 2.2-34.9-6.9l-128-128z')
				]),
			_List_Nil)
		]));
var $author$project$SvgElement$rightSvg = A2(
	$rtfeldman$elm_css$Svg$Styled$svg,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 256 512'),
			$rtfeldman$elm_css$Svg$Styled$Attributes$height('50')
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Svg$Styled$path,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Svg$Styled$Attributes$fill('#42A5F5'),
					$rtfeldman$elm_css$Svg$Styled$Attributes$d('M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z')
				]),
			_List_Nil)
		]));
var $author$project$Hangul$hiraganaTable = $author$project$Hangul$katakanaToHiragana($author$project$Hangul$katakanaTable);
var $author$project$Hangul$smallHangulTable = '아이우에오츠야유요와카케';
var $author$project$Hangul$smallHiraganaTable = $author$project$Hangul$katakanaToHiragana($author$project$Hangul$smallKataganaTable);
var $author$project$Hangul$toCharInfo = function (_char) {
	var _v0 = _List_fromArray(
		[
			A2($elm$core$String$indexes, _char, $author$project$Hangul$hiraganaTable),
			A2($elm$core$String$indexes, _char, $author$project$Hangul$katakanaTable),
			A2($elm$core$String$indexes, _char, $author$project$Hangul$smallHiraganaTable),
			A2($elm$core$String$indexes, _char, $author$project$Hangul$smallKataganaTable)
		]);
	_v0$4:
	while (true) {
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && (!_v0.b.b.b.b.b)) {
			if (_v0.a.b) {
				var _v1 = _v0.a;
				var idx = _v1.a;
				var _v2 = _v0.b;
				var _v3 = _v2.b;
				var _v4 = _v3.b;
				return '히라가나 : ' + A3($elm$core$String$slice, idx, idx + 1, $author$project$Hangul$hangulTable);
			} else {
				if (_v0.b.a.b) {
					var _v5 = _v0.b;
					var _v6 = _v5.a;
					var idx = _v6.a;
					var _v7 = _v5.b;
					var _v8 = _v7.b;
					return '가타카나 : ' + A3($elm$core$String$slice, idx, idx + 1, $author$project$Hangul$hangulTable);
				} else {
					if (_v0.b.b.a.b) {
						var _v9 = _v0.b;
						var _v10 = _v9.b;
						var _v11 = _v10.a;
						var idx = _v11.a;
						var _v12 = _v10.b;
						return '소문자 히라가나 : ' + A3($elm$core$String$slice, idx, idx + 1, $author$project$Hangul$smallHangulTable);
					} else {
						if (_v0.b.b.b.a.b) {
							var _v13 = _v0.b;
							var _v14 = _v13.b;
							var _v15 = _v14.b;
							var _v16 = _v15.a;
							var idx = _v16.a;
							return '소문자 가타가나 : ' + A3($elm$core$String$slice, idx, idx + 1, $author$project$Hangul$smallHangulTable);
						} else {
							break _v0$4;
						}
					}
				}
			}
		} else {
			break _v0$4;
		}
	}
	return (_char === 'ー') ? '장음 기호' : ((_char === '々') ? '반복 부호' : ((_char === 'ゝ') ? '반복 부호' : ((_char === 'ヽ') ? '반복 부호' : '')));
};
var $author$project$VocaPage$charCardInner = F3(
	function (model, idxA, idxB) {
		var ruby = A2($author$project$VocaPage$getRuby, idxA, model);
		var _char = A3($author$project$VocaPage$getChar, idxA, idxB, model);
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#f7f7f7')),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$borderRadius(
							$rtfeldman$elm_css$Css$px(10)),
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(1)),
							$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
							$elm$core$String$isEmpty(_char) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$displayFlex
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$CloseCharView),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$active(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$opacity(
											$rtfeldman$elm_css$Css$num(0.7))
										])),
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$zIndex(
									$rtfeldman$elm_css$Css$int(2)),
									$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
									$rtfeldman$elm_css$Css$paddingTop(
									$rtfeldman$elm_css$Css$px(12)),
									$rtfeldman$elm_css$Css$paddingRight(
									$rtfeldman$elm_css$Css$px(12)),
									$rtfeldman$elm_css$Css$paddingBottom(
									$rtfeldman$elm_css$Css$px(12)),
									$rtfeldman$elm_css$Css$paddingLeft(
									$rtfeldman$elm_css$Css$px(12))
								]))
						]),
					_List_fromArray(
						[$author$project$SvgElement$closeSvg])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$flexGrow(
									$rtfeldman$elm_css$Css$num(1))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
											$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#42A5F5')),
													$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(22)),
													$rtfeldman$elm_css$Css$height(
													$rtfeldman$elm_css$Css$px(22)),
													$rtfeldman$elm_css$Css$marginBottom(
													$rtfeldman$elm_css$Css$px(10)),
													$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
												]))
										]),
									_List_fromArray(
										[
											$author$project$Hangul$isKataChar(_char) ? $rtfeldman$elm_css$Html$Styled$text(
											$author$project$Hangul$katakanaToHiragana(_char)) : $rtfeldman$elm_css$Html$Styled$text(ruby.r)
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$px(200)),
													$rtfeldman$elm_css$Css$height(
													$rtfeldman$elm_css$Css$px(200)),
													$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
												]))
										]),
									_List_fromArray(
										[
											A3(
											$rtfeldman$elm_css$Html$Styled$node,
											'write-canvas',
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
															$rtfeldman$elm_css$Css$zIndex(
															$rtfeldman$elm_css$Css$int(1)),
															$rtfeldman$elm_css$Css$width(
															$rtfeldman$elm_css$Css$px(200)),
															$rtfeldman$elm_css$Css$height(
															$rtfeldman$elm_css$Css$px(200))
														]))
												]),
											_List_Nil),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
															$rtfeldman$elm_css$Css$zIndex(
															$rtfeldman$elm_css$Css$int(0)),
															$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
															$rtfeldman$elm_css$Css$width(
															$rtfeldman$elm_css$Css$px(200)),
															$rtfeldman$elm_css$Css$height(
															$rtfeldman$elm_css$Css$px(200)),
															$rtfeldman$elm_css$Css$fontSize(
															$rtfeldman$elm_css$Css$px(180)),
															$rtfeldman$elm_css$Css$fontFamilies(
															_List_fromArray(
																['Kanji Stroke Orders'])),
															$rtfeldman$elm_css$Css$backgroundColor(
															$rtfeldman$elm_css$Css$hex('#fff')),
															A4(
															$rtfeldman$elm_css$Css$borderRadius4,
															$rtfeldman$elm_css$Css$px(10),
															$rtfeldman$elm_css$Css$px(10),
															$rtfeldman$elm_css$Css$px(10),
															$rtfeldman$elm_css$Css$px(10)),
															model.isCharToggleOn ? $rtfeldman$elm_css$Css$color(
															$rtfeldman$elm_css$Css$hex('#42A5F5')) : $rtfeldman$elm_css$Css$color(
															$rtfeldman$elm_css$Css$hex('#ffffff'))
														]))
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text(_char)
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$CharLeft),
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$active(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$opacity(
																	$rtfeldman$elm_css$Css$num(0.7))
																])),
															$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
															$rtfeldman$elm_css$Css$zIndex(
															$rtfeldman$elm_css$Css$int(2)),
															$rtfeldman$elm_css$Css$left(
															$rtfeldman$elm_css$Css$px(-65)),
															$rtfeldman$elm_css$Css$width(
															$rtfeldman$elm_css$Css$px(60)),
															$rtfeldman$elm_css$Css$height(
															$rtfeldman$elm_css$Css$px(200)),
															$rtfeldman$elm_css$Css$displayFlex,
															$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd),
															$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
														]))
												]),
											_List_fromArray(
												[$author$project$SvgElement$leftSvg])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$CharRight),
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$active(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$opacity(
																	$rtfeldman$elm_css$Css$num(0.7))
																])),
															$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
															$rtfeldman$elm_css$Css$zIndex(
															$rtfeldman$elm_css$Css$int(2)),
															$rtfeldman$elm_css$Css$right(
															$rtfeldman$elm_css$Css$px(-65)),
															$rtfeldman$elm_css$Css$width(
															$rtfeldman$elm_css$Css$px(60)),
															$rtfeldman$elm_css$Css$height(
															$rtfeldman$elm_css$Css$px(200)),
															$rtfeldman$elm_css$Css$displayFlex,
															$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexStart),
															$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
														]))
												]),
											_List_fromArray(
												[$author$project$SvgElement$rightSvg]))
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#42A5F5')),
													$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$height(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(10)),
													$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
												]))
										]),
									_List_fromArray(
										[
											function () {
											var _v0 = A2($elm$core$Dict$get, _char, $author$project$Hangul$kanjiDic);
											if (_v0.$ === 'Just') {
												var kanjiInfo = _v0.a;
												return $rtfeldman$elm_css$Html$Styled$text(kanjiInfo);
											} else {
												return $rtfeldman$elm_css$Html$Styled$text(
													$author$project$Hangul$toCharInfo(_char));
											}
										}()
										]))
								]))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$color(
									$rtfeldman$elm_css$Css$hex('#fff')),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(17))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$ToggleCharView),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
											$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(50)),
											$rtfeldman$elm_css$Css$padding(
											$rtfeldman$elm_css$Css$px(10)),
											$rtfeldman$elm_css$Css$paddingRight(
											$rtfeldman$elm_css$Css$px(4))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
													$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox),
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$active(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$opacity(
															$rtfeldman$elm_css$Css$num(0.5))
														])),
													model.isCharToggleOn ? $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#42A5F5dd')) : $rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#6942f5dd')),
													$rtfeldman$elm_css$Css$Transitions$transition(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$Transitions$backgroundColor(100)
														])),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(7)),
													$rtfeldman$elm_css$Css$borderRadius(
													$rtfeldman$elm_css$Css$px(10))
												]))
										]),
									_List_fromArray(
										[
											model.isCharToggleOn ? $rtfeldman$elm_css$Html$Styled$text('글자 표시') : $rtfeldman$elm_css$Html$Styled$text('글자 숨김')
										]))
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$ClearCharView),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
											$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(50)),
											$rtfeldman$elm_css$Css$padding(
											$rtfeldman$elm_css$Css$px(10)),
											$rtfeldman$elm_css$Css$paddingLeft(
											$rtfeldman$elm_css$Css$px(4))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox),
													$rtfeldman$elm_css$Css$active(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$opacity(
															$rtfeldman$elm_css$Css$num(0.5))
														])),
													$rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#F54242dd')),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(7)),
													$rtfeldman$elm_css$Css$borderRadius(
													$rtfeldman$elm_css$Css$px(10))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text('지우기')
										]))
								]))
						]))
				]));
	});
var $author$project$VocaPage$CardBookmarkClicked = function (a) {
	return {$: 'CardBookmarkClicked', a: a};
};
var $author$project$VocaPage$Speak = function (a) {
	return {$: 'Speak', a: a};
};
var $author$project$Utility$isInstantApp = false;
var $author$project$VocaPage$currentCardBtnsDiv = F3(
	function (vocaUnique, speakStr, isBookmarked) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
							'pointerdown',
							$elm$json$Json$Decode$succeed(
								_Utils_Tuple2(
									$author$project$VocaPage$CardBookmarkClicked(vocaUnique),
									true))),
							A2(
							$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
							'pointermove',
							$elm$json$Json$Decode$succeed(
								_Utils_Tuple2($author$project$VocaPage$NoOp, true))),
							A2(
							$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
							'pointerup',
							$elm$json$Json$Decode$succeed(
								_Utils_Tuple2($author$project$VocaPage$NoOp, true)))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$img,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(22)),
											$rtfeldman$elm_css$Css$padding(
											$rtfeldman$elm_css$Css$px(20)),
											$rtfeldman$elm_css$Css$paddingRight(
											$rtfeldman$elm_css$Css$px(30)),
											$author$project$VocaPage$boolDisplay(isBookmarked)
										])),
									$rtfeldman$elm_css$Html$Styled$Attributes$src('images/bookmark.webp')
								]),
							_List_Nil),
							A2(
							$rtfeldman$elm_css$Html$Styled$img,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(22)),
											$rtfeldman$elm_css$Css$padding(
											$rtfeldman$elm_css$Css$px(20)),
											$rtfeldman$elm_css$Css$paddingRight(
											$rtfeldman$elm_css$Css$px(30)),
											$author$project$VocaPage$boolDisplay(!isBookmarked)
										])),
									$rtfeldman$elm_css$Html$Styled$Attributes$src('images/bookmark-outline.webp')
								]),
							_List_Nil)
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Events$onClick(
							$author$project$VocaPage$Speak(speakStr)),
							A2(
							$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
							'pointerdown',
							$elm$json$Json$Decode$succeed(
								_Utils_Tuple2($author$project$VocaPage$NoOp, true))),
							A2(
							$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
							'pointermove',
							$elm$json$Json$Decode$succeed(
								_Utils_Tuple2($author$project$VocaPage$NoOp, true))),
							A2(
							$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
							'pointerup',
							$elm$json$Json$Decode$succeed(
								_Utils_Tuple2($author$project$VocaPage$NoOp, true))),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(19)),
									$rtfeldman$elm_css$Css$padding(
									$rtfeldman$elm_css$Css$px(20)),
									$rtfeldman$elm_css$Css$paddingLeft(
									$rtfeldman$elm_css$Css$px(30)),
									$rtfeldman$elm_css$Css$active(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$opacity(
											$rtfeldman$elm_css$Css$num(0.5))
										])),
									$rtfeldman$elm_css$Css$Transitions$transition(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$Transitions$opacity(300)
										])),
									$author$project$Utility$isInstantApp ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$batch(_List_Nil)
								])),
							$rtfeldman$elm_css$Html$Styled$Attributes$src('images/speak-blue.webp')
						]),
					_List_Nil)
				]));
	});
var $rtfeldman$elm_css$Css$rotate = function (_v0) {
	var value = _v0.value;
	return {
		transform: $rtfeldman$elm_css$Css$Structure$Compatible,
		value: A2(
			$rtfeldman$elm_css$Css$cssFunction,
			'rotate',
			_List_fromArray(
				[value]))
	};
};
var $author$project$VocaPage$cardView = F9(
	function (model, isSimpleMode, idx, isBookmarked, card, opacityVal, x, y, angle) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$VocaPage$cardBaseStyle,
							$rtfeldman$elm_css$Css$transforms(
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Css$translate2,
									$rtfeldman$elm_css$Css$px(x),
									$rtfeldman$elm_css$Css$px(y)),
									$rtfeldman$elm_css$Css$rotate(
									$rtfeldman$elm_css$Css$deg(-angle))
								])),
							A2($rtfeldman$elm_css$Css$property, 'transform-origin', '0% 100%'),
							$rtfeldman$elm_css$Css$opacity(
							$rtfeldman$elm_css$Css$num(opacityVal))
						]))
				]),
			_List_fromArray(
				[
					A3(
					$author$project$VocaPage$currentCardBtnsDiv,
					$author$project$GlobalPort$getVocaUnique(card),
					$author$project$Utility$getSpeakString(card),
					isBookmarked),
					function () {
					var _v0 = model.selectedChar;
					if (_v0.$ === 'Just') {
						var _v1 = _v0.a;
						var idxA = _v1.a;
						var idxB = _v1.b;
						return A3($author$project$VocaPage$charCardInner, model, idxA, idxB);
					} else {
						return A3($author$project$VocaPage$charCardInner, model, -1, -1);
					}
				}(),
					A4($author$project$VocaPage$cardInner, true, model, isSimpleMode, card)
				]));
	});
var $author$project$VocaPage$pendingCardView = F8(
	function (model, isSimpleMode, isBookmarked, card, opacityVal, scaleVal, x, y) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$VocaPage$cardBaseStyle,
							$rtfeldman$elm_css$Css$transforms(
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Css$translate2,
									$rtfeldman$elm_css$Css$px(x),
									$rtfeldman$elm_css$Css$px(y)),
									$rtfeldman$elm_css$Css$scale(scaleVal)
								])),
							$rtfeldman$elm_css$Css$opacity(
							$rtfeldman$elm_css$Css$num(opacityVal))
						]))
				]),
			_List_fromArray(
				[
					A3(
					$author$project$VocaPage$currentCardBtnsDiv,
					{pron: '', word: ''},
					'',
					isBookmarked),
					A4($author$project$VocaPage$cardInner, false, model, isSimpleMode, card)
				]));
	});
var $author$project$VocaPage$prevCardView = F9(
	function (model, isSimpleMode, idx, isBookmarked, card, opacityVal, x, y, angle) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$VocaPage$cardBaseStyle,
							$rtfeldman$elm_css$Css$transforms(
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Css$translate2,
									$rtfeldman$elm_css$Css$px(x),
									$rtfeldman$elm_css$Css$px(y)),
									$rtfeldman$elm_css$Css$rotate(
									$rtfeldman$elm_css$Css$deg(-angle))
								])),
							A2($rtfeldman$elm_css$Css$property, 'transform-origin', '0% 100%'),
							$rtfeldman$elm_css$Css$opacity(
							$rtfeldman$elm_css$Css$num(opacityVal)),
							$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
						]))
				]),
			_List_fromArray(
				[
					A3(
					$author$project$VocaPage$currentCardBtnsDiv,
					{pron: '', word: ''},
					'',
					isBookmarked),
					A4($author$project$VocaPage$cardInner, false, model, isSimpleMode, card)
				]));
	});
var $author$project$HtmlElement$smailHeightMedia = $rtfeldman$elm_css$Css$Media$withMedia(
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Css$Media$only,
			$rtfeldman$elm_css$Css$Media$screen,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Media$maxHeight(
					$rtfeldman$elm_css$Css$px(580))
				]))
		]));
var $author$project$VocaPage$view = function (model) {
	var transitionStyle2 = model.isBookmarkMode ? $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$opacity(
				$rtfeldman$elm_css$Css$num(0)),
				$rtfeldman$elm_css$Css$transforms(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$translateY(
						$rtfeldman$elm_css$Css$pct(100))
					]))
			])) : $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$opacity(
				$rtfeldman$elm_css$Css$num(1)),
				$rtfeldman$elm_css$Css$transforms(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$translateY(
						$rtfeldman$elm_css$Css$pct(0))
					]))
			]));
	var transitionStyle1 = model.isBookmarkMode ? $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$opacity(
				$rtfeldman$elm_css$Css$num(1)),
				$rtfeldman$elm_css$Css$transforms(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$translateY(
						$rtfeldman$elm_css$Css$pct(0))
					]))
			])) : $rtfeldman$elm_css$Css$batch(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$opacity(
				$rtfeldman$elm_css$Css$num(0)),
				$rtfeldman$elm_css$Css$transforms(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$translateY(
						$rtfeldman$elm_css$Css$pct(-100))
					]))
			]));
	var pv = A3($elm$core$Basics$clamp, 0, 1, model.dragVal);
	var prView = A2($author$project$VocaPage$prevCardView, model, model.isSimpleMode);
	var peView = A2($author$project$VocaPage$pendingCardView, model, model.isSimpleMode);
	var mv = $elm$core$Basics$abs(
		A3($elm$core$Basics$clamp, -1, 0, model.dragVal));
	var lerp = F3(
		function (start, end, x) {
			return (start * (1 - x)) + (end * x);
		});
	var data = $author$project$VocaPage$getCardListLen(model);
	var cardListLen = $author$project$VocaPage$getCardListLen(model);
	var cView = A2($author$project$VocaPage$cardView, model, model.isSimpleMode);
	var cardMapper = F3(
		function (idx, isBookmarked, card) {
			return _Utils_eq(idx, model.cardIdx - 2) ? A7(prView, idx, isBookmarked, card, 0, 0, 20, 30) : (_Utils_eq(idx, model.cardIdx - 1) ? A7(
				prView,
				idx,
				isBookmarked,
				card,
				A3(lerp, 0, 1, mv),
				0,
				A3(lerp, 20, 0, mv),
				A3(lerp, 30, 0, mv)) : (_Utils_eq(idx, model.cardIdx) ? ((!idx) ? A7(
				cView,
				idx,
				isBookmarked,
				card,
				1,
				0,
				A3(lerp, 0, 20, -mv),
				A3(lerp, 0, 30, -mv)) : A7(
				cView,
				idx,
				isBookmarked,
				card,
				A3(lerp, 1, 0, pv),
				0,
				A3(lerp, 0, 20, pv),
				A3(lerp, 0, 30, pv))) : (_Utils_eq(idx, model.cardIdx + 1) ? A6(peView, isBookmarked, card, 1, 0.96, 0, -16) : (_Utils_eq(idx, model.cardIdx + 2) ? A6(peView, isBookmarked, card, 0.9, 0.96 * 0.96, 0, -30) : A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0))
							]))
					]),
				_List_Nil)))));
		});
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$author$project$VocaPage$absoluteFullStyle,
						$rtfeldman$elm_css$Css$backgroundImage(
						$rtfeldman$elm_css$Css$url('images/bg.webp')),
						A2(
						$rtfeldman$elm_css$Css$backgroundSize2,
						$rtfeldman$elm_css$Css$pct(100),
						$rtfeldman$elm_css$Css$pct(100))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(0)),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url('images/wave.webp')),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(60)),
								A2(
								$rtfeldman$elm_css$Css$backgroundSize2,
								$rtfeldman$elm_css$Css$pct(100),
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_Nil),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$VocaPage$absoluteFullStyle,
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(1))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$CloseBtnClicked),
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$active(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(0.7))
													])),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(60)),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(60)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
											]))
									]),
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$img,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$src('images/material-close.webp'),
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$height(
														$rtfeldman$elm_css$Css$px(22))
													]))
											]),
										_List_Nil)
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[$rtfeldman$elm_css$Css$displayFlex]))
									]),
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$HiraBtnClicked),
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$height(
														$rtfeldman$elm_css$Css$px(60)),
														$rtfeldman$elm_css$Css$width(
														$rtfeldman$elm_css$Css$px(40)),
														$rtfeldman$elm_css$Css$paddingLeft(
														$rtfeldman$elm_css$Css$px(2)),
														$rtfeldman$elm_css$Css$displayFlex,
														$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
														$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
													]))
											]),
										_List_fromArray(
											[
												model.isRubyMode ? A2(
												$rtfeldman$elm_css$Html$Styled$img,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$src('images/hira-btn.webp'),
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$height(
																$rtfeldman$elm_css$Css$px(52)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(8)),
																$rtfeldman$elm_css$Css$marginLeft(
																$rtfeldman$elm_css$Css$px(2))
															]))
													]),
												_List_Nil) : A2(
												$rtfeldman$elm_css$Html$Styled$img,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$src('images/han-btn.webp'),
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$height(
																$rtfeldman$elm_css$Css$px(50)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(6))
															]))
													]),
												_List_Nil)
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$ShuffleBtnClicked),
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$height(
														$rtfeldman$elm_css$Css$px(60)),
														$rtfeldman$elm_css$Css$width(
														$rtfeldman$elm_css$Css$px(40)),
														$rtfeldman$elm_css$Css$paddingLeft(
														$rtfeldman$elm_css$Css$px(2)),
														$rtfeldman$elm_css$Css$displayFlex,
														$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
														$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
													]))
											]),
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$img,
												_List_fromArray(
													[
														model.isRandomMode ? $rtfeldman$elm_css$Html$Styled$Attributes$src('images/shuffle-on.webp') : $rtfeldman$elm_css$Html$Styled$Attributes$src('images/shuffle-off.webp'),
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$height(
																$rtfeldman$elm_css$Css$px(36))
															]))
													]),
												_List_Nil)
											])),
										A3(
										$author$project$VocaPage$bookmarkBtn,
										$elm$core$List$length(model.bookmarkList),
										model.isBookmarkMode,
										model.isZeroAlertOpen)
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(70)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(30)),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(22)),
										$rtfeldman$elm_css$Css$color(
										$rtfeldman$elm_css$Css$hex('#fff')),
										$author$project$HtmlElement$smailHeightMedia(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(40))
											]))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												transitionStyle1,
												$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
												$rtfeldman$elm_css$Css$top(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$Transitions$transition(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$Transitions$transform(300),
														$rtfeldman$elm_css$Css$Transitions$opacity(300)
													]))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('북마크 단어')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												transitionStyle2,
												$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
												$rtfeldman$elm_css$Css$top(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$Transitions$transition(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$Transitions$transform(300),
														$rtfeldman$elm_css$Css$Transitions$opacity(300)
													]))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('전체 단어')
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$flexGrow(
										$rtfeldman$elm_css$Css$num(1)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$pct(7)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$pct(7)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(0)),
										$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox),
										$rtfeldman$elm_css$Css$displayFlex
									]))
							]),
						_List_fromArray(
							[
								A3(
								$rtfeldman$elm_css$Html$Styled$node,
								'card-drag-area',
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
												$rtfeldman$elm_css$Css$flexGrow(
												$rtfeldman$elm_css$Css$num(1))
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$Events$on,
										'card-drag',
										A2(
											$elm$json$Json$Decode$field,
											'detail',
											A2($elm$json$Json$Decode$map, $author$project$VocaPage$GotCardDragVal, $elm$json$Json$Decode$float))),
										A2(
										$rtfeldman$elm_css$Html$Styled$Events$on,
										'card-drag-end',
										$elm$json$Json$Decode$succeed($author$project$VocaPage$CardDragEnd))
									]),
								$elm$core$List$reverse(
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (i, c) {
												return A3(
													cardMapper,
													i,
													A2(
														$elm$core$List$member,
														$author$project$GlobalPort$getVocaUnique(c),
														model.bookmarkList),
													c);
											}),
										$author$project$VocaPage$getBookmarkedCardList(model))))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$pct(7)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$pct(7)),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(10)),
										$author$project$HtmlElement$smailHeightMedia(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
											]))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$stretch),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$pct(100)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(60)),
												$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$borderBox),
												$rtfeldman$elm_css$Css$paddingLeft(
												$rtfeldman$elm_css$Css$px(3)),
												$rtfeldman$elm_css$Css$paddingRight(
												$rtfeldman$elm_css$Css$px(3))
											]))
									]),
								_List_fromArray(
									[
										A3(
										$rtfeldman$elm_css$Html$Styled$node,
										'voca-seekbar',
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$Attributes$property,
												'nth',
												$elm$json$Json$Encode$int(model.cardIdx)),
												A2(
												$rtfeldman$elm_css$Html$Styled$Attributes$property,
												'length',
												$elm$json$Json$Encode$int(cardListLen)),
												A2(
												$rtfeldman$elm_css$Html$Styled$Events$on,
												'seekbarMove',
												A2(
													$elm$json$Json$Decode$at,
													_List_fromArray(
														['target', 'point']),
													A2($elm$json$Json$Decode$map, $author$project$VocaPage$SeekBarMoved, $elm$json$Json$Decode$float))),
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block),
														$rtfeldman$elm_css$Css$height(
														$rtfeldman$elm_css$Css$px(60)),
														$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
													]))
											]),
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
																$rtfeldman$elm_css$Css$top(
																$rtfeldman$elm_css$Css$px(30)),
																$rtfeldman$elm_css$Css$width(
																$rtfeldman$elm_css$Css$pct(100 / cardListLen)),
																$rtfeldman$elm_css$Css$height(
																$rtfeldman$elm_css$Css$px(15)),
																$rtfeldman$elm_css$Css$backgroundColor(
																A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
																$rtfeldman$elm_css$Css$borderRadius(
																$rtfeldman$elm_css$Css$px(3)),
																$rtfeldman$elm_css$Css$displayFlex,
																$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
															]))
													]),
												_List_fromArray(
													[
														A2(
														$rtfeldman$elm_css$Html$Styled$div,
														_List_fromArray(
															[
																$rtfeldman$elm_css$Html$Styled$Attributes$css(
																_List_fromArray(
																	[
																		$rtfeldman$elm_css$Css$fontSize(
																		$rtfeldman$elm_css$Css$px(14)),
																		$rtfeldman$elm_css$Css$color(
																		A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
																		$rtfeldman$elm_css$Css$transforms(
																		_List_fromArray(
																			[
																				$rtfeldman$elm_css$Css$translateY(
																				$rtfeldman$elm_css$Css$px(20))
																			]))
																	]))
															]),
														_List_fromArray(
															[
																$rtfeldman$elm_css$Html$Styled$text(
																$elm$core$String$fromInt(model.cardIdx + 1) + ('/' + $elm$core$String$fromInt(cardListLen)))
															]))
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$borderRadius(
																$rtfeldman$elm_css$Css$px(3)),
																$rtfeldman$elm_css$Css$backgroundColor(
																A4($rtfeldman$elm_css$Css$rgba, 255, 255, 255, 0.5)),
																$rtfeldman$elm_css$Css$width(
																$rtfeldman$elm_css$Css$pct(100)),
																$rtfeldman$elm_css$Css$height(
																$rtfeldman$elm_css$Css$px(15)),
																$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
																$rtfeldman$elm_css$Css$top(
																$rtfeldman$elm_css$Css$px(30))
															]))
													]),
												_List_Nil)
											]))
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginBottom(
										$rtfeldman$elm_css$Css$px(30))
									]))
							]),
						_List_Nil)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$fontFamilies(
								_List_fromArray(
									['Kanji Stroke Orders'])),
								$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$int(0))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text('一')
					]))
			]));
};
var $author$project$VocaPage$editView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$right(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$top(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
								$rtfeldman$elm_css$Css$minWidth(
								$rtfeldman$elm_css$Css$px(400)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						$author$project$VocaPage$view(model)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(100)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ccc'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
										$rtfeldman$elm_css$Css$top(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(10))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$SaveClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('저장하기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$GetFromListenClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('가져오기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$button,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$VocaPage$GetRubyClicked)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('루비 가져오기')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$span,
										_List_Nil,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('레벨 : ')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$input,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$value(model.levelStr),
												$rtfeldman$elm_css$Html$Styled$Events$onInput($author$project$VocaPage$LevelInputted)
											]),
										_List_Nil)
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(80)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(5)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(30))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$VocaPage$SetEditableValue,
								$author$project$EditableValue$editableView(model.editableValue))
							]))
					]))
			]));
};
var $author$project$AwardPage$AwardBtnClick = {$: 'AwardBtnClick'};
var $author$project$AwardPage$ToSearchPage = {$: 'ToSearchPage'};
var $author$project$AwardPage$BookmarkItemBtnClick = function (a) {
	return {$: 'BookmarkItemBtnClick', a: a};
};
var $author$project$AwardPage$ToVocaPage = function (a) {
	return {$: 'ToVocaPage', a: a};
};
var $author$project$GlobalPort$vocaName = '단어장';
var $author$project$AwardPage$bookmarkListItemView = F3(
	function (videoId, videoName, date) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick(
					$author$project$AwardPage$BookmarkItemBtnClick(videoId)),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$borderRadius(
							$rtfeldman$elm_css$Css$px(5)),
							$rtfeldman$elm_css$Css$color(
							$rtfeldman$elm_css$Css$hex('#fff')),
							$rtfeldman$elm_css$Css$marginTop(
							$rtfeldman$elm_css$Css$px(5)),
							$rtfeldman$elm_css$Css$marginBottom(
							$rtfeldman$elm_css$Css$px(5)),
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#ffffff75')),
							$rtfeldman$elm_css$Css$active(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#ffffff55'))
								]))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden),
									$rtfeldman$elm_css$Css$padding(
									$rtfeldman$elm_css$Css$px(15)),
									$rtfeldman$elm_css$Css$paddingRight(
									$rtfeldman$elm_css$Css$px(1))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(18)),
											$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
											$rtfeldman$elm_css$Css$textOverflow($rtfeldman$elm_css$Css$ellipsis),
											$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(videoName)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(15)),
											$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
											$rtfeldman$elm_css$Css$textOverflow($rtfeldman$elm_css$Css$ellipsis),
											$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text($author$project$GlobalPort$vocaName)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(13)),
											$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
											$rtfeldman$elm_css$Css$textOverflow($rtfeldman$elm_css$Css$ellipsis),
											$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(date)
								]))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$alignSelf($rtfeldman$elm_css$Css$stretch),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$flexEnd),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$paddingRight(
									$rtfeldman$elm_css$Css$px(14))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(13)),
											$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
											$rtfeldman$elm_css$Css$backgroundColor(
											A3($rtfeldman$elm_css$Css$rgb, 69, 157, 246)),
											$rtfeldman$elm_css$Css$borderRadius(
											$rtfeldman$elm_css$Css$px(30)),
											$rtfeldman$elm_css$Css$padding(
											$rtfeldman$elm_css$Css$px(9)),
											$rtfeldman$elm_css$Css$opacity(
											$rtfeldman$elm_css$Css$num(1)),
											$rtfeldman$elm_css$Css$active(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$opacity(
													$rtfeldman$elm_css$Css$num(0.7)),
													$rtfeldman$elm_css$Css$backgroundColor(
													$rtfeldman$elm_css$Css$hex('#ddd'))
												]))
										])),
									$rtfeldman$elm_css$Html$Styled$Events$onClick(
									$author$project$AwardPage$ToVocaPage(videoId))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text('바로 가기')
								]))
						]))
				]));
	});
var $author$project$AwardPage$CloseModal = {$: 'CloseModal'};
var $author$project$AwardPage$Speak = function (a) {
	return {$: 'Speak', a: a};
};
var $author$project$AwardPage$ToListenPage = function (a) {
	return {$: 'ToListenPage', a: a};
};
var $author$project$AwardPage$ToPronPage = F2(
	function (a, b) {
		return {$: 'ToPronPage', a: a, b: b};
	});
var $author$project$AwardPage$ToRoadMapPage = function (a) {
	return {$: 'ToRoadMapPage', a: a};
};
var $author$project$AwardPage$ToSentencePage = function (a) {
	return {$: 'ToSentencePage', a: a};
};
var $author$project$AwardPage$ToTapGamePage = F2(
	function (a, b) {
		return {$: 'ToTapGamePage', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$fontStyle = $rtfeldman$elm_css$Css$prop1('font-style');
var $rtfeldman$elm_css$Css$italic = {fontStyle: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'italic'};
var $author$project$AwardPage$resultViewHeader = F2(
	function (name, award) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Events$onClick(
							$author$project$AwardPage$ToRoadMapPage(award.videoId)),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$paddingTop(
									$rtfeldman$elm_css$Css$px(25)),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(5)),
									$rtfeldman$elm_css$Css$active(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$opacity(
											$rtfeldman$elm_css$Css$num(0.8))
										]))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(24)),
													$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
													$rtfeldman$elm_css$Css$fontStyle($rtfeldman$elm_css$Css$italic)
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(award.videoName)
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													A3(
													$rtfeldman$elm_css$Css$borderBottom3,
													$rtfeldman$elm_css$Css$px(3),
													$rtfeldman$elm_css$Css$solid,
													$rtfeldman$elm_css$Css$hex('#fff')),
													$rtfeldman$elm_css$Css$marginTop(
													$rtfeldman$elm_css$Css$px(2))
												]))
										]),
									_List_Nil)
								]))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Events$onClick(
							_Utils_eq(award.name, $author$project$GlobalPort$listenName) ? $author$project$AwardPage$ToListenPage(award.videoId) : (_Utils_eq(award.name, $author$project$GlobalPort$tapGameName) ? A2($author$project$AwardPage$ToTapGamePage, award.videoId, award.level) : (_Utils_eq(award.name, $author$project$GlobalPort$sentenceName) ? $author$project$AwardPage$ToSentencePage(award.videoId) : (_Utils_eq(award.name, $author$project$GlobalPort$pronName) ? A2($author$project$AwardPage$ToPronPage, award.videoId, award.level) : (_Utils_eq(award.name, $author$project$GlobalPort$vocaName) ? $author$project$AwardPage$ToVocaPage(award.videoId) : $author$project$AwardPage$NoOp))))),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$flexWrap($rtfeldman$elm_css$Css$wrap),
									$rtfeldman$elm_css$Css$marginTop(
									$rtfeldman$elm_css$Css$px(10)),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(50)),
									$rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#42A5F5')),
									$rtfeldman$elm_css$Css$padding(
									$rtfeldman$elm_css$Css$px(10)),
									$rtfeldman$elm_css$Css$active(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$opacity(
											$rtfeldman$elm_css$Css$num(0.8))
										])),
									A4(
									$rtfeldman$elm_css$Css$boxShadow4,
									$rtfeldman$elm_css$Css$px(2),
									$rtfeldman$elm_css$Css$px(2),
									$rtfeldman$elm_css$Css$px(8),
									$rtfeldman$elm_css$Css$hex('#00000011'))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(18)),
											$rtfeldman$elm_css$Css$alignSelf($rtfeldman$elm_css$Css$flexEnd),
											$rtfeldman$elm_css$Css$fontStyle($rtfeldman$elm_css$Css$italic)
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(name),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
													$rtfeldman$elm_css$Css$paddingLeft(
													$rtfeldman$elm_css$Css$px(3)),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(16))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text('가기')
										]))
								]))
						]))
				]));
	});
var $author$project$AwardPage$rubyView = function (vocaRuby) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$marginRight(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$marginLeft(
						$rtfeldman$elm_css$Css$px(0))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$lineHeight(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(16))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(vocaRuby.r)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(24))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(vocaRuby.w)
					]))
			]));
};
var $author$project$AwardPage$bookmarkResultView = function (model) {
	var vocaData = A2($author$project$DataManage$getVocaData, model.selectedBookmarkVid, model.appData);
	var selecteBookmarkData = A2(
		$elm$core$List$filterMap,
		function (v) {
			return $elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (card) {
						return _Utils_eq(card.pron, v.pron) && _Utils_eq(card.word, v.word);
					},
					vocaData.cardList));
		},
		A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			$elm$core$List$head(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.vocaList;
					},
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var videoId = _v0.videoId;
							return _Utils_eq(videoId, model.selectedBookmarkVid);
						},
						model.bookmarkData)))));
	var renderResultWord = function (vocaCard) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick(
					$author$project$AwardPage$Speak(
						$author$project$Utility$getSpeakString(vocaCard))),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#ffffff55')),
							$rtfeldman$elm_css$Css$padding(
							$rtfeldman$elm_css$Css$px(10)),
							$rtfeldman$elm_css$Css$marginTop(
							$rtfeldman$elm_css$Css$px(11)),
							$rtfeldman$elm_css$Css$borderRadius(
							$rtfeldman$elm_css$Css$px(5)),
							$rtfeldman$elm_css$Css$opacity(
							$rtfeldman$elm_css$Css$num(1)),
							$rtfeldman$elm_css$Css$active(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0.9))
								]))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
								]))
						]),
					A2($elm$core$List$map, $author$project$AwardPage$rubyView, vocaCard.rubyList)),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(16)),
									$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(vocaCard.kor)
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(16)),
									$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(vocaCard.kanjiInfo)
						]))
				]));
	};
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$opacity(200)
							])),
						model.isModalOpen ? $rtfeldman$elm_css$Css$batch(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
							])) : $rtfeldman$elm_css$Css$batch(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0)),
								$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
							])),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$backgroundImage(
						$rtfeldman$elm_css$Css$url('images/bg.webp')),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#547ef5')),
						A2(
						$rtfeldman$elm_css$Css$backgroundSize2,
						$rtfeldman$elm_css$Css$pct(100),
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(2000))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$id('result-view'),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$pct(100)),
										$rtfeldman$elm_css$Css$flexGrow(
										$rtfeldman$elm_css$Css$num(1)),
										$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$pct(100)),
												$rtfeldman$elm_css$Css$maxWidth(
												$rtfeldman$elm_css$Css$px(500)),
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(20)),
												$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$contentBox)
											]))
									]),
								_List_fromArray(
									[
										A2(
										$author$project$AwardPage$resultViewHeader,
										$author$project$GlobalPort$vocaName,
										{
											level: 0,
											name: $author$project$GlobalPort$vocaName,
											videoId: model.selectedBookmarkVid,
											videoName: A2($author$project$DataManage$getVideoData, model.selectedBookmarkVid, model.appData).name
										}),
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(21)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(30))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('북마크 단어'),
														$rtfeldman$elm_css$Html$Styled$text(
														$elm$core$String$concat(
															_List_fromArray(
																[
																	'(',
																	$elm$core$String$fromInt(
																	$elm$core$List$length(selecteBookmarkData)),
																	')'
																])))
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(18)),
																$rtfeldman$elm_css$Css$padding(
																$rtfeldman$elm_css$Css$px(5))
															]))
													]),
												A2($elm$core$List$map, renderResultWord, selecteBookmarkData))
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$paddingTop(
														$rtfeldman$elm_css$Css$px(40))
													]))
											]),
										_List_Nil)
									]))
							])),
						$author$project$HtmlElement$endOkBtn($author$project$AwardPage$CloseModal)
					]))
			]));
};
var $author$project$AwardPage$ListenClicked = function (a) {
	return {$: 'ListenClicked', a: a};
};
var $author$project$AwardPage$PronClicked = function (a) {
	return {$: 'PronClicked', a: a};
};
var $author$project$AwardPage$SentenceClicked = function (a) {
	return {$: 'SentenceClicked', a: a};
};
var $author$project$AwardPage$TapGameClicked = function (a) {
	return {$: 'TapGameClicked', a: a};
};
var $author$project$AwardPage$listItemView = function (award) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Events$onClick(
				_Utils_eq(award.name, $author$project$GlobalPort$listenName) ? $author$project$AwardPage$ListenClicked(award) : (_Utils_eq(award.name, $author$project$GlobalPort$tapGameName) ? $author$project$AwardPage$TapGameClicked(award) : (_Utils_eq(award.name, $author$project$GlobalPort$sentenceName) ? $author$project$AwardPage$SentenceClicked(award) : (_Utils_eq(award.name, $author$project$GlobalPort$pronName) ? $author$project$AwardPage$PronClicked(award) : $author$project$AwardPage$NoOp)))),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$borderRadius(
						$rtfeldman$elm_css$Css$px(5)),
						$rtfeldman$elm_css$Css$color(
						$rtfeldman$elm_css$Css$hex('#fff')),
						$rtfeldman$elm_css$Css$marginTop(
						$rtfeldman$elm_css$Css$px(6)),
						$rtfeldman$elm_css$Css$marginBottom(
						$rtfeldman$elm_css$Css$px(5)),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#ffffff75')),
						$rtfeldman$elm_css$Css$active(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff55'))
							]))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(15)),
								$rtfeldman$elm_css$Css$paddingRight(
								$rtfeldman$elm_css$Css$px(1))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(18)),
										$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
										$rtfeldman$elm_css$Css$textOverflow($rtfeldman$elm_css$Css$ellipsis),
										$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(award.videoName)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(15)),
										$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
										$rtfeldman$elm_css$Css$textOverflow($rtfeldman$elm_css$Css$ellipsis),
										$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(
								A3(
									$elm$core$String$replace,
									'문장 조합하기',
									'문장 만들기',
									A3(
										$elm$core$String$replace,
										'제때 누르기',
										'듣고 누르기',
										(!award.level) ? award.name : _Utils_ap(
											award.name,
											$elm$core$String$fromInt(award.level)))))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(13)),
										$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
										$rtfeldman$elm_css$Css$textOverflow($rtfeldman$elm_css$Css$ellipsis),
										$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(award.date)
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$alignSelf($rtfeldman$elm_css$Css$stretch),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$flexEnd),
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$paddingRight(
								$rtfeldman$elm_css$Css$px(14))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(13)),
										$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
										$rtfeldman$elm_css$Css$backgroundColor(
										A3($rtfeldman$elm_css$Css$rgb, 69, 157, 246)),
										$rtfeldman$elm_css$Css$borderRadius(
										$rtfeldman$elm_css$Css$px(30)),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(9)),
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(1)),
										$rtfeldman$elm_css$Css$active(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0.7)),
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#ddd'))
											]))
									])),
								$rtfeldman$elm_css$Html$Styled$Events$onClick(
								_Utils_eq(award.name, $author$project$GlobalPort$listenName) ? $author$project$AwardPage$ToListenPage(award.videoId) : (_Utils_eq(award.name, $author$project$GlobalPort$tapGameName) ? A2($author$project$AwardPage$ToTapGamePage, award.videoId, award.level) : (_Utils_eq(award.name, $author$project$GlobalPort$sentenceName) ? $author$project$AwardPage$ToSentencePage(award.videoId) : (_Utils_eq(award.name, $author$project$GlobalPort$pronName) ? A2($author$project$AwardPage$ToPronPage, award.videoId, award.level) : $author$project$AwardPage$NoOp))))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('바로 가기')
							]))
					]))
			]));
};
var $author$project$AwardPage$listenResultView = F3(
	function (isModalOpen, award, listenResult) {
		var renderResultWord = function (vocaCard) {
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick(
						$author$project$AwardPage$Speak(
							$author$project$Utility$getSpeakString(vocaCard))),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff55')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(10)),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(11)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(5)),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.9))
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
									]))
							]),
						A2($elm$core$List$map, $author$project$AwardPage$rubyView, vocaCard.rubyList)),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16)),
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(vocaCard.kor)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16)),
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(vocaCard.kanjiInfo)
							]))
					]));
		};
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
							$rtfeldman$elm_css$Css$Transitions$transition(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$Transitions$opacity(200)
								])),
							isModalOpen ? $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(1)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
								])) : $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
								])),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$backgroundImage(
							$rtfeldman$elm_css$Css$url('images/bg.webp')),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#547ef5')),
							A2(
							$rtfeldman$elm_css$Css$backgroundSize2,
							$rtfeldman$elm_css$Css$pct(100),
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(2000))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$id('result-view'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$flexGrow(
											$rtfeldman$elm_css$Css$num(1)),
											$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$maxWidth(
													$rtfeldman$elm_css$Css$px(500)),
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#fff')),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$contentBox)
												]))
										]),
									_List_fromArray(
										[
											A2($author$project$AwardPage$resultViewHeader, $author$project$GlobalPort$listenName, award),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('표시한 단어'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(listenResult.quizResult)),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$elm$core$List$isEmpty(listenResult.quizResult) ? $rtfeldman$elm_css$Css$displayFlex : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none),
																	$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(17)),
																	$rtfeldman$elm_css$Css$backgroundColor(
																	$rtfeldman$elm_css$Css$hex('#ffffff22')),
																	$rtfeldman$elm_css$Css$paddingTop(
																	$rtfeldman$elm_css$Css$px(20)),
																	$rtfeldman$elm_css$Css$paddingBottom(
																	$rtfeldman$elm_css$Css$px(20)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(5)),
																	$rtfeldman$elm_css$Css$borderRadius(
																	$rtfeldman$elm_css$Css$px(3))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('표시한 단어가 없습니다!')
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$elm$core$List$isEmpty(listenResult.quizResult) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block),
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(5))
																]))
														]),
													A2($elm$core$List$map, renderResultWord, listenResult.quizResult))
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$paddingTop(
															$rtfeldman$elm_css$Css$px(40))
														]))
												]),
											_List_Nil)
										]))
								])),
							$author$project$HtmlElement$endOkBtn($author$project$AwardPage$CloseModal)
						]))
				]));
	});
var $author$project$AwardPage$CategoryBtnClicked = function (a) {
	return {$: 'CategoryBtnClicked', a: a};
};
var $author$project$AwardPage$makeBookCategoryBtn = function (selected) {
	var str = $author$project$GlobalPort$vocaName;
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Events$onClick(
				$author$project$AwardPage$CategoryBtnClicked(str)),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$padding(
						$rtfeldman$elm_css$Css$px(8)),
						$rtfeldman$elm_css$Css$paddingLeft(
						$rtfeldman$elm_css$Css$px(5)),
						$rtfeldman$elm_css$Css$paddingRight(
						$rtfeldman$elm_css$Css$px(5)),
						$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(10)),
								_Utils_eq(selected, str) ? $rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#6942f5')) : $rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#80838f')),
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#fff')),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(5)),
								A4(
								$rtfeldman$elm_css$Css$boxShadow4,
								$rtfeldman$elm_css$Css$px(1),
								$rtfeldman$elm_css$Css$px(1),
								$rtfeldman$elm_css$Css$px(10),
								$rtfeldman$elm_css$Css$hex('#00000011')),
								$rtfeldman$elm_css$Css$Transitions$transition(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$Transitions$backgroundColor(100)
									]))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(str)
					]))
			]));
};
var $author$project$AwardPage$makeCategoryBtn = F2(
	function (selected, str) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick(
					$author$project$AwardPage$CategoryBtnClicked(str)),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$padding(
							$rtfeldman$elm_css$Css$px(8)),
							$rtfeldman$elm_css$Css$paddingLeft(
							$rtfeldman$elm_css$Css$px(5)),
							$rtfeldman$elm_css$Css$paddingRight(
							$rtfeldman$elm_css$Css$px(5)),
							$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$padding(
									$rtfeldman$elm_css$Css$px(10)),
									_Utils_eq(selected, str) ? $rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#42B8F5')) : $rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#80838f')),
									$rtfeldman$elm_css$Css$color(
									$rtfeldman$elm_css$Css$hex('#fff')),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(5)),
									A4(
									$rtfeldman$elm_css$Css$boxShadow4,
									$rtfeldman$elm_css$Css$px(1),
									$rtfeldman$elm_css$Css$px(1),
									$rtfeldman$elm_css$Css$px(10),
									$rtfeldman$elm_css$Css$hex('#00000011')),
									$rtfeldman$elm_css$Css$Transitions$transition(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$Transitions$backgroundColor(100)
										]))
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(
							A3(
								$elm$core$String$replace,
								'문장 조합하기',
								'문장 만들기',
								A3($elm$core$String$replace, '제때 누르기', '듣고 누르기', str)))
						]))
				]));
	});
var $author$project$AwardPage$pronResultView = F3(
	function (isModalOpen, award, _v0) {
		var quizResult = _v0.quizResult;
		var renderResultWord = function (w) {
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick(
						$author$project$AwardPage$Speak(
							$author$project$Utility$getSpeakString(
								{pron: w.pron, word: w.word}))),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff55')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(14)),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(11)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(5)),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.9))
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(24))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.word)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.meaning)
							]))
					]));
		};
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
							$rtfeldman$elm_css$Css$Transitions$transition(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$Transitions$opacity(200)
								])),
							isModalOpen ? $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(1)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
								])) : $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
								])),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$backgroundImage(
							$rtfeldman$elm_css$Css$url('images/bg.webp')),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#547ef5')),
							A2(
							$rtfeldman$elm_css$Css$backgroundSize2,
							$rtfeldman$elm_css$Css$pct(100),
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(2000))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$id('result-view'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$flexGrow(
											$rtfeldman$elm_css$Css$num(1)),
											$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$maxWidth(
													$rtfeldman$elm_css$Css$px(500)),
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#fff')),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$contentBox)
												]))
										]),
									_List_fromArray(
										[
											A2(
											$author$project$AwardPage$resultViewHeader,
											_Utils_ap(
												$author$project$GlobalPort$pronName,
												$elm$core$String$fromInt(award.level)),
											award),
											A2(
											$elm$core$List$any,
											function (q) {
												return !q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('틀린 단어'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				A2(
																					$elm$core$Basics$composeL,
																					$elm$core$Basics$not,
																					function ($) {
																						return $.isRight;
																					}),
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(5))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultWord,
														A2(
															$elm$core$List$filter,
															A2(
																$elm$core$Basics$composeL,
																$elm$core$Basics$not,
																function ($) {
																	return $.isRight;
																}),
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$elm$core$List$any,
											function (q) {
												return q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('맞은 단어'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				function ($) {
																					return $.isRight;
																				},
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(4))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultWord,
														A2(
															$elm$core$List$filter,
															function ($) {
																return $.isRight;
															},
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$paddingTop(
															$rtfeldman$elm_css$Css$px(40))
														]))
												]),
											_List_Nil)
										]))
								])),
							$author$project$HtmlElement$endOkBtn($author$project$AwardPage$CloseModal)
						]))
				]));
	});
var $author$project$AwardPage$sentenceResultView = F3(
	function (isModalOpen, award, _v0) {
		var quizResult = _v0.quizResult;
		var renderResultSentence = function (s) {
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick(
						$author$project$AwardPage$Speak(
							$author$project$Utility$getSpeakString(
								{pron: s.pron, word: s.sentence}))),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff55')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(14)),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(11)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(5)),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.9))
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(18))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(s.sentence)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(s.kor)
							]))
					]));
		};
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
							$rtfeldman$elm_css$Css$Transitions$transition(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$Transitions$opacity(200)
								])),
							isModalOpen ? $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(1)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
								])) : $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
								])),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$backgroundImage(
							$rtfeldman$elm_css$Css$url('images/bg.webp')),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#547ef5')),
							A2(
							$rtfeldman$elm_css$Css$backgroundSize2,
							$rtfeldman$elm_css$Css$pct(100),
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(2000))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$id('result-view'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$flexGrow(
											$rtfeldman$elm_css$Css$num(1)),
											$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$maxWidth(
													$rtfeldman$elm_css$Css$px(500)),
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#fff')),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$contentBox)
												]))
										]),
									_List_fromArray(
										[
											A2(
											$author$project$AwardPage$resultViewHeader,
											A3($elm$core$String$replace, '문장 조합하기', '문장 만들기', $author$project$GlobalPort$sentenceName),
											award),
											A2(
											$elm$core$List$any,
											function (q) {
												return !q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('틀린 문장'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				A2(
																					$elm$core$Basics$composeL,
																					$elm$core$Basics$not,
																					function ($) {
																						return $.isRight;
																					}),
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(5))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultSentence,
														A2(
															$elm$core$List$filter,
															A2(
																$elm$core$Basics$composeL,
																$elm$core$Basics$not,
																function ($) {
																	return $.isRight;
																}),
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$elm$core$List$any,
											function (q) {
												return q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('맞은 문장'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				function ($) {
																					return $.isRight;
																				},
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(4))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultSentence,
														A2(
															$elm$core$List$filter,
															function ($) {
																return $.isRight;
															},
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$paddingTop(
															$rtfeldman$elm_css$Css$px(40))
														]))
												]),
											_List_Nil)
										]))
								])),
							$author$project$HtmlElement$endOkBtn($author$project$AwardPage$CloseModal)
						]))
				]));
	});
var $rtfeldman$elm_css$Css$start = $rtfeldman$elm_css$Css$prop1('start');
var $author$project$AwardPage$tapGameResultView = F3(
	function (isModalOpen, award, _v0) {
		var bestScore = _v0.bestScore;
		var currentScore = _v0.currentScore;
		var quizResult = _v0.quizResult;
		var renderResultWord = function (w) {
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick(
						$author$project$AwardPage$Speak(
							$author$project$Utility$getSpeakString(w))),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff55')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(10)),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(11)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(5)),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.9))
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.pron)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(24))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.word)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(w.meaning)
							]))
					]));
		};
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
							$rtfeldman$elm_css$Css$Transitions$transition(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$Transitions$opacity(200)
								])),
							isModalOpen ? $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(1)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
								])) : $rtfeldman$elm_css$Css$batch(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0)),
									$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
								])),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$height(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$backgroundImage(
							$rtfeldman$elm_css$Css$url('images/bg.webp')),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#547ef5')),
							A2(
							$rtfeldman$elm_css$Css$backgroundSize2,
							$rtfeldman$elm_css$Css$pct(100),
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(2000))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$pct(100)),
									$rtfeldman$elm_css$Css$displayFlex,
									$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
									$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$id('result-view'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(100)),
											$rtfeldman$elm_css$Css$flexGrow(
											$rtfeldman$elm_css$Css$num(1)),
											$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$maxWidth(
													$rtfeldman$elm_css$Css$px(500)),
													$rtfeldman$elm_css$Css$color(
													$rtfeldman$elm_css$Css$hex('#fff')),
													$rtfeldman$elm_css$Css$padding(
													$rtfeldman$elm_css$Css$px(20)),
													$rtfeldman$elm_css$Css$boxSizing($rtfeldman$elm_css$Css$contentBox)
												]))
										]),
									_List_fromArray(
										[
											A2(
											$author$project$AwardPage$resultViewHeader,
											_Utils_ap(
												A3($elm$core$String$replace, '제때 누르기', '듣고 누르기', $author$project$GlobalPort$tapGameName),
												$elm$core$String$fromInt(award.level)),
											award),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(22)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(25))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('플레이 결과')
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(11)),
																	$rtfeldman$elm_css$Css$marginLeft(
																	$rtfeldman$elm_css$Css$px(5))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text(
															'최고 점수 : ' + $elm$core$String$fromInt(bestScore))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(5)),
																	$rtfeldman$elm_css$Css$marginLeft(
																	$rtfeldman$elm_css$Css$px(5))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text(
															'이번 점수 : ' + $elm$core$String$fromInt(currentScore))
														]))
												])),
											A2(
											$elm$core$List$any,
											function (q) {
												return !q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('틀린 단어'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				A2(
																					$elm$core$Basics$composeL,
																					$elm$core$Basics$not,
																					function ($) {
																						return $.isRight;
																					}),
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(5))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultWord,
														A2(
															$elm$core$List$filter,
															A2(
																$elm$core$Basics$composeL,
																$elm$core$Basics$not,
																function ($) {
																	return $.isRight;
																}),
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$elm$core$List$any,
											function (q) {
												return q.isRight;
											},
											quizResult) ? A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(21)),
																	$rtfeldman$elm_css$Css$marginTop(
																	$rtfeldman$elm_css$Css$px(30))
																]))
														]),
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$text('맞은 단어'),
															$rtfeldman$elm_css$Html$Styled$text(
															$elm$core$String$concat(
																_List_fromArray(
																	[
																		'(',
																		$elm$core$String$fromInt(
																		$elm$core$List$length(
																			A2(
																				$elm$core$List$filter,
																				function ($) {
																					return $.isRight;
																				},
																				quizResult))),
																		')'
																	])))
														])),
													A2(
													$rtfeldman$elm_css$Html$Styled$div,
													_List_fromArray(
														[
															$rtfeldman$elm_css$Html$Styled$Attributes$css(
															_List_fromArray(
																[
																	$rtfeldman$elm_css$Css$fontSize(
																	$rtfeldman$elm_css$Css$px(18)),
																	$rtfeldman$elm_css$Css$padding(
																	$rtfeldman$elm_css$Css$px(4))
																]))
														]),
													A2(
														$elm$core$List$map,
														renderResultWord,
														A2(
															$elm$core$List$filter,
															function ($) {
																return $.isRight;
															},
															quizResult)))
												])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$paddingTop(
															$rtfeldman$elm_css$Css$px(40))
														]))
												]),
											_List_Nil)
										]))
								])),
							$author$project$HtmlElement$endOkBtn($author$project$AwardPage$CloseModal)
						]))
				]));
	});
var $author$project$AwardPage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundImage(
						$rtfeldman$elm_css$Css$url('images/bg.webp')),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#547ef5')),
						A2(
						$rtfeldman$elm_css$Css$backgroundSize2,
						$rtfeldman$elm_css$Css$pct(100),
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$stretch)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#fff')),
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(40)),
								$rtfeldman$elm_css$Css$marginBottom(
								$rtfeldman$elm_css$Css$px(15)),
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(28)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
									]),
								_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
														$rtfeldman$elm_css$Css$fontSize(
														$rtfeldman$elm_css$Css$px(23)),
														$rtfeldman$elm_css$Css$marginRight(
														$rtfeldman$elm_css$Css$px(3))
													]))
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('학습 기록')
											]))
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$pct(80)),
												$rtfeldman$elm_css$Css$marginTop(
												$rtfeldman$elm_css$Css$px(5)),
												A3(
												$rtfeldman$elm_css$Css$borderBottom3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff'))
											]))
									]),
								_List_Nil)
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff33'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$flexWrap($rtfeldman$elm_css$Css$noWrap),
										$rtfeldman$elm_css$Css$overflowX($rtfeldman$elm_css$Css$auto),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(15)),
										$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap)
									]))
							]),
						_List_fromArray(
							[
								A2($author$project$AwardPage$makeCategoryBtn, model.selectedCategory, '전체'),
								$author$project$Utility$isApple ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : A2($author$project$AwardPage$makeCategoryBtn, model.selectedCategory, '들어보기'),
								A2($author$project$AwardPage$makeCategoryBtn, model.selectedCategory, '제때 누르기'),
								A2($author$project$AwardPage$makeCategoryBtn, model.selectedCategory, '문장 조합하기'),
								A2($author$project$AwardPage$makeCategoryBtn, model.selectedCategory, '발음 맞추기'),
								$author$project$AwardPage$makeBookCategoryBtn(model.selectedCategory)
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#fff')),
								$elm$core$List$isEmpty(model.awardList) ? (_Utils_eq(model.selectedCategory, $author$project$GlobalPort$vocaName) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$displayFlex) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none),
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(17)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff22')),
								$rtfeldman$elm_css$Css$paddingTop(
								$rtfeldman$elm_css$Css$px(20)),
								$rtfeldman$elm_css$Css$paddingBottom(
								$rtfeldman$elm_css$Css$px(20))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text('아직 완료한 강좌가 없습니다!')
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#fff')),
								$elm$core$List$isEmpty(model.bookmarkData) ? (_Utils_eq(model.selectedCategory, $author$project$GlobalPort$vocaName) ? $rtfeldman$elm_css$Css$displayFlex : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none),
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(17)),
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff22')),
								$rtfeldman$elm_css$Css$paddingTop(
								$rtfeldman$elm_css$Css$px(20)),
								$rtfeldman$elm_css$Css$paddingBottom(
								$rtfeldman$elm_css$Css$px(20))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text('아직 북마크한 단어가 없습니다.')
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$id('list-scroll'),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto)
							]))
					]),
				_List_fromArray(
					[
						A3(
						$rtfeldman$elm_css$Html$Styled$Keyed$node,
						'div',
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										_Utils_eq(model.selectedCategory, $author$project$GlobalPort$vocaName) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$start),
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$stretch),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$marginRight(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$marginBottom(
										$rtfeldman$elm_css$Css$px(10))
									]))
							]),
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(
									x.key,
									$author$project$AwardPage$listItemView(x));
							},
							A2(
								$elm$core$List$filter,
								function (award) {
									return (model.selectedCategory === '전체') ? true : (_Utils_eq(model.selectedCategory, award.name) ? true : false);
								},
								model.awardList))),
						A3(
						$rtfeldman$elm_css$Html$Styled$Keyed$node,
						'div',
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										_Utils_eq(model.selectedCategory, $author$project$GlobalPort$vocaName) ? $rtfeldman$elm_css$Css$displayFlex : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none),
										$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$start),
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$stretch),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$marginRight(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$marginBottom(
										$rtfeldman$elm_css$Css$px(10))
									]))
							]),
						A2(
							$elm$core$List$map,
							function (_v0) {
								var videoId = _v0.videoId;
								var date = _v0.date;
								var vocaList = _v0.vocaList;
								var video = A2($author$project$DataManage$getVideoData, videoId, model.appData);
								return _Utils_Tuple2(
									videoId,
									A3(
										$author$project$AwardPage$bookmarkListItemView,
										videoId,
										video.name,
										A2(
											$author$project$TimeHelper$getDateStr,
											model.zone,
											$elm$time$Time$millisToPosix(date))));
							},
							$elm$core$List$reverse(
								A2(
									$elm$core$List$sortBy,
									function ($) {
										return $.date;
									},
									model.bookmarkData))))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$alignSelf($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$px(260))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(35)),
										$rtfeldman$elm_css$Css$paddingTop(
										$rtfeldman$elm_css$Css$px(17))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(200)),
												A5(
												$rtfeldman$elm_css$Css$boxShadow5,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$hex('#eee'))
											])),
										$author$project$HtmlElement$onPointerDown($author$project$AwardPage$ToSearchPage)
									]),
								_List_fromArray(
									[$author$project$SvgElement$searchIconSvg])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(200)),
												A5(
												$rtfeldman$elm_css$Css$boxShadow5,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$hex('#eee'))
											])),
										$author$project$HtmlElement$onPointerDown($author$project$AwardPage$ToMainPage)
									]),
								_List_fromArray(
									[$author$project$SvgElement$homeIconSvg])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0.85)),
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(200)),
												A5(
												$rtfeldman$elm_css$Css$boxShadow5,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$hex('#eee'))
											])),
										$author$project$HtmlElement$onPointerDown($author$project$AwardPage$AwardBtnClick)
									]),
								_List_fromArray(
									[$author$project$SvgElement$userIconSvg]))
							]))
					])),
				function () {
				var _v1 = model.modalType;
				switch (_v1.$) {
					case 'NoModal':
						return A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$Transitions$transition(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$Transitions$opacity(200)
												])),
											$rtfeldman$elm_css$Css$opacity(
											$rtfeldman$elm_css$Css$num(0))
										]))
								]),
							_List_Nil);
					case 'ListenModal':
						var result = _v1.a;
						return A3($author$project$AwardPage$listenResultView, model.isModalOpen, model.requestedAward, result);
					case 'TapGameModal':
						var result = _v1.a;
						return A3($author$project$AwardPage$tapGameResultView, model.isModalOpen, model.requestedAward, result);
					case 'SentenceModal':
						var result = _v1.a;
						return A3($author$project$AwardPage$sentenceResultView, model.isModalOpen, model.requestedAward, result);
					default:
						var result = _v1.a;
						return A3($author$project$AwardPage$pronResultView, model.isModalOpen, model.requestedAward, result);
				}
			}(),
				_Utils_eq(model.selectedCategory, $author$project$GlobalPort$vocaName) ? $author$project$AwardPage$bookmarkResultView(model) : A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$transition(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$Transitions$opacity(200)
									])),
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0))
							]))
					]),
				_List_Nil)
			]));
};
var $author$project$MarketPage$ActivationTap = {$: 'ActivationTap'};
var $author$project$MarketPage$AlreadySubBtnClick = {$: 'AlreadySubBtnClick'};
var $author$project$MarketPage$SubBtnClick = {$: 'SubBtnClick'};
var $author$project$MarketPage$SubCheckBtnClick = {$: 'SubCheckBtnClick'};
var $author$project$MarketPage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundImage(
						$rtfeldman$elm_css$Css$url('images/bg.webp')),
						A2(
						$rtfeldman$elm_css$Css$backgroundSize2,
						$rtfeldman$elm_css$Css$pct(100),
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url('images/wave.webp')),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(60)),
								A2(
								$rtfeldman$elm_css$Css$backgroundSize2,
								$rtfeldman$elm_css$Css$pct(100),
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
							]))
					]),
				_List_Nil),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
								$rtfeldman$elm_css$Css$backgroundColor(
								A3($rtfeldman$elm_css$Css$rgb, 66, 163, 245))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$active(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0.7))
											])),
										$rtfeldman$elm_css$Css$flexShrink(
										$rtfeldman$elm_css$Css$num(0)),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(60)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
									])),
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MarketPage$ToMainPage)
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$img,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$src('images/arrow-back.webp'),
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(24))
											]))
									]),
								_List_Nil),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$marginLeft(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(20)),
												$rtfeldman$elm_css$Css$lineHeight(
												$rtfeldman$elm_css$Css$num(1)),
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff'))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('돌아가기')
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$px(60)),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(60)),
										$rtfeldman$elm_css$Css$active(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												A3($rtfeldman$elm_css$Css$rgb, 77, 165, 239))
											]))
									])),
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MarketPage$ActivationTap)
							]),
						_List_Nil)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#000')),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(2))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#ffffff33')),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(40))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(0)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(22)),
												$rtfeldman$elm_css$Css$fontStyle($rtfeldman$elm_css$Css$italic)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('월 4,600원으로 광고 없이 몰입해서 학습하세요!')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(0)),
												$rtfeldman$elm_css$Css$paddingTop(
												$rtfeldman$elm_css$Css$px(5)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('여러분의 정기 구독은 어플을 유지 보수하고 다양한 학습 콘텐츠를 추가하는 크나큰 원동력이 됩니다.🙇😉')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(0)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('- 구독 기간이 끝나기 24시간 전에 구독을 취소하지 않으면, 구독이 자동으로 갱신됩니다.')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(0)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('- 만약 정기 결제를 취소하고 싶다면 \'구독 정보 확인\'을 눌려서 구글 플레이 앱의 \"정기 결제 페이지\"에서 구독 취소를 진행해 주세요.')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('- 환불이나 결제 관련 문의는 rnnwkals1@gmail.com (개발자 이메일)을 통해서 하실 수 있습니다.')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(15)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(18)),
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(5)),
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#42B8F5')),
												model.isSubUser ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												A4(
												$rtfeldman$elm_css$Css$boxShadow4,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(10),
												$rtfeldman$elm_css$Css$hex('#00000010')),
												$rtfeldman$elm_css$Css$active(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(0.8))
													]))
											])),
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MarketPage$SubBtnClick)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('광고 제거 구독 (월 4,600원)')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(15)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(18)),
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(5)),
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#42B8F5')),
												model.isSubUser ? $rtfeldman$elm_css$Css$displayFlex : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none),
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												A4(
												$rtfeldman$elm_css$Css$boxShadow4,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(10),
												$rtfeldman$elm_css$Css$hex('#00000010')),
												$rtfeldman$elm_css$Css$active(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(0.8))
													]))
											])),
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MarketPage$AlreadySubBtnClick)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('현재 구독 중입니다')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(15)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(18)),
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(5)),
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#7042f5')),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$marginTop(
												$rtfeldman$elm_css$Css$px(10)),
												A4(
												$rtfeldman$elm_css$Css$boxShadow4,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(10),
												$rtfeldman$elm_css$Css$hex('#00000010')),
												$rtfeldman$elm_css$Css$active(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(0.8))
													]))
											])),
										$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$MarketPage$SubCheckBtnClick)
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('구독 정보 확인')
									]))
							]))
					]))
			]));
};
var $author$project$PrintPage$PlayVideo = {$: 'PlayVideo'};
var $author$project$PrintPage$completeAlert = function (isOpen) {
	var translateXVal = isOpen ? 0 : 100;
	var opacityVal = isOpen ? 1 : 0;
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#3fa2f1')),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(61)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$left(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$bottom(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$color(
						$rtfeldman$elm_css$Css$hex('#fff')),
						$rtfeldman$elm_css$Css$fontSize(
						$rtfeldman$elm_css$Css$px(20)),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none),
						$rtfeldman$elm_css$Css$transforms(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$translateX(
								$rtfeldman$elm_css$Css$pct(translateXVal))
							])),
						$rtfeldman$elm_css$Css$opacity(
						$rtfeldman$elm_css$Css$num(opacityVal)),
						$rtfeldman$elm_css$Css$Transitions$transition(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Transitions$transform(700),
								$rtfeldman$elm_css$Css$Transitions$opacity(700)
							])),
						$rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(999))
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text('들어보기를 완료했습니다!')
			]));
};
var $author$project$PrintPage$GoLeft = {$: 'GoLeft'};
var $author$project$PrintPage$GoRight = {$: 'GoRight'};
var $author$project$PrintPage$TapContent = {$: 'TapContent'};
var $author$project$PrintPage$WordBtnClick = F3(
	function (a, b, c) {
		return {$: 'WordBtnClick', a: a, b: b, c: c};
	});
var $author$project$PrintPage$classHangulPron = $author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Html$Styled$Attributes$class('hangul-pron') : $rtfeldman$elm_css$Html$Styled$Attributes$class('');
var $author$project$PrintPage$innerHtml = function (raw) {
	var str = $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function (ch) {
				switch (ch) {
					case '<':
						return '<ruby>';
					case '>':
						return '</ruby>';
					case '{':
						return '<rt>';
					case '}':
						return '</rt>';
					default:
						return ch;
				}
			},
			A2(
				$elm$core$List$map,
				$elm$core$String$fromChar,
				$elm$core$String$toList(raw))));
	var _v0 = $hecrj$html_parser$Html$Parser$run(str);
	if (_v0.$ === 'Ok') {
		var nodes = _v0.a;
		return A2(
			$elm$core$List$map,
			$rtfeldman$elm_css$Html$Styled$fromUnstyled,
			$hecrj$html_parser$Html$Parser$Util$toVirtualDom(nodes));
	} else {
		return _List_Nil;
	}
};
var $author$project$PrintPage$isProhibited = function (model) {
	return $author$project$Utility$isApple && (!model.data.isPV);
};
var $author$project$PrintPage$rubyView = function (vocaRuby) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$flexEnd),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$marginRight(
						$rtfeldman$elm_css$Css$px(0)),
						$rtfeldman$elm_css$Css$marginLeft(
						$rtfeldman$elm_css$Css$px(0))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$lineHeight(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(16)),
								$rtfeldman$elm_css$Css$minHeight(
								$rtfeldman$elm_css$Css$px(16))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(vocaRuby.r)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(23)),
								$rtfeldman$elm_css$Css$lineHeight(
								$rtfeldman$elm_css$Css$num(1.2))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(vocaRuby.w)
					]))
			]));
};
var $author$project$PrintPage$cardView = F2(
	function (model, card) {
		var subIdx = model.subIdx;
		var pronMode = model.pronMode;
		var wordInfoDivBlog = function (strList) {
			var wordBoxStyle = $rtfeldman$elm_css$Css$batch(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$fontSize(
						$rtfeldman$elm_css$Css$px(18)),
						$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$pre),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#fff')),
						$rtfeldman$elm_css$Css$color(
						A3($rtfeldman$elm_css$Css$rgb, 0, 0, 0)),
						$rtfeldman$elm_css$Css$padding(
						$rtfeldman$elm_css$Css$px(10)),
						A4(
						$rtfeldman$elm_css$Css$boxShadow4,
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(5),
						$rtfeldman$elm_css$Css$hex('#00000022')),
						$rtfeldman$elm_css$Css$borderRadius(
						$rtfeldman$elm_css$Css$px(10)),
						$rtfeldman$elm_css$Css$margin(
						$rtfeldman$elm_css$Css$px(5))
					]));
			var thirdLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(
					A2($elm$core$List$drop, 2, strList)));
			var strKey = $elm$core$String$concat(
				A2($elm$core$List$take, 2, strList));
			var secondLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(
					A2($elm$core$List$drop, 1, strList)));
			var numKey = $elm$core$String$fromInt(model.subIdx);
			var key = _Utils_ap(numKey, strKey);
			var isSelected = A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					function (_v2) {
						var x = _v2.a;
						var b = _v2.b;
						return b;
					},
					$elm$core$List$head(
						A2(
							$elm$core$List$filter,
							function (_v1) {
								var x = _v1.a;
								var b = _v1.b;
								return _Utils_eq(x, key);
							},
							model.keyList))));
			var fourthLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(
					A2($elm$core$List$drop, 3, strList)));
			var found = A2(
				$elm$core$List$map,
				$author$project$PrintPage$rubyView,
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$head(
						A2(
							$elm$core$List$map,
							function ($) {
								return $.rubyList;
							},
							A2(
								$elm$core$List$filter,
								function (c) {
									return _Utils_eq(c.word, secondLine);
								},
								A2($author$project$DataManage$getVocaData, model.data.videoId, model.appData).cardList)))));
			var firstLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(strList));
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
						'click',
						$elm$json$Json$Decode$succeed(
							_Utils_Tuple2($author$project$PrintPage$NoOp, true))),
						$author$project$HtmlElement$onPointerDown(
						A3($author$project$PrintPage$WordBtnClick, firstLine, secondLine, key)),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineFlex),
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$verticalAlign($rtfeldman$elm_css$Css$top)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										wordBoxStyle,
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
										$rtfeldman$elm_css$Css$active(
										_List_fromArray(
											[
												A4(
												$rtfeldman$elm_css$Css$boxShadow4,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$hex('#00000011'))
											])),
										$rtfeldman$elm_css$Css$Transitions$transition(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$Transitions$boxShadow(100)
											]))
									]))
							]),
						$elm$core$List$concat(
							_List_fromArray(
								[
									_List_fromArray(
									[
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														isSelected ? ($author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(0)) : $rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(1))) : $rtfeldman$elm_css$Css$opacity(
														$rtfeldman$elm_css$Css$num(0)),
														$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
														$rtfeldman$elm_css$Css$left(
														$rtfeldman$elm_css$Css$px(0)),
														$rtfeldman$elm_css$Css$top(
														$rtfeldman$elm_css$Css$px(0)),
														$rtfeldman$elm_css$Css$width(
														$rtfeldman$elm_css$Css$pct(100)),
														$rtfeldman$elm_css$Css$height(
														$rtfeldman$elm_css$Css$px(8)),
														A4(
														$rtfeldman$elm_css$Css$borderRadius4,
														$rtfeldman$elm_css$Css$px(10),
														$rtfeldman$elm_css$Css$px(10),
														$rtfeldman$elm_css$Css$px(0),
														$rtfeldman$elm_css$Css$px(0)),
														$rtfeldman$elm_css$Css$backgroundColor(
														$rtfeldman$elm_css$Css$hex('#42a5f5'))
													]))
											]),
										_List_Nil)
									]),
									$elm$core$List$concat(
									_List_fromArray(
										[
											_Utils_eq(pronMode, $author$project$PrintPage$HanMode) ? _List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(14)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.1)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(1))
															])),
														$author$project$PrintPage$classHangulPron
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(firstLine)
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(23)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.2))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(secondLine)
													]))
											]) : ($elm$core$List$isEmpty(found) ? _List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(23)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.2)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(1))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(secondLine)
													]))
											]) : _List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$displayFlex,
																$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(1))
															]))
													]),
												found)
											])),
											_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(14)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.1))
															])),
														$author$project$PrintPage$classHangulPron
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(thirdLine)
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(14)),
																$rtfeldman$elm_css$Css$lineHeight(
																$rtfeldman$elm_css$Css$num(1.1)),
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(4)),
																$rtfeldman$elm_css$Css$color(
																$rtfeldman$elm_css$Css$hex('#000'))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text(fourthLine)
													]))
											])
										]))
								])))
					]));
		};
		var isTimeBetween = F2(
			function (_v0, time) {
				var startTime = _v0.startTime;
				var endTime = _v0.endTime;
				return (_Utils_cmp(startTime, time) < 1) && (_Utils_cmp(time, endTime) < 0);
			});
		var currentTime = model.currentTime;
		var subColor = A2(
			isTimeBetween,
			card,
			$elm$core$Basics$round(currentTime)) ? $rtfeldman$elm_css$Css$color(
			A3($rtfeldman$elm_css$Css$rgb, 0, 0, 0)) : $rtfeldman$elm_css$Css$color(
			A3($rtfeldman$elm_css$Css$rgb, 100, 100, 100));
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$paddingBottom(
							$rtfeldman$elm_css$Css$px(20)),
							$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineFlex),
							$rtfeldman$elm_css$Css$width(
							$rtfeldman$elm_css$Css$pct(100)),
							$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									subColor,
									$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									($author$project$PrintPage$isProhibited(model) && ((!subIdx) && (_Utils_cmp(
									$elm$core$Basics$round(currentTime),
									card.startTime) < 0))) ? A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(13))
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text('App Store 정책을 준수하기 위해 가사를 제공하지 않습니다.')
										])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$author$project$PrintPage$isProhibited(model) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block),
											$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$color(
											$rtfeldman$elm_css$Css$hex('#000')) : A2($rtfeldman$elm_css$Css$property, '', '')
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(17))
												])),
											$author$project$PrintPage$classHangulPron
										]),
									_List_fromArray(
										[
											_Utils_eq(pronMode, $author$project$PrintPage$HanMode) ? $rtfeldman$elm_css$Html$Styled$text(card.pron) : $rtfeldman$elm_css$Html$Styled$text('')
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$marginTop(
													$rtfeldman$elm_css$Css$px(1)),
													$rtfeldman$elm_css$Css$marginBottom(
													$rtfeldman$elm_css$Css$px(1)),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(21)),
													A2($rtfeldman$elm_css$Css$property, 'word-break', 'keep-all'),
													$rtfeldman$elm_css$Css$overflowWrap($rtfeldman$elm_css$Css$breakWord),
													$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(21)) : $rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(19))
												]))
										]),
									($elm$core$String$isEmpty(card.rubiedText) || _Utils_eq(pronMode, $author$project$PrintPage$HanMode)) ? _List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(card.text)
										]) : $author$project$PrintPage$innerHtml(card.rubiedText)),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(17))
												])),
											$author$project$PrintPage$classHangulPron
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(card.kor)
										])),
									$elm$core$String$isEmpty(card.comment) ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$px(14)),
													$rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(8)),
													$rtfeldman$elm_css$Css$paddingBottom(
													$rtfeldman$elm_css$Css$px(8)),
													$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$preLine)
												]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(card.comment)
										]))
								])),
							($author$project$PrintPage$isProhibited(model) && $elm$core$String$isEmpty(
							$elm$core$String$trim(card.words))) ? A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text('단어가 없습니다.')
								])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil),
							$elm$core$String$isEmpty(
							$elm$core$String$trim(card.words)) ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											($author$project$PrintPage$isVideoMode && (!$elm$core$String$isEmpty(
											$elm$core$String$trim(card.comment)))) ? $rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(0)) : $rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(10))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil) : $rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(5)),
													$rtfeldman$elm_css$Css$paddingBottom(
													$rtfeldman$elm_css$Css$px(15)),
													$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(0)) : $rtfeldman$elm_css$Css$paddingTop(
													$rtfeldman$elm_css$Css$px(0))
												]))
										]),
									A2(
										$elm$core$List$map,
										wordInfoDivBlog,
										$author$project$PrintPage$words2list(card.words)))
								]))
						]))
				]));
	});
var $author$project$PrintPage$gestureDiv = $rtfeldman$elm_css$Html$Styled$node('gesture-div');
var $author$project$PrintPage$contentDiv = function (model) {
	return A2(
		$author$project$PrintPage$gestureDiv,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PrintPage$TapContent),
				A2(
				$rtfeldman$elm_css$Html$Styled$Events$on,
				'leftScroll',
				$elm$json$Json$Decode$succeed($author$project$PrintPage$GoRight)),
				A2(
				$rtfeldman$elm_css$Html$Styled$Events$on,
				'rightScroll',
				$elm$json$Json$Decode$succeed($author$project$PrintPage$GoLeft)),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$padding(
						$rtfeldman$elm_css$Css$px(10)),
						$rtfeldman$elm_css$Css$paddingTop(
						$rtfeldman$elm_css$Css$px(18)),
						$rtfeldman$elm_css$Css$backgroundColor(
						A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
						$rtfeldman$elm_css$Css$flexGrow(
						$rtfeldman$elm_css$Css$int(1)),
						$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(1)) : A2($rtfeldman$elm_css$Css$property, '', ''),
						$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#ffffff')) : $rtfeldman$elm_css$Css$backgroundColor(
						A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
						$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$paddingTop(
						$rtfeldman$elm_css$Css$px(14)) : $rtfeldman$elm_css$Css$paddingTop(
						$rtfeldman$elm_css$Css$px(18))
					]))
			]),
		_List_fromArray(
			[
				function () {
				var _v0 = $author$project$PrintPage$currentSub(model);
				if (_v0.$ === 'Just') {
					var card = _v0.a;
					return A2($author$project$PrintPage$cardView, model, card);
				} else {
					return A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil);
				}
			}()
			]));
};
var $author$project$PrintPage$isShortForm = false;
var $author$project$PrintPage$moveBtnStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$paddingTop(
			$rtfeldman$elm_css$Css$px(12)),
			$rtfeldman$elm_css$Css$paddingBottom(
			$rtfeldman$elm_css$Css$px(15)),
			$rtfeldman$elm_css$Css$flexGrow(
			$rtfeldman$elm_css$Css$int(1)),
			$rtfeldman$elm_css$Css$displayFlex,
			$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
			$rtfeldman$elm_css$Css$active(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$opacity(
					$rtfeldman$elm_css$Css$num(0.85))
				]))
		]));
var $author$project$PrintPage$moveBtnGroup = A2(
	$rtfeldman$elm_css$Html$Styled$div,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$displayFlex,
					A2($rtfeldman$elm_css$Css$property, 'user-select', 'none'),
					$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
					$rtfeldman$elm_css$Css$backgroundColor(
					$rtfeldman$elm_css$Css$hex('#eee')),
					A4(
					$rtfeldman$elm_css$Css$boxShadow4,
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(1),
					$rtfeldman$elm_css$Css$px(10),
					$rtfeldman$elm_css$Css$hex('#00000020')),
					$rtfeldman$elm_css$Css$zIndex(
					$rtfeldman$elm_css$Css$int(1)),
					$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$displayFlex
				]))
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PrintPage$GoLeft),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[$author$project$PrintPage$moveBtnStyle]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('images/leftBtn.webp'),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(34))
								]))
						]),
					_List_Nil)
				])),
			A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PrintPage$GoRight),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[$author$project$PrintPage$moveBtnStyle]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('images/rightBtn.webp'),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(34))
								]))
						]),
					_List_Nil)
				]))
		]));
var $author$project$PrintPage$LoopChangeBtnClicked = {$: 'LoopChangeBtnClicked'};
var $author$project$PrintPage$ModeChangeBtnClicked = {$: 'ModeChangeBtnClicked'};
var $author$project$PrintPage$preBoxDiv = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
						$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
						$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#42A5F5')),
						A4(
						$rtfeldman$elm_css$Css$boxShadow4,
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(10),
						$rtfeldman$elm_css$Css$hex('#00000020')),
						$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$displayFlex
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(65)),
								$rtfeldman$elm_css$Css$paddingLeft(
								$rtfeldman$elm_css$Css$px(17)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$color(
										A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('진도')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text(
										$elm$core$String$fromInt(model.subIdx + 1) + (' / ' + $elm$core$String$fromInt(
											$elm$core$Array$length(model.subArray))))
									]))
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PrintPage$LoopChangeBtnClicked),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(62)),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$px(72)),
										$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineFlex),
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
										A4(
										$rtfeldman$elm_css$Css$textShadow4,
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(4),
										$rtfeldman$elm_css$Css$hex('#00000033'))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(16)),
												A3(
												$rtfeldman$elm_css$Css$borderBottom3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff')),
												model.isLoopMode ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('구간 반복')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(16)),
												A3(
												$rtfeldman$elm_css$Css$borderBottom3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff')),
												(!model.isLoopMode) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('반복 꺼짐')
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$PrintPage$ModeChangeBtnClicked),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(62)),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$px(72)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$px(7)),
										$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineFlex),
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
										A4(
										$rtfeldman$elm_css$Css$textShadow4,
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(2),
										$rtfeldman$elm_css$Css$px(4),
										$rtfeldman$elm_css$Css$hex('#00000033'))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(16)),
												A3(
												$rtfeldman$elm_css$Css$borderBottom3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff')),
												_Utils_eq(model.pronMode, $author$project$PrintPage$HiraMode) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('히라가나')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(16)),
												A3(
												$rtfeldman$elm_css$Css$borderBottom3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff')),
												_Utils_eq(model.pronMode, $author$project$PrintPage$HanMode) ? $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$block) : $rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$none)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('한글 발음')
									]))
							]))
					]))
			]));
};
var $author$project$PrintPage$replaceVideoId = '';
var $author$project$PrintPage$appView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
										$rtfeldman$elm_css$Css$backgroundImage(
										$rtfeldman$elm_css$Css$url(
											'videoImages/' + (A2($author$project$DataManage$getVideoData, model.data.videoId, model.appData).imageSrc + '.webp'))),
										$rtfeldman$elm_css$Css$backgroundSize($rtfeldman$elm_css$Css$cover),
										$rtfeldman$elm_css$Css$backgroundPosition($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$px(160)),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(160)),
										$rtfeldman$elm_css$Css$borderRadius(
										$rtfeldman$elm_css$Css$px(10)),
										A4(
										$rtfeldman$elm_css$Css$boxShadow4,
										$rtfeldman$elm_css$Css$px(1),
										$rtfeldman$elm_css$Css$px(1),
										$rtfeldman$elm_css$Css$px(10),
										$rtfeldman$elm_css$Css$hex('#00000030'))
									]))
							]),
						_List_Nil)
					])),
				$author$project$PrintPage$isVideoMode ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : A3(
				$author$project$HtmlElement$headerView,
				'들어보기',
				$author$project$PrintPage$ToRoadMapPage,
				A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil)),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(230)),
										$rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(230)),
										$author$project$HtmlElement$smallMedia(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(210)),
												$rtfeldman$elm_css$Css$minHeight(
												$rtfeldman$elm_css$Css$px(210))
											])),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$pct(100)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#000')),
										$author$project$PrintPage$isShortForm ? $rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(270)) : ($author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(200)) : $rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(230))),
										$author$project$PrintPage$isShortForm ? $rtfeldman$elm_css$Css$minHeight(
										$rtfeldman$elm_css$Css$px(270)) : ($author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(200)) : $rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(230)))
									]))
							]),
						_List_fromArray(
							[
								$author$project$PrintPage$isVideoMode ? ($author$project$PrintPage$isShortForm ? $author$project$HtmlElement$yotubeLoopWrapperRecordShort(
								($elm$core$String$length($author$project$PrintPage$replaceVideoId) === 11) ? $author$project$PrintPage$replaceVideoId : model.data.videoId) : $author$project$HtmlElement$yotubeLoopWrapperRecord(
								($elm$core$String$length($author$project$PrintPage$replaceVideoId) === 11) ? $author$project$PrintPage$replaceVideoId : model.data.videoId)) : $author$project$HtmlElement$yotubeLoopWrapper(model.data.videoId),
								$author$project$HtmlElement$youtubeLoading(model.isLoadSuccess),
								$author$project$PrintPage$isVideoMode ? A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil) : A3($author$project$HtmlElement$youtubePauseView, model.playerState, $author$project$PrintPage$PlayVideo, $author$project$PrintPage$NoOp)
							])),
						$author$project$PrintPage$preBoxDiv(model),
						$author$project$PrintPage$contentDiv(model)
					])),
				$author$project$PrintPage$moveBtnGroup,
				A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$PrintPage$completeAlert, model.isCompleteAlertOpen)
			]));
};
var $rtfeldman$elm_css$Html$Styled$a = $rtfeldman$elm_css$Html$Styled$node('a');
var $author$project$PrintPage$bigVideoInfoInner = function (data) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url('videoImages/' + (data.imageSrc + '.webp'))),
								$rtfeldman$elm_css$Css$backgroundSize($rtfeldman$elm_css$Css$cover),
								$rtfeldman$elm_css$Css$backgroundPosition($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$px(180)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(180)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$px(10))
							]))
					]),
				_List_Nil)
			]));
};
var $rtfeldman$elm_css$Html$Styled$Attributes$href = function (url) {
	return A2($rtfeldman$elm_css$Html$Styled$Attributes$stringProperty, 'href', url);
};
var $author$project$PrintPage$bigVideoThumbnail = function (data) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$a,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$href('https://www.youtube.com/watch?v=' + data.videoId),
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$active(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$opacity(
								$rtfeldman$elm_css$Css$num(0.7))
							])),
						$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$px(180)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$px(180)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative),
						$rtfeldman$elm_css$Css$margin(
						$rtfeldman$elm_css$Css$px(10)),
						$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
					]))
			]),
		_List_fromArray(
			[
				$author$project$PrintPage$bigVideoInfoInner(data)
			]));
};
var $author$project$PrintPage$blogContentDiv = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$padding(
						$rtfeldman$elm_css$Css$px(10)),
						$rtfeldman$elm_css$Css$paddingTop(
						$rtfeldman$elm_css$Css$px(18)),
						$rtfeldman$elm_css$Css$backgroundColor(
						A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
						$rtfeldman$elm_css$Css$flexGrow(
						$rtfeldman$elm_css$Css$int(1)),
						$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$zIndex(
						$rtfeldman$elm_css$Css$int(1)) : A2($rtfeldman$elm_css$Css$property, '', ''),
						$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$backgroundColor(
						$rtfeldman$elm_css$Css$hex('#ffffff')) : $rtfeldman$elm_css$Css$backgroundColor(
						A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
						$author$project$PrintPage$isVideoMode ? $rtfeldman$elm_css$Css$paddingTop(
						$rtfeldman$elm_css$Css$px(14)) : $rtfeldman$elm_css$Css$paddingTop(
						$rtfeldman$elm_css$Css$px(18))
					]))
			]),
		$elm$core$Array$toList(
			A2(
				$elm$core$Array$map,
				function (x) {
					return A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
							]),
						_List_fromArray(
							[
								A2($author$project$PrintPage$cardView, model, x)
							]));
				},
				model.subArray)));
};
var $author$project$PrintPage$getTitleBack = function (model) {
	var _v0 = model.pronMode;
	if (_v0.$ === 'HiraMode') {
		return '가사 & 단어 정리(후리가나)';
	} else {
		return '가사 & 단어 정리(한글 발음)';
	}
};
var $author$project$PrintPage$blogView = function (model) {
	var infoData = A2($author$project$DataManage$getInfoData, model.data.videoId, model.appData);
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$marginTop(
								$rtfeldman$elm_css$Css$px(50)),
								$rtfeldman$elm_css$Css$marginLeft(
								$rtfeldman$elm_css$Css$px(50)),
								$rtfeldman$elm_css$Css$fontSize(
								$rtfeldman$elm_css$Css$px(30)),
								$rtfeldman$elm_css$Css$marginBottom(
								$rtfeldman$elm_css$Css$px(40))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontFamilies(
										_List_fromArray(
											['Nanum Gothic']))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(model.data.name + (' - ' + infoData.artistKor))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontFamilies(
										_List_fromArray(
											['Nanum Gothic'])),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(28))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(
								$author$project$PrintPage$getTitleBack(model))
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$px(500)),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(4)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#42A5F5')),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$marginBottom(
										$rtfeldman$elm_css$Css$px(20))
									]))
							]),
						_List_Nil)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(290)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$flexStart),
												$rtfeldman$elm_css$Css$paddingTop(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$paddingLeft(
												$rtfeldman$elm_css$Css$px(10))
											]))
									]),
								_List_fromArray(
									[
										_Utils_eq(
										$elm$core$String$trim(infoData.songNameKor),
										$elm$core$String$trim(infoData.songNameJp)) ? A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(7)),
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(18))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('곡명 : ' + infoData.songNameKor)
													]))
											])) : A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(7)),
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(18))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('곡명(한국어) : '),
														A2(
														$rtfeldman$elm_css$Html$Styled$div,
														_List_fromArray(
															[
																$rtfeldman$elm_css$Html$Styled$Attributes$css(
																_List_fromArray(
																	[
																		$rtfeldman$elm_css$Css$fontFamilies(
																		_List_fromArray(
																			['Nanum Gothic'])),
																		$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
																	]))
															]),
														_List_fromArray(
															[
																$rtfeldman$elm_css$Html$Styled$text(infoData.songNameKor)
															]))
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(2)),
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(18))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('곡명(일본어) : ' + infoData.songNameJp)
													]))
											])),
										_Utils_eq(
										$elm$core$String$trim(infoData.artistKor),
										$elm$core$String$trim(infoData.artistJp)) ? A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(7)),
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(18))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('아티스트 : ' + infoData.artistJp)
													]))
											])) : A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(7)),
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(18))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('아티스트(한국어) : '),
														A2(
														$rtfeldman$elm_css$Html$Styled$div,
														_List_fromArray(
															[
																$rtfeldman$elm_css$Html$Styled$Attributes$css(
																_List_fromArray(
																	[
																		$rtfeldman$elm_css$Css$fontFamilies(
																		_List_fromArray(
																			['Nanum Gothic'])),
																		$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
																	]))
															]),
														_List_fromArray(
															[
																$rtfeldman$elm_css$Html$Styled$text(infoData.artistKor)
															]))
													])),
												A2(
												$rtfeldman$elm_css$Html$Styled$div,
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$Attributes$css(
														_List_fromArray(
															[
																$rtfeldman$elm_css$Css$marginTop(
																$rtfeldman$elm_css$Css$px(2)),
																$rtfeldman$elm_css$Css$fontSize(
																$rtfeldman$elm_css$Css$px(18))
															]))
													]),
												_List_fromArray(
													[
														$rtfeldman$elm_css$Html$Styled$text('아티스트(일본어) : ' + infoData.artistJp)
													]))
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$marginTop(
														$rtfeldman$elm_css$Css$px(15)),
														$rtfeldman$elm_css$Css$fontSize(
														$rtfeldman$elm_css$Css$px(18))
													]))
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('유튜브 링크')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$a,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$href('https://www.youtube.com/watch?v=' + model.data.videoId),
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[
														$rtfeldman$elm_css$Css$color(
														$rtfeldman$elm_css$Css$hex('#42A5F5')),
														$rtfeldman$elm_css$Css$marginTop(
														$rtfeldman$elm_css$Css$px(1)),
														$rtfeldman$elm_css$Css$fontSize(
														$rtfeldman$elm_css$Css$px(18))
													]))
											]),
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text('youtu.be/' + model.data.videoId)
											]))
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(0))
											]))
									]),
								_List_fromArray(
									[
										$author$project$PrintPage$bigVideoThumbnail(
										A2($author$project$DataManage$getVideoData, model.data.videoId, model.appData))
									]))
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$px(500)),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(4)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#42A5F5')),
										$rtfeldman$elm_css$Css$marginTop(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$marginBottom(
										$rtfeldman$elm_css$Css$px(20))
									]))
							]),
						_List_Nil)
					])),
				$author$project$PrintPage$blogContentDiv(model),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$pct(100))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(500)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(4)),
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#42A5F5')),
												$rtfeldman$elm_css$Css$marginTop(
												$rtfeldman$elm_css$Css$px(20)),
												$rtfeldman$elm_css$Css$marginBottom(
												$rtfeldman$elm_css$Css$px(20))
											]))
									]),
								_List_Nil)
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$a,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$href('https://haneumjp.tistory.com/'),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(50)),
										$rtfeldman$elm_css$Css$paddingTop(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(18)),
										$rtfeldman$elm_css$Css$color(
										$rtfeldman$elm_css$Css$hex('#42A5F5'))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('한음 일본어 - 노래로 배우는 일본어 블로그')
							]))
					]))
			]));
};
var $author$project$PrintPage$isBlog = true;
var $author$project$PrintPage$view = function (model) {
	return $author$project$PrintPage$isBlog ? $author$project$PrintPage$blogView(model) : $author$project$PrintPage$appView(model);
};
var $rtfeldman$elm_css$Html$Styled$iframe = $rtfeldman$elm_css$Html$Styled$node('iframe');
var $author$project$QuestionPage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$fixed),
						$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$color(
								A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(100))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(60)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$backgroundColor(
										A3($rtfeldman$elm_css$Css$rgb, 66, 163, 245))
									])),
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$QuestionPage$ToMainPage)
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$img,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$src('images/arrow-back.webp'),
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(24))
											]))
									]),
								_List_Nil),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$marginLeft(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(20)),
												$rtfeldman$elm_css$Css$lineHeight(
												$rtfeldman$elm_css$Css$num(1))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('돌아가기')
									]))
							])),
						A2(
						$rtfeldman$elm_css$Html$Styled$iframe,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$flexGrow(
										$rtfeldman$elm_css$Css$num(1)),
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#fff'))
									])),
								$rtfeldman$elm_css$Html$Styled$Attributes$src('https://haneumjp.tistory.com/22')
							]),
						_List_Nil)
					]))
			]));
};
var $author$project$RankingPage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundImage(
						$rtfeldman$elm_css$Css$url('images/bg.webp')),
						A2(
						$rtfeldman$elm_css$Css$backgroundSize2,
						$rtfeldman$elm_css$Css$pct(100),
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url('images/wave.webp')),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(60)),
								A2(
								$rtfeldman$elm_css$Css$backgroundSize2,
								$rtfeldman$elm_css$Css$pct(100),
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
							]))
					]),
				_List_Nil),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
								$rtfeldman$elm_css$Css$backgroundColor(
								A3($rtfeldman$elm_css$Css$rgb, 66, 163, 245))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$active(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0.7))
											])),
										$rtfeldman$elm_css$Css$flexShrink(
										$rtfeldman$elm_css$Css$num(0)),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(60)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center)
									])),
								$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$RankingPage$ToAwardPage)
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$img,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$src('images/arrow-back.webp'),
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(24))
											]))
									]),
								_List_Nil),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$marginLeft(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(20)),
												$rtfeldman$elm_css$Css$lineHeight(
												$rtfeldman$elm_css$Css$num(1)),
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff'))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('돌아가기')
									]))
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#000')),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(2))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#ffffff33')),
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(40))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(0)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(22)),
												$rtfeldman$elm_css$Css$fontStyle($rtfeldman$elm_css$Css$italic)
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('월 4,600원으로 광고 없이 몰입해서 학습하세요!')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(0)),
												$rtfeldman$elm_css$Css$paddingTop(
												$rtfeldman$elm_css$Css$px(5)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('여러분의 정기 구독은 어플을 유지 보수하고 다양한 학습 콘텐츠를 추가하는 크나큰 원동력이 됩니다.🙇😉')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(0)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('- 구독 기간이 끝나기 24시간 전에 구독을 취소하지 않으면, 구독이 자동으로 갱신됩니다.')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(0)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('- 만약 정기 결제를 취소하고 싶다면 \'구독 정보 확인\'을 눌려서 구글 플레이 앱의 \"정기 결제 페이지\"에서 구독 취소를 진행해 주세요.')
									])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$color(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$padding(
												$rtfeldman$elm_css$Css$px(10)),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(17))
											]))
									]),
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('- 환불이나 결제 관련 문의는 rnnwkals1@gmail.com (개발자 이메일)을 통해서 하실 수 있습니다.')
									]))
							]))
					]))
			]));
};
var $author$project$RoadMapPage$posList = function () {
	var rightList = A2(
		$elm$core$List$map,
		function (i) {
			return ((((i / 2) | 0) % 2) === 1) ? 30 : 75;
		},
		A2($elm$core$List$range, 1, 100));
	var leftList = A2(
		$elm$core$List$map,
		function (i) {
			return 16.3 + ((((i + 1) / 2) | 0) * 107);
		},
		A2($elm$core$List$range, 1, 100));
	return _Utils_ap(
		_List_fromArray(
			[
				_Utils_Tuple2(15, 45)
			]),
		A3($elm$core$List$map2, $elm$core$Tuple$pair, leftList, rightList));
}();
var $author$project$RoadMapPage$ToKanjiPage = F2(
	function (a, b) {
		return {$: 'ToKanjiPage', a: a, b: b};
	});
var $author$project$RoadMapPage$ToListenPage = function (a) {
	return {$: 'ToListenPage', a: a};
};
var $author$project$RoadMapPage$ToPronPage = F2(
	function (a, b) {
		return {$: 'ToPronPage', a: a, b: b};
	});
var $author$project$RoadMapPage$ToSentencePage = function (a) {
	return {$: 'ToSentencePage', a: a};
};
var $author$project$RoadMapPage$ToTapGamePage = F2(
	function (a, b) {
		return {$: 'ToTapGamePage', a: a, b: b};
	});
var $author$project$RoadMapPage$ToVocaPage = function (a) {
	return {$: 'ToVocaPage', a: a};
};
var $rtfeldman$elm_css$Css$calcExpressionToString = function (expression) {
	if (expression.$ === 'Addition') {
		return '+';
	} else {
		return '-';
	}
};
var $rtfeldman$elm_css$Css$calc = F3(
	function (firstExpr, expression, secondExpr) {
		var withoutCalcStr = function (l) {
			return A2($elm$core$String$startsWith, 'calc(', l.value) ? A2($elm$core$String$dropLeft, 4, l.value) : l.value;
		};
		var calcs = A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					withoutCalcStr(firstExpr),
					$rtfeldman$elm_css$Css$calcExpressionToString(expression),
					withoutCalcStr(secondExpr)
				]));
		var value = A2(
			$rtfeldman$elm_css$Css$cssFunction,
			'calc',
			_List_fromArray(
				[calcs]));
		return {calc: $rtfeldman$elm_css$Css$Structure$Compatible, flexBasis: $rtfeldman$elm_css$Css$Structure$Compatible, fontSize: $rtfeldman$elm_css$Css$Structure$Compatible, length: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAutoOrCoverOrContain: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNone: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNoneOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNumber: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible, textIndent: $rtfeldman$elm_css$Css$Structure$Compatible, value: value};
	});
var $rtfeldman$elm_css$Css$Addition = {$: 'Addition'};
var $rtfeldman$elm_css$Css$plus = $rtfeldman$elm_css$Css$Addition;
var $rtfeldman$elm_css$Css$visibility = $rtfeldman$elm_css$Css$prop1('visibility');
var $rtfeldman$elm_css$Css$visible = {overflow: $rtfeldman$elm_css$Css$Structure$Compatible, pointerEvents: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'visible', visibility: $rtfeldman$elm_css$Css$Structure$Compatible};
var $author$project$RoadMapPage$stageBtn = F7(
	function (model, msg, fileName, bottomVal, leftVal, textVal, isActive) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick(msg)
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('images/' + fileName),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(bottomVal + 5)),
									$rtfeldman$elm_css$Css$left(
									$rtfeldman$elm_css$Css$pct(leftVal)),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$translate2,
											$rtfeldman$elm_css$Css$pct(-50),
											$rtfeldman$elm_css$Css$pct(50)),
											$rtfeldman$elm_css$Css$scale(0.35)
										])),
									$rtfeldman$elm_css$Css$zIndex(
									$rtfeldman$elm_css$Css$int(1)),
									$rtfeldman$elm_css$Css$active(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$opacity(
											$rtfeldman$elm_css$Css$num(0.7))
										]))
								]))
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(bottomVal + 5)),
									$rtfeldman$elm_css$Css$left(
									$rtfeldman$elm_css$Css$pct(leftVal)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(45)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(45)),
									$rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#fff')),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$translate2,
											$rtfeldman$elm_css$Css$pct(-50),
											$rtfeldman$elm_css$Css$pct(50))
										])),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(200))
								]))
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(bottomVal - 31)),
									$rtfeldman$elm_css$Css$left(
									$rtfeldman$elm_css$Css$pct(leftVal)),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$translate2,
											$rtfeldman$elm_css$Css$pct(-50),
											$rtfeldman$elm_css$Css$pct(50))
										])),
									$rtfeldman$elm_css$Css$color(
									A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(14)),
									$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap)
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(
							A3(
								$elm$core$String$replace,
								'문장 조합하기',
								'문장 만들기',
								A3($elm$core$String$replace, '제때 누르기', '듣고 누르기', textVal)))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('images/' + 'should_complete.webp'),
							$rtfeldman$elm_css$Html$Styled$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'up-down-anim-node',
									_Utils_eq(model.shouldCompleteFirst, textVal))
								])),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(bottomVal - 2)),
									$rtfeldman$elm_css$Css$left(
									A3(
										$rtfeldman$elm_css$Css$calc,
										$rtfeldman$elm_css$Css$pct(leftVal),
										$rtfeldman$elm_css$Css$plus,
										$rtfeldman$elm_css$Css$px(-2))),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(40)),
									isActive ? $rtfeldman$elm_css$Css$visibility($rtfeldman$elm_css$Css$hidden) : $rtfeldman$elm_css$Css$visibility($rtfeldman$elm_css$Css$visible),
									$rtfeldman$elm_css$Css$zIndex(
									$rtfeldman$elm_css$Css$int(2))
								]))
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('images/' + 'complete.webp'),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(bottomVal - 2)),
									$rtfeldman$elm_css$Css$left(
									A3(
										$rtfeldman$elm_css$Css$calc,
										$rtfeldman$elm_css$Css$pct(leftVal),
										$rtfeldman$elm_css$Css$plus,
										$rtfeldman$elm_css$Css$px(-2))),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(40)),
									isActive ? $rtfeldman$elm_css$Css$visibility($rtfeldman$elm_css$Css$visible) : $rtfeldman$elm_css$Css$visibility($rtfeldman$elm_css$Css$hidden),
									$rtfeldman$elm_css$Css$zIndex(
									$rtfeldman$elm_css$Css$int(2))
								]))
						]),
					_List_Nil)
				]));
	});
var $author$project$RoadMapPage$wordBookStageBtn = F5(
	function (msg, fileName, bottomVal, leftVal, textVal) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick(msg)
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('images/' + fileName),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(bottomVal + 5)),
									$rtfeldman$elm_css$Css$left(
									$rtfeldman$elm_css$Css$pct(leftVal)),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$translate2,
											$rtfeldman$elm_css$Css$pct(-50),
											$rtfeldman$elm_css$Css$pct(50)),
											$rtfeldman$elm_css$Css$scale(0.4)
										])),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(22)),
									$rtfeldman$elm_css$Css$zIndex(
									$rtfeldman$elm_css$Css$int(1)),
									$rtfeldman$elm_css$Css$active(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$opacity(
											$rtfeldman$elm_css$Css$num(0.7))
										]))
								]))
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(bottomVal + 5)),
									$rtfeldman$elm_css$Css$left(
									$rtfeldman$elm_css$Css$pct(leftVal)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(43)),
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(43)),
									$rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#fff')),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$translate2,
											$rtfeldman$elm_css$Css$pct(-50),
											$rtfeldman$elm_css$Css$pct(50))
										])),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(8))
								]))
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
									$rtfeldman$elm_css$Css$bottom(
									$rtfeldman$elm_css$Css$px(bottomVal - 30)),
									$rtfeldman$elm_css$Css$left(
									$rtfeldman$elm_css$Css$pct(leftVal)),
									$rtfeldman$elm_css$Css$transforms(
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$translate2,
											$rtfeldman$elm_css$Css$pct(-50),
											$rtfeldman$elm_css$Css$pct(50))
										])),
									$rtfeldman$elm_css$Css$color(
									A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
									$rtfeldman$elm_css$Css$fontSize(
									$rtfeldman$elm_css$Css$px(14)),
									$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap)
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(textVal)
						]))
				]));
	});
var $author$project$RoadMapPage$toBtnView = F4(
	function (model, _v0, videoId, btnState) {
		var bottomVal = _v0.a;
		var leftVal = _v0.b;
		var _v1 = btnState.btnType;
		switch (_v1.$) {
			case 'ListenBtn':
				return btnState.isActive ? A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					$author$project$RoadMapPage$ToListenPage(videoId),
					'stage-listen-done.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive) : A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					$author$project$RoadMapPage$ToListenPage(videoId),
					'stage-listen.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive);
			case 'TapGameBtn':
				return btnState.isActive ? A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					A2($author$project$RoadMapPage$ToTapGamePage, btnState.level, videoId),
					'stage-tapgame-done.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive) : A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					A2($author$project$RoadMapPage$ToTapGamePage, btnState.level, videoId),
					'stage-tapgame.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive);
			case 'PronBtn':
				return btnState.isActive ? A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					A2($author$project$RoadMapPage$ToPronPage, btnState.level, videoId),
					'stage-pron-done.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive) : A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					A2($author$project$RoadMapPage$ToPronPage, btnState.level, videoId),
					'stage-pron.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive);
			case 'KanjiBtn':
				return btnState.isActive ? A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					A2($author$project$RoadMapPage$ToKanjiPage, btnState.level, videoId),
					'stage-kanji-done.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive) : A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					A2($author$project$RoadMapPage$ToKanjiPage, btnState.level, videoId),
					'stage-kanji.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive);
			case 'SentenceBtn':
				return btnState.isActive ? A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					$author$project$RoadMapPage$ToSentencePage(videoId),
					'stage-sentence-done.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive) : A7(
					$author$project$RoadMapPage$stageBtn,
					model,
					$author$project$RoadMapPage$ToSentencePage(videoId),
					'stage-sentence.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState),
					btnState.isActive);
			default:
				return A5(
					$author$project$RoadMapPage$wordBookStageBtn,
					$author$project$RoadMapPage$ToVocaPage(videoId),
					'stage-wordbook.webp',
					bottomVal,
					leftVal,
					$author$project$RoadMapPage$toProgressKey(btnState));
		}
	});
var $author$project$RoadMapPage$content = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
					]))
			]),
		A3(
			$elm$core$List$map2,
			F2(
				function (p, b) {
					return A4($author$project$RoadMapPage$toBtnView, model, p, model.data.videoId, b);
				}),
			$author$project$RoadMapPage$posList,
			model.btnList));
};
var $author$project$RoadMapPage$ToInfoPage = {$: 'ToInfoPage'};
var $author$project$RoadMapPage$headerView = function (title) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$color(
						A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
						A4(
						$rtfeldman$elm_css$Css$boxShadow4,
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(1),
						$rtfeldman$elm_css$Css$px(5),
						$rtfeldman$elm_css$Css$hex('#00000020'))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$RoadMapPage$ToMainPage),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.7))
									])),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(60)),
								$rtfeldman$elm_css$Css$paddingLeft(
								$rtfeldman$elm_css$Css$px(20)),
								$rtfeldman$elm_css$Css$paddingRight(
								$rtfeldman$elm_css$Css$px(20)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden),
								$rtfeldman$elm_css$Css$textOverflow($rtfeldman$elm_css$Css$ellipsis),
								$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$img,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$src('images/arrow-back.webp'),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(24))
									]))
							]),
						_List_Nil),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(10)),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$lineHeight(
										$rtfeldman$elm_css$Css$num(1))
									]))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(title)
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$RoadMapPage$ToInfoPage),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$px(60)),
								$rtfeldman$elm_css$Css$paddingLeft(
								$rtfeldman$elm_css$Css$px(20)),
								$rtfeldman$elm_css$Css$paddingRight(
								$rtfeldman$elm_css$Css$px(20)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$transforms(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$translateY(
										$rtfeldman$elm_css$Css$px(-3))
									])),
								$rtfeldman$elm_css$Css$active(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$opacity(
										$rtfeldman$elm_css$Css$num(0.7))
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$img,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$src('images/infoBtn.webp'),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(29)),
										$rtfeldman$elm_css$Css$paddingTop(
										$rtfeldman$elm_css$Css$px(5))
									]))
							]),
						_List_Nil)
					]))
			]));
};
var $rtfeldman$elm_css$Svg$Styled$defs = $rtfeldman$elm_css$Svg$Styled$node('defs');
var $rtfeldman$elm_css$Svg$Styled$style = $rtfeldman$elm_css$Svg$Styled$node('style');
var $rtfeldman$elm_css$Svg$Styled$text = $rtfeldman$elm_css$VirtualDom$Styled$text;
var $author$project$SvgElement$lineSvg = function (val) {
	return A2(
		$rtfeldman$elm_css$Svg$Styled$svg,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('-1 0 120 520')
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Svg$Styled$defs,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Svg$Styled$style,
						_List_Nil,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Svg$Styled$text(
								'.cls-1{fill:none;stroke:#ffffffee;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;stroke-dasharray: 1687;stroke-dashoffset:' + ($elm$core$String$fromInt(val) + '}'))
							]))
					])),
				A2(
				$rtfeldman$elm_css$Svg$Styled$path,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Svg$Styled$Attributes$class('cls-1'),
						$rtfeldman$elm_css$Svg$Styled$Attributes$d('M47.4,513h47.2c11.3,0,20.5-9.6,20.5-21.4l0,0c0-11.8-9.2-21.4-20.5-21.4H22.2\r\n                                   \t\t\tc-11.3,0-20.5-9.6-20.5-21.4l0,0c0-11.8,9.2-21.4,20.5-21.4h72.5c11.3,0,20.5-9.6,20.5-21.4l0,0c0-11.8-9.2-21.4-20.5-21.4H21.6\r\n                                   \t\t\tc-11.3,0-20.5-9.6-20.5-21.4l0,0c0-11.8,9.2-21.4,20.5-21.4h72.5c11.3,0,20.5-9.6,20.5-21.4l0,0c0-11.8-9.2-21.4-20.5-21.4H21\r\n                                   \t\t\tc-11.3,0-20.5-9.6-20.5-21.4l0,0c0-11.8,9.2-21.4,20.5-21.4h73.7c11.3,0,20.5-9.6,20.5-21.4l0,0c0-11.8-9.2-21.4-20.5-21.4H22.2\r\n                                   \t\t\tc-11.3,0-20.5-9.6-20.5-21.4l0,0c0-11.8,9.2-21.4,20.5-21.4h72.5c11.3,0,20.5-9.6,20.5-21.4l0,0c0-11.8-9.2-21.4-20.5-21.4H21.6\r\n                                   \t\t\tc-11.3,0-20.5-9.6-20.5-21.4l0,0c0-11.8,9.2-21.3,20.5-21.3h72.5c11.3,0,20.5-9.6,20.5-21.3l0,0c0-11.8-9.2-21.3-20.5-21.3H21\r\n                                   \t\t\tc-11.3,0-20.5-9.6-20.5-21.4l0,0c0-11,9.2-20.6,20.5-20.6h50.4')
					]),
				_List_Nil)
			]));
};
var $author$project$RoadMapPage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundImage(
						$rtfeldman$elm_css$Css$url('images/bg.webp')),
						A2(
						$rtfeldman$elm_css$Css$backgroundSize2,
						$rtfeldman$elm_css$Css$pct(100),
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
					]))
			]),
		_List_fromArray(
			[
				$author$project$RoadMapPage$headerView(model.data.name),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$id('roadMap'),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$backgroundColor(
										$rtfeldman$elm_css$Css$hex('#ffffffee')),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(5)),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$pct(100))
									]))
							]),
						_List_Nil),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(
											function (x) {
												return x + 160;
											}(
												A2(
													$elm$core$Maybe$withDefault,
													0,
													A2(
														$elm$core$Maybe$map,
														$elm$core$Tuple$first,
														$elm$core$List$head(
															$elm$core$List$reverse(
																A2(
																	$elm$core$List$take,
																	$elm$core$List$length(model.btnList),
																	$author$project$RoadMapPage$posList)))))))),
										$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$hidden),
										$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(300)),
												$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
												$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
												$rtfeldman$elm_css$Css$paddingBottom(
												$rtfeldman$elm_css$Css$px(100))
											]))
									]),
								_List_fromArray(
									[
										$author$project$SvgElement$lineSvg(0),
										$author$project$RoadMapPage$content(model)
									]))
							]))
					]))
			]));
};
var $author$project$SearchPage$SearchBtnClick = {$: 'SearchBtnClick'};
var $author$project$SearchPage$SearchStrChanged = function (a) {
	return {$: 'SearchStrChanged', a: a};
};
var $author$project$SearchPage$ToAwardPage = {$: 'ToAwardPage'};
var $author$project$SearchPage$CategoryBtnClicked = function (a) {
	return {$: 'CategoryBtnClicked', a: a};
};
var $author$project$SearchPage$makeCategoryBtn = F2(
	function (selected, str) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick(
					$author$project$SearchPage$CategoryBtnClicked(str)),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$padding(
							$rtfeldman$elm_css$Css$px(8)),
							$rtfeldman$elm_css$Css$paddingLeft(
							$rtfeldman$elm_css$Css$px(5)),
							$rtfeldman$elm_css$Css$paddingRight(
							$rtfeldman$elm_css$Css$px(5)),
							$rtfeldman$elm_css$Css$display($rtfeldman$elm_css$Css$inlineBlock)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$padding(
									$rtfeldman$elm_css$Css$px(10)),
									_Utils_eq(selected, str) ? $rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#42B8F5')) : $rtfeldman$elm_css$Css$backgroundColor(
									$rtfeldman$elm_css$Css$hex('#80838f')),
									$rtfeldman$elm_css$Css$color(
									$rtfeldman$elm_css$Css$hex('#fff')),
									$rtfeldman$elm_css$Css$borderRadius(
									$rtfeldman$elm_css$Css$px(5)),
									A4(
									$rtfeldman$elm_css$Css$boxShadow4,
									$rtfeldman$elm_css$Css$px(1),
									$rtfeldman$elm_css$Css$px(1),
									$rtfeldman$elm_css$Css$px(10),
									$rtfeldman$elm_css$Css$hex('#00000011')),
									$rtfeldman$elm_css$Css$Transitions$transition(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$Transitions$backgroundColor(100)
										]))
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(str)
						]))
				]));
	});
var $rtfeldman$elm_css$Css$outline = $rtfeldman$elm_css$Css$prop1('outline');
var $rtfeldman$elm_css$Html$Styled$Attributes$placeholder = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('placeholder');
var $author$project$SearchPage$PreToRoadMap = F2(
	function (a, b) {
		return {$: 'PreToRoadMap', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$borderRight3 = $rtfeldman$elm_css$Css$prop3('border-right');
var $author$project$SearchPage$resultView = F2(
	function (infoDataList, x) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Events$onClick(
					A2($author$project$SearchPage$PreToRoadMap, x.name, x.videoId)),
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$opacity(
							$rtfeldman$elm_css$Css$num(1)),
							$rtfeldman$elm_css$Css$active(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0.7))
								])),
							$rtfeldman$elm_css$Css$Transitions$transition(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$Transitions$opacity(100),
									$rtfeldman$elm_css$Css$Transitions$backgroundColor(100)
								])),
							$rtfeldman$elm_css$Css$displayFlex,
							$rtfeldman$elm_css$Css$marginBottom(
							$rtfeldman$elm_css$Css$px(11)),
							$rtfeldman$elm_css$Css$backgroundColor(
							$rtfeldman$elm_css$Css$hex('#ffffff75')),
							$rtfeldman$elm_css$Css$borderRadius(
							$rtfeldman$elm_css$Css$px(5))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('videoImages/' + (x.imageSrc + '.webp')),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$height(
									$rtfeldman$elm_css$Css$px(90)),
									$rtfeldman$elm_css$Css$width(
									$rtfeldman$elm_css$Css$px(90)),
									$rtfeldman$elm_css$Css$flexShrink($rtfeldman$elm_css$Css$zero),
									A4(
									$rtfeldman$elm_css$Css$borderRadius4,
									$rtfeldman$elm_css$Css$px(5),
									$rtfeldman$elm_css$Css$zero,
									$rtfeldman$elm_css$Css$zero,
									$rtfeldman$elm_css$Css$px(5))
								]))
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$padding(
									$rtfeldman$elm_css$Css$px(7)),
									$rtfeldman$elm_css$Css$paddingLeft(
									$rtfeldman$elm_css$Css$px(9)),
									$rtfeldman$elm_css$Css$paddingRight($rtfeldman$elm_css$Css$zero),
									A3(
									$rtfeldman$elm_css$Css$borderRight3,
									$rtfeldman$elm_css$Css$px(9),
									$rtfeldman$elm_css$Css$solid,
									A4($rtfeldman$elm_css$Css$rgba, 0, 0, 0, 0)),
									$rtfeldman$elm_css$Css$flexGrow(
									$rtfeldman$elm_css$Css$num(1)),
									$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap),
									$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(14))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(x.name)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(12))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(
									A2(
										$elm$core$Maybe$withDefault,
										'',
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.artistKor;
											},
											$elm$core$List$head(
												A2(
													$elm$core$List$filter,
													function (i) {
														return _Utils_eq(i.videoId, x.videoId);
													},
													infoDataList)))))
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(12))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(x.tags)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											(x.difficulty === '쉬움') ? $rtfeldman$elm_css$Css$backgroundColor(
											$rtfeldman$elm_css$Css$hex('#64F542')) : ((x.difficulty === '보통') ? $rtfeldman$elm_css$Css$backgroundColor(
											$rtfeldman$elm_css$Css$hex('#42B8F5')) : ((x.difficulty === '어려움') ? $rtfeldman$elm_css$Css$backgroundColor(
											$rtfeldman$elm_css$Css$hex('#F54242')) : $rtfeldman$elm_css$Css$backgroundColor(
											$rtfeldman$elm_css$Css$hex('#64F542')))),
											$rtfeldman$elm_css$Css$marginTop(
											$rtfeldman$elm_css$Css$px(3)),
											$rtfeldman$elm_css$Css$padding(
											$rtfeldman$elm_css$Css$px(5)),
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(13)),
											$rtfeldman$elm_css$Css$borderRadius(
											$rtfeldman$elm_css$Css$px(3))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(x.difficulty)
								]))
						]))
				]));
	});
var $author$project$Hangul$hiraganaToKatakana = function (str) {
	return $elm$core$String$fromList(
		A2(
			$elm$core$List$map,
			$elm$core$Char$fromCode,
			A2(
				$elm$core$List$map,
				function (x) {
					return ((12352 <= x) && (x <= 12447)) ? (x + 96) : x;
				},
				A2(
					$elm$core$List$map,
					$elm$core$Char$toCode,
					$elm$core$String$toList(str)))));
};
var $author$project$SearchPage$toSearchKey = function (str) {
	return $author$project$Hangul$hiraganaToKatakana(
		A3(
			$elm$core$String$replace,
			' ',
			'',
			$elm$core$String$toLower(
				$elm$core$String$trim(str))));
};
var $author$project$SearchPage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$backgroundImage(
						$rtfeldman$elm_css$Css$url('images/bg.webp')),
						A2(
						$rtfeldman$elm_css$Css$backgroundSize2,
						$rtfeldman$elm_css$Css$pct(100),
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
						$rtfeldman$elm_css$Css$top($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$left($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$right($rtfeldman$elm_css$Css$zero),
						$rtfeldman$elm_css$Css$displayFlex,
						$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
								$rtfeldman$elm_css$Css$bottom($rtfeldman$elm_css$Css$zero),
								$rtfeldman$elm_css$Css$backgroundImage(
								$rtfeldman$elm_css$Css$url('images/wave.webp')),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$pct(60)),
								A2(
								$rtfeldman$elm_css$Css$backgroundSize2,
								$rtfeldman$elm_css$Css$pct(100),
								$rtfeldman$elm_css$Css$pct(100)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column)
							]))
					]),
				_List_Nil),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$color(
								A3($rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$flexGrow(
										$rtfeldman$elm_css$Css$num(1)),
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$padding(
										$rtfeldman$elm_css$Css$px(15)),
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(15)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$px(14)),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$px(40)),
										A4(
										$rtfeldman$elm_css$Css$boxShadow4,
										$rtfeldman$elm_css$Css$px(1),
										$rtfeldman$elm_css$Css$px(1),
										$rtfeldman$elm_css$Css$px(5),
										$rtfeldman$elm_css$Css$hex('#00000020'))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$input,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$placeholder('제목 / 아티스트 / 태그를 입력해 주세요'),
										$rtfeldman$elm_css$Html$Styled$Attributes$value(model.searchStr),
										$rtfeldman$elm_css$Html$Styled$Events$onInput($author$project$SearchPage$SearchStrChanged),
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$flexGrow(
												$rtfeldman$elm_css$Css$num(1)),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(30)),
												A3(
												$rtfeldman$elm_css$Css$border3,
												$rtfeldman$elm_css$Css$px(3),
												$rtfeldman$elm_css$Css$solid,
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$paddingLeft(
												$rtfeldman$elm_css$Css$px(13)),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(100)),
												$rtfeldman$elm_css$Css$outline($rtfeldman$elm_css$Css$none)
											]))
									]),
								_List_Nil)
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$backgroundColor(
								$rtfeldman$elm_css$Css$hex('#ffffff33'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$paddingLeft(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$paddingRight(
										$rtfeldman$elm_css$Css$px(20)),
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$flexWrap($rtfeldman$elm_css$Css$noWrap),
										$rtfeldman$elm_css$Css$overflowX($rtfeldman$elm_css$Css$auto),
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(15)),
										$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$noWrap)
									]))
							]),
						_List_fromArray(
							[
								A2($author$project$SearchPage$makeCategoryBtn, model.selectedCategory, '전체'),
								A2($author$project$SearchPage$makeCategoryBtn, model.selectedCategory, '트렌드'),
								A2($author$project$SearchPage$makeCategoryBtn, model.selectedCategory, '애니메이션'),
								A2($author$project$SearchPage$makeCategoryBtn, model.selectedCategory, '영화'),
								A2($author$project$SearchPage$makeCategoryBtn, model.selectedCategory, '드라마'),
								A2($author$project$SearchPage$makeCategoryBtn, model.selectedCategory, '올드'),
								A2($author$project$SearchPage$makeCategoryBtn, model.selectedCategory, 'KPOP'),
								A2($author$project$SearchPage$makeCategoryBtn, model.selectedCategory, 'PV'),
								A2($author$project$SearchPage$makeCategoryBtn, model.selectedCategory, '기타')
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$id('list-scroll'),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$overflowY($rtfeldman$elm_css$Css$auto),
								$rtfeldman$elm_css$Css$flexGrow(
								$rtfeldman$elm_css$Css$num(1)),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(2)),
								$rtfeldman$elm_css$Css$color(
								$rtfeldman$elm_css$Css$hex('#fff')),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$px(18)),
								$rtfeldman$elm_css$Css$paddingBottom(
								$rtfeldman$elm_css$Css$px(60))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$fontSize(
										$rtfeldman$elm_css$Css$px(16)),
										$rtfeldman$elm_css$Css$whiteSpace($rtfeldman$elm_css$Css$preLine),
										$rtfeldman$elm_css$Css$lineHeight(
										$rtfeldman$elm_css$Css$num(1.2)),
										$rtfeldman$elm_css$Css$marginBottom(
										$rtfeldman$elm_css$Css$px(5)),
										$rtfeldman$elm_css$Css$marginLeft(
										$rtfeldman$elm_css$Css$px(4))
									]))
							]),
						_List_fromArray(
							[
								A3(
								$rtfeldman$elm_css$Html$Styled$Keyed$node,
								'div',
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
									]),
								A2(
									$elm$core$List$map,
									function (x) {
										return _Utils_Tuple2(
											x.videoId,
											A3($rtfeldman$elm_css$Html$Styled$Lazy$lazy2, $author$project$SearchPage$resultView, model.infoDataList, x));
									},
									A2(
										$elm$core$List$filter,
										function (x) {
											var sKey = $author$project$SearchPage$toSearchKey(model.searchStr);
											var info = $elm$core$List$head(
												A2(
													$elm$core$List$filter,
													function (i) {
														return _Utils_eq(i.videoId, x.videoId);
													},
													model.infoDataList));
											var nJp = A2(
												$elm$core$Maybe$withDefault,
												'',
												A2(
													$elm$core$Maybe$map,
													function ($) {
														return $.songNameJp;
													},
													info));
											var c8 = A2(
												$elm$core$String$contains,
												A3($elm$core$String$replace, '#', '', sKey),
												$author$project$SearchPage$toSearchKey(x.difficulty));
											var c7 = A2(
												$elm$core$String$contains,
												A3($elm$core$String$replace, '#', '', sKey),
												$author$project$SearchPage$toSearchKey(x.category));
											var c6 = A2(
												$elm$core$String$contains,
												A3($elm$core$String$replace, '#', '', sKey),
												$author$project$SearchPage$toSearchKey(x.searchWords));
											var c5 = A2(
												$elm$core$String$contains,
												sKey,
												$author$project$SearchPage$toSearchKey(nJp));
											var c2 = A2(
												$elm$core$String$contains,
												sKey,
												$author$project$SearchPage$toSearchKey(x.tags));
											var c1 = A2(
												$elm$core$String$contains,
												sKey,
												$author$project$SearchPage$toSearchKey(x.name));
											var aKor = A2(
												$elm$core$Maybe$withDefault,
												'',
												A2(
													$elm$core$Maybe$map,
													function ($) {
														return $.artistKor;
													},
													info));
											var c3 = A2(
												$elm$core$String$contains,
												A3($elm$core$String$replace, '#', '', sKey),
												$author$project$SearchPage$toSearchKey(aKor));
											var aJp = A2(
												$elm$core$Maybe$withDefault,
												'',
												A2(
													$elm$core$Maybe$map,
													function ($) {
														return $.artistJp;
													},
													info));
											var c4 = A2(
												$elm$core$String$contains,
												A3($elm$core$String$replace, '#', '', sKey),
												$author$project$SearchPage$toSearchKey(aJp));
											return c1 || (c2 || (c3 || (c4 || (c5 || (c6 || (c7 || c8))))));
										},
										A2(
											$elm$core$List$sortBy,
											function (x) {
												var history = A2($elm$core$Maybe$withDefault, _List_Nil, model.visitHistory);
												return A2(
													$elm$core$Maybe$withDefault,
													$elm$core$List$length(history),
													A2(
														$elm$core$Maybe$map,
														$elm$core$Tuple$first,
														$elm$core$List$head(
															A2(
																$elm$core$List$filter,
																function (_v0) {
																	var i = _v0.a;
																	var v = _v0.b;
																	return _Utils_eq(v, x.videoId);
																},
																A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, history)))));
											},
											A2(
												$elm$core$List$sortBy,
												function (x) {
													return (x.difficulty === '쉬움') ? 1 : ((x.difficulty === '보통') ? 2 : ((x.difficulty === '어려움') ? 3 : 0));
												},
												A2(
													$elm$core$List$filter,
													function (x) {
														return (model.selectedCategory === '전체') ? true : ((model.selectedCategory === '기타') ? $elm$core$String$isEmpty(
															$elm$core$String$trim(x.category)) : A2($elm$core$String$contains, model.selectedCategory, x.category));
													},
													model.videoDataList))))))
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$alignSelf($rtfeldman$elm_css$Css$center),
								$rtfeldman$elm_css$Css$displayFlex,
								$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$px(260)),
								$rtfeldman$elm_css$Css$zIndex(
								$rtfeldman$elm_css$Css$int(2))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$displayFlex,
										$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$spaceBetween),
										$rtfeldman$elm_css$Css$paddingBottom(
										$rtfeldman$elm_css$Css$px(35)),
										$rtfeldman$elm_css$Css$paddingTop(
										$rtfeldman$elm_css$Css$px(17))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(200)),
												$rtfeldman$elm_css$Css$opacity(
												$rtfeldman$elm_css$Css$num(0.85)),
												A5(
												$rtfeldman$elm_css$Css$boxShadow5,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$hex('#eee'))
											])),
										$author$project$HtmlElement$onPointerDown($author$project$SearchPage$SearchBtnClick)
									]),
								_List_fromArray(
									[$author$project$SvgElement$searchIconSvg])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(200)),
												A5(
												$rtfeldman$elm_css$Css$boxShadow5,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$hex('#eee'))
											])),
										$author$project$HtmlElement$onPointerDown($author$project$SearchPage$ToMainPage)
									]),
								_List_fromArray(
									[$author$project$SvgElement$homeIconSvg])),
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#fff')),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(70)),
												$rtfeldman$elm_css$Css$displayFlex,
												$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
												$rtfeldman$elm_css$Css$borderRadius(
												$rtfeldman$elm_css$Css$px(200)),
												A5(
												$rtfeldman$elm_css$Css$boxShadow5,
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$px(5),
												$rtfeldman$elm_css$Css$px(1),
												$rtfeldman$elm_css$Css$hex('#eee'))
											])),
										$author$project$HtmlElement$onPointerDown($author$project$SearchPage$ToAwardPage)
									]),
								_List_fromArray(
									[$author$project$SvgElement$userIconSvg]))
							]))
					]))
			]));
};
var $author$project$ValidatePage$timelineView = function (list) {
	var scaleVal = 0.007;
	var aux = F3(
		function (i, remainList, accList) {
			aux:
			while (true) {
				if (remainList.b) {
					if (remainList.b.b) {
						var _v1 = remainList.a;
						var a1 = _v1.a;
						var b1 = _v1.b;
						var _v2 = remainList.b;
						var _v3 = _v2.a;
						var a2 = _v3.a;
						var b2 = _v3.b;
						var tl = _v2.b;
						var result = A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(30)),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$px(scaleVal * (b1 - a1))),
											$rtfeldman$elm_css$Css$left(
											$rtfeldman$elm_css$Css$px(scaleVal * a1)),
											$rtfeldman$elm_css$Css$backgroundColor(
											$rtfeldman$elm_css$Css$hex('#33333333')),
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(2))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_Nil,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text(
											$elm$core$String$fromInt(i))
										]))
								]));
						var between = ((a2 - b1) > 10000) ? _List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
												$rtfeldman$elm_css$Css$height(
												$rtfeldman$elm_css$Css$px(30)),
												$rtfeldman$elm_css$Css$width(
												$rtfeldman$elm_css$Css$px(scaleVal * (a2 - b1))),
												$rtfeldman$elm_css$Css$left(
												$rtfeldman$elm_css$Css$px(scaleVal * b1)),
												$rtfeldman$elm_css$Css$backgroundColor(
												$rtfeldman$elm_css$Css$hex('#33000077')),
												$rtfeldman$elm_css$Css$fontSize(
												$rtfeldman$elm_css$Css$px(2))
											]))
									]),
								_List_Nil)
							]) : _List_Nil;
						var $temp$i = i + 1,
							$temp$remainList = A2(
							$elm$core$List$cons,
							_Utils_Tuple2(a2, b2),
							tl),
							$temp$accList = $elm$core$List$concat(
							_List_fromArray(
								[
									_List_fromArray(
									[result]),
									between,
									accList
								]));
						i = $temp$i;
						remainList = $temp$remainList;
						accList = $temp$accList;
						continue aux;
					} else {
						var _v4 = remainList.a;
						var a1 = _v4.a;
						var b1 = _v4.b;
						var result = A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$absolute),
											$rtfeldman$elm_css$Css$height(
											$rtfeldman$elm_css$Css$px(30)),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$px(scaleVal * (b1 - a1))),
											$rtfeldman$elm_css$Css$left(
											$rtfeldman$elm_css$Css$px(scaleVal * a1)),
											$rtfeldman$elm_css$Css$backgroundColor(
											$rtfeldman$elm_css$Css$hex('#33333333')),
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$px(2))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(
									$elm$core$String$fromInt(i))
								]));
						var $temp$i = i + 1,
							$temp$remainList = _List_Nil,
							$temp$accList = $elm$core$List$concat(
							_List_fromArray(
								[
									_List_fromArray(
									[result]),
									accList
								]));
						i = $temp$i;
						remainList = $temp$remainList;
						accList = $temp$accList;
						continue aux;
					}
				} else {
					return $elm$core$List$reverse(accList);
				}
			}
		});
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$position($rtfeldman$elm_css$Css$relative)
					]))
			]),
		A3(aux, 0, list, _List_Nil));
};
var $author$project$ValidatePage$view = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$auto),
						$rtfeldman$elm_css$Css$width(
						$rtfeldman$elm_css$Css$pct(100)),
						$rtfeldman$elm_css$Css$height(
						$rtfeldman$elm_css$Css$pct(100))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								A2($rtfeldman$elm_css$Css$property, 'user-select', 'text')
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(model.debugStr)
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_Nil,
				_List_fromArray(
					[
						$author$project$ValidatePage$timelineView(model.timeline)
					]))
			]));
};
var $author$project$Main$editViewPage = function (page) {
	switch (page.$) {
		case 'MainPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$MainPageMsg,
				$author$project$MainPage$editView(pageModel));
		case 'ListenPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$ListenPageMsg,
				$author$project$ListenPage$editView(pageModel));
		case 'TapGamePage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$TapGamePageMsg,
				$author$project$TapGamePage$editView(pageModel));
		case 'RoadMapPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$RoadMapPageMsg,
				$author$project$RoadMapPage$view(pageModel));
		case 'PronPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$PronPageMsg,
				$author$project$PronPage$editView(pageModel));
		case 'SentencePage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$SentencePageMsg,
				$author$project$SentencePage$editView(pageModel));
		case 'VocaPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$VocaPageMsg,
				$author$project$VocaPage$editView(pageModel));
		case 'AwardPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$AwardPageMsg,
				$author$project$AwardPage$view(pageModel));
		case 'InfoPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$InfoPageMsg,
				$author$project$InfoPage$editView(pageModel));
		case 'ValidatePage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$ValidatePageMsg,
				$author$project$ValidatePage$view(pageModel));
		case 'SearchPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$SearchPageMsg,
				$author$project$SearchPage$view(pageModel));
		case 'QuestionPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$QuestionPageMsg,
				$author$project$QuestionPage$view(pageModel));
		case 'MarketPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$MarketPageMsg,
				$author$project$MarketPage$view(pageModel));
		case 'PrintPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$PrintPageMsg,
				$author$project$PrintPage$view(pageModel));
		default:
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$RankingPageMsg,
				$author$project$RankingPage$view(pageModel));
	}
};
var $author$project$Main$isEditMode = false;
var $author$project$Main$normalViewPage = function (page) {
	switch (page.$) {
		case 'MainPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$MainPageMsg,
				$author$project$MainPage$view(pageModel));
		case 'ListenPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$ListenPageMsg,
				$author$project$ListenPage$view(pageModel));
		case 'TapGamePage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$TapGamePageMsg,
				$author$project$TapGamePage$view(pageModel));
		case 'RoadMapPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$RoadMapPageMsg,
				$author$project$RoadMapPage$view(pageModel));
		case 'PronPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$PronPageMsg,
				$author$project$PronPage$view(pageModel));
		case 'SentencePage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$SentencePageMsg,
				$author$project$SentencePage$view(pageModel));
		case 'VocaPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$VocaPageMsg,
				$author$project$VocaPage$view(pageModel));
		case 'AwardPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$AwardPageMsg,
				$author$project$AwardPage$view(pageModel));
		case 'InfoPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$InfoPageMsg,
				$author$project$InfoPage$view(pageModel));
		case 'ValidatePage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$ValidatePageMsg,
				$author$project$ValidatePage$view(pageModel));
		case 'SearchPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$SearchPageMsg,
				$author$project$SearchPage$view(pageModel));
		case 'QuestionPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$QuestionPageMsg,
				$author$project$QuestionPage$view(pageModel));
		case 'MarketPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$MarketPageMsg,
				$author$project$MarketPage$view(pageModel));
		case 'PrintPage':
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$PrintPageMsg,
				$author$project$PrintPage$view(pageModel));
		default:
			var pageModel = page.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$map,
				$author$project$Main$RankingPageMsg,
				$author$project$RankingPage$view(pageModel));
	}
};
var $author$project$Main$viewPage = function (page) {
	return $author$project$Main$isEditMode ? $author$project$Main$editViewPage(page) : $author$project$Main$normalViewPage(page);
};
var $author$project$Main$makePageViewList = F4(
	function (current, previous, currentStyle, previousStyle) {
		return A2(
			$elm$core$List$map,
			function (key) {
				return _Utils_eq(
					key,
					$author$project$Main$pageToStr(current)) ? A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[$author$project$Main$fixedStyle, currentStyle]))
						]),
					_List_fromArray(
						[
							A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$Main$viewPage, current)
						])) : (_Utils_eq(
					key,
					$author$project$Main$pageToStr(previous)) ? A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[$author$project$Main$fixedStyle, previousStyle]))
						]),
					_List_fromArray(
						[
							A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$Main$viewPage, previous)
						])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil));
			},
			$author$project$Main$pageList);
	});
var $author$project$Main$opacityEaseOutAnim = $rtfeldman$elm_css$Css$Animations$keyframes(
	_List_fromArray(
		[
			_Utils_Tuple2(
			0,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Animations$opacity(
					$rtfeldman$elm_css$Css$num(1))
				])),
			_Utils_Tuple2(
			100,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Animations$opacity(
					$rtfeldman$elm_css$Css$num(0))
				]))
		]));
var $author$project$Main$opacityOutStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$zIndex(
			$rtfeldman$elm_css$Css$int(1)),
			$rtfeldman$elm_css$Css$animationName($author$project$Main$opacityEaseOutAnim),
			$rtfeldman$elm_css$Css$animationDuration(
			$rtfeldman$elm_css$Css$ms(300)),
			$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
		]));
var $author$project$Main$opacityEaseInAnim = $rtfeldman$elm_css$Css$Animations$keyframes(
	_List_fromArray(
		[
			_Utils_Tuple2(
			0,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Animations$opacity(
					$rtfeldman$elm_css$Css$num(0))
				])),
			_Utils_Tuple2(
			100,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Animations$opacity(
					$rtfeldman$elm_css$Css$num(1))
				]))
		]));
var $author$project$Main$opacityStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$zIndex(
			$rtfeldman$elm_css$Css$int(1)),
			$rtfeldman$elm_css$Css$animationName($author$project$Main$opacityEaseInAnim),
			$rtfeldman$elm_css$Css$animationDuration(
			$rtfeldman$elm_css$Css$ms(200))
		]));
var $author$project$Main$easeOutAnim = $rtfeldman$elm_css$Css$Animations$keyframes(
	_List_fromArray(
		[
			_Utils_Tuple2(
			0,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Animations$transform(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$translateY(
							$rtfeldman$elm_css$Css$px(0))
						])),
					$rtfeldman$elm_css$Css$Animations$opacity(
					$rtfeldman$elm_css$Css$num(1))
				])),
			_Utils_Tuple2(
			100,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Animations$transform(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$translateY(
							$rtfeldman$elm_css$Css$px(100))
						])),
					$rtfeldman$elm_css$Css$Animations$opacity(
					$rtfeldman$elm_css$Css$num(0))
				]))
		]));
var $author$project$Main$reverseStyle = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$zIndex(
			$rtfeldman$elm_css$Css$int(1)),
			$rtfeldman$elm_css$Css$animationName($author$project$Main$easeOutAnim),
			$rtfeldman$elm_css$Css$animationDuration(
			$rtfeldman$elm_css$Css$ms(300)),
			$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
		]));
var $author$project$Main$simpleMakePageViewList = function (current) {
	return A2(
		$elm$core$List$map,
		function (key) {
			return _Utils_eq(
				key,
				$author$project$Main$pageToStr(current)) ? A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[$author$project$Main$fixedStyle]))
					]),
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$Main$viewPage, current)
					])) : A2($rtfeldman$elm_css$Html$Styled$div, _List_Nil, _List_Nil);
		},
		$author$project$Main$pageList);
};
var $author$project$Main$appView = function (model) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Main$graphicOptions(model),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_Nil,
				function () {
					var _v0 = A2($elm$core$List$cons, model.page, model.prevPages);
					_v0$8:
					while (true) {
						if (_v0.b) {
							if (_v0.b.b) {
								switch (_v0.a.$) {
									case 'RoadMapPage':
										if (_v0.b.a.$ === 'MainPage') {
											var r = _v0.a.a;
											var _v3 = _v0.b;
											var m = _v3.a.a;
											return A4(
												$author$project$Main$makePageViewList,
												$author$project$Main$RoadMapPage(r),
												$author$project$Main$MainPage(m),
												$rtfeldman$elm_css$Css$batch(
													_List_fromArray(
														[
															$author$project$Main$basicStyle,
															model.isTransitioning ? $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none) : $rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$auto)
														])),
												$rtfeldman$elm_css$Css$zIndex(
													$rtfeldman$elm_css$Css$int(0)));
										} else {
											break _v0$8;
										}
									case 'MainPage':
										switch (_v0.b.a.$) {
											case 'AwardPage':
												var m = _v0.a.a;
												var _v1 = _v0.b;
												var a = _v1.a.a;
												return A4(
													$author$project$Main$makePageViewList,
													$author$project$Main$MainPage(m),
													$author$project$Main$AwardPage(a),
													$author$project$Main$opacityStyle,
													$rtfeldman$elm_css$Css$zIndex(
														$rtfeldman$elm_css$Css$int(0)));
											case 'RoadMapPage':
												var m = _v0.a.a;
												var _v4 = _v0.b;
												var r = _v4.a.a;
												return A4(
													$author$project$Main$makePageViewList,
													$author$project$Main$MainPage(m),
													$author$project$Main$RoadMapPage(r),
													$rtfeldman$elm_css$Css$zIndex(
														$rtfeldman$elm_css$Css$int(0)),
													$author$project$Main$reverseStyle);
											case 'SearchPage':
												var m = _v0.a.a;
												var _v6 = _v0.b;
												var r = _v6.a.a;
												return A4(
													$author$project$Main$makePageViewList,
													$author$project$Main$MainPage(m),
													$author$project$Main$SearchPage(r),
													$rtfeldman$elm_css$Css$zIndex(
														$rtfeldman$elm_css$Css$int(0)),
													$author$project$Main$opacityOutStyle);
											default:
												break _v0$8;
										}
									case 'SearchPage':
										switch (_v0.b.a.$) {
											case 'MainPage':
												var r = _v0.a.a;
												var _v5 = _v0.b;
												var m = _v5.a.a;
												return A4(
													$author$project$Main$makePageViewList,
													$author$project$Main$SearchPage(r),
													$author$project$Main$MainPage(m),
													$rtfeldman$elm_css$Css$batch(
														_List_fromArray(
															[$author$project$Main$opacityStyle])),
													$rtfeldman$elm_css$Css$zIndex(
														$rtfeldman$elm_css$Css$int(0)));
											case 'AwardPage':
												var s = _v0.a.a;
												var _v7 = _v0.b;
												var a = _v7.a.a;
												return A4(
													$author$project$Main$makePageViewList,
													$author$project$Main$SearchPage(s),
													$author$project$Main$AwardPage(a),
													$author$project$Main$opacityStyle,
													$rtfeldman$elm_css$Css$zIndex(
														$rtfeldman$elm_css$Css$int(0)));
											default:
												break _v0$8;
										}
									case 'AwardPage':
										switch (_v0.b.a.$) {
											case 'MainPage':
												var a = _v0.a.a;
												var _v2 = _v0.b;
												var m = _v2.a.a;
												return A4(
													$author$project$Main$makePageViewList,
													$author$project$Main$AwardPage(a),
													$author$project$Main$MainPage(m),
													$author$project$Main$opacityStyle,
													$rtfeldman$elm_css$Css$zIndex(
														$rtfeldman$elm_css$Css$int(0)));
											case 'SearchPage':
												var a = _v0.a.a;
												var _v8 = _v0.b;
												var s = _v8.a.a;
												return A4(
													$author$project$Main$makePageViewList,
													$author$project$Main$AwardPage(a),
													$author$project$Main$SearchPage(s),
													$author$project$Main$opacityStyle,
													$rtfeldman$elm_css$Css$zIndex(
														$rtfeldman$elm_css$Css$int(0)));
											default:
												break _v0$8;
										}
									default:
										break _v0$8;
								}
							} else {
								var curr = _v0.a;
								return $author$project$Main$simpleMakePageViewList(curr);
							}
						} else {
							return _List_Nil;
						}
					}
					var curr = _v0.a;
					var _v9 = _v0.b;
					var prev = _v9.a;
					return A4(
						$author$project$Main$makePageViewList,
						curr,
						prev,
						$author$project$Main$basicStyle,
						$rtfeldman$elm_css$Css$zIndex(
							$rtfeldman$elm_css$Css$int(0)));
				}())
			]));
};
var $author$project$Main$view = function (model) {
	var _v0 = model.page;
	if (_v0.$ === 'PrintPage') {
		var pageModel = _v0.a;
		return A2(
			$rtfeldman$elm_css$Html$Styled$map,
			$author$project$Main$PrintPageMsg,
			$author$project$PrintPage$view(pageModel));
	} else {
		return $author$project$Main$appView(model);
	}
};
var $author$project$Main$main = $elm$browser$Browser$element(
	{
		init: $author$project$Main$init,
		subscriptions: $author$project$Main$subscriptions,
		update: F2(
			function (msg, model) {
				return A2(
					$author$project$Main$afterUpdate,
					model,
					A2($author$project$Main$update, msg, model));
			}),
		view: A2($elm$core$Basics$composeR, $author$project$Main$view, $rtfeldman$elm_css$Html$Styled$toUnstyled)
	});
_Platform_export({'Main':{'init':$author$project$Main$main($elm$json$Json$Decode$string)(0)}});}(this));